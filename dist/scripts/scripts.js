"use strict";

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
function Noop() {
gettext("Manual"), gettext("Rolling"), gettext("Recreate"), gettext("deployment config"), gettext("Deployment Config"), gettext("horizontal pod autoscaler"), gettext("Config Map"), gettext("pull"), gettext("push"), gettext("Route"), gettext("openshift.io/imagestreams"), gettext("CPU (Request)"), gettext("Memory (Request)"), gettext("CPU (Limit)"), gettext("Memory (Limit)"), gettext("Storage (Request)"), gettext("user"), gettext("manual change"), gettext("complete"), gettext("running"), gettext("The minimum amount of"), gettext("the container is guaranteed."), gettext("The maximum amount of"), gettext("the container is allowed to use when running."), gettext("User"), gettext("user"), gettext("Group"), gettext("group"), gettext("Service Account"), gettext("service account"), gettext("System User"), gettext("system user"), gettext("System Group"), gettext("system group"), gettext("Read-Write-Once"), gettext("Read-Write-Many"), gettext("Read-Only-Many"), gettext("Bound"), gettext("Cancelled"), 
gettext("Active"), gettext("Complete"), gettext("Running"), gettext("Failed"), gettext("Terminating"), gettext("Completed"), gettext("Cores"), gettext("Custom"), gettext("Abort"), gettext("Retry"), gettext("Ignore"), gettext("Pre"), gettext("Mid"), gettext("Client state could not be verified"), gettext("Search Catalog"), gettext("Clear Search Input"), gettext("Databases"), gettext("Middleware"), gettext("CI/CD"), gettext("No results found for Keyword:"), gettext("View the result for Keyword:"), gettext("View all"), gettext("results for Keyword:"), gettext("Filter by Keyword"), gettext("Publisher"), gettext("No results match."), gettext("The active filters are hiding all catalog items."), gettext("This filter will only apply to items which contain publisher information. Items that do not have a publisher will not be shown in the filter results."), gettext("Clear Filters"), gettext("No items."), gettext("No catalog items have been loaded."), gettext("Items"), gettext("To push an image to this image stream"), 
gettext("To pull this image"), gettext("Last Updated");
}

function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v, h, y, b, S, C, w, P, j, k, I, R, T, E, N, D) {
var A = this, B = t("isIE")();
e.projectName = a.project;
var L = a.isHomePage;
A.catalogLandingPageEnabled = !d.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var x = t("annotation"), V = t("canI"), O = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), F = t("imageObjectRef"), M = t("isJenkinsPipelineStrategy"), q = t("isNewerResource"), z = t("label"), H = t("podTemplate"), G = i.getPreferredVersion("buildconfigs"), K = i.getPreferredVersion("builds"), W = i.getPreferredVersion("appliedclusterresourcequotas"), J = i.getPreferredVersion("deploymentconfigs"), Q = i.getPreferredVersion("deployments"), Y = i.getPreferredVersion("horizontalpodautoscalers"), Z = i.getPreferredVersion("imagestreams"), X = i.getPreferredVersion("limitranges"), ee = i.getPreferredVersion("pods"), te = i.getPreferredVersion("replicasets"), ne = i.getPreferredVersion("replicationcontrollers"), re = i.getPreferredVersion("resourcequotas"), ae = i.getPreferredVersion("routes"), oe = i.getPreferredVersion("servicebindings"), ie = i.getPreferredVersion("clusterserviceclasses"), se = i.getPreferredVersion("serviceinstances"), ce = i.getPreferredVersion("clusterserviceplans"), le = i.getPreferredVersion("services"), ue = i.getPreferredVersion("statefulsets"), de = i.getPreferredVersion("templates");
A.buildConfigsInstantiateVersion = i.getPreferredVersion("buildconfigs/instantiate");
var me, pe, ge = {}, fe = {}, ve = {}, he = A.state = {
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, g, f, h, v, y, b, C, S, w, k, j) {
var P = this, R = t("isIE")() || t("isEdge")();
e.projectName = n.project;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var E, N, D = t("annotation"), I = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), A = t("imageObjectRef"), L = t("isJenkinsPipelineStrategy"), U = t("isNewerResource"), O = t("label"), x = t("podTemplate"), F = {}, M = {}, V = {}, q = R.state = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var E, N, D = t("annotation"), I = t("buildConfigForBuild"), A = t("deploymentIsInProgress"), B = t("imageObjectRef"), L = t("isJenkinsPipelineStrategy"), U = t("isNewerResource"), O = t("label"), x = t("podTemplate"), F = {}, M = {}, V = {}, q = R.state = {
>>>>>>> Improve YAML editor validation and feedback
=======
var E, D, N = t("annotation"), I = t("buildConfigForBuild"), A = t("deploymentIsInProgress"), B = t("imageObjectRef"), L = t("isJenkinsPipelineStrategy"), U = t("isNewerResource"), O = t("label"), x = t("podTemplate"), F = {}, M = {}, V = {}, q = R.state = {
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
var E, D, N = t("annotation"), I = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), A = t("imageObjectRef"), L = t("isJenkinsPipelineStrategy"), U = t("isNewerResource"), O = t("label"), x = t("podTemplate"), F = {}, M = {}, V = {}, q = R.state = {
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
var E, T, I = t("annotation"), D = t("buildConfigForBuild"), N = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = R.state = {
>>>>>>> Add bindings list to resource pages
=======
var E, T, I = t("annotation"), D = t("buildConfigForBuild"), N = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
var E, T, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
var E, T, N = t("annotation"), I = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> Add notification-drawer to show curated list of events to user
=======
var E, T, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
var E, T, N = t("annotation"), I = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Show provision status of service instances on the overview page.
=======
var E, T, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> Adjust events to show in the drawer
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, h, v, y, b, C, S, w, k, j) {
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, p, m, f, g, h, v, y, b, C, S, w, k, j) {
>>>>>>> Updates for Service Instance & Bindings
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, h, v, y, b, C, S, w, k, j) {
>>>>>>> Support EnvFrom in the Env Editors
var P = this, R = t("isIE")() || t("isEdge")();
<<<<<<< HEAD
e.projectName = n.project;
<<<<<<< HEAD
var E, T, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Patternfly vertical navigation and project bar
=======
var T, E, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Add the ability to add a secret to an application
=======
e.projectName = n.project, P.catalogLandingPageEnabled = !c.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var T, I, E = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Enable new landing page experience by default
=======
var I, T, E = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Updates for Service Instance & Bindings
=======
var I, T, N = t("annotation"), E = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Quota Notifications
=======
var I, E, T = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Support EnvFrom in the Env Editors
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, h, v, y, b, C, S, w, k, j, P) {
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, j, P) {
<<<<<<< HEAD
>>>>>>> Add SVG icons
var R = this, I = t("isIE")() || t("isEdge")();
=======
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, P, j) {
>>>>>>> Service instance details configuration and edit
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, j, P) {
>>>>>>> Add product icons for service catalog
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, P, j) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, j, P) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, P, j) {
>>>>>>> Update template service broker flag name
var R = this, I = t("isIE")();
>>>>>>> Allow unlimited websockets on Edge - also fix leaking websockets on monitoring page
e.projectName = n.project, R.catalogLandingPageEnabled = !l.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = r.getPreferredVersion("servicebindings"), V = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Adopt service catalog API changes
=======
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Adopt more service catalog API changes
=======
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, W = {}, K = R.state = {
>>>>>>> Replacing empty tables with empty state message
=======
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var E, N, T = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Update template service broker flag name
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, P, j, R, I) {
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, P, k, j, R, I) {
>>>>>>> Fix for adding non-builder templates to a project
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, P, j, R, I) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, P, j, R, I) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, P, j, R, I) {
>>>>>>> Adding label filter to ste secrets page
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, k, j, R, I) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, k, j, I, R) {
>>>>>>> Add search catalog in project context
var E = this, T = t("isIE")();
e.projectName = a.project, E.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), x = t("isNewerResource"), V = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Wait for service classes and plans to load
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update routes controller to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update secret, secrets controllers to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, k, j, I, R) {
var E = this, T = t("isIE")();
e.projectName = r.project, E.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update createFromImage controller to use getPreferredVersion
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, j, k, I, R, E) {
var T = this, N = t("isIE")();
e.projectName = a.project, T.catalogLandingPageEnabled = !d.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var D, A, B = t("annotation"), L = t("canI"), U = t("buildConfigForBuild"), O = t("deploymentIsInProgress"), V = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), x = t("isNewerResource"), M = t("label"), q = t("podTemplate"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = {}, Q = {}, J = {}, Y = T.state = {
>>>>>>> Add Browse Catalog to Project context view.
=======
var D = t("annotation"), A = t("canI"), B = t("buildConfigForBuild"), L = t("deploymentIsInProgress"), U = t("imageObjectRef"), O = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = i.getPreferredVersion("deployments"), q = i.getPreferredVersion("horizontalpodautoscalers"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = i.getPreferredVersion("statefulsets"), Q = i.getPreferredVersion("replicasets");
=======
var D = t("annotation"), A = t("canI"), B = t("buildConfigForBuild"), L = t("deploymentIsInProgress"), U = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = i.getPreferredVersion("deployments"), q = i.getPreferredVersion("horizontalpodautoscalers"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = i.getPreferredVersion("statefulsets"), Q = i.getPreferredVersion("replicasets");
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
var D = t("annotation"), A = t("canI"), B = t("buildConfigForBuild"), L = t("deploymentIsInProgress"), V = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = i.getPreferredVersion("deployments"), q = i.getPreferredVersion("horizontalpodautoscalers"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = i.getPreferredVersion("statefulsets"), Q = i.getPreferredVersion("replicasets");
>>>>>>> Update membership to use new rbac endpoints
T.buildConfigsInstantiateVersion = i.getPreferredVersion("buildconfigs/instantiate");
var J, Y, Z = {}, X = {}, ee = {}, te = T.state = {
>>>>>>> Additional getPreferredVersion updates to overview
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, j, k, I, R, T) {
var E = this, N = t("isIE")();
e.projectName = a.project, E.catalogLandingPageEnabled = !d.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var D = t("annotation"), A = t("canI"), B = t("buildConfigForBuild"), L = t("deploymentIsInProgress"), V = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = i.getPreferredVersion("deployments"), q = i.getPreferredVersion("horizontalpodautoscalers"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = i.getPreferredVersion("statefulsets"), Q = i.getPreferredVersion("replicasets");
E.buildConfigsInstantiateVersion = i.getPreferredVersion("buildconfigs/instantiate");
var J, Y, Z = {}, X = {}, ee = {}, te = E.state = {
>>>>>>> Configurable inactivity timeout in console
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, j, k, I, R, T, E) {
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, j, k, I, R, E, T) {
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, j, k, I, R, T, E) {
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, j, k, I, R, E, T) {
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
var N = this, D = t("isIE")();
e.projectName = a.project;
var A = a.isHomePage;
N.catalogLandingPageEnabled = !d.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var B = t("annotation"), L = t("canI"), V = t("buildConfigForBuild"), O = t("deploymentIsInProgress"), U = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), x = t("isNewerResource"), M = t("label"), q = t("podTemplate"), z = i.getPreferredVersion("deployments"), H = i.getPreferredVersion("horizontalpodautoscalers"), G = i.getPreferredVersion("servicebindings"), K = i.getPreferredVersion("clusterserviceclasses"), W = i.getPreferredVersion("serviceinstances"), Q = i.getPreferredVersion("clusterserviceplans"), J = i.getPreferredVersion("statefulsets"), Y = i.getPreferredVersion("replicasets");
N.buildConfigsInstantiateVersion = i.getPreferredVersion("buildconfigs/instantiate");
var Z, X, ee = {}, te = {}, ne = {}, re = N.state = {
>>>>>>> Set Home Page Preference
alerts: {},
builds: {},
clusterQuotas: {},
imageStreamImageRefByDockerReference: {},
imagesByDockerReference: {},
limitRanges: {},
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
limitWatches: B,
=======
limitWatches: P,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
limitWatches: R,
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
limitWatches: I,
>>>>>>> Adopt service catalog API changes
=======
limitWatches: T,
>>>>>>> Wait for service classes and plans to load
=======
limitWatches: N,
>>>>>>> Add Browse Catalog to Project context view.
=======
limitWatches: D,
>>>>>>> Set Home Page Preference
notificationsByObjectUID: {},
pipelinesByDeploymentConfig: {},
podsByOwnerUID: {},
quotas: {},
recentPipelinesByDeploymentConfig: {},
routesByService: {},
servicesByObjectUID: {},
serviceInstances: {},
<<<<<<< HEAD
<<<<<<< HEAD
serviceClasses: {},
servicePlans: {},
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
serviceClasses: {},
servicePlans: {},
>>>>>>> Adopt service catalog API changes
bindingsByInstanceRef: {},
bindingsByApplicationUID: {},
applicationsByBinding: {},
showMetrics: !1
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
A.state.breakpoint = v.getBreakpoint();
var ye = _.throttle(function() {
var t = v.getBreakpoint();
A.state.breakpoint !== t && e.$evalAsync(function() {
A.state.breakpoint = t;
});
}, 50);
$(window).on("resize.overview", ye), A.showGetStarted = !1, A.showLoading = !0, A.filterByOptions = [ {
id: "name",
label: D.getString(N("Name"))
}, {
id: "label",
label: D.getString(N("Label"))
} ], A.filterBy = b.getLabelSelector().isEmpty() ? "name" : "label", A.viewByOptions = [ {
id: "app",
label: D.getString(N("Application"))
}, {
id: "resource",
label: D.getString(N("Resource Type"))
}, {
id: "pipeline",
label: D.getString(N("Pipeline"))
} ];
var be = function(e) {
return _.get(e, "metadata.name");
}, Se = function(e) {
return _.get(e, "metadata.uid");
}, Ce = function() {
return _.size(A.deploymentConfigs) + _.size(A.vanillaReplicationControllers) + _.size(A.deployments) + _.size(A.vanillaReplicaSets) + _.size(A.statefulSets) + _.size(A.monopods) + _.size(A.state.serviceInstances);
}, _e = function() {
return _.size(A.filteredDeploymentConfigs) + _.size(A.filteredReplicationControllers) + _.size(A.filteredDeployments) + _.size(A.filteredReplicaSets) + _.size(A.filteredStatefulSets) + _.size(A.filteredMonopods) + _.size(A.filteredServiceInstances);
}, we = function() {
A.size = Ce(), A.filteredSize = _e();
var e = 0 === A.size, t = A.deploymentConfigs && A.replicationControllers && A.deployments && A.replicaSets && A.statefulSets && A.pods && A.state.serviceInstances;
he.expandAll = t && 1 === A.size, A.showGetStarted = t && e, A.showLoading = !t && e, A.everythingFiltered = !e && !A.filteredSize, A.hidePipelineOtherResources = "pipeline" === A.viewBy && (A.filterActive || _.isEmpty(A.pipelineBuildConfigs));
}, Pe = function(e) {
return s.groupByApp(e, "metadata.name");
}, je = function(e) {
var t = null;
return _.each(e, function(e) {
t = t ? T.getPreferredDisplayRoute(t, e) : e;
}), t;
}, ke = _.debounce(function() {
e.$evalAsync(function() {
if (A.bestRouteByApp = {}, A.routes) {
var e = [ A.filteredDeploymentConfigsByApp, A.filteredReplicationControllersByApp, A.filteredDeploymentsByApp, A.filteredReplicaSetsByApp, A.filteredStatefulSetsByApp, A.filteredMonopodsByApp ];
_.each(A.apps, function(t) {
var n = {};
_.each(e, function(e) {
var r = _.get(e, t, []);
_.each(r, function(e) {
var t = Se(e), r = _.get(he, [ "servicesByObjectUID", t ], []);
_.each(r, function(e) {
var t = _.get(he, [ "routesByService", e.metadata.name ], []);
_.assign(n, _.keyBy(t, "metadata.name"));
});
});
}), A.bestRouteByApp[t] = je(n);
=======
R.state.breakpoint = d.getBreakpoint();
var z = _.throttle(function() {
var t = d.getBreakpoint();
=======
R.state.breakpoint = m.getBreakpoint();
var q = _.throttle(function() {
var t = m.getBreakpoint();
>>>>>>> Add bindings list to resource pages
R.state.breakpoint !== t && e.$evalAsync(function() {
R.state.breakpoint = t;
=======
P.state.breakpoint = m.getBreakpoint();
=======
P.state.breakpoint = p.getBreakpoint();
>>>>>>> Updates for Service Instance & Bindings
=======
P.state.breakpoint = m.getBreakpoint();
>>>>>>> Support EnvFrom in the Env Editors
var q = _.throttle(function() {
var t = m.getBreakpoint();
P.state.breakpoint !== t && e.$evalAsync(function() {
P.state.breakpoint = t;
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
R.state.breakpoint = p.getBreakpoint();
var Q = _.throttle(function() {
var t = p.getBreakpoint();
R.state.breakpoint !== t && e.$evalAsync(function() {
R.state.breakpoint = t;
>>>>>>> Adopt service catalog API changes
=======
E.state.breakpoint = f.getBreakpoint();
var Y = _.throttle(function() {
var t = f.getBreakpoint();
E.state.breakpoint !== t && e.$evalAsync(function() {
E.state.breakpoint = t;
>>>>>>> Wait for service classes and plans to load
=======
T.state.breakpoint = g.getBreakpoint();
var ne = _.throttle(function() {
var t = g.getBreakpoint();
T.state.breakpoint !== t && e.$evalAsync(function() {
T.state.breakpoint = t;
>>>>>>> Add Browse Catalog to Project context view.
=======
E.state.breakpoint = g.getBreakpoint();
var ne = _.throttle(function() {
var t = g.getBreakpoint();
E.state.breakpoint !== t && e.$evalAsync(function() {
E.state.breakpoint = t;
>>>>>>> Configurable inactivity timeout in console
=======
N.state.breakpoint = v.getBreakpoint();
var ae = _.throttle(function() {
var t = v.getBreakpoint();
N.state.breakpoint !== t && e.$evalAsync(function() {
N.state.breakpoint = t;
>>>>>>> Set Home Page Preference
});
}, 50);
$(window).on("resize.overview", ae), N.showGetStarted = !1, N.showLoading = !0, N.filterByOptions = [ {
id: "name",
label: "Name"
}, {
id: "label",
label: "Label"
} ], N.filterBy = b.getLabelSelector().isEmpty() ? "name" : "label", N.viewByOptions = [ {
id: "app",
label: "Application"
}, {
id: "resource",
label: "Resource Type"
}, {
id: "pipeline",
label: "Pipeline"
} ];
var oe = function(e) {
return _.get(e, "metadata.name");
}, ie = function(e) {
return _.get(e, "metadata.uid");
}, se = function() {
return _.size(N.deploymentConfigs) + _.size(N.vanillaReplicationControllers) + _.size(N.deployments) + _.size(N.vanillaReplicaSets) + _.size(N.statefulSets) + _.size(N.monopods) + _.size(N.state.serviceInstances);
}, ce = function() {
return _.size(N.filteredDeploymentConfigs) + _.size(N.filteredReplicationControllers) + _.size(N.filteredDeployments) + _.size(N.filteredReplicaSets) + _.size(N.filteredStatefulSets) + _.size(N.filteredMonopods) + _.size(N.filteredServiceInstances);
}, le = function() {
N.size = se(), N.filteredSize = ce();
var e = 0 === N.size, t = N.deploymentConfigs && N.replicationControllers && N.deployments && N.replicaSets && N.statefulSets && N.pods && N.state.serviceInstances;
re.expandAll = t && 1 === N.size, N.showGetStarted = t && e, N.showLoading = !t && e, N.everythingFiltered = !e && !N.filteredSize, N.hidePipelineOtherResources = "pipeline" === N.viewBy && (N.filterActive || _.isEmpty(N.pipelineBuildConfigs));
}, ue = function(e) {
return s.groupByApp(e, "metadata.name");
}, de = function(e) {
var t = null;
return _.each(e, function(e) {
t = t ? E.getPreferredDisplayRoute(t, e) : e;
}), t;
}, me = _.debounce(function() {
e.$evalAsync(function() {
if (N.bestRouteByApp = {}, N.routes) {
var e = [ N.filteredDeploymentConfigsByApp, N.filteredReplicationControllersByApp, N.filteredDeploymentsByApp, N.filteredReplicaSetsByApp, N.filteredStatefulSetsByApp, N.filteredMonopodsByApp ];
_.each(N.apps, function(t) {
var n = {};
_.each(e, function(e) {
var r = _.get(e, t, []);
_.each(r, function(e) {
var t = ie(e), r = _.get(re, [ "servicesByObjectUID", t ], []);
_.each(r, function(e) {
var t = _.get(re, [ "routesByService", e.metadata.name ], []);
_.assign(n, _.keyBy(t, "metadata.name"));
});
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), R.bestRouteByApp[t] = Y(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), R.bestRouteByApp[t] = J(n);
>>>>>>> Add bindings list to resource pages
=======
}), P.bestRouteByApp[t] = J(n);
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
}), R.bestRouteByApp[t] = ne(n);
>>>>>>> Adopt service catalog API changes
=======
}), E.bestRouteByApp[t] = re(n);
>>>>>>> Wait for service classes and plans to load
=======
}), E.bestRouteByApp[t] = ae(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}), T.bestRouteByApp[t] = oe(n);
>>>>>>> Add Browse Catalog to Project context view.
=======
}), T.bestRouteByApp[t] = le(n);
>>>>>>> Additional getPreferredVersion updates to overview
=======
}), E.bestRouteByApp[t] = le(n);
>>>>>>> Configurable inactivity timeout in console
=======
}), N.bestRouteByApp[t] = de(n);
>>>>>>> Set Home Page Preference
});
}
});
}, 300, {
maxWait: 1500
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), Ie = function() {
A.filteredDeploymentConfigsByApp = Pe(A.filteredDeploymentConfigs), A.filteredReplicationControllersByApp = Pe(A.filteredReplicationControllers), A.filteredDeploymentsByApp = Pe(A.filteredDeployments), A.filteredReplicaSetsByApp = Pe(A.filteredReplicaSets), A.filteredStatefulSetsByApp = Pe(A.filteredStatefulSets), A.filteredMonopodsByApp = Pe(A.filteredMonopods), A.apps = _.union(_.keys(A.filteredDeploymentConfigsByApp), _.keys(A.filteredReplicationControllersByApp), _.keys(A.filteredDeploymentsByApp), _.keys(A.filteredReplicaSetsByApp), _.keys(A.filteredStatefulSetsByApp), _.keys(A.filteredMonopodsByApp)), s.sortAppNames(A.apps), ke();
}, Re = function() {
var e = _.filter(A.deploymentConfigs, function(e) {
var t = be(e);
return _.isEmpty(he.pipelinesByDeploymentConfig[t]);
});
A.deploymentConfigsNoPipeline = _.sortBy(e, "metadata.name"), A.pipelineViewHasOtherResources = !(_.isEmpty(A.deploymentConfigsNoPipeline) && _.isEmpty(A.vanillaReplicationControllers) && _.isEmpty(A.deployments) && _.isEmpty(A.vanillaReplicaSets) && _.isEmpty(A.statefulSets) && _.isEmpty(A.monopods));
}, Te = function() {
A.disableFilter = "pipeline" === A.viewBy && _.isEmpty(A.pipelineBuildConfigs);
}, Ee = function(e) {
return b.getLabelSelector().select(e);
}, Ne = [ "metadata.name", "spec.externalClusterServiceClassName" ], De = function(e) {
return y.filterForKeywords(e, Ne, he.filterKeywords);
}, Ae = function(e) {
switch (A.filterBy) {
case "label":
return Ee(e);

case "name":
return De(e);
}
return e;
}, $e = function() {
switch (A.filterBy) {
case "label":
return !b.getLabelSelector().isEmpty();

case "name":
return !_.isEmpty(he.filterKeywords);
}
}, Be = function() {
A.filteredDeploymentConfigs = Ae(A.deploymentConfigs), A.filteredReplicationControllers = Ae(A.vanillaReplicationControllers), A.filteredDeployments = Ae(A.deployments), A.filteredReplicaSets = Ae(A.vanillaReplicaSets), A.filteredStatefulSets = Ae(A.statefulSets), A.filteredMonopods = Ae(A.monopods), A.filteredPipelineBuildConfigs = Ae(A.pipelineBuildConfigs), A.filteredServiceInstances = Ae(he.orderedServiceInstances), A.filterActive = $e(), Ie(), we();
}, Le = a.project + "/overview/view-by";
A.viewBy = localStorage.getItem(Le) || "app", e.$watch(function() {
return A.viewBy;
}, function(e) {
localStorage.setItem(Le, e), Te(), Ne = "app" === A.viewBy ? [ "metadata.name", "metadata.labels.app" ] : [ "metadata.name" ], Be(), "pipeline" === A.viewBy ? b.setLabelSuggestions(fe) : b.setLabelSuggestions(ge);
}), d.DISABLE_OVERVIEW_METRICS || (C.isAvailable(!0).then(function(e) {
he.showMetrics = e;
}), e.$on("metrics-connection-failed", function(e, t) {
o.isAlertPermanentlyHidden("metrics-connection-failed") || he.alerts["metrics-connection-failed"] || (he.alerts["metrics-connection-failed"] = {
type: "warning",
message: D.getString(N("An error occurred getting metrics.")),
links: [ {
href: t.url,
label: D.getString(N("Open Metrics URL")),
target: "_blank"
}, {
href: "",
label: D.getString(N("Don't Show Me Again")),
onClick: function() {
return o.permanentlyHideAlert("metrics-connection-failed"), !0;
=======
}), X = function() {
R.filteredDeploymentConfigsByApp = J(R.filteredDeploymentConfigs), R.filteredReplicationControllersByApp = J(R.filteredReplicationControllers), R.filteredDeploymentsByApp = J(R.filteredDeployments), R.filteredReplicaSetsByApp = J(R.filteredReplicaSets), R.filteredStatefulSetsByApp = J(R.filteredStatefulSets), R.filteredMonopodsByApp = J(R.filteredMonopods), R.apps = _.union(_.keys(R.filteredDeploymentConfigsByApp), _.keys(R.filteredReplicationControllersByApp), _.keys(R.filteredDeploymentsByApp), _.keys(R.filteredReplicaSetsByApp), _.keys(R.filteredStatefulSetsByApp), _.keys(R.filteredMonopodsByApp)), o.sortAppNames(R.apps), Z();
}, ee = function() {
=======
}), Z = function() {
P.filteredDeploymentConfigsByApp = Q(P.filteredDeploymentConfigs), P.filteredReplicationControllersByApp = Q(P.filteredReplicationControllers), P.filteredDeploymentsByApp = Q(P.filteredDeployments), P.filteredReplicaSetsByApp = Q(P.filteredReplicaSets), P.filteredStatefulSetsByApp = Q(P.filteredStatefulSets), P.filteredMonopodsByApp = Q(P.filteredMonopods), P.apps = _.union(_.keys(P.filteredDeploymentConfigsByApp), _.keys(P.filteredReplicationControllersByApp), _.keys(P.filteredDeploymentsByApp), _.keys(P.filteredReplicaSetsByApp), _.keys(P.filteredStatefulSetsByApp), _.keys(P.filteredMonopodsByApp)), o.sortAppNames(P.apps), Y();
}, X = function() {
<<<<<<< HEAD
>>>>>>> Add bindings list to resource pages
var e = _.filter(R.deploymentConfigs, function(e) {
=======
var e = _.filter(P.deploymentConfigs, function(e) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
var t = z(e);
return _.isEmpty(V.pipelinesByDeploymentConfig[t]);
=======
}), re = function() {
R.filteredDeploymentConfigsByApp = te(R.filteredDeploymentConfigs), R.filteredReplicationControllersByApp = te(R.filteredReplicationControllers), R.filteredDeploymentsByApp = te(R.filteredDeployments), R.filteredReplicaSetsByApp = te(R.filteredReplicaSets), R.filteredStatefulSetsByApp = te(R.filteredStatefulSets), R.filteredMonopodsByApp = te(R.filteredMonopods), R.apps = _.union(_.keys(R.filteredDeploymentConfigsByApp), _.keys(R.filteredReplicationControllersByApp), _.keys(R.filteredDeploymentsByApp), _.keys(R.filteredReplicaSetsByApp), _.keys(R.filteredStatefulSetsByApp), _.keys(R.filteredMonopodsByApp)), o.sortAppNames(R.apps), ae();
}, oe = function() {
var e = _.filter(R.deploymentConfigs, function(e) {
var t = J(e);
<<<<<<< HEAD
<<<<<<< HEAD
return _.isEmpty(W.pipelinesByDeploymentConfig[t]);
>>>>>>> Adopt service catalog API changes
=======
return _.isEmpty(K.pipelinesByDeploymentConfig[t]);
>>>>>>> Replacing empty tables with empty state message
=======
return _.isEmpty(W.pipelinesByDeploymentConfig[t]);
>>>>>>> Handle displaying parameters when secrets are not available.
});
R.deploymentConfigsNoPipeline = _.sortBy(e, "metadata.name"), R.pipelineViewHasOtherResources = !(_.isEmpty(R.deploymentConfigsNoPipeline) && _.isEmpty(R.vanillaReplicationControllers) && _.isEmpty(R.deployments) && _.isEmpty(R.vanillaReplicaSets) && _.isEmpty(R.statefulSets) && _.isEmpty(R.monopods));
}, ie = function() {
R.disableFilter = "pipeline" === R.viewBy && _.isEmpty(R.pipelineBuildConfigs);
}, se = function(e) {
return v.getLabelSelector().select(e);
}, ce = [ "metadata.name", "spec.externalClusterServiceClassName" ], le = function(e) {
return g.filterForKeywords(e, ce, W.filterKeywords);
}, ue = function(e) {
switch (R.filterBy) {
=======
}), ie = function() {
E.filteredDeploymentConfigsByApp = re(E.filteredDeploymentConfigs), E.filteredReplicationControllersByApp = re(E.filteredReplicationControllers), E.filteredDeploymentsByApp = re(E.filteredDeployments), E.filteredReplicaSetsByApp = re(E.filteredReplicaSets), E.filteredStatefulSetsByApp = re(E.filteredStatefulSets), E.filteredMonopodsByApp = re(E.filteredMonopods), E.apps = _.union(_.keys(E.filteredDeploymentConfigsByApp), _.keys(E.filteredReplicationControllersByApp), _.keys(E.filteredDeploymentsByApp), _.keys(E.filteredReplicaSetsByApp), _.keys(E.filteredStatefulSetsByApp), _.keys(E.filteredMonopodsByApp)), i.sortAppNames(E.apps), oe();
}, se = function() {
var e = _.filter(E.deploymentConfigs, function(e) {
var t = Z(e);
return _.isEmpty(J.pipelinesByDeploymentConfig[t]);
});
E.deploymentConfigsNoPipeline = _.sortBy(e, "metadata.name"), E.pipelineViewHasOtherResources = !(_.isEmpty(E.deploymentConfigsNoPipeline) && _.isEmpty(E.vanillaReplicationControllers) && _.isEmpty(E.deployments) && _.isEmpty(E.vanillaReplicaSets) && _.isEmpty(E.statefulSets) && _.isEmpty(E.monopods));
}, ce = function() {
E.disableFilter = "pipeline" === E.viewBy && _.isEmpty(E.pipelineBuildConfigs);
}, le = function(e) {
return h.getLabelSelector().select(e);
}, ue = [ "metadata.name", "spec.clusterServiceClassExternalName" ], de = function(e) {
return v.filterForKeywords(e, ue, J.filterKeywords);
}, me = function(e) {
switch (E.filterBy) {
>>>>>>> Wait for service classes and plans to load
=======
}), se = function() {
T.filteredDeploymentConfigsByApp = ae(T.filteredDeploymentConfigs), T.filteredReplicationControllersByApp = ae(T.filteredReplicationControllers), T.filteredDeploymentsByApp = ae(T.filteredDeployments), T.filteredReplicaSetsByApp = ae(T.filteredReplicaSets), T.filteredStatefulSetsByApp = ae(T.filteredStatefulSets), T.filteredMonopodsByApp = ae(T.filteredMonopods), T.apps = _.union(_.keys(T.filteredDeploymentConfigsByApp), _.keys(T.filteredReplicationControllersByApp), _.keys(T.filteredDeploymentsByApp), _.keys(T.filteredReplicaSetsByApp), _.keys(T.filteredStatefulSetsByApp), _.keys(T.filteredMonopodsByApp)), s.sortAppNames(T.apps), ie();
}, ce = function() {
=======
}), de = function() {
E.filteredDeploymentConfigsByApp = ce(E.filteredDeploymentConfigs), E.filteredReplicationControllersByApp = ce(E.filteredReplicationControllers), E.filteredDeploymentsByApp = ce(E.filteredDeployments), E.filteredReplicaSetsByApp = ce(E.filteredReplicaSets), E.filteredStatefulSetsByApp = ce(E.filteredStatefulSets), E.filteredMonopodsByApp = ce(E.filteredMonopods), E.apps = _.union(_.keys(E.filteredDeploymentConfigsByApp), _.keys(E.filteredReplicationControllersByApp), _.keys(E.filteredDeploymentsByApp), _.keys(E.filteredReplicaSetsByApp), _.keys(E.filteredStatefulSetsByApp), _.keys(E.filteredMonopodsByApp)), s.sortAppNames(E.apps), ue();
}, me = function() {
<<<<<<< HEAD
>>>>>>> Additional getPreferredVersion updates to overview
var e = _.filter(T.deploymentConfigs, function(e) {
=======
var e = _.filter(E.deploymentConfigs, function(e) {
>>>>>>> Configurable inactivity timeout in console
var t = re(e);
return _.isEmpty(te.pipelinesByDeploymentConfig[t]);
});
E.deploymentConfigsNoPipeline = _.sortBy(e, "metadata.name"), E.pipelineViewHasOtherResources = !(_.isEmpty(E.deploymentConfigsNoPipeline) && _.isEmpty(E.vanillaReplicationControllers) && _.isEmpty(E.deployments) && _.isEmpty(E.vanillaReplicaSets) && _.isEmpty(E.statefulSets) && _.isEmpty(E.monopods));
}, pe = function() {
E.disableFilter = "pipeline" === E.viewBy && _.isEmpty(E.pipelineBuildConfigs);
}, fe = function(e) {
return y.getLabelSelector().select(e);
}, ge = [ "metadata.name", "spec.clusterServiceClassExternalName" ], ve = function(e) {
return h.filterForKeywords(e, ge, te.filterKeywords);
}, he = function(e) {
<<<<<<< HEAD
switch (T.filterBy) {
>>>>>>> Add Browse Catalog to Project context view.
=======
switch (E.filterBy) {
>>>>>>> Configurable inactivity timeout in console
=======
}), pe = function() {
N.filteredDeploymentConfigsByApp = ue(N.filteredDeploymentConfigs), N.filteredReplicationControllersByApp = ue(N.filteredReplicationControllers), N.filteredDeploymentsByApp = ue(N.filteredDeployments), N.filteredReplicaSetsByApp = ue(N.filteredReplicaSets), N.filteredStatefulSetsByApp = ue(N.filteredStatefulSets), N.filteredMonopodsByApp = ue(N.filteredMonopods), N.apps = _.union(_.keys(N.filteredDeploymentConfigsByApp), _.keys(N.filteredReplicationControllersByApp), _.keys(N.filteredDeploymentsByApp), _.keys(N.filteredReplicaSetsByApp), _.keys(N.filteredStatefulSetsByApp), _.keys(N.filteredMonopodsByApp)), s.sortAppNames(N.apps), me();
}, fe = function() {
var e = _.filter(N.deploymentConfigs, function(e) {
var t = oe(e);
return _.isEmpty(re.pipelinesByDeploymentConfig[t]);
});
N.deploymentConfigsNoPipeline = _.sortBy(e, "metadata.name"), N.pipelineViewHasOtherResources = !(_.isEmpty(N.deploymentConfigsNoPipeline) && _.isEmpty(N.vanillaReplicationControllers) && _.isEmpty(N.deployments) && _.isEmpty(N.vanillaReplicaSets) && _.isEmpty(N.statefulSets) && _.isEmpty(N.monopods));
}, ge = function() {
N.disableFilter = "pipeline" === N.viewBy && _.isEmpty(N.pipelineBuildConfigs);
}, ve = function(e) {
return b.getLabelSelector().select(e);
}, he = [ "metadata.name", "spec.clusterServiceClassExternalName" ], ye = function(e) {
return y.filterForKeywords(e, he, re.filterKeywords);
}, be = function(e) {
switch (N.filterBy) {
>>>>>>> Set Home Page Preference
case "label":
return ve(e);

case "name":
return ye(e);
}
return e;
}, Se = function() {
switch (N.filterBy) {
case "label":
return !b.getLabelSelector().isEmpty();

case "name":
return !_.isEmpty(re.filterKeywords);
}
}, Ce = function() {
N.filteredDeploymentConfigs = be(N.deploymentConfigs), N.filteredReplicationControllers = be(N.vanillaReplicationControllers), N.filteredDeployments = be(N.deployments), N.filteredReplicaSets = be(N.vanillaReplicaSets), N.filteredStatefulSets = be(N.statefulSets), N.filteredMonopods = be(N.monopods), N.filteredPipelineBuildConfigs = be(N.pipelineBuildConfigs), N.filteredServiceInstances = be(re.orderedServiceInstances), N.filterActive = Se(), pe(), le();
}, _e = a.project + "/overview/view-by";
N.viewBy = localStorage.getItem(_e) || "app", e.$watch(function() {
return N.viewBy;
}, function(e) {
localStorage.setItem(_e, e), ge(), he = "app" === N.viewBy ? [ "metadata.name", "metadata.labels.app" ] : [ "metadata.name" ], Ce(), "pipeline" === N.viewBy ? b.setLabelSuggestions(te) : b.setLabelSuggestions(ee);
}), d.DISABLE_OVERVIEW_METRICS || (C.isAvailable(!0).then(function(e) {
re.showMetrics = e;
}), e.$on("metrics-connection-failed", function(e, t) {
o.isAlertPermanentlyHidden("metrics-connection-failed") || re.alerts["metrics-connection-failed"] || (re.alerts["metrics-connection-failed"] = {
type: "warning",
message: "An error occurred getting metrics.",
links: [ {
href: t.url,
label: "Open Metrics URL",
target: "_blank"
}, {
href: "",
label: "Don't Show Me Again",
onClick: function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return a.permanentlyHideAlert("metrics-connection-failed"), !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return r.permanentlyHideAlert("metrics-connection-failed"), !0;
>>>>>>> Wait for service classes and plans to load
=======
return a.permanentlyHideAlert("metrics-connection-failed"), !0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
return o.permanentlyHideAlert("metrics-connection-failed"), !0;
>>>>>>> Add Browse Catalog to Project context view.
}
} ]
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var xe = function(e) {
return e && "Pod" === e.kind;
}, Ve = function(e) {
var t = Se(e);
return t ? xe(e) ? [ e ] : _.get(A, [ "state", "podsByOwnerUID", t ], []) : [];
}, Oe = function(e, t) {
var n = Se(e);
he.notificationsByObjectUID[n] = t || {};
}, Ue = function(e) {
var t = Se(e);
return t ? _.get(he, [ "notificationsByObjectUID", t ], {}) : {};
}, Fe = function(e) {
if (Se(e)) {
var t = Ve(e), n = R.getPodAlerts(t, a.project);
Oe(e, n);
}
}, Me = function(e) {
_.each(e, Fe);
}, qe = function(e) {
var t = be(e);
return t ? ve[t] : null;
}, ze = function(e) {
var t = be(e);
return t ? _.get(A, [ "replicationControllersByDeploymentConfig", t ]) : [];
};
A.getPreviousReplicationController = function(e) {
var t = ze(e);
return _.size(t) < 2 ? null : t[1];
};
var He = function(e) {
var t = {}, n = qe(e);
_.assign(t, R.getDeploymentStatusAlerts(e, n), R.getPausedDeploymentAlerts(e));
var r = ze(e);
_.each(r, function(e) {
var n = Ue(e);
_.assign(t, n);
}), Oe(e, t);
}, Ge = function() {
_.each(A.deploymentConfigs, He);
}, Ke = function(e) {
var t = Se(e);
return t ? _.get(A, [ "replicaSetsByDeploymentUID", t ]) : {};
}, We = function(e) {
var t = R.getPausedDeploymentAlerts(e), n = Ke(e);
_.each(n, function(e) {
var n = Ue(e);
_.assign(t, n);
}), Oe(e, t);
}, Je = function() {
_.each(A.deployments, We);
}, Qe = function() {
Me(A.replicationControllers), Me(A.replicaSets), Me(A.statefulSets), Me(A.monopods);
}, Ye = _.debounce(function() {
e.$evalAsync(function() {
Qe(), Ge(), Je();
});
}, 500), Ze = function(e) {
_.isEmpty(e) || (b.addLabelSuggestionsFromResources(e, ge), "pipeline" !== A.viewBy && b.setLabelSuggestions(ge));
}, Xe = function(e) {
_.isEmpty(e) || (b.addLabelSuggestionsFromResources(e, fe), "pipeline" === A.viewBy && b.setLabelSuggestions(fe));
}, et = function(e) {
return "Succeeded" !== e.status.phase && "Failed" !== e.status.phase && (!z(e, "openshift.io/deployer-pod-for.name") && (!x(e, "openshift.io/build.name") && "slave" !== z(e, "jenkins")));
}, tt = function() {
he.podsByOwnerUID = j.groupByOwnerUID(A.pods), A.monopods = _.filter(he.podsByOwnerUID[""], et);
}, nt = function(e) {
return !!_.get(e, "status.replicas") || (!x(e, "deploymentConfig") || U(e));
}, rt = function(e) {
return x(e, "deploymentConfig");
}, at = function() {
if (A.deploymentConfigs && A.replicationControllers) {
var e = [];
A.replicationControllersByDeploymentConfig = {}, A.currentByDeploymentConfig = {}, ve = {};
var t = {}, n = {};
_.each(A.replicationControllers, function(r) {
var a = rt(r) || "";
(!a || !A.deploymentConfigs[a] && _.get(r, "status.replicas")) && e.push(r);
var o = ve[a];
o && !q(r, o) || (ve[a] = r);
var i;
"Complete" === x(r, "deploymentStatus") && ((i = t[a]) && !q(r, i) || (t[a] = r)), nt(r) && _.set(n, [ a, r.metadata.name ], r);
}), _.each(t, function(e, t) {
_.set(n, [ t, e.metadata.name ], e);
}), _.each(n, function(e, t) {
var n = p.sortByDeploymentVersion(e, !0);
A.replicationControllersByDeploymentConfig[t] = n, A.currentByDeploymentConfig[t] = _.head(n);
}), A.vanillaReplicationControllers = _.sortBy(e, "metadata.name"), Ge();
}
}, ot = function(e, t) {
if (_.get(e, "status.replicas")) return !0;
var n = p.getRevision(e);
return !n || !!t && p.getRevision(t) === n;
}, it = function() {
A.replicaSets && me && (A.replicaSetsByDeploymentUID = P.groupByControllerUID(A.replicaSets), A.currentByDeploymentUID = {}, _.each(A.replicaSetsByDeploymentUID, function(e, t) {
if (t) {
var n = me[t], r = _.filter(e, function(e) {
return ot(e, n);
}), a = p.sortByRevision(r);
A.replicaSetsByDeploymentUID[t] = a, A.currentByDeploymentUID[t] = _.head(a);
}
}), A.vanillaReplicaSets = _.sortBy(A.replicaSetsByDeploymentUID[""], "metadata.name"), Je());
}, st = {}, ct = function(e) {
e && he.allServices && _.each(e, function(e) {
var t = [], n = Se(e), r = H(e);
_.each(st, function(e, n) {
e.matches(r) && t.push(he.allServices[n]);
}), he.servicesByObjectUID[n] = _.sortBy(t, "metadata.name");
});
}, lt = function() {
if (he.allServices) {
st = _.mapValues(he.allServices, function(e) {
return new LabelSelector(e.spec.selector);
});
var e = [ A.deploymentConfigs, A.vanillaReplicationControllers, A.deployments, A.vanillaReplicaSets, A.statefulSets, A.monopods ];
_.each(e, ct), ke();
}
}, ut = function() {
var e = T.groupByService(A.routes, !0);
he.routesByService = _.mapValues(e, T.sortRoutesByScore), ke();
}, dt = function() {
he.hpaByResource = f.groupHPAs(A.horizontalPodAutoscalers);
}, mt = function(e) {
var t = O(e), n = A.buildConfigs[t];
if (n) {
A.recentPipelinesByBuildConfig[t] = A.recentPipelinesByBuildConfig[t] || [], A.recentPipelinesByBuildConfig[t].push(e);
var r = l.usesDeploymentConfigs(n);
_.each(r, function(t) {
he.recentPipelinesByDeploymentConfig[t] = he.recentPipelinesByDeploymentConfig[t] || [], he.recentPipelinesByDeploymentConfig[t].push(e);
}), Re();
}
}, pt = {}, gt = function() {
pt = l.groupBuildConfigsByOutputImage(A.buildConfigs);
}, ft = function(e) {
var t = Se(e);
if (t) return _.get(he, [ "buildConfigsByObjectUID", t ], []);
}, vt = function(e) {
var t = [], n = ft(e);
_.each(n, function(e) {
var n = _.get(he, [ "recentBuildsByBuildConfig", e.metadata.name ], []);
t = t.concat(n);
});
var r = be(e);
_.set(he, [ "recentBuildsByDeploymentConfig", r ], t);
}, ht = function(e, t) {
var n = Se(t);
n && _.set(he, [ "buildConfigsByObjectUID", n ], e);
}, yt = function() {
var e = [];
A.deploymentConfigsByPipeline = {}, he.pipelinesByDeploymentConfig = {}, _.each(A.buildConfigs, function(t) {
if (M(t)) {
e.push(t);
var n = l.usesDeploymentConfigs(t), r = be(t);
_.set(A, [ "deploymentConfigsByPipeline", r ], n), _.each(n, function(e) {
he.pipelinesByDeploymentConfig[e] = he.pipelinesByDeploymentConfig[e] || [], he.pipelinesByDeploymentConfig[e].push(t);
});
}
}), A.pipelineBuildConfigs = _.sortBy(e, "metadata.name"), Re(), Xe(A.pipelineBuildConfigs), Te();
}, bt = function() {
he.buildConfigsByObjectUID = {}, _.each(A.deploymentConfigs, function(e) {
var t = [], n = _.get(e, "spec.triggers");
_.each(n, function(n) {
var r = _.get(n, "imageChangeParams.from");
if (r) {
var a = F(r, e.metadata.namespace), o = pt[a];
_.isEmpty(o) || (t = t.concat(o));
}
}), t = _.sortBy(t, "metadata.name"), ht(t, e), vt(e);
});
}, St = function() {
yt(), bt();
}, Ct = function() {
_.each(A.deploymentConfigs, vt);
}, _t = function() {
if (he.builds && A.buildConfigs) {
A.recentPipelinesByBuildConfig = {}, he.recentBuildsByBuildConfig = {}, he.recentPipelinesByDeploymentConfig = {};
var e = {};
_.each(l.interestingBuilds(he.builds), function(t) {
var n = O(t);
M(t) ? mt(t) : (e[n] = e[n] || [], e[n].push(t));
}), A.recentPipelinesByBuildConfig = _.mapValues(A.recentPipelinesByBuildConfig, function(e) {
return l.sortBuilds(e, !0);
}), he.recentPipelinesByDeploymentConfig = _.mapValues(he.recentPipelinesByDeploymentConfig, function(e) {
return l.sortBuilds(e, !0);
}), he.recentBuildsByBuildConfig = _.mapValues(e, function(e) {
return l.sortBuilds(e, !0);
}), Ct();
}
}, wt = function() {
R.setQuotaNotifications(he.quotas, he.clusterQuotas, a.project);
};
A.clearFilter = function() {
b.clear(), A.filterText = "";
}, e.$watch(function() {
return A.filterText;
}, _.debounce(function(t, n) {
t !== n && (he.filterKeywords = y.generateKeywords(t), e.$evalAsync(Be));
}, 50, {
maxWait: 250
})), e.$watch(function() {
return A.filterBy;
}, function(e, t) {
e !== t && (A.clearFilter(), Be());
}), e.browseCatalog = function() {
w.toProjectCatalog(e.projectName);
}, b.onActiveFiltersChanged(function() {
e.$evalAsync(Be);
}), A.startBuild = l.startBuild;
var Pt = function() {
if (he.bindingsByApplicationUID = {}, he.applicationsByBinding = {}, he.deleteableBindingsByApplicationUID = {}, !_.isEmpty(he.bindings)) {
var e = [ A.deployments, A.deploymentConfigs, A.vanillaReplicationControllers, A.vanillaReplicaSets, A.statefulSets ];
if (!_.some(e, function(e) {
return !e;
})) {
var t = c.getPodPresetSelectorsForBindings(he.bindings);
_.each(e, function(e) {
_.each(e, function(e) {
var n = Se(e), r = new LabelSelector(_.get(e, "spec.selector"));
he.bindingsByApplicationUID[n] = [], he.deleteableBindingsByApplicationUID[n] = [], _.each(t, function(t, a) {
t.covers(r) && (he.bindingsByApplicationUID[n].push(he.bindings[a]), _.get(he.bindings[a], "metadata.deletionTimestamp") || he.deleteableBindingsByApplicationUID[n].push(he.bindings[a]), he.applicationsByBinding[a] = he.applicationsByBinding[a] || [], he.applicationsByBinding[a].push(e));
});
});
}), A.bindingsByInstanceRef = _.reduce(A.bindingsByInstanceRef, function(e, t, n) {
return e[n] = _.sortBy(t, function(e) {
var t = _.get(he.applicationsByBinding, [ e.metadata.name ]);
return _.get(_.head(t), [ "metadata", "name" ]) || e.metadata.name;
=======
var le = function(e) {
=======
var ce = function(e) {
>>>>>>> Add bindings list to resource pages
=======
var fe = function(e) {
>>>>>>> Adopt service catalog API changes
=======
var ve = function(e) {
>>>>>>> Wait for service classes and plans to load
=======
var he = function(e) {
>>>>>>> Add Browse Catalog to Project context view.
=======
var Ce = function(e) {
>>>>>>> Additional getPreferredVersion updates to overview
=======
var we = function(e) {
>>>>>>> Set Home Page Preference
return e && "Pod" === e.kind;
}, Pe = function(e) {
var t = ie(e);
return t ? we(e) ? [ e ] : _.get(N, [ "state", "podsByOwnerUID", t ], []) : [];
}, je = function(e, t) {
var n = ie(e);
re.notificationsByObjectUID[n] = t || {};
}, ke = function(e) {
var t = ie(e);
return t ? _.get(re, [ "notificationsByObjectUID", t ], {}) : {};
}, Ie = function(e) {
if (ie(e)) {
var t = Pe(e), n = R.getPodAlerts(t, a.project);
je(e, n);
}
}, Re = function(e) {
_.each(e, Ie);
}, Ee = function(e) {
var t = oe(e);
return t ? ne[t] : null;
}, Te = function(e) {
var t = oe(e);
return t ? _.get(N, [ "replicationControllersByDeploymentConfig", t ]) : [];
};
N.getPreviousReplicationController = function(e) {
var t = Te(e);
return _.size(t) < 2 ? null : t[1];
};
var Ne = function(e) {
var t = {}, n = Ee(e);
_.assign(t, R.getDeploymentStatusAlerts(e, n), R.getPausedDeploymentAlerts(e));
var r = Te(e);
_.each(r, function(e) {
var n = ke(e);
_.assign(t, n);
}), je(e, t);
}, De = function() {
_.each(N.deploymentConfigs, Ne);
}, Ae = function(e) {
var t = ie(e);
return t ? _.get(N, [ "replicaSetsByDeploymentUID", t ]) : {};
}, $e = function(e) {
var t = R.getPausedDeploymentAlerts(e), n = Ae(e);
_.each(n, function(e) {
var n = ke(e);
_.assign(t, n);
}), je(e, t);
}, Be = function() {
_.each(N.deployments, $e);
}, Le = function() {
Re(N.replicationControllers), Re(N.replicaSets), Re(N.statefulSets), Re(N.monopods);
}, Ve = _.debounce(function() {
e.$evalAsync(function() {
Le(), De(), Be();
});
}, 500), Oe = function(e) {
_.isEmpty(e) || (b.addLabelSuggestionsFromResources(e, ee), "pipeline" !== N.viewBy && b.setLabelSuggestions(ee));
}, Ue = function(e) {
_.isEmpty(e) || (b.addLabelSuggestionsFromResources(e, te), "pipeline" === N.viewBy && b.setLabelSuggestions(te));
}, Fe = function(e) {
return "Succeeded" !== e.status.phase && "Failed" !== e.status.phase && (!M(e, "openshift.io/deployer-pod-for.name") && (!B(e, "openshift.io/build.name") && "slave" !== M(e, "jenkins")));
}, xe = function() {
re.podsByOwnerUID = j.groupByOwnerUID(N.pods), N.monopods = _.filter(re.podsByOwnerUID[""], Fe);
}, Me = function(e) {
return !!_.get(e, "status.replicas") || (!B(e, "deploymentConfig") || O(e));
}, qe = function(e) {
return B(e, "deploymentConfig");
}, ze = function() {
if (N.deploymentConfigs && N.replicationControllers) {
var e = [];
N.replicationControllersByDeploymentConfig = {}, N.currentByDeploymentConfig = {}, ne = {};
var t = {}, n = {};
_.each(N.replicationControllers, function(r) {
var a = qe(r) || "";
(!a || !N.deploymentConfigs[a] && _.get(r, "status.replicas")) && e.push(r);
var o = ne[a];
o && !x(r, o) || (ne[a] = r);
var i;
"Complete" === B(r, "deploymentStatus") && ((i = t[a]) && !x(r, i) || (t[a] = r)), Me(r) && _.set(n, [ a, r.metadata.name ], r);
}), _.each(t, function(e, t) {
_.set(n, [ t, e.metadata.name ], e);
}), _.each(n, function(e, t) {
var n = p.sortByDeploymentVersion(e, !0);
N.replicationControllersByDeploymentConfig[t] = n, N.currentByDeploymentConfig[t] = _.head(n);
}), N.vanillaReplicationControllers = _.sortBy(e, "metadata.name"), De();
}
}, He = function(e, t) {
if (_.get(e, "status.replicas")) return !0;
var n = p.getRevision(e);
return !n || !!t && p.getRevision(t) === n;
}, Ge = function() {
N.replicaSets && Z && (N.replicaSetsByDeploymentUID = P.groupByControllerUID(N.replicaSets), N.currentByDeploymentUID = {}, _.each(N.replicaSetsByDeploymentUID, function(e, t) {
if (t) {
var n = Z[t], r = _.filter(e, function(e) {
return He(e, n);
}), a = p.sortByRevision(r);
N.replicaSetsByDeploymentUID[t] = a, N.currentByDeploymentUID[t] = _.head(a);
}
}), N.vanillaReplicaSets = _.sortBy(N.replicaSetsByDeploymentUID[""], "metadata.name"), Be());
}, Ke = {}, We = function(e) {
e && re.allServices && _.each(e, function(e) {
var t = [], n = ie(e), r = q(e);
_.each(Ke, function(e, n) {
e.matches(r) && t.push(re.allServices[n]);
}), re.servicesByObjectUID[n] = _.sortBy(t, "metadata.name");
});
}, Qe = function() {
if (re.allServices) {
Ke = _.mapValues(re.allServices, function(e) {
return new LabelSelector(e.spec.selector);
});
var e = [ N.deploymentConfigs, N.vanillaReplicationControllers, N.deployments, N.vanillaReplicaSets, N.statefulSets, N.monopods ];
_.each(e, We), me();
}
}, Je = function() {
var e = E.groupByService(N.routes, !0);
re.routesByService = _.mapValues(e, E.sortRoutesByScore), me();
}, Ye = function() {
re.hpaByResource = g.groupHPAs(N.horizontalPodAutoscalers);
}, Ze = function(e) {
var t = V(e), n = N.buildConfigs[t];
if (n) {
N.recentPipelinesByBuildConfig[t] = N.recentPipelinesByBuildConfig[t] || [], N.recentPipelinesByBuildConfig[t].push(e);
var r = l.usesDeploymentConfigs(n);
_.each(r, function(t) {
re.recentPipelinesByDeploymentConfig[t] = re.recentPipelinesByDeploymentConfig[t] || [], re.recentPipelinesByDeploymentConfig[t].push(e);
}), fe();
}
}, Xe = {}, et = function() {
Xe = l.groupBuildConfigsByOutputImage(N.buildConfigs);
}, tt = function(e) {
var t = ie(e);
if (t) return _.get(re, [ "buildConfigsByObjectUID", t ], []);
}, nt = function(e) {
var t = [], n = tt(e);
_.each(n, function(e) {
var n = _.get(re, [ "recentBuildsByBuildConfig", e.metadata.name ], []);
t = t.concat(n);
});
var r = oe(e);
_.set(re, [ "recentBuildsByDeploymentConfig", r ], t);
}, rt = function(e, t) {
var n = ie(t);
n && _.set(re, [ "buildConfigsByObjectUID", n ], e);
}, at = function() {
var e = [];
N.deploymentConfigsByPipeline = {}, re.pipelinesByDeploymentConfig = {}, _.each(N.buildConfigs, function(t) {
if (F(t)) {
e.push(t);
var n = l.usesDeploymentConfigs(t), r = oe(t);
_.set(N, [ "deploymentConfigsByPipeline", r ], n), _.each(n, function(e) {
re.pipelinesByDeploymentConfig[e] = re.pipelinesByDeploymentConfig[e] || [], re.pipelinesByDeploymentConfig[e].push(t);
});
}
}), N.pipelineBuildConfigs = _.sortBy(e, "metadata.name"), fe(), Ue(N.pipelineBuildConfigs), ge();
}, ot = function() {
re.buildConfigsByObjectUID = {}, _.each(N.deploymentConfigs, function(e) {
var t = [], n = _.get(e, "spec.triggers");
_.each(n, function(n) {
var r = _.get(n, "imageChangeParams.from");
if (r) {
var a = U(r, e.metadata.namespace), o = Xe[a];
_.isEmpty(o) || (t = t.concat(o));
}
}), t = _.sortBy(t, "metadata.name"), rt(t, e), nt(e);
});
}, it = function() {
at(), ot();
}, st = function() {
_.each(N.deploymentConfigs, nt);
}, ct = function() {
if (re.builds && N.buildConfigs) {
N.recentPipelinesByBuildConfig = {}, re.recentBuildsByBuildConfig = {}, re.recentPipelinesByDeploymentConfig = {};
var e = {};
_.each(l.interestingBuilds(re.builds), function(t) {
var n = V(t);
F(t) ? Ze(t) : (e[n] = e[n] || [], e[n].push(t));
}), N.recentPipelinesByBuildConfig = _.mapValues(N.recentPipelinesByBuildConfig, function(e) {
return l.sortBuilds(e, !0);
}), re.recentPipelinesByDeploymentConfig = _.mapValues(re.recentPipelinesByDeploymentConfig, function(e) {
return l.sortBuilds(e, !0);
}), re.recentBuildsByBuildConfig = _.mapValues(e, function(e) {
return l.sortBuilds(e, !0);
}), st();
}
}, lt = function() {
R.setQuotaNotifications(re.quotas, re.clusterQuotas, a.project);
};
N.clearFilter = function() {
b.clear(), N.filterText = "";
}, e.$watch(function() {
return N.filterText;
}, _.debounce(function(t, n) {
t !== n && (re.filterKeywords = y.generateKeywords(t), e.$evalAsync(Ce));
}, 50, {
maxWait: 250
})), e.$watch(function() {
return N.filterBy;
}, function(e, t) {
e !== t && (N.clearFilter(), Ce());
}), e.browseCatalog = function() {
w.toProjectCatalog(e.projectName);
}, b.onActiveFiltersChanged(function() {
e.$evalAsync(Ce);
}), N.startBuild = l.startBuild;
var ut = function() {
if (re.bindingsByApplicationUID = {}, re.applicationsByBinding = {}, re.deleteableBindingsByApplicationUID = {}, !_.isEmpty(re.bindings)) {
var e = [ N.deployments, N.deploymentConfigs, N.vanillaReplicationControllers, N.vanillaReplicaSets, N.statefulSets ];
if (!_.some(e, function(e) {
return !e;
})) {
var t = c.getPodPresetSelectorsForBindings(re.bindings);
_.each(e, function(e) {
_.each(e, function(e) {
var n = ie(e), r = new LabelSelector(_.get(e, "spec.selector"));
re.bindingsByApplicationUID[n] = [], re.deleteableBindingsByApplicationUID[n] = [], _.each(t, function(t, a) {
t.covers(r) && (re.bindingsByApplicationUID[n].push(re.bindings[a]), _.get(re.bindings[a], "metadata.deletionTimestamp") || re.deleteableBindingsByApplicationUID[n].push(re.bindings[a]), re.applicationsByBinding[a] = re.applicationsByBinding[a] || [], re.applicationsByBinding[a].push(e));
});
});
}), N.bindingsByInstanceRef = _.reduce(N.bindingsByInstanceRef, function(e, t, n) {
return e[n] = _.sortBy(t, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var t = _.get(q.applicationsByBinding, [ e.metadata.name ]);
<<<<<<< HEAD
return _.get(_.first(t), [ "metadata", "name" ]) || e.metadata.name;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
var t = _.get(V.applicationsByBinding, [ e.metadata.name ]);
>>>>>>> Add bindings list to resource pages
=======
var t = _.get(W.applicationsByBinding, [ e.metadata.name ]);
>>>>>>> Adopt service catalog API changes
=======
var t = _.get(K.applicationsByBinding, [ e.metadata.name ]);
>>>>>>> Replacing empty tables with empty state message
=======
var t = _.get(W.applicationsByBinding, [ e.metadata.name ]);
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var t = _.get(J.applicationsByBinding, [ e.metadata.name ]);
>>>>>>> Wait for service classes and plans to load
=======
var t = _.get(Y.applicationsByBinding, [ e.metadata.name ]);
>>>>>>> Add Browse Catalog to Project context view.
=======
var t = _.get(te.applicationsByBinding, [ e.metadata.name ]);
>>>>>>> Additional getPreferredVersion updates to overview
=======
var t = _.get(re.applicationsByBinding, [ e.metadata.name ]);
>>>>>>> Set Home Page Preference
return _.get(_.head(t), [ "metadata", "name" ]) || e.metadata.name;
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
}), e;
}, {});
}
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, jt = function() {
he.bindableServiceInstances = c.filterBindableServiceInstances(he.serviceInstances, he.serviceClasses, he.servicePlans), he.orderedServiceInstances = c.sortServiceInstances(he.serviceInstances, he.serviceClasses);
}, kt = [], It = L ? {
skipErrorNotFound: !0
} : {};
k.get(a.project, It).then(_.spread(function(t, r) {
he.project = e.project = t, he.context = r;
var a = function() {
A.pods && h.fetchReferencedImageStreamImages(A.pods, he.imagesByDockerReference, he.imageStreamImageRefByDockerReference, r);
};
kt.push(m.watch(ee, r, function(e) {
A.pods = e.by("metadata.name"), tt(), a(), Ye(), ct(A.monopods), Me(A.monopods), Ze(A.monopods), Be(), S.log("pods (subscribe)", A.pods);
})), kt.push(m.watch(ne, r, function(e) {
A.replicationControllers = e.by("metadata.name"), at(), ct(A.vanillaReplicationControllers), ct(A.monopods), Me(A.vanillaReplicationControllers), Ze(A.vanillaReplicationControllers), Pt(), Be(), S.log("replicationcontrollers (subscribe)", A.replicationControllers);
})), kt.push(m.watch(J, r, function(e) {
A.deploymentConfigs = e.by("metadata.name"), at(), ct(A.deploymentConfigs), ct(A.vanillaReplicationControllers), Ze(A.deploymentConfigs), Je(), St(), Ct(), Pt(), Be(), S.log("deploymentconfigs (subscribe)", A.deploymentConfigs);
})), kt.push(m.watch(te, r, function(e) {
A.replicaSets = e.by("metadata.name"), it(), ct(A.vanillaReplicaSets), ct(A.monopods), Me(A.vanillaReplicaSets), Ze(A.vanillaReplicaSets), Pt(), Be(), S.log("replicasets (subscribe)", A.replicaSets);
})), kt.push(m.watch(Q, r, function(e) {
me = e.by("metadata.uid"), A.deployments = _.sortBy(me, "metadata.name"), it(), ct(A.deployments), ct(A.vanillaReplicaSets), Ze(A.deployments), Pt(), Be(), S.log("deployments (subscribe)", A.deploymentsByUID);
})), kt.push(m.watch(K, r, function(e) {
he.builds = e.by("metadata.name"), _t(), S.log("builds (subscribe)", he.builds);
})), kt.push(m.watch(ue, r, function(e) {
A.statefulSets = e.by("metadata.name"), ct(A.statefulSets), ct(A.monopods), Me(A.statefulSets), Ze(A.statefulSets), Pt(), Be(), S.log("statefulsets (subscribe)", A.statefulSets);
}, {
poll: B,
pollInterval: 6e4
})), kt.push(m.watch(le, r, function(e) {
he.allServices = e.by("metadata.name"), lt(), S.log("services (subscribe)", he.allServices);
}, {
poll: B,
pollInterval: 6e4
})), kt.push(m.watch(ae, r, function(e) {
A.routes = e.by("metadata.name"), ut(), S.log("routes (subscribe)", A.routes);
=======
}, _a = function() {
return Q.serviceInstances || Q.serviceClasses ? (Q.bindableServiceInstances = _.filter(Q.serviceInstances, function(a) {
return w.isServiceBindable(a, Q.serviceClasses);
}), void (Q.orderedServiceInstances = _.sortByAll(Q.serviceInstances, function(a) {
return _.get(Q.serviceClasses, [ a.spec.serviceClassName, "externalMetadata", "displayName" ]) || a.spec.serviceClassName;
}, function(a) {
return _.get(a, "metadata.name", "");
}))) :void (Q.bindableServiceInstances = null);
}, ab = [];
v.get(c.project).then(_.spread(function(c, d) {
Q.project = a.project = c, Q.context = d;
var e = function() {
z.pods && m.fetchReferencedImageStreamImages(z.pods, Q.imagesByDockerReference, Q.imageStreamImageRefByDockerReference, d);
};
ab.push(i.watch("pods", d, function(a) {
z.pods = a.by("metadata.name"), Ca(), e(), ya(), Ja(z.monopods), pa(z.monopods), za(z.monopods), ia(), p.log("pods (subscribe)", z.pods);
})), ab.push(i.watch("replicationcontrollers", d, function(a) {
z.replicationControllers = a.by("metadata.name"), Fa(), Ja(z.vanillaReplicationControllers), Ja(z.monopods), pa(z.vanillaReplicationControllers), za(z.vanillaReplicationControllers), $a(), ia(), p.log("replicationcontrollers (subscribe)", z.replicationControllers);
})), ab.push(i.watch("deploymentconfigs", d, function(a) {
z.deploymentConfigs = a.by("metadata.name"), Fa(), Ja(z.deploymentConfigs), Ja(z.vanillaReplicationControllers), za(z.deploymentConfigs), wa(), Va(), Wa(), $a(), ia(), p.log("deploymentconfigs (subscribe)", z.deploymentConfigs);
})), ab.push(i.watch({
group:"extensions",
resource:"replicasets"
}, d, function(a) {
z.replicaSets = a.by("metadata.name"), Ha(), Ja(z.vanillaReplicaSets), Ja(z.monopods), pa(z.vanillaReplicaSets), za(z.vanillaReplicaSets), $a(), ia(), p.log("replicasets (subscribe)", z.replicaSets);
})), ab.push(i.watch({
group:"apps",
resource:"deployments"
}, d, function(a) {
D = a.by("metadata.uid"), z.deployments = _.sortBy(D, "metadata.name"), Ha(), Ja(z.deployments), Ja(z.vanillaReplicaSets), za(z.deployments), $a(), ia(), p.log("deployments (subscribe)", z.deploymentsByUID);
})), ab.push(i.watch("builds", d, function(a) {
Q.builds = a.by("metadata.name"), Xa(), p.log("builds (subscribe)", Q.builds);
})), ab.push(i.watch({
group:"apps",
resource:"statefulsets"
}, d, function(a) {
z.statefulSets = a.by("metadata.name"), Ja(z.statefulSets), Ja(z.monopods), pa(z.statefulSets), za(z.statefulSets), $a(), ia(), p.log("statefulsets (subscribe)", z.statefulSets);
}, {
poll:A,
pollInterval:B
})), ab.push(i.watch("services", d, function(a) {
Q.allServices = a.by("metadata.name"), Ka(), p.log("services (subscribe)", Q.allServices);
}, {
poll:A,
pollInterval:B
})), ab.push(i.watch("routes", d, function(a) {
z.routes = a.by("metadata.name"), La(), p.log("routes (subscribe)", z.routes);
}, {
poll:A,
pollInterval:B
})), ab.push(i.watch("buildConfigs", d, function(a) {
z.buildConfigs = a.by("metadata.name"), Pa(), Va(), Xa(), ia(), p.log("buildconfigs (subscribe)", z.buildConfigs);
}, {
poll:A,
pollInterval:B
})), ab.push(i.watch({
group:"autoscaling",
resource:"horizontalpodautoscalers",
version:"v1"
}, d, function(a) {
z.horizontalPodAutoscalers = a.by("metadata.name"), Ma(), p.log("autoscalers (subscribe)", z.horizontalPodAutoscalers);
>>>>>>> Use `apps` API group for deployments
}, {
poll: B,
pollInterval: 6e4
})), kt.push(m.watch(G, r, function(e) {
A.buildConfigs = e.by("metadata.name"), gt(), St(), _t(), Be(), S.log("buildconfigs (subscribe)", A.buildConfigs);
}, {
poll: B,
pollInterval: 6e4
})), kt.push(m.watch(Y, r, function(e) {
A.horizontalPodAutoscalers = e.by("metadata.name"), dt(), S.log("autoscalers (subscribe)", A.horizontalPodAutoscalers);
}, {
poll: B,
pollInterval: 6e4
})), kt.push(m.watch(Z, r, function(e) {
pe = e.by("metadata.name"), h.buildDockerRefMapForImageStreams(pe, he.imageStreamImageRefByDockerReference), a(), S.log("imagestreams (subscribe)", pe);
}, {
poll: B,
pollInterval: 6e4
})), kt.push(m.watch(re, r, function(e) {
he.quotas = e.by("metadata.name"), wt();
}, {
poll: !0,
pollInterval: 6e4
})), kt.push(m.watch(W, r, function(e) {
he.clusterQuotas = e.by("metadata.name"), wt();
=======
}, Ze = function() {
q.serviceInstances || q.serviceClasses ? (q.bindableServiceInstances = _.filter(q.serviceInstances, function(e) {
return w.isServiceBindable(e, q.serviceClasses);
}), q.orderedServiceInstances = _.sortBy(q.serviceInstances, function(e) {
return _.get(q.serviceClasses, [ e.spec.serviceClassName, "externalMetadata", "displayName" ]) || e.spec.serviceClassName;
}, function(e) {
return _.get(e, "metadata.name", "");
})) : q.bindableServiceInstances = null;
}, Xe = [];
=======
}, Je = function() {
V.bindableServiceInstances = w.filterBindableServiceInstances(V.serviceInstances, V.serviceClasses), V.orderedServiceInstances = w.sortServiceInstances(V.serviceInstances, V.serviceClasses);
}, Ye = [];
>>>>>>> Add bindings list to resource pages
S.get(n.project).then(_.spread(function(n, a) {
V.project = e.project = n, V.context = a;
var r = function() {
P.pods && p.fetchReferencedImageStreamImages(P.pods, V.imagesByDockerReference, V.imageStreamImageRefByDockerReference, a);
};
Ye.push(l.watch("pods", a, function(e) {
P.pods = e.by("metadata.name"), Pe(), r(), _e(), Ae(P.monopods), pe(P.monopods), we(P.monopods), ie(), h.log("pods (subscribe)", P.pods);
})), Ye.push(l.watch("replicationcontrollers", a, function(e) {
P.replicationControllers = e.by("metadata.name"), Ee(), Ae(P.vanillaReplicationControllers), Ae(P.monopods), pe(P.vanillaReplicationControllers), we(P.vanillaReplicationControllers), Qe(), ie(), h.log("replicationcontrollers (subscribe)", P.replicationControllers);
})), Ye.push(l.watch("deploymentconfigs", a, function(e) {
P.deploymentConfigs = e.by("metadata.name"), Ee(), Ae(P.deploymentConfigs), Ae(P.vanillaReplicationControllers), we(P.deploymentConfigs), Ce(), He(), Ge(), Qe(), ie(), h.log("deploymentconfigs (subscribe)", P.deploymentConfigs);
})), Ye.push(l.watch({
=======
}, nt = function() {
W.bindableServiceInstances = i.filterBindableServiceInstances(W.serviceInstances, W.serviceClasses, W.servicePlans), W.orderedServiceInstances = i.sortServiceInstances(W.serviceInstances, W.serviceClasses);
}, at = [];
w.get(n.project).then(_.spread(function(t, n) {
W.project = e.project = t, W.context = n;
var a = function() {
R.pods && f.fetchReferencedImageStreamImages(R.pods, W.imagesByDockerReference, W.imageStreamImageRefByDockerReference, n);
};
at.push(u.watch("pods", n, function(e) {
R.pods = e.by("metadata.name"), De(), a(), Ie(), Fe(R.monopods), be(R.monopods), Ee(R.monopods), me(), h.log("pods (subscribe)", R.pods);
})), at.push(u.watch("replicationcontrollers", n, function(e) {
R.replicationControllers = e.by("metadata.name"), Be(), Fe(R.vanillaReplicationControllers), Fe(R.monopods), be(R.vanillaReplicationControllers), Ee(R.vanillaReplicationControllers), tt(), me(), h.log("replicationcontrollers (subscribe)", R.replicationControllers);
})), at.push(u.watch("deploymentconfigs", n, function(e) {
R.deploymentConfigs = e.by("metadata.name"), Be(), Fe(R.deploymentConfigs), Fe(R.vanillaReplicationControllers), Ee(R.deploymentConfigs), je(), Ye(), Ze(), tt(), me(), h.log("deploymentconfigs (subscribe)", R.deploymentConfigs);
})), at.push(u.watch({
>>>>>>> Adopt service catalog API changes
=======
}, rt = function() {
=======
}, at = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
J.bindableServiceInstances = s.filterBindableServiceInstances(J.serviceInstances, J.serviceClasses, J.servicePlans), J.orderedServiceInstances = s.sortServiceInstances(J.serviceInstances, J.serviceClasses);
}, ot = [];
P.get(r.project).then(_.spread(function(t, r) {
J.project = e.project = t, J.context = r;
var a = function() {
E.pods && g.fetchReferencedImageStreamImages(E.pods, J.imagesByDockerReference, J.imageStreamImageRefByDockerReference, r);
};
ot.push(d.watch("pods", r, function(e) {
E.pods = e.by("metadata.name"), $e(), a(), Te(), xe(E.monopods), Ce(E.monopods), Ne(E.monopods), fe(), y.log("pods (subscribe)", E.pods);
})), ot.push(d.watch("replicationcontrollers", r, function(e) {
E.replicationControllers = e.by("metadata.name"), Ue(), xe(E.vanillaReplicationControllers), xe(E.monopods), Ce(E.vanillaReplicationControllers), Ne(E.vanillaReplicationControllers), rt(), fe(), y.log("replicationcontrollers (subscribe)", E.replicationControllers);
})), ot.push(d.watch("deploymentconfigs", r, function(e) {
E.deploymentConfigs = e.by("metadata.name"), Ue(), xe(E.deploymentConfigs), xe(E.vanillaReplicationControllers), Ne(E.deploymentConfigs), Re(), Xe(), et(), rt(), fe(), y.log("deploymentconfigs (subscribe)", E.deploymentConfigs);
})), ot.push(d.watch({
>>>>>>> Wait for service classes and plans to load
=======
}, ot = function() {
Y.bindableServiceInstances = c.filterBindableServiceInstances(Y.serviceInstances, Y.serviceClasses, Y.servicePlans), Y.orderedServiceInstances = c.sortServiceInstances(Y.serviceInstances, Y.serviceClasses);
}, it = [];
=======
}, lt = function() {
te.bindableServiceInstances = c.filterBindableServiceInstances(te.serviceInstances, te.serviceClasses, te.servicePlans), te.orderedServiceInstances = c.sortServiceInstances(te.serviceInstances, te.serviceClasses);
}, ut = [];
>>>>>>> Additional getPreferredVersion updates to overview
j.get(a.project).then(_.spread(function(t, r) {
te.project = e.project = t, te.context = r;
var a = function() {
<<<<<<< HEAD
<<<<<<< HEAD
T.pods && v.fetchReferencedImageStreamImages(T.pods, Y.imagesByDockerReference, Y.imageStreamImageRefByDockerReference, r);
};
it.push(m.watch("pods", r, function(e) {
T.pods = e.by("metadata.name"), Be(), a(), Ne(), Me(T.monopods), _e(T.monopods), De(T.monopods), ge(), b.log("pods (subscribe)", T.pods);
})), it.push(m.watch("replicationcontrollers", r, function(e) {
T.replicationControllers = e.by("metadata.name"), Oe(), Me(T.vanillaReplicationControllers), Me(T.monopods), _e(T.vanillaReplicationControllers), De(T.vanillaReplicationControllers), at(), ge(), b.log("replicationcontrollers (subscribe)", T.replicationControllers);
})), it.push(m.watch("deploymentconfigs", r, function(e) {
T.deploymentConfigs = e.by("metadata.name"), Oe(), Me(T.deploymentConfigs), Me(T.vanillaReplicationControllers), De(T.deploymentConfigs), Ee(), et(), tt(), at(), ge(), b.log("deploymentconfigs (subscribe)", T.deploymentConfigs);
})), it.push(m.watch({
>>>>>>> Add Browse Catalog to Project context view.
group: "extensions",
resource: "replicasets"
}, r, function(e) {
T.replicaSets = e.by("metadata.name"), Fe(), Me(T.vanillaReplicaSets), Me(T.monopods), _e(T.vanillaReplicaSets), De(T.vanillaReplicaSets), at(), ge(), b.log("replicasets (subscribe)", T.replicaSets);
})), it.push(m.watch({
group: "apps",
resource: "deployments"
}, r, function(e) {
D = e.by("metadata.uid"), T.deployments = _.sortBy(D, "metadata.name"), Fe(), Me(T.deployments), Me(T.vanillaReplicaSets), De(T.deployments), at(), ge(), b.log("deployments (subscribe)", T.deploymentsByUID);
})), it.push(m.watch("builds", r, function(e) {
Y.builds = e.by("metadata.name"), nt(), b.log("builds (subscribe)", Y.builds);
})), it.push(m.watch({
group: "apps",
resource: "statefulsets"
}, r, function(e) {
T.statefulSets = e.by("metadata.name"), Me(T.statefulSets), Me(T.monopods), _e(T.statefulSets), De(T.statefulSets), at(), ge(), b.log("statefulsets (subscribe)", T.statefulSets);
=======
T.pods && v.fetchReferencedImageStreamImages(T.pods, te.imagesByDockerReference, te.imageStreamImageRefByDockerReference, r);
=======
E.pods && v.fetchReferencedImageStreamImages(E.pods, te.imagesByDockerReference, te.imageStreamImageRefByDockerReference, r);
>>>>>>> Configurable inactivity timeout in console
};
ut.push(m.watch("pods", r, function(e) {
E.pods = e.by("metadata.name"), Oe(), a(), Be(), Ge(E.monopods), ke(E.monopods), Le(E.monopods), be(), b.log("pods (subscribe)", E.pods);
})), ut.push(m.watch("replicationcontrollers", r, function(e) {
E.replicationControllers = e.by("metadata.name"), Me(), Ge(E.vanillaReplicationControllers), Ge(E.monopods), ke(E.vanillaReplicationControllers), Le(E.vanillaReplicationControllers), ct(), be(), b.log("replicationcontrollers (subscribe)", E.replicationControllers);
})), ut.push(m.watch("deploymentconfigs", r, function(e) {
E.deploymentConfigs = e.by("metadata.name"), Me(), Ge(E.deploymentConfigs), Ge(E.vanillaReplicationControllers), Le(E.deploymentConfigs), Ae(), at(), ot(), ct(), be(), b.log("deploymentconfigs (subscribe)", E.deploymentConfigs);
})), ut.push(m.watch(Q, r, function(e) {
E.replicaSets = e.by("metadata.name"), ze(), Ge(E.vanillaReplicaSets), Ge(E.monopods), ke(E.vanillaReplicaSets), Le(E.vanillaReplicaSets), ct(), be(), b.log("replicasets (subscribe)", E.replicaSets);
})), ut.push(m.watch(M, r, function(e) {
J = e.by("metadata.uid"), E.deployments = _.sortBy(J, "metadata.name"), ze(), Ge(E.deployments), Ge(E.vanillaReplicaSets), Le(E.deployments), ct(), be(), b.log("deployments (subscribe)", E.deploymentsByUID);
})), ut.push(m.watch("builds", r, function(e) {
te.builds = e.by("metadata.name"), it(), b.log("builds (subscribe)", te.builds);
})), ut.push(m.watch(W, r, function(e) {
<<<<<<< HEAD
T.statefulSets = e.by("metadata.name"), Ge(T.statefulSets), Ge(T.monopods), ke(T.statefulSets), Le(T.statefulSets), ct(), be(), b.log("statefulsets (subscribe)", T.statefulSets);
>>>>>>> Additional getPreferredVersion updates to overview
=======
E.statefulSets = e.by("metadata.name"), Ge(E.statefulSets), Ge(E.monopods), ke(E.statefulSets), Le(E.statefulSets), ct(), be(), b.log("statefulsets (subscribe)", E.statefulSets);
>>>>>>> Configurable inactivity timeout in console
}, {
poll: N,
=======
}, dt = function() {
re.bindableServiceInstances = c.filterBindableServiceInstances(re.serviceInstances, re.serviceClasses, re.servicePlans), re.orderedServiceInstances = c.sortServiceInstances(re.serviceInstances, re.serviceClasses);
}, mt = [], pt = A ? {
skipErrorNotFound: !0
} : {};
k.get(a.project, pt).then(_.spread(function(t, r) {
re.project = e.project = t, re.context = r;
var a = function() {
N.pods && h.fetchReferencedImageStreamImages(N.pods, re.imagesByDockerReference, re.imageStreamImageRefByDockerReference, r);
};
mt.push(m.watch("pods", r, function(e) {
N.pods = e.by("metadata.name"), xe(), a(), Ve(), We(N.monopods), Re(N.monopods), Oe(N.monopods), Ce(), S.log("pods (subscribe)", N.pods);
})), mt.push(m.watch("replicationcontrollers", r, function(e) {
N.replicationControllers = e.by("metadata.name"), ze(), We(N.vanillaReplicationControllers), We(N.monopods), Re(N.vanillaReplicationControllers), Oe(N.vanillaReplicationControllers), ut(), Ce(), S.log("replicationcontrollers (subscribe)", N.replicationControllers);
})), mt.push(m.watch("deploymentconfigs", r, function(e) {
N.deploymentConfigs = e.by("metadata.name"), ze(), We(N.deploymentConfigs), We(N.vanillaReplicationControllers), Oe(N.deploymentConfigs), Be(), it(), st(), ut(), Ce(), S.log("deploymentconfigs (subscribe)", N.deploymentConfigs);
})), mt.push(m.watch(Y, r, function(e) {
N.replicaSets = e.by("metadata.name"), Ge(), We(N.vanillaReplicaSets), We(N.monopods), Re(N.vanillaReplicaSets), Oe(N.vanillaReplicaSets), ut(), Ce(), S.log("replicasets (subscribe)", N.replicaSets);
})), mt.push(m.watch(z, r, function(e) {
Z = e.by("metadata.uid"), N.deployments = _.sortBy(Z, "metadata.name"), Ge(), We(N.deployments), We(N.vanillaReplicaSets), Oe(N.deployments), ut(), Ce(), S.log("deployments (subscribe)", N.deploymentsByUID);
})), mt.push(m.watch("builds", r, function(e) {
re.builds = e.by("metadata.name"), ct(), S.log("builds (subscribe)", re.builds);
})), mt.push(m.watch(J, r, function(e) {
N.statefulSets = e.by("metadata.name"), We(N.statefulSets), We(N.monopods), Re(N.statefulSets), Oe(N.statefulSets), ut(), Ce(), S.log("statefulsets (subscribe)", N.statefulSets);
}, {
poll: D,
>>>>>>> Set Home Page Preference
pollInterval: 6e4
})), mt.push(m.watch("services", r, function(e) {
re.allServices = e.by("metadata.name"), Qe(), S.log("services (subscribe)", re.allServices);
}, {
poll: D,
pollInterval: 6e4
})), mt.push(m.watch("routes", r, function(e) {
N.routes = e.by("metadata.name"), Je(), S.log("routes (subscribe)", N.routes);
}, {
poll: D,
pollInterval: 6e4
})), mt.push(m.watch("buildConfigs", r, function(e) {
N.buildConfigs = e.by("metadata.name"), et(), it(), ct(), Ce(), S.log("buildconfigs (subscribe)", N.buildConfigs);
}, {
poll: D,
pollInterval: 6e4
})), mt.push(m.watch(H, r, function(e) {
N.horizontalPodAutoscalers = e.by("metadata.name"), Ye(), S.log("autoscalers (subscribe)", N.horizontalPodAutoscalers);
}, {
poll: D,
pollInterval: 6e4
})), mt.push(m.watch("imagestreams", r, function(e) {
X = e.by("metadata.name"), h.buildDockerRefMapForImageStreams(X, re.imageStreamImageRefByDockerReference), a(), S.log("imagestreams (subscribe)", X);
}, {
poll: D,
pollInterval: 6e4
})), mt.push(m.watch("resourcequotas", r, function(e) {
re.quotas = e.by("metadata.name"), lt();
}, {
poll: !0,
pollInterval: 6e4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})), Xe.push(c.watch("appliedclusterresourcequotas", a, function(e) {
q.clusterQuotas = e.by("metadata.name"), Qe();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
})), Ye.push(l.watch("appliedclusterresourcequotas", a, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
V.clusterQuotas = e.by("metadata.name"), Ge();
>>>>>>> Add bindings list to resource pages
=======
V.clusterQuotas = e.by("metadata.name"), We();
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
V.clusterQuotas = e.by("metadata.name"), Ke();
>>>>>>> Add notification-drawer to show curated list of events to user
=======
V.clusterQuotas = e.by("metadata.name"), Ge();
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
=======
V.clusterQuotas = e.by("metadata.name"), We();
>>>>>>> Enable new landing page experience by default
=======
V.clusterQuotas = e.by("metadata.name"), Ke();
>>>>>>> Quota Notifications
=======
V.clusterQuotas = e.by("metadata.name"), We();
>>>>>>> Show application kind when add to application dropdown is open
=======
})), at.push(u.watch("appliedclusterresourcequotas", n, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
W.clusterQuotas = e.by("metadata.name"), et();
>>>>>>> Adopt service catalog API changes
=======
K.clusterQuotas = e.by("metadata.name"), et();
>>>>>>> Replacing empty tables with empty state message
=======
W.clusterQuotas = e.by("metadata.name"), et();
>>>>>>> Handle displaying parameters when secrets are not available.
=======
})), ot.push(d.watch("appliedclusterresourcequotas", a, function(e) {
=======
})), ot.push(d.watch("appliedclusterresourcequotas", r, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
J.clusterQuotas = e.by("metadata.name"), nt();
>>>>>>> Wait for service classes and plans to load
=======
})), it.push(m.watch("appliedclusterresourcequotas", r, function(e) {
Y.clusterQuotas = e.by("metadata.name"), rt();
>>>>>>> Add Browse Catalog to Project context view.
=======
})), ut.push(m.watch("appliedclusterresourcequotas", r, function(e) {
te.clusterQuotas = e.by("metadata.name"), st();
>>>>>>> Additional getPreferredVersion updates to overview
=======
})), mt.push(m.watch("appliedclusterresourcequotas", r, function(e) {
re.clusterQuotas = e.by("metadata.name"), lt();
>>>>>>> Set Home Page Preference
}, {
poll: !0,
pollInterval: 6e4
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var o, i, s = {}, c = {};
<<<<<<< HEAD
<<<<<<< HEAD
u.SERVICE_CATALOG_ENABLED && V(se, "watch") && (o = function(e) {
var t = E.getServiceClassNameForInstance(e);
=======
u.SERVICE_CATALOG_ENABLED && A(G, "watch") && (o = function(e) {
var t = T.getServiceClassNameForInstance(e);
>>>>>>> Configurable inactivity timeout in console
if (!t) return n.when();
var r = _.get(he, [ "serviceClasses", t ]);
return r ? n.when(r) : (s[t] || (s[t] = m.get(ie, t, {}).then(function(e) {
return he.serviceClasses[t] = e, e;
=======
u.SERVICE_CATALOG_ENABLED && L(W, "watch") && (o = function(e) {
var t = T.getServiceClassNameForInstance(e);
if (!t) return n.when();
var r = _.get(re, [ "serviceClasses", t ]);
return r ? n.when(r) : (s[t] || (s[t] = m.get(K, t, {}).then(function(e) {
return re.serviceClasses[t] = e, e;
>>>>>>> Set Home Page Preference
}).finally(function() {
delete c[t];
})), s[t]);
}, i = function(e) {
var t = T.getServicePlanNameForInstance(e);
if (!t) return n.when();
<<<<<<< HEAD
var r = _.get(he, [ "servicePlans", t ]);
return r ? n.when(r) : (c[t] || (c[t] = m.get(ce, t, {}).then(function(e) {
return he.servicePlans[t] = e, e;
}).finally(function() {
delete c[t];
})), c[t]);
}, kt.push(m.watch(se, r, function(e) {
he.serviceInstances = e.by("metadata.name");
var t = [];
_.each(he.serviceInstances, function(e) {
var n = R.getServiceInstanceAlerts(e);
Oe(e, n), t.push(o(e)), t.push(i(e));
}), I.waitForAll(t).finally(function() {
jt(), Be();
}), Ze(he.serviceInstances);
}, {
poll: B,
pollInterval: 6e4
<<<<<<< HEAD
}))), u.SERVICE_CATALOG_ENABLED && V(oe, "watch") && kt.push(m.watch(oe, r, function(e) {
he.bindings = e.by("metadata.name"), A.bindingsByInstanceRef = _.groupBy(he.bindings, "spec.instanceRef.name"), Pt();
=======
}))), u.SERVICE_CATALOG_ENABLED && A(z, "watch") && ut.push(m.watch(z, r, function(e) {
te.bindings = e.by("metadata.name"), E.bindingsByInstanceRef = _.groupBy(te.bindings, "spec.instanceRef.name"), ct();
>>>>>>> Configurable inactivity timeout in console
}, {
poll: B,
pollInterval: 6e4
})), m.list(X, r, function(e) {
he.limitRanges = e.by("metadata.name");
=======
var r = _.get(re, [ "servicePlans", t ]);
return r ? n.when(r) : (c[t] || (c[t] = m.get(Q, t, {}).then(function(e) {
return re.servicePlans[t] = e, e;
}).finally(function() {
delete c[t];
})), c[t]);
}, mt.push(m.watch(W, r, function(e) {
re.serviceInstances = e.by("metadata.name");
var t = [];
_.each(re.serviceInstances, function(e) {
var n = R.getServiceInstanceAlerts(e);
je(e, n), t.push(o(e)), t.push(i(e));
}), I.waitForAll(t).finally(function() {
dt(), Ce();
}), Oe(re.serviceInstances);
}, {
poll: D,
pollInterval: 6e4
}))), u.SERVICE_CATALOG_ENABLED && L(G, "watch") && mt.push(m.watch(G, r, function(e) {
re.bindings = e.by("metadata.name"), N.bindingsByInstanceRef = _.groupBy(re.bindings, "spec.instanceRef.name"), ut();
}, {
poll: D,
pollInterval: 6e4
})), m.list("limitranges", r, function(e) {
re.limitRanges = e.by("metadata.name");
>>>>>>> Set Home Page Preference
});
var l = d.SAMPLE_PIPELINE_TEMPLATE;
l && m.get(de, l.name, {
namespace: l.namespace
}, {
errorNotification: !1
}).then(function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
A.samplePipelineURL = w.createFromTemplateURL(t, e.projectName);
=======
E.samplePipelineURL = C.createFromTemplateURL(t, e.projectName);
>>>>>>> Configurable inactivity timeout in console
}), e.$on("$destroy", function() {
m.unwatchAll(kt), $(window).off(".overview");
});
}), function(t) {
L && _.get(t, "notFound") && (g.notifyInvalidProjectHomePage(e.projectName), w.toProjectList());
=======
N.samplePipelineURL = w.createFromTemplateURL(t, e.projectName);
}), e.$on("$destroy", function() {
m.unwatchAll(mt), $(window).off(".overview");
});
}), function(t) {
A && _.get(t, "notFound") && (f.notifyInvalidProjectHomePage(e.projectName), w.toProjectList());
>>>>>>> Set Home Page Preference
});
}

function ResourceServiceBindings(e, t, n, r, a) {
var o, i = this, s = e("enableTechPreviewFeature");
i.bindings = [], i.bindableServiceInstances = [], i.serviceClasses = [], i.serviceInstances = [], i.showBindings = r.SERVICE_CATALOG_ENABLED && s("pod_presets");
var c = e("isIE")(), l = [], u = e("canI"), d = i.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), m = t.getPreferredVersion("clusterserviceclasses"), p = t.getPreferredVersion("serviceinstances"), g = t.getPreferredVersion("clusterserviceplans"), f = function() {
i.apiObject && i.bindings && (i.bindings = n.getBindingsForResource(i.bindings, i.apiObject));
}, v = function() {
i.bindableServiceInstances = n.filterBindableServiceInstances(i.serviceInstances, i.serviceClasses, o), i.orderedServiceInstances = n.sortServiceInstances(i.serviceInstances, i.serviceClasses);
};
i.createBinding = function() {
i.overlayPanelVisible = !0, i.overlayPanelName = "bindService";
}, i.closeOverlayPanel = function() {
i.overlayPanelVisible = !1;
};
var h = function() {
a.unwatchAll(l), l = [], r.SERVICE_CATALOG_ENABLED && u(d, "watch") && l.push(a.watch(d, i.projectContext, function(e) {
i.bindings = e.by("metadata.name"), f();
}, {
poll: c,
pollInterval: 6e4
})), r.SERVICE_CATALOG_ENABLED && u(p, "watch") && (l.push(a.watch(p, i.projectContext, function(e) {
i.serviceInstances = e.by("metadata.name"), v();
}, {
poll: c,
pollInterval: 6e4
})), a.list(m, {}, function(e) {
i.serviceClasses = e.by("metadata.name"), v();
}), a.list(g, {}, function(e) {
o = e.by("metadata.name");
}));
};
i.$onChanges = function(e) {
e.projectContext && i.showBindings && h();
}, i.$onDestroy = function() {
a.unwatchAll(l);
};
}

function ServiceInstanceBindings(e, t, n) {
var r = this, a = e("canI"), o = r.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), i = function() {
r.bindable = a(o, "create") && n.isServiceBindable(r.serviceInstance, r.serviceClass, r.servicePlan);
};
r.createBinding = function() {
r.overlayPanelVisible = !0;
}, r.closeOverlayPanel = function() {
r.overlayPanelVisible = !1;
}, r.$onChanges = function() {
i();
};
}

<<<<<<< HEAD
<<<<<<< HEAD
var gettext = function(e) {
return e;
};

Noop(), angular.isUndefined(window.OPENSHIFT_CONSTANTS) && (window.OPENSHIFT_CONSTANTS = {}), angular.extend(window.OPENSHIFT_CONSTANTS, {
=======
var o = t("canI");
s.SERVICE_CATALOG_ENABLED && o({
resource: "serviceinstances",
group: "servicecatalog.k8s.io"
}, "watch") && Ye.push(l.watch({
group: "servicecatalog.k8s.io",
resource: "serviceinstances"
}, a, function(e) {
V.serviceInstances = e.by("metadata.name"), _.each(V.serviceInstances, function(e) {
=======
var r, o, i = {}, s = {};
c.SERVICE_CATALOG_ENABLED && D(q, "watch") && (r = function(e) {
var t = j.getServiceClassNameForInstance(e);
_.has(W, [ "serviceClasses", t ]) || i[t] || (i[t] = u.get(M, t, {}).then(function(e) {
W.serviceClasses[t] = e;
=======
var o, i, s = {}, c = {};
<<<<<<< HEAD
<<<<<<< HEAD
l.SERVICE_CATALOG_ENABLED && B(H, "watch") && (o = function(e) {
var t = R.getServiceClassNameForInstance(e), r = _.get(J, [ "serviceClasses", t ]);
return r ? n.when(r) : (s[t] || (s[t] = d.get(z, t, {}).then(function(e) {
return J.serviceClasses[t] = e, e;
>>>>>>> Wait for service classes and plans to load
=======
u.SERVICE_CATALOG_ENABLED && L(G, "watch") && (o = function(e) {
var t = E.getServiceClassNameForInstance(e), r = _.get(Y, [ "serviceClasses", t ]);
return r ? n.when(r) : (s[t] || (s[t] = m.get(H, t, {}).then(function(e) {
return Y.serviceClasses[t] = e, e;
>>>>>>> Add Browse Catalog to Project context view.
=======
u.SERVICE_CATALOG_ENABLED && A(G, "watch") && (o = function(e) {
var t = E.getServiceClassNameForInstance(e), r = _.get(te, [ "serviceClasses", t ]);
return r ? n.when(r) : (s[t] || (s[t] = m.get(H, t, {}).then(function(e) {
return te.serviceClasses[t] = e, e;
>>>>>>> Additional getPreferredVersion updates to overview
}).finally(function() {
delete c[t];
})), s[t]);
}, i = function(e) {
var t = E.getServicePlanNameForInstance(e), r = _.get(te, [ "servicePlans", t ]);
return r ? n.when(r) : (c[t] || (c[t] = m.get(K, t, {}).then(function(e) {
return te.servicePlans[t] = e, e;
}).finally(function() {
<<<<<<< HEAD
delete s[t];
}));
}, at.push(u.watch(q, n, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
W.serviceInstances = e.by("metadata.name"), _.each(W.serviceInstances, function(e) {
>>>>>>> Adopt service catalog API changes
=======
K.serviceInstances = e.by("metadata.name"), _.each(K.serviceInstances, function(e) {
>>>>>>> Replacing empty tables with empty state message
=======
W.serviceInstances = e.by("metadata.name"), _.each(W.serviceInstances, function(e) {
>>>>>>> Handle displaying parameters when secrets are not available.
var t = k.getServiceInstanceAlerts(e);
ve(e, t), r(e), o(e);
}), nt(), Ee(W.serviceInstances), me();
}, {
poll: I,
=======
delete c[t];
})), c[t]);
}, ut.push(m.watch(G, r, function(e) {
te.serviceInstances = e.by("metadata.name");
var t = [];
_.each(te.serviceInstances, function(e) {
var n = I.getServiceInstanceAlerts(e);
we(e, n), t.push(o(e)), t.push(i(e));
}), k.waitForAll(t).finally(function() {
lt(), be();
}), Le(te.serviceInstances);
}, {
<<<<<<< HEAD
poll: T,
>>>>>>> Wait for service classes and plans to load
=======
poll: N,
>>>>>>> Add Browse Catalog to Project context view.
pollInterval: 6e4
}))), u.SERVICE_CATALOG_ENABLED && A(z, "watch") && ut.push(m.watch(z, r, function(e) {
te.bindings = e.by("metadata.name"), T.bindingsByInstanceRef = _.groupBy(te.bindings, "spec.instanceRef.name"), ct();
}, {
poll: N,
pollInterval: 6e4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})), l.list("limitranges", a, function(e) {
V.limitRanges = e.by("metadata.name");
}), s.SERVICE_CATALOG_ENABLED && o({
resource: "serviceinstances",
group: "servicecatalog.k8s.io"
}, "watch") && l.list({
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
}, a, function(e) {
V.serviceClasses = e.by("metadata.name"), Je(), ie();
=======
})), u.list("limitranges", n, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
W.limitRanges = e.by("metadata.name");
>>>>>>> Adopt service catalog API changes
=======
K.limitRanges = e.by("metadata.name");
>>>>>>> Replacing empty tables with empty state message
=======
W.limitRanges = e.by("metadata.name");
>>>>>>> Handle displaying parameters when secrets are not available.
=======
})), d.list("limitranges", a, function(e) {
=======
})), d.list("limitranges", r, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
J.limitRanges = e.by("metadata.name");
>>>>>>> Wait for service classes and plans to load
=======
})), m.list("limitranges", r, function(e) {
<<<<<<< HEAD
Y.limitRanges = e.by("metadata.name");
>>>>>>> Add Browse Catalog to Project context view.
=======
te.limitRanges = e.by("metadata.name");
>>>>>>> Additional getPreferredVersion updates to overview
});
var l = d.SAMPLE_PIPELINE_TEMPLATE;
l && m.get("templates", l.name, {
namespace: l.namespace
}, {
errorNotification: !1
}).then(function(t) {
T.samplePipelineURL = C.createFromTemplateURL(t, e.projectName);
}), e.$on("$destroy", function() {
m.unwatchAll(ut), $(window).off(".overview");
});
}));
}

function ResourceServiceBindings(e, t, n, r, a) {
var o, i = this, s = e("enableTechPreviewFeature");
i.bindings = [], i.bindableServiceInstances = [], i.serviceClasses = [], i.serviceInstances = [], i.showBindings = r.SERVICE_CATALOG_ENABLED && s("pod_presets");
var c = e("isIE")(), l = [], u = e("canI"), d = i.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), m = t.getPreferredVersion("clusterserviceclasses"), p = t.getPreferredVersion("serviceinstances"), f = t.getPreferredVersion("clusterserviceplans"), g = function() {
i.apiObject && i.bindings && (i.bindings = n.getBindingsForResource(i.bindings, i.apiObject));
}, v = function() {
i.bindableServiceInstances = n.filterBindableServiceInstances(i.serviceInstances, i.serviceClasses, o), i.orderedServiceInstances = n.sortServiceInstances(i.serviceInstances, i.serviceClasses);
};
i.createBinding = function() {
i.overlayPanelVisible = !0, i.overlayPanelName = "bindService";
}, i.closeOverlayPanel = function() {
i.overlayPanelVisible = !1;
};
var h = function() {
a.unwatchAll(l), l = [], r.SERVICE_CATALOG_ENABLED && u(d, "watch") && l.push(a.watch(d, i.projectContext, function(e) {
i.bindings = e.by("metadata.name"), g();
}, {
poll: c,
pollInterval: 6e4
})), r.SERVICE_CATALOG_ENABLED && u(p, "watch") && (l.push(a.watch(p, i.projectContext, function(e) {
i.serviceInstances = e.by("metadata.name"), v();
}, {
poll: c,
pollInterval: 6e4
<<<<<<< HEAD
<<<<<<< HEAD
})), t.list({
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
}, r.projectContext, function(e) {
r.serviceClasses = e.by("metadata.name"), u();
=======
})), r.list(m, {}, function(e) {
=======
})), a.list(m, {}, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
i.serviceClasses = e.by("metadata.name"), v();
}), a.list(f, {}, function(e) {
o = e.by("metadata.name");
>>>>>>> Adopt service catalog API changes
}));
};
i.$onChanges = function(e) {
e.projectContext && i.showBindings && h();
}, i.$onDestroy = function() {
a.unwatchAll(l);
};
}

function ServiceInstanceBindings(e, t, n) {
var r = this, a = e("canI"), o = r.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), i = function() {
r.bindable = a(o, "create") && n.isServiceBindable(r.serviceInstance, r.serviceClass, r.servicePlan);
};
r.createBinding = function() {
r.overlayPanelVisible = !0;
}, r.closeOverlayPanel = function() {
r.overlayPanelVisible = !1;
}, r.$onChanges = function() {
i();
};
}

angular.isUndefined(window.OPENSHIFT_CONSTANTS) && (window.OPENSHIFT_CONSTANTS = {}), angular.extend(window.OPENSHIFT_CONSTANTS, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
angular.isUndefined(window.OPENSHIFT_CONSTANTS) && (window.OPENSHIFT_CONSTANTS = {}), angular.extend(window.OPENSHIFT_CONSTANTS, {
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
angular.isUndefined(window.OPENSHIFT_CONSTANTS) && (window.OPENSHIFT_CONSTANTS = {}), angular.extend(window.OPENSHIFT_CONSTANTS, {
>>>>>>> Bug 1537873: Doc link on the top of 'Create New Webhook Secret' modal is unrelated
HELP_BASE_URL: "https://docs.openshift.org/latest/",
HELP: {
cli: "cli_reference/index.html",
get_started_cli: "cli_reference/get_started_cli.html",
basic_cli_operations: "cli_reference/basic_cli_operations.html",
"build-triggers": "dev_guide/builds/triggering_builds.html",
webhooks: "dev_guide/builds/triggering_builds.html#webhook-triggers",
new_app: "dev_guide/application_lifecycle/new_app.html",
"start-build": "dev_guide/builds/basic_build_operations.html#starting-a-build",
"deployment-operations": "cli_reference/basic_cli_operations.html#build-and-deployment-cli-operations",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
"route-types": "architecture/networking/routes.html#route-types",
=======
"route-types": "architecture/core_concepts/routes.html#route-types",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
"route-types": "architecture/networking/routes.html#route-types",
>>>>>>> Fix broken route links
=======
"route-types": "architecture/networking/routes.html#route-types",
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
"route-types": "architecture/networking/routes.html#route-types",
>>>>>>> Bug 1537873: Doc link on the top of 'Create New Webhook Secret' modal is unrelated
persistent_volumes: "dev_guide/persistent_volumes.html",
compute_resources: "dev_guide/compute_resources.html",
pod_autoscaling: "dev_guide/pod_autoscaling.html",
application_health: "dev_guide/application_health.html",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
webhook_secrets: "dev_guide/builds/triggering_builds.html#webhook-triggers",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
webhook_secrets: "dev_guide/builds/triggering_builds.html#webhook-triggers",
>>>>>>> Bug 1537873: Doc link on the top of 'Create New Webhook Secret' modal is unrelated
source_secrets: "dev_guide/builds/build_inputs.html#using-secrets-during-build",
git_secret: "dev_guide/builds/build_inputs.html#source-clone-secrets",
pull_secret: "dev_guide/managing_images.html#using-image-pull-secrets",
managing_secrets: "dev_guide/service_accounts.html#managing-allowed-secrets",
creating_secrets: "dev_guide/secrets.html#creating-secrets",
storage_classes: "install_config/persistent_storage/dynamically_provisioning_pvs.html",
selector_label: "install_config/persistent_storage/selector_label_binding.html",
rolling_strategy: "dev_guide/deployments/deployment_strategies.html#rolling-strategy",
recreate_strategy: "dev_guide/deployments/deployment_strategies.html#recreate-strategy",
custom_strategy: "dev_guide/deployments/deployment_strategies.html#custom-strategy",
lifecycle_hooks: "dev_guide/deployments/deployment_strategies.html#lifecycle-hooks",
new_pod_exec: "dev_guide/deployments/deployment_strategies.html#pod-based-lifecycle-hook",
authorization: "architecture/additional_concepts/authorization.html",
roles: "architecture/additional_concepts/authorization.html#roles",
service_accounts: "dev_guide/service_accounts.html",
users_and_groups: "architecture/additional_concepts/authentication.html#users-and-groups",
"pipeline-builds": "architecture/core_concepts/builds_and_image_streams.html#pipeline-build",
"pipeline-plugin": "using_images/other_images/jenkins.html#openshift-origin-pipeline-plug-in",
quota: "dev_guide/compute_resources.html",
"config-maps": "dev_guide/configmaps.html",
secrets: "dev_guide/secrets.html",
deployments: "dev_guide/deployments/how_deployments_work.html",
pods: "architecture/core_concepts/pods_and_services.html#pods",
services: "architecture/core_concepts/pods_and_services.html#services",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
routes: "architecture/networking/routes.html",
=======
routes: "architecture/core_concepts/routes.html",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
routes: "architecture/networking/routes.html",
>>>>>>> Fix broken route links
=======
routes: "architecture/networking/routes.html",
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
routes: "architecture/networking/routes.html",
>>>>>>> Bug 1537873: Doc link on the top of 'Create New Webhook Secret' modal is unrelated
builds: "architecture/core_concepts/builds_and_image_streams.html#builds",
"image-streams": "architecture/core_concepts/builds_and_image_streams.html#image-streams",
storage: "architecture/additional_concepts/storage.html",
"build-hooks": "dev_guide/builds/build_hooks.html",
default: "welcome/index.html"
},
CLI: {
"Latest Release": "https://github.com/openshift/origin/releases/latest"
},
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
DEFAULT_HPA_CPU_TARGET_PERCENT: null,
=======
DEFAULT_HPA_CPU_TARGET_PERCENT: 80,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
DEFAULT_HPA_CPU_TARGET_PERCENT: null,
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
DEFAULT_HPA_CPU_TARGET_PERCENT: null,
>>>>>>> Bug 1537873: Doc link on the top of 'Create New Webhook Secret' modal is unrelated
DISABLE_OVERVIEW_METRICS: !1,
DISABLE_CUSTOM_METRICS: !1,
DISABLE_WILDCARD_ROUTES: !0,
DISABLE_CONFIRM_ON_EXIT: !1,
<<<<<<< HEAD
<<<<<<< HEAD
DISABLE_SERVICE_CATALOG_LANDING_PAGE: !1,
AVAILABLE_KINDS_BLACKLIST: [],
DISABLE_GLOBAL_EVENT_WATCH: !1,
DISABLE_COPY_LOGIN_COMMAND: !0,
ENABLE_TECH_PREVIEW_FEATURE: {
=======
=======
DISABLE_SERVICE_CATALOG_LANDING_PAGE: !1,
>>>>>>> Enable new landing page experience by default
AVAILABLE_KINDS_BLACKLIST: [],
DISABLE_GLOBAL_EVENT_WATCH: !1,
DISABLE_COPY_LOGIN_COMMAND: !1,
ENABLE_TECH_PREVIEW_FEATURE: {
<<<<<<< HEAD
template_service_broker: !1,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Update template service broker flag name
pod_presets: !1
},
SAMPLE_PIPELINE_TEMPLATE: {
name: "jenkins-pipeline-example",
namespace: "openshift"
},
CREATE_FROM_URL_WHITELIST: [ "openshift" ],
SECURITY_CHECK_WHITELIST: [ {
resource: "buildconfigs",
group: ""
}, {
resource: "buildconfigs",
group: "build.openshift.io"
}, {
resource: "builds",
group: ""
}, {
resource: "builds",
group: "build.openshift.io"
}, {
resource: "configmaps",
group: ""
}, {
resource: "daemonsets",
group: "extensions"
}, {
resource: "deployments",
group: "apps"
}, {
resource: "deployments",
group: "extensions"
}, {
resource: "deploymentconfigs",
group: ""
}, {
resource: "deploymentconfigs",
group: "apps.openshift.io"
}, {
resource: "endpoints",
group: ""
}, {
resource: "events",
group: ""
}, {
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, {
resource: "horizontalpodautoscalers",
group: "extensions"
}, {
resource: "imagestreamimages",
group: ""
}, {
resource: "imagestreamimages",
group: "image.openshift.io"
}, {
resource: "imagestreams",
group: ""
<<<<<<< HEAD
}, {
resource: "imagestreams",
group: "image.openshift.io"
}, {
resource: "imagestreamtags",
group: ""
}, {
resource: "imagestreamtags",
group: "image.openshift.io"
}, {
resource: "ingresses",
group: "extensions"
}, {
resource: "jobs",
group: "batch"
}, {
resource: "persistentvolumeclaims",
group: ""
}, {
resource: "pods",
group: ""
}, {
resource: "podtemplates",
group: ""
}, {
resource: "replicasets",
group: "extensions"
}, {
resource: "replicationcontrollers",
group: ""
}, {
resource: "routes",
group: ""
}, {
resource: "routes",
group: "route.openshift.io"
}, {
resource: "secrets",
group: ""
}, {
resource: "serviceaccounts",
group: ""
}, {
resource: "servicebindings",
group: "servicecatalog.k8s.io"
}, {
resource: "serviceinstances",
group: "servicecatalog.k8s.io"
}, {
resource: "services",
group: ""
}, {
resource: "statefulsets",
group: "apps"
} ],
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update membership filter to use MEMBERSHIP_WHITELIST in Constants.js
MEMBERSHIP_WHITELIST: [ "admin", "basic-user", "edit", "system:deployer", "system:image-builder", "system:image-puller", "system:image-pusher", "view" ],
EVENTS_TO_SHOW: {
FailedCreate: !0,
FailedDelete: !0,
FailedScheduling: !0,
FailedUpdate: !0,
BuildCancelled: !0,
BuildCompleted: !0,
BuildFailed: !0,
BuildStarted: !0,
BuildConfigInstantiateFailed: !0,
DeploymentCancelled: !0,
Failed: !0,
DeploymentCreated: !0,
DeploymentCreationFailed: !0,
FailedRescale: !0,
SuccessfulRescale: !0,
BackOff: !0,
FailedSync: !0,
InvalidEnvironmentVariableNames: !0,
Unhealthy: !0,
FailedBinding: !0,
ProvisioningFailed: !0,
VolumeDeleted: !0,
LoadBalancerUpdateFailed: !0,
Deprovisioning: !0,
ErrorCallingProvision: !0,
ErrorInjectingBindResult: !0,
ProvisionCallFailed: !0,
ProvisionedSuccessfully: !0,
<<<<<<< HEAD
Provisioning: !0,
ReferencesNonexistentServiceClass: !0,
ReferencesNonexistentServicePlan: !0,
UnbindCallFailed: !0
=======
EVENTS_TO_SHOW: {
FailedCreate: !0,
FailedDelete: !0,
FailedUpdate: !0,
BuildCancelled: !0,
BuildCompleted: !0,
BuildFailed: !0,
BuildStarted: !0,
BuildConfigInstantiateFailed: !0,
DeploymentCancelled: !0,
Failed: !0,
ScalingReplicaSet: !0,
DeploymentCreated: !0,
DeploymentCreationFailed: !0,
FailedRescale: !0,
SuccessfulRescale: !0,
BackOff: !0,
FailedSync: !0,
Unhealthy: !0,
FailedBinding: !0,
<<<<<<< HEAD
ProvisioningFailed: !0
>>>>>>> Add notification-drawer to show curated list of events to user
=======
ProvisioningFailed: !0,
VolumeDeleted: !0,
LoadBalancerUpdateFailed: !0,
Deprovisioning: !0,
ErrorAsyncOperationInProgress: !0,
ErrorCallingProvision: !0,
ErrorInjectingBindResult: !0,
ProvisionedSuccessfully: !0,
=======
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
Provisioning: !0,
ReferencesNonexistentInstance: !0,
ReferencesNonexistentServiceClass: !0,
ReferencesNonexistentServicePlan: !0,
UnbindCallFailed: !0
>>>>>>> Adjust events to show in the drawer
},
PROJECT_NAVIGATION: [ {
label: gettext("Overview"),
iconClass: "fa fa-dashboard",
href: "/overview"
}, {
label: gettext("Applications"),
iconClass: "fa fa-cubes",
secondaryNavSections: [ {
items: [ {
label: gettext("Deployments"),
href: "/browse/deployments",
prefixes: [ "/add-config-volume", "/attach-pvc", "/browse/deployment/", "/browse/dc/", "/browse/rs/", "/browse/rc/", "/edit/autoscaler", "/edit/dc/", "/edit/health-checks", "/set-limits" ]
}, {
label: gettext("Stateful Sets"),
href: "/browse/stateful-sets",
prefixes: [ "/browse/stateful-sets/" ]
}, {
label: gettext("Pods"),
href: "/browse/pods",
prefixes: [ "/browse/pods/" ]
}, {
label: gettext("Services"),
href: "/browse/services",
prefixes: [ "/browse/services/" ]
}, {
label: gettext("Routes"),
href: "/browse/routes",
prefixes: [ "/browse/routes/", "/create-route", "/edit/routes/" ]
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Updates for Service Instance & Bindings
}, {
label: "Provisioned Services",
href: "/browse/service-instances",
prefixes: [ "/browse/service-instances/" ],
canI: {
resource: "serviceinstances",
group: "servicecatalog.k8s.io",
verb: "list"
}
<<<<<<< HEAD
=======
>>>>>>> Patternfly vertical navigation and project bar
=======
>>>>>>> Updates for Service Instance & Bindings
} ]
} ]
}, {
label: gettext("Builds"),
iconClass: "pficon pficon-build",
secondaryNavSections: [ {
items: [ {
label: gettext("Builds"),
href: "/browse/builds",
prefixes: [ "/browse/builds/", "/browse/builds-noconfig/", "/edit/builds/" ]
}, {
label: gettext("Pipelines"),
href: "/browse/pipelines",
prefixes: [ "/browse/pipelines/", "/edit/pipelines/" ]
}, {
label: gettext("Images"),
=======
}, {
resource: "imagestreams",
group: "image.openshift.io"
}, {
resource: "imagestreamtags",
group: ""
}, {
<<<<<<< HEAD
resource: "imagestreamtags",
group: "image.openshift.io"
}, {
resource: "ingresses",
group: "extensions"
}, {
resource: "jobs",
group: "batch"
}, {
resource: "persistentvolumeclaims",
group: ""
}, {
resource: "pods",
group: ""
}, {
resource: "podtemplates",
group: ""
}, {
resource: "replicasets",
group: "extensions"
}, {
resource: "replicationcontrollers",
group: ""
}, {
resource: "routes",
group: ""
}, {
resource: "routes",
group: "route.openshift.io"
}, {
resource: "secrets",
group: ""
}, {
resource: "serviceaccounts",
group: ""
}, {
resource: "services",
group: ""
}, {
resource: "statefulsets",
group: "apps"
} ],
PROJECT_NAVIGATION: [ {
label: "Overview",
iconClass: "fa fa-dashboard",
href: "/overview"
}, {
label: "Applications",
iconClass: "fa fa-cubes",
secondaryNavSections: [ {
items: [ {
label: "Deployments",
href: "/browse/deployments",
prefixes: [ "/browse/deployment/", "/browse/dc/", "/browse/rs/", "/browse/rc/" ]
}, {
label: "Stateful Sets",
href: "/browse/stateful-sets",
prefixes: [ "/browse/stateful-sets/" ]
}, {
label: "Pods",
href: "/browse/pods",
prefixes: [ "/browse/pods/" ]
}, {
label: "Services",
href: "/browse/services",
prefixes: [ "/browse/services/" ]
}, {
label: "Routes",
href: "/browse/routes",
prefixes: [ "/browse/routes/" ]
} ]
} ]
}, {
label: "Builds",
iconClass: "pficon pficon-build",
secondaryNavSections: [ {
items: [ {
label: "Builds",
href: "/browse/builds",
prefixes: [ "/browse/builds/", "/browse/builds-noconfig/" ]
}, {
label: "Pipelines",
href: "/browse/pipelines",
prefixes: [ "/browse/pipelines/" ]
}, {
label: "Images",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
href: "/browse/images",
prefixes: [ "/browse/images/" ]
} ]
} ]
}, {
<<<<<<< HEAD
label: gettext("Resources"),
iconClass: "fa fa-files-o",
secondaryNavSections: [ {
items: [ {
label: gettext("Quota"),
href: "/quota"
}, {
label: gettext("Config Maps"),
href: "/browse/config-maps",
prefixes: [ "/browse/config-maps/", "/create-config-map", "/edit/config-maps/" ]
}, {
label: gettext("Secrets"),
href: "/browse/secrets",
prefixes: [ "/browse/secrets/", "/create-secret" ],
canI: {
resource: "secrets",
verb: "list"
}
}, {
label: gettext("Other Resources"),
href: "/browse/other"
} ]
} ]
}, {
label: gettext("Storage"),
iconClass: "pficon pficon-container-node",
href: "/browse/storage",
prefixes: [ "/browse/storage/", "/browse/persistentvolumeclaims/", "/create-pvc" ]
}, {
label: gettext("Monitoring"),
iconClass: "pficon pficon-screen",
href: "/monitoring",
prefixes: [ "/browse/events" ]
}, {
label: gettext("Catalog"),
iconClass: "pficon pficon-catalog",
href: "/catalog",
canI: {
addToProject: !0
=======
label: "Resources",
iconClass: "fa fa-files-o",
secondaryNavSections: [ {
items: [ {
label: "Quota",
href: "/quota"
}, {
label: "Membership",
href: "/membership",
canI: {
resource: "rolebindings",
verb: "list"
}
}, {
label: "Config Maps",
href: "/browse/config-maps",
prefixes: [ "/browse/config-maps/" ]
}, {
label: "Secrets",
href: "/browse/secrets",
prefixes: [ "/browse/secrets/" ],
=======
label: "Config Maps",
href: "/browse/config-maps",
prefixes: [ "/browse/config-maps/", "/create-config-map", "/edit/config-maps/" ]
}, {
label: "Secrets",
href: "/browse/secrets",
prefixes: [ "/browse/secrets/", "/create-secret" ],
>>>>>>> Patternfly vertical navigation and project bar
canI: {
resource: "secrets",
verb: "list"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
} ],
CATALOG_CATEGORIES: [ {
id: "eams",
label: "数人云微服务治理",
items: [ {
id: "octopus",
categoryAliases: [ "octopus" ],
label: "Octopus",
iconClass: "font-icon icon-octopus-m",
description: ""
}, {
id: "squid",
categoryAliases: [ "squid" ],
label: "Squid",
iconClass: "font-icon icon-squid-m",
description: ""
}, {
<<<<<<< HEAD
id: "hawk",
categoryAliases: [ "hawk" ],
label: "Hawk",
iconClass: "font-icon icon-hawk-m",
description: ""
=======
label: "Other Resources",
href: "/browse/other"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
}, {
id: "dmos",
label: "数人云基础服务",
items: [ {
id: "monitor",
categoryAliases: [ "monitor" ],
label: "Monitor",
iconClass: "font-icon icon-monitor-m",
description: ""
} ]
}, {
<<<<<<< HEAD
id: "languages",
label: gettext("Languages"),
iconClassDefault: "fa fa-code",
items: [ {
id: "java",
label: gettext("Java"),
iconClass: "font-icon icon-openjdk",
subcategories: [ {
id: "java-subcategories",
items: [ {
id: "amq",
label: gettext("Red Hat JBoss A-MQ")
}, {
id: "processserver",
label: gettext("Red Hat JBoss BPM Suite")
}, {
id: "decisionserver",
label: gettext("Red Hat JBoss BRMS")
}, {
id: "datagrid",
label: gettext("Red Hat JBoss Data Grid")
}, {
id: "eap",
label: gettext("Red Hat JBoss EAP")
}, {
id: "jboss-fuse",
label: gettext("Red Hat JBoss Fuse")
}, {
id: "tomcat",
label: gettext("Red Hat JBoss Web Server (Tomcat)")
}, {
id: "sso",
label: gettext("Red Hat Single Sign-On")
}, {
id: "wildfly",
label: gettext("WildFly")
=======
label: "Storage",
iconClass: "pficon pficon-container-node",
href: "/browse/storage",
prefixes: [ "/browse/storage/", "/browse/persistentvolumeclaims/", "/create-pvc" ]
}, {
label: "Monitoring",
iconClass: "pficon pficon-screen",
href: "/monitoring",
prefixes: [ "/browse/events" ]
}, {
label: "Catalog",
iconClass: "pficon pficon-service-catalog",
href: "/catalog",
canI: {
addToProject: !0
}
} ],
CATALOG_CATEGORIES: [ {
id: "languages",
label: "Languages",
iconClassDefault: "fa fa-code",
items: [ {
id: "java",
label: "Java",
iconClass: "font-icon icon-openjdk",
subcategories: [ {
id: "java-subcategories",
items: [ {
id: "amq",
label: "Red Hat JBoss A-MQ"
}, {
id: "processserver",
label: "Red Hat JBoss BPM Suite"
}, {
id: "decisionserver",
label: "Red Hat JBoss BRMS"
}, {
id: "datagrid",
label: "Red Hat JBoss Data Grid"
}, {
id: "eap",
label: "Red Hat JBoss EAP"
}, {
id: "jboss-fuse",
label: "Red Hat JBoss Fuse"
}, {
id: "tomcat",
label: "Red Hat JBoss Web Server (Tomcat)"
}, {
id: "sso",
label: "Red Hat Single Sign-On"
}, {
id: "wildfly",
label: "WildFly"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
} ]
}, {
id: "javascript",
categoryAliases: [ "nodejs", "js" ],
<<<<<<< HEAD
label: gettext("JavaScript"),
iconClass: "font-icon icon-js"
}, {
id: "dotnet",
label: gettext(".NET"),
iconClass: "font-icon icon-dotnet"
}, {
id: "perl",
label: gettext("Perl"),
iconClass: "font-icon icon-perl"
}, {
id: "php",
label: gettext("PHP"),
iconClass: "font-icon icon-php"
}, {
id: "python",
label: gettext("Python"),
iconClass: "font-icon icon-python"
}, {
id: "ruby",
label: gettext("Ruby"),
=======
label: "JavaScript",
iconClass: "font-icon icon-js"
}, {
id: "dotnet",
label: ".NET",
iconClass: "font-icon icon-dotnet"
}, {
id: "perl",
label: "Perl",
iconClass: "font-icon icon-perl"
}, {
id: "php",
label: "PHP",
iconClass: "font-icon icon-php"
}, {
id: "python",
label: "Python",
iconClass: "font-icon icon-python"
}, {
id: "ruby",
label: "Ruby",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
iconClass: "font-icon icon-ruby"
}, {
id: "Golang",
categoryAliases: [ "go" ],
<<<<<<< HEAD
label: gettext("Go"),
=======
label: "Go",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
iconClass: "font-icon icon-go-gopher"
} ]
}, {
id: "technologies",
<<<<<<< HEAD
label: gettext("Technologies"),
items: [ {
id: "business-process-services",
categoryAliases: [ "decisionserver", "processserver" ],
label: gettext("Business Process Services"),
description: gettext("Model, automate, and orchestrate business processes across applications, services, and data.")
}, {
id: "ci-cd",
categoryAliases: [ "jenkins" ],
label: gettext("Continuous Integration & Deployment"),
description: gettext("Automate the build, test, and deployment of your application with each new code revision.")
}, {
id: "datastore",
categoryAliases: [ "database", "datagrid" ],
label: gettext("Data Stores"),
description: gettext("Store and manage collections of data.")
}, {
id: "messaging",
label: gettext("Messaging"),
description: gettext("Facilitate communication between applications and distributed processes with a messaging server.")
}, {
id: "integration",
label: gettext("Integration"),
description: gettext("Connect with other applications and data to enhance functionality without duplication.")
}, {
id: "single-sign-on",
categoryAliases: [ "sso" ],
label: gettext("Single Sign-On"),
description: gettext("A centralized authentication server for users to log in, log out, register, and manage user accounts for applications and RESTful web services.")
}, {
id: "",
label: gettext("Uncategorized"),
description: ""
} ]
} ],
SAAS_OFFERINGS: [],
APP_LAUNCHER_NAVIGATION: [],
QUOTA_NOTIFICATION_MESSAGE: {},
LOGO_BASE_URL: "images/logos/",
LOGOS: {
"icon-3scale": "3scale.svg",
"icon-aerogear": "aerogear.svg",
"icon-amq": "amq.svg",
"icon-angularjs": "angularjs.svg",
"icon-ansible": "ansible.svg",
"icon-apache": "apache.svg",
"icon-beaker": "beaker.svg",
"icon-capedwarf": "capedwarf.svg",
"icon-cassandra": "cassandra.svg",
"icon-clojure": "clojure.svg",
"icon-codeigniter": "codeigniter.svg",
<<<<<<< HEAD
"icon-cordova": "cordova.png",
=======
>>>>>>> Add product icons for service catalog
"icon-datagrid": "datagrid.svg",
"icon-datavirt": "datavirt.svg",
"icon-decisionserver": "decisionserver.svg",
"icon-django": "django.svg",
"icon-dotnet": "dotnet.svg",
"icon-drupal": "drupal.svg",
"icon-eap": "eap.svg",
"icon-elastic": "elastic.svg",
"icon-erlang": "erlang.svg",
"icon-git": "git.svg",
"icon-github": "github.svg",
"icon-gitlab": "gitlab.svg",
"icon-glassfish": "glassfish.svg",
"icon-go-gopher": "go-gopher.svg",
"icon-grails": "grails.svg",
"icon-hadoop": "hadoop.svg",
"icon-haproxy": "haproxy.svg",
"icon-infinispan": "infinispan.svg",
"icon-jboss": "jboss.svg",
"icon-jenkins": "jenkins.svg",
"icon-jetty": "jetty.svg",
"icon-joomla": "joomla.svg",
"icon-jruby": "jruby.svg",
"icon-js": "js.svg",
"icon-laravel": "laravel.svg",
"icon-load-balancer": "load-balancer.svg",
"icon-mariadb": "mariadb.svg",
"icon-mediawiki": "mediawiki.svg",
"icon-memcached": "memcached.svg",
"icon-mongodb": "mongodb.svg",
"icon-mysql-database": "mysql-database.svg",
"icon-nginx": "nginx.svg",
"icon-nodejs": "nodejs.svg",
"icon-openjdk": "openjdk.svg",
"icon-openshift": "openshift.svg",
"icon-openstack": "openstack.svg",
"icon-perl": "perl.svg",
"icon-phalcon": "phalcon.svg",
"icon-php": "php.svg",
"icon-play": "play.svg",
"icon-postgresql": "postgresql.svg",
"icon-processserver": "processserver.svg",
"icon-python": "python.svg",
"icon-rabbitmq": "rabbitmq.svg",
"icon-rails": "rails.svg",
"icon-redis": "redis.svg",
"icon-rh-integration": "rh-integration.svg",
"icon-rh-openjdk": "openjdk.svg",
"icon-rh-tomcat": "rh-tomcat.svg",
"icon-ruby": "ruby.svg",
"icon-scala": "scala.svg",
"icon-shadowman": "shadowman.svg",
"icon-spring": "spring.svg",
"icon-sso": "sso.svg",
"icon-stackoverflow": "stackoverflow.svg",
"icon-symfony": "symfony.svg",
"icon-tomcat": "tomcat.svg",
"icon-wildfly": "wildfly.svg",
"icon-wordpress": "wordpress.svg",
"icon-zend": "zend.svg"
<<<<<<< HEAD
<<<<<<< HEAD
},
CLUSTER_RESOURCE_OVERRIDES_EXEMPT_PROJECT_NAMES: [ "openshift", "kubernetes", "kube" ],
CLUSTER_RESOURCE_OVERRIDES_EXEMPT_PROJECT_PREFIXES: [ "openshift-", "kubernetes-", "kube-" ]
}), angular.module("i18n", [ "gettext", "angularMoment" ]).run([ "$window", "gettextCatalog", "amMoment", function(e, t, n) {
function r() {
if (4 === o.readyState) if (200 === o.status) {
var e = JSON.parse(o.response);
for (var n in e) t.setStrings(n, e[n]);
} else console.error("Problem retrieving language data");
}
t.debug = !1;
var a = e.OPENSHIFT_LANG, o = new XMLHttpRequest();
"en" !== a && (!function(e) {
null !== o ? (o.onreadystatechange = r, o.open("GET", e, !1), o.send(null)) : console.error("Your browser does not support XMLHttpRequest.");
}("languages/" + a + ".json"), t.setCurrentLanguage(a), n.changeLocale(a.toLowerCase()));
} ]), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "patternfly.notification", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "gettext", "i18n", "openshiftCommonServices", "openshiftCommonUI", "webCatalog", "gettext" ]).config([ "$routeProvider", "$uibModalProvider", "HomePagePreferenceServiceProvider", function(e, t, n) {
var r, a = {
templateUrl: "views/projects.html",
controller: "ProjectsController"
};
_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE") ? (r = a, e.when("/projects", {
redirectTo: "/"
})) : (r = {
templateUrl: "views/landing-page.html",
controller: "LandingPageController",
reloadOnSearch: !1
}, e.when("/projects", a)), e.when("/", {
redirectTo: function() {
return n.$get().getHomePagePath();
}
}).when("/catalog", r).when("/create-project", {
=======
}
=======
},
CLUSTER_RESOURCE_OVERRIDES_EXEMPT_PROJECT_NAMES: [ "openshift", "kubernetes", "kube" ],
CLUSTER_RESOURCE_OVERRIDES_EXEMPT_PROJECT_PREFIXES: [ "openshift-", "kubernetes-", "kube-" ]
<<<<<<< HEAD
>>>>>>> Use new clusterResourceOverridesEnabled flag
}), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "patternfly.notification", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "openshiftCommonServices", "openshiftCommonUI", "webCatalog" ]).config([ "$routeProvider", "HomePagePreferenceServiceProvider", function(e, t) {
var n, r = {
=======
}), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "patternfly.notification", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "openshiftCommonServices", "openshiftCommonUI", "webCatalog" ]).config([ "$routeProvider", "$uibModalProvider", "HomePagePreferenceServiceProvider", function(e, t, n) {
var r, a = {
>>>>>>> Update modals to align with PatternFly standard
templateUrl: "views/projects.html",
controller: "ProjectsController"
};
_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE") ? (r = a, e.when("/projects", {
redirectTo: "/"
})) : (r = {
templateUrl: "views/landing-page.html",
controller: "LandingPageController",
reloadOnSearch: !1
}, e.when("/projects", a)), e.when("/", {
redirectTo: function() {
return n.$get().getHomePagePath();
}
<<<<<<< HEAD
}).when("/catalog", n).when("/create-project", {
>>>>>>> Set Home Page Preference
=======
}).when("/catalog", r).when("/create-project", {
>>>>>>> Update modals to align with PatternFly standard
templateUrl: "views/create-project.html",
controller: "CreateProjectController"
}).when("/project/:project/catalog", {
templateUrl: "views/project-browse-catalog.html",
controller: "ProjectBrowseCatalogController"
<<<<<<< HEAD
=======
label: "Technologies",
items: [ {
id: "business-process-services",
categoryAliases: [ "decisionserver", "processserver" ],
label: "Business Process Services",
description: "Model, automate, and orchestrate business processes across applications, services, and data."
}, {
id: "ci-cd",
categoryAliases: [ "jenkins" ],
label: "Continuous Integration & Deployment",
description: "Automate the build, test, and deployment of your application with each new code revision."
}, {
id: "datastore",
categoryAliases: [ "database", "datagrid" ],
label: "Data Stores",
description: "Store and manage collections of data."
}, {
id: "messaging",
label: "Messaging",
description: "Facilitate communication between applications and distributed processes with a messaging server."
}, {
id: "integration",
label: "Integration",
description: "Connect with other applications and data to enhance functionality without duplication."
}, {
id: "single-sign-on",
categoryAliases: [ "sso" ],
label: "Single Sign-On",
description: "A centralized authentication server for users to log in, log out, register, and manage user accounts for applications and RESTful web services."
}, {
id: "",
label: "Uncategorized",
description: ""
} ]
} ],
<<<<<<< HEAD
SAAS_OFFERINGS: []
}), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "openshiftCommonServices", "openshiftCommonUI", "webCatalog" ]).config([ "$routeProvider", function(e) {
=======
SAAS_OFFERINGS: [],
APP_LAUNCHER_NAVIGATION: [],
QUOTA_NOTIFICATION_MESSAGE: {},
LOGO_BASE_URL: "images/logos/",
LOGOS: {
"icon-aerogear": "aerogear.svg",
"icon-angularjs": "angularjs.svg",
"icon-ansible": "ansible.svg",
"icon-apache": "apache.svg",
"icon-beaker": "beaker.svg",
"icon-capedwarf": "capedwarf.svg",
"icon-cassandra": "cassandra.svg",
"icon-clojure": "clojure.svg",
"icon-codeigniter": "codeigniter.svg",
"icon-django": "django.svg",
"icon-dotnet": "dotnet.svg",
"icon-drupal": "drupal.svg",
"icon-elastic": "elastic.svg",
"icon-erlang": "erlang.svg",
"icon-git": "git.svg",
"icon-github": "github.svg",
"icon-gitlab": "gitlab.svg",
"icon-glassfish": "glassfish.svg",
"icon-go-gopher": "go-gopher.svg",
"icon-grails": "grails.svg",
"icon-hadoop": "hadoop.svg",
"icon-haproxy": "haproxy.svg",
"icon-infinispan": "infinispan.svg",
"icon-jboss": "jboss.svg",
"icon-jenkins": "jenkins.svg",
"icon-jetty": "jetty.svg",
"icon-joomla": "joomla.svg",
"icon-jruby": "jruby.svg",
"icon-js": "js.svg",
"icon-laravel": "laravel.svg",
"icon-load-balancer": "load-balancer.svg",
"icon-mariadb": "mariadb.svg",
"icon-mediawiki": "mediawiki.svg",
"icon-memcached": "memcached.svg",
"icon-mongodb": "mongodb.svg",
"icon-mysql-database": "mysql-database.svg",
"icon-nginx": "nginx.svg",
"icon-nodejs": "nodejs.svg",
"icon-openjdk": "openjdk.svg",
"icon-openstack": "openstack.svg",
"icon-perl": "perl.svg",
"icon-phalcon": "phalcon.svg",
"icon-php": "php.svg",
"icon-play": "play.svg",
"icon-postgresql": "postgresql.svg",
"icon-python": "python.svg",
"icon-rabbitmq": "rabbitmq.svg",
"icon-rails": "rails.svg",
"icon-redis": "redis.svg",
"icon-ruby": "ruby.svg",
"icon-scala": "scala.svg",
"icon-shadowman": "shadowman.svg",
"icon-spring": "spring.svg",
"icon-stackoverflow": "stackoverflow.svg",
"icon-symfony": "symfony.svg",
"icon-tomcat": "tomcat.svg",
"icon-wildfly": "wildfly.svg",
"icon-wordpress": "wordpress.svg",
"icon-zend": "zend.svg"
}
}), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "patternfly.notification", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "openshiftCommonServices", "openshiftCommonUI", "webCatalog" ]).config([ "$routeProvider", function(e) {
>>>>>>> Add notification-drawer to show curated list of events to user
var t, n = {
templateUrl: "views/projects.html",
controller: "ProjectsController"
};
_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE") ? (t = n, e.when("/projects", {
redirectTo: "/"
})) : (t = {
templateUrl: "views/landing-page.html",
controller: "LandingPageController",
reloadOnSearch: !1
}, e.when("/projects", n)), e.when("/", t).when("/create-project", {
templateUrl: "views/create-project.html",
controller: "CreateProjectController"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Add Browse Catalog to Project context view.
}).when("/project/:project", {
redirectTo: function(e) {
return "/project/" + encodeURIComponent(e.project) + "/overview";
}
}).when("/project/:project/overview", {
templateUrl: "views/overview.html",
controller: "OverviewController",
controllerAs: "overview",
reloadOnSearch: !1
}).when("/project/:project/quota", {
templateUrl: "views/quota.html",
controller: "QuotaController"
}).when("/project/:project/monitoring", {
templateUrl: "views/monitoring.html",
controller: "MonitoringController",
reloadOnSearch: !1
}).when("/project/:project/membership", {
templateUrl: "views/membership.html",
controller: "MembershipController",
reloadOnSearch: !1
}).when("/project/:project/browse", {
redirectTo: function(e) {
return "/project/" + encodeURIComponent(e.project) + "/browse/pods";
}
}).when("/project/:project/browse/builds", {
templateUrl: "views/builds.html",
controller: "BuildsController",
reloadOnSearch: !1
}).when("/project/:project/browse/pipelines", {
templateUrl: "views/pipelines.html",
controller: "PipelinesController"
}).when("/project/:project/browse/builds/:buildconfig", {
templateUrl: "views/browse/build-config.html",
controller: "BuildConfigController",
reloadOnSearch: !1
}).when("/project/:project/browse/pipelines/:buildconfig", {
templateUrl: "views/browse/build-config.html",
controller: "BuildConfigController",
resolve: {
isPipeline: [ "$route", function(e) {
e.current.params.isPipeline = !0;
} ]
},
reloadOnSearch: !1
}).when("/project/:project/edit/yaml", {
templateUrl: "views/edit/yaml.html",
controller: "EditYAMLController"
}).when("/project/:project/edit/builds/:buildconfig", {
templateUrl: "views/edit/build-config.html",
controller: "EditBuildConfigController"
}).when("/project/:project/edit/pipelines/:buildconfig", {
templateUrl: "views/edit/build-config.html",
controller: "EditBuildConfigController",
resolve: {
isPipeline: [ "$route", function(e) {
e.current.params.isPipeline = !0;
} ]
},
reloadOnSearch: !1
}).when("/project/:project/browse/builds/:buildconfig/:build", {
templateUrl: function(e) {
return "chromeless" === e.view ? "views/logs/chromeless-build-log.html" : "views/browse/build.html";
},
controller: "BuildController",
reloadOnSearch: !1
}).when("/project/:project/browse/pipelines/:buildconfig/:build", {
templateUrl: "views/browse/build.html",
controller: "BuildController",
resolve: {
isPipeline: [ "$route", function(e) {
e.current.params.isPipeline = !0;
} ]
},
reloadOnSearch: !1
}).when("/project/:project/browse/builds-noconfig/:build", {
templateUrl: "views/browse/build.html",
controller: "BuildController",
reloadOnSearch: !1
}).when("/project/:project/browse/pipelines-noconfig/:build", {
templateUrl: "views/browse/build.html",
controller: "BuildController",
resolve: {
isPipeline: [ "$route", function(e) {
e.current.params.isPipeline = !0;
} ]
},
reloadOnSearch: !1
}).when("/project/:project/browse/deployments", {
templateUrl: "views/deployments.html",
controller: "DeploymentsController",
reloadOnSearch: !1
}).when("/project/:project/browse/deployment/:deployment", {
templateUrl: "views/browse/deployment.html",
controller: "DeploymentController",
reloadOnSearch: !1
}).when("/project/:project/browse/dc/:deploymentconfig", {
templateUrl: "views/browse/deployment-config.html",
controller: "DeploymentConfigController",
reloadOnSearch: !1
}).when("/project/:project/edit/dc/:deploymentconfig", {
templateUrl: "views/edit/deployment-config.html",
controller: "EditDeploymentConfigController"
}).when("/project/:project/browse/stateful-sets/", {
templateUrl: "views/browse/stateful-sets.html",
controller: "StatefulSetsController",
reloadOnSearch: !1
}).when("/project/:project/browse/stateful-sets/:statefulset", {
templateUrl: "views/browse/stateful-set.html",
controller: "StatefulSetController",
reloadOnSearch: !1
}).when("/project/:project/browse/rs/:replicaSet", {
templateUrl: "views/browse/replica-set.html",
resolve: {
kind: function() {
return "ReplicaSet";
}
},
controller: "ReplicaSetController",
reloadOnSearch: !1
}).when("/project/:project/browse/rc/:replicaSet", {
templateUrl: function(e) {
return "chromeless" === e.view ? "views/logs/chromeless-deployment-log.html" : "views/browse/replica-set.html";
},
resolve: {
kind: function() {
return "ReplicationController";
}
},
controller: "ReplicaSetController",
reloadOnSearch: !1
}).when("/project/:project/browse/events", {
templateUrl: "views/events.html",
controller: "EventsController"
}).when("/project/:project/browse/images", {
templateUrl: "views/images.html",
controller: "ImagesController",
reloadOnSearch: !1
}).when("/project/:project/browse/images/:imagestream", {
templateUrl: "views/browse/imagestream.html",
controller: "ImageStreamController"
}).when("/project/:project/browse/images/:imagestream/:tag", {
templateUrl: "views/browse/image.html",
controller: "ImageController",
reloadOnSearch: !1
}).when("/project/:project/browse/pods", {
templateUrl: "views/pods.html",
controller: "PodsController",
reloadOnSearch: !1
}).when("/project/:project/browse/pods/:pod", {
templateUrl: function(e) {
return "chromeless" === e.view ? "views/logs/chromeless-pod-log.html" : "views/browse/pod.html";
},
controller: "PodController",
reloadOnSearch: !1
}).when("/project/:project/browse/services", {
templateUrl: "views/services.html",
controller: "ServicesController",
reloadOnSearch: !1
}).when("/project/:project/browse/services/:service", {
templateUrl: "views/browse/service.html",
controller: "ServiceController",
reloadOnSearch: !1
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Updates for Service Instance & Bindings
}).when("/project/:project/browse/service-instances", {
templateUrl: "views/service-instances.html",
controller: "ServiceInstancesController",
reloadOnSearch: !1
}).when("/project/:project/browse/service-instances/:instance", {
templateUrl: "views/browse/service-instance.html",
controller: "ServiceInstanceController",
reloadOnSearch: !1
<<<<<<< HEAD
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Updates for Service Instance & Bindings
}).when("/project/:project/browse/storage", {
templateUrl: "views/storage.html",
controller: "StorageController",
reloadOnSearch: !1
}).when("/project/:project/browse/secrets/:secret", {
templateUrl: "views/browse/secret.html",
controller: "SecretController",
reloadOnSearch: !1
}).when("/project/:project/browse/secrets", {
templateUrl: "views/secrets.html",
controller: "SecretsController",
reloadOnSearch: !1
}).when("/project/:project/create-secret", {
templateUrl: "views/create-secret.html",
controller: "CreateSecretController"
}).when("/project/:project/browse/config-maps", {
templateUrl: "views/browse/config-maps.html",
controller: "ConfigMapsController",
reloadOnSearch: !1
}).when("/project/:project/browse/config-maps/:configMap", {
templateUrl: "views/browse/config-map.html",
controller: "ConfigMapController"
}).when("/project/:project/create-config-map", {
templateUrl: "views/create-config-map.html",
controller: "CreateConfigMapController"
}).when("/project/:project/edit/config-maps/:configMap", {
templateUrl: "views/edit/config-map.html",
controller: "EditConfigMapController"
}).when("/project/:project/browse/other", {
templateUrl: "views/other-resources.html",
controller: "OtherResourcesController",
reloadOnSearch: !1
}).when("/project/:project/browse/persistentvolumeclaims/:pvc", {
templateUrl: "views/browse/persistent-volume-claim.html",
controller: "PersistentVolumeClaimController"
}).when("/project/:project/browse/routes", {
templateUrl: "views/browse/routes.html",
controller: "RoutesController",
reloadOnSearch: !1
}).when("/project/:project/edit/routes/:route", {
templateUrl: "views/edit/route.html",
controller: "EditRouteController"
}).when("/project/:project/browse/routes/:route", {
templateUrl: "views/browse/route.html",
controller: "RouteController"
}).when("/project/:project/create-route", {
templateUrl: "views/create-route.html",
controller: "CreateRouteController"
}).when("/project/:project/edit", {
templateUrl: "views/edit/project.html",
controller: "EditProjectController"
}).when("/project/:project/create-pvc", {
templateUrl: "views/create-persistent-volume-claim.html",
controller: "CreatePersistentVolumeClaimController"
}).when("/project/:project/attach-pvc", {
templateUrl: "views/attach-pvc.html",
controller: "AttachPVCController"
}).when("/project/:project/add-config-volume", {
templateUrl: "views/add-config-volume.html",
controller: "AddConfigVolumeController"
}).when("/project/:project/create", {
templateUrl: "views/create.html",
controller: "CreateController",
reloadOnSearch: !1
}).when("/project/:project/create/category/:category", {
templateUrl: "views/create/category.html",
controller: "BrowseCategoryController"
}).when("/project/:project/create/category/:category/:subcategory", {
templateUrl: "views/create/category.html",
controller: "BrowseCategoryController"
}).when("/project/:project/create/fromtemplate", {
templateUrl: "views/newfromtemplate.html",
controller: "NewFromTemplateController"
}).when("/project/:project/create/fromimage", {
templateUrl: "views/create/fromimage.html",
controller: "CreateFromImageController"
}).when("/project/:project/create/next", {
templateUrl: "views/create/next-steps.html",
controller: "NextStepsController"
}).when("/project/:project/set-limits", {
templateUrl: "views/set-limits.html",
controller: "SetLimitsController"
}).when("/project/:project/edit/autoscaler", {
templateUrl: "views/edit/autoscaler.html",
controller: "EditAutoscalerController"
}).when("/project/:project/edit/health-checks", {
templateUrl: "views/edit/health-checks.html",
controller: "EditHealthChecksController"
}).when("/about", {
templateUrl: "views/about.html",
controller: "AboutController"
}).when("/command-line", {
templateUrl: "views/command-line.html",
controller: "CommandLineController"
}).when("/oauth", {
templateUrl: "views/util/oauth.html",
controller: "OAuthController"
}).when("/error", {
templateUrl: "views/util/error.html",
controller: "ErrorController"
}).when("/logout", {
templateUrl: "views/util/logout.html",
controller: "LogoutController"
}).when("/create", {
templateUrl: "views/create-from-url.html",
controller: "CreateFromURLController"
}).when("/createProject", {
redirectTo: "/create-project"
}).when("/project/:project/createRoute", {
redirectTo: "/project/:project/create-route"
}).when("/project/:project/attachPVC", {
redirectTo: "/project/:project/attach-pvc"
}).when("/project/:project/browse/deployments/:deploymentconfig", {
redirectTo: "/project/:project/browse/dc/:deploymentconfig"
}).when("/project/:project/browse/deployments/:deploymentconfig/:rc", {
redirectTo: "/project/:project/browse/rc/:rc"
}).when("/project/:project/browse/deployments-replicationcontrollers/:rc", {
redirectTo: "/project/:project/browse/rc/:rc"
}).otherwise({
redirectTo: "/"
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update modals to align with PatternFly standard
}), t.options = {
animation: !0,
backdrop: "static"
};
<<<<<<< HEAD
} ]).constant("LOGGING_URL", _.get(window.OPENSHIFT_CONFIG, "loggingURL")).constant("METRICS_URL", _.get(window.OPENSHIFT_CONFIG, "metricsURL")).constant("SOURCE_URL_PATTERN", /^[a-z][a-z0-9+.-@]*:(\/\/)?[0-9a-z_-]+/i).constant("RELATIVE_PATH_PATTERN", /^(?!\/)(?!\.\.(\/|$))(?!.*\/\.\.(\/|$)).*$/).constant("IS_SAFARI", /Version\/[\d\.]+.*Safari/.test(navigator.userAgent)).constant("amTimeAgoConfig", {
=======
});
<<<<<<< HEAD
} ]).constant("LOGGING_URL", _.get(window.OPENSHIFT_CONFIG, "loggingURL")).constant("METRICS_URL", _.get(window.OPENSHIFT_CONFIG, "metricsURL")).constant("LIMIT_REQUEST_OVERRIDES", _.get(window.OPENSHIFT_CONFIG, "limitRequestOverrides")).constant("SOURCE_URL_PATTERN", /^[a-z][a-z0-9+.-@]*:(\/\/)?[0-9a-z_-]+/i).constant("RELATIVE_PATH_PATTERN", /^(?!\/)(?!\.\.(\/|$))(?!.*\/\.\.(\/|$)).*$/).constant("IS_SAFARI", /Version\/[\d\.]+.*Safari/.test(navigator.userAgent)).constant("amTimeAgoConfig", {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
>>>>>>> Update modals to align with PatternFly standard
} ]).constant("LOGGING_URL", _.get(window.OPENSHIFT_CONFIG, "loggingURL")).constant("METRICS_URL", _.get(window.OPENSHIFT_CONFIG, "metricsURL")).constant("SOURCE_URL_PATTERN", /^[a-z][a-z0-9+.-@]*:(\/\/)?[0-9a-z_-]+/i).constant("RELATIVE_PATH_PATTERN", /^(?!\/)(?!\.\.(\/|$))(?!.*\/\.\.(\/|$)).*$/).constant("IS_SAFARI", /Version\/[\d\.]+.*Safari/.test(navigator.userAgent)).constant("amTimeAgoConfig", {
>>>>>>> Use new clusterResourceOverridesEnabled flag
titleFormat: "LLL"
}).config([ "kubernetesContainerSocketProvider", function(e) {
e.WebSocketFactory = "ContainerWebSocket";
} ]).config([ "$compileProvider", function(e) {
e.aHrefSanitizationWhitelist(/^\s*(https?|mailto|git):/i);
} ]).run([ "$rootScope", "LabelFilter", function(e, t) {
t.persistFilterState(!0), e.$on("$routeChangeSuccess", function() {
t.readPersistedState();
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]).run([ "$location", "$uibModal", "AuthService", function(e, t, n) {
function r() {
if (c) return !1;
c = !0, (i = t.open({
templateUrl: "views/modals/logout.html",
controller: "LogoutModalController",
backdrop: !0
=======
} ]).run([ "$location", "$uibModal", "AuthService", "Constants", function(e, t, n, r) {
function a() {
=======
} ]).run([ "$location", "$uibModal", "AuthService", function(e, t, n) {
function r() {
>>>>>>> Switch inactivity timeout to use new config value
if (c) return !1;
c = !0, (i = t.open({
templateUrl: "views/modals/logout.html",
<<<<<<< HEAD
controller: "LogoutModalController"
>>>>>>> Configurable inactivity timeout in console
=======
controller: "LogoutModalController",
backdrop: !0
>>>>>>> Update modals to align with PatternFly standard
})).result.then(function(e) {
"logout" === e ? (m(!0), p()) : "cancel" === e && (d(), c = !1);
}, function() {
d(), c = !1;
});
}
<<<<<<< HEAD
<<<<<<< HEAD
var a = window.OPENSHIFT_CONFIG.inactivityTimeoutMinutes;
if (a) {
=======
if (!(r.INACTIVITY_TIMEOUT_PERIOD <= 0)) {
>>>>>>> Configurable inactivity timeout in console
=======
var a = window.OPENSHIFT_CONFIG.inactivityTimeoutMinutes;
if (a) {
>>>>>>> Switch inactivity timeout to use new config value
var o, i, s = "origin-web-console-last-interaction-timestamp", c = !1, l = function() {
o = setInterval(function() {
if (n.isLoggedIn()) {
var e = Date.parse(localStorage.getItem(s));
<<<<<<< HEAD
<<<<<<< HEAD
isNaN(e) && (Logger.warn("Last interaction timestamp has been corrupted. The logout timeout will be restarted."), e = new Date()), new Date() - e > 6e4 * a && r();
=======
isNaN(e) && (Logger.warn("Last interaction timestamp has been corrupted. The logout timeout will be restarted."), e = new Date()), new Date() - e > 6e4 * r.INACTIVITY_TIMEOUT_PERIOD && a();
>>>>>>> Configurable inactivity timeout in console
=======
isNaN(e) && (Logger.warn("Last interaction timestamp has been corrupted. The logout timeout will be restarted."), e = new Date()), new Date() - e > 6e4 * a && r();
>>>>>>> Switch inactivity timeout to use new config value
}
}, 6e4);
}, u = function() {
i && (i.dismiss("User activity"), i = null), clearInterval(o), l();
}, d = function() {
u(), localStorage.setItem(s, new Date().toString());
}, m = function(e) {
localStorage.setItem("origin-web-console-inactivity-logout", e.toString());
}, p = function() {
var t = URI.expand("/logout{?cause*}", {
cause: "timeout"
});
e.url(t.toString());
};
$(window).on("storage", function(e) {
e.originalEvent.key === s ? u() : "origin-web-console-inactivity-logout" === e.originalEvent.key && p();
}), n.onUserChanged(function() {
m(!1);
}), d(), $(document).bind("click keydown", _.throttle(d, 500));
}
} ]).run([ "durationFilter", "timeOnlyDurationFromTimestampsFilter", "countdownToTimestampFilter", function(e, t, n) {
<<<<<<< HEAD
setInterval(function() {
$(".duration[data-timestamp]").text(function(n, r) {
var a = $(this).data("timestamp"), o = $(this).data("omit-single"), i = $(this).data("precision");
return $(this).data("time-only") ? t(a, null) || r : e(a, null, o, i) || r;
}), $(".countdown[data-timestamp]").text(function(e, t) {
var r = $(this).data("timestamp");
return n(r);
=======
} ]).run([ "durationFilter", "timeOnlyDurationFromTimestampsFilter", function(e, t) {
=======
>>>>>>> Configurable inactivity timeout in console
setInterval(function() {
<<<<<<< HEAD
$(".duration[data-timestamp]").text(function(n, a) {
var r = $(this).data("timestamp"), o = $(this).data("omit-single"), i = $(this).data("precision");
return $(this).data("time-only") ? t(r, null) || a : e(r, null, o, i) || a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
$(".duration[data-timestamp]").text(function(n, r) {
var a = $(this).data("timestamp"), o = $(this).data("omit-single"), i = $(this).data("precision");
return $(this).data("time-only") ? t(a, null) || r : e(a, null, o, i) || r;
<<<<<<< HEAD
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}), $(".countdown[data-timestamp]").text(function(e, t) {
var r = $(this).data("timestamp");
return n(r);
>>>>>>> Configurable inactivity timeout in console
});
}, 1e3);
} ]).run([ "IS_IOS", function(e) {
e && $("body").addClass("ios");
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Enable new landing page experience by default
} ]), hawtioPluginLoader.addModule("openshiftConsole"), angular.module("openshiftConsole").factory("BrowserStore", [ function() {
var e = {
local: window.localStorage,
session: window.sessionStorage
};
return {
saveJSON: function(t, n, r) {
return e[t].setItem("openshift/" + n, JSON.stringify(r));
},
loadJSON: function(t, n) {
return JSON.parse(e[t].getItem("openshift/" + n) || "{}");
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("APIDiscovery", [ "LOGGING_URL", "METRICS_URL", "$q", "$filter", function(e, t, n, r) {
return {
getLoggingURL: function(t) {
var a = e, o = r("annotation")(t, "loggingUIHostname");
return o && (a = "https://" + o), n.when(a);
=======
} ]).run([ "$rootScope", function(e) {
_.get(window, "OPENSHIFT_CONSTANTS.ENABLE_TECH_PREVIEW_FEATURE.service_catalog_landing_page") && (e.globalTechPreviewIndicator = !0, $("body").addClass("tech-preview"));
} ]), hawtioPluginLoader.addModule("openshiftConsole"), angular.module("openshiftConsole").factory("BrowserStore", [ function() {
var e = {
local: window.localStorage,
session: window.sessionStorage
};
return {
saveJSON: function(t, n, r) {
return e[t].setItem("openshift/" + n, JSON.stringify(r));
},
loadJSON: function(t, n) {
return JSON.parse(e[t].getItem("openshift/" + n) || "{}");
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("APIDiscovery", [ "LOGGING_URL", "METRICS_URL", "$q", function(e, t, n) {
return {
getLoggingURL: function() {
return n.when(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").factory("APIDiscovery", [ "LOGGING_URL", "METRICS_URL", "$q", "$filter", function(e, t, n, a) {
return {
getLoggingURL: function(t) {
var r = e, o = a("annotation")(t, "loggingUIHostname");
return o && (r = "https://" + o), n.when(r);
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
} ]), angular.module("openshiftConsole").factory("APIDiscovery", [ "LOGGING_URL", "METRICS_URL", "$q", "$filter", function(e, t, n, r) {
return {
getLoggingURL: function(t) {
var a = e, o = r("annotation")(t, "loggingUIHostname");
return o && (a = "https://" + o), n.when(a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
getMetricsURL: function() {
return n.when(t);
}
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").service("ApplicationGenerator", [ "DataService", "APIService", "Logger", "$parse", "$q", function(e, t, n, r, a) {
=======
} ]), angular.module("openshiftConsole").service("ApplicationGenerator", [ "DataService", "APIService", "Logger", "$parse", "$q", function(e, t, n, a, r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").service("ApplicationGenerator", [ "DataService", "APIService", "Logger", "$parse", "$q", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = {}, i = function(e) {
return _.isArray(e) ? e : _.map(e, function(e, t) {
return {
name: t,
value: e
};
});
};
return o._generateSecret = function() {
function e() {
return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
}
return e() + e() + e() + e();
}, o.parsePorts = function(e) {
return function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
var a = [];
=======
var r = [];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var a = [];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return angular.forEach(t, function(t, o) {
var i = o.split("/");
1 === i.length && i.push("tcp");
var s = parseInt(i[0], 10);
<<<<<<< HEAD
<<<<<<< HEAD
isNaN(s) ? n.warn("Container port " + i[0] + " is not a number for image " + r("metadata.name")(e)) : a.push({
containerPort: s,
protocol: i[1].toUpperCase()
});
}), a.sort(function(e, t) {
return e.containerPort - t.containerPort;
}), a;
}(r("dockerImageMetadata.Config.ExposedPorts")(e) || r("dockerImageMetadata.ContainerConfig.ExposedPorts")(e) || []);
=======
isNaN(s) ? n.warn("Container port " + i[0] + " is not a number for image " + a("metadata.name")(e)) : r.push({
=======
isNaN(s) ? n.warn("Container port " + i[0] + " is not a number for image " + r("metadata.name")(e)) : a.push({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
containerPort: s,
protocol: i[1].toUpperCase()
});
}), a.sort(function(e, t) {
return e.containerPort - t.containerPort;
<<<<<<< HEAD
}), r;
}(a("dockerImageMetadata.Config.ExposedPorts")(e) || a("dockerImageMetadata.ContainerConfig.ExposedPorts")(e) || []);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), a;
}(r("dockerImageMetadata.Config.ExposedPorts")(e) || r("dockerImageMetadata.ContainerConfig.ExposedPorts")(e) || []);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, o.generate = function(e) {
var t = o.parsePorts(e.image);
e.annotations["openshift.io/generated-by"] = "OpenShiftWebConsole";
var n;
null !== e.buildConfig.sourceUrl && (n = {
name: e.name,
tag: "latest",
kind: "ImageStreamTag",
toString: function() {
return this.name + ":" + this.tag;
}
});
<<<<<<< HEAD
<<<<<<< HEAD
var r = {
=======
var a = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
imageStream: o._generateImageStream(e),
buildConfig: o._generateBuildConfig(e, n, e.labels),
deploymentConfig: o._generateDeploymentConfig(e, n, t, e.labels)
};
<<<<<<< HEAD
<<<<<<< HEAD
e.scaling.autoscale && (r.hpa = o._generateHPA(e, r.deploymentConfig));
var a = o._generateService(e, e.name, t);
return a && (r.service = a, r.route = o._generateRoute(e, e.name, r.service.metadata.name)), r;
=======
e.scaling.autoscale && (a.hpa = o._generateHPA(e, a.deploymentConfig));
var r = o._generateService(e, e.name, t);
return r && (a.service = r, a.route = o._generateRoute(e, e.name, a.service.metadata.name)), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.scaling.autoscale && (r.hpa = o._generateHPA(e, r.deploymentConfig));
var a = o._generateService(e, e.name, t);
return a && (r.service = a, r.route = o._generateRoute(e, e.name, r.service.metadata.name)), r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, o.createRoute = function(e, t, n) {
return o._generateRoute({
labels: n || {},
routing: angular.extend({
include: !0
}, e)
}, e.name, t);
}, o._generateRoute = function(e, t, n) {
if (!e.routing.include) return null;
<<<<<<< HEAD
<<<<<<< HEAD
var r = {
=======
var a = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
kind: "Route",
apiVersion: "v1",
metadata: {
name: t,
labels: e.labels,
annotations: e.annotations
},
spec: {
to: {
kind: "Service",
name: n
},
wildcardPolicy: "None"
}
<<<<<<< HEAD
<<<<<<< HEAD
}, a = e.routing.host;
a && (a.startsWith("*.") ? (r.spec.wildcardPolicy = "Subdomain", r.spec.host = "wildcard" + a.substring(1)) : r.spec.host = a), e.routing.path && (r.spec.path = e.routing.path), e.routing.targetPort && (r.spec.port = {
targetPort: e.routing.targetPort
});
var o = e.routing.tls;
return o && o.termination && (r.spec.tls = {
termination: o.termination
}, o.insecureEdgeTerminationPolicy && (r.spec.tls.insecureEdgeTerminationPolicy = o.insecureEdgeTerminationPolicy), "passthrough" !== o.termination && (o.certificate && (r.spec.tls.certificate = o.certificate), o.key && (r.spec.tls.key = o.key), o.caCertificate && (r.spec.tls.caCertificate = o.caCertificate), o.destinationCACertificate && "reencrypt" === o.termination && (r.spec.tls.destinationCACertificate = o.destinationCACertificate))), r;
}, o._generateDeploymentConfig = function(e, t, n) {
var r = i(e.deploymentConfig.envVars), a = angular.copy(e.labels);
a.deploymentconfig = e.name;
=======
}, r = e.routing.host;
r && (r.startsWith("*.") ? (a.spec.wildcardPolicy = "Subdomain", a.spec.host = "wildcard" + r.substring(1)) : a.spec.host = r), e.routing.path && (a.spec.path = e.routing.path), e.routing.targetPort && (a.spec.port = {
=======
}, a = e.routing.host;
a && (a.startsWith("*.") ? (r.spec.wildcardPolicy = "Subdomain", r.spec.host = "wildcard" + a.substring(1)) : r.spec.host = a), e.routing.path && (r.spec.path = e.routing.path), e.routing.targetPort && (r.spec.port = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
targetPort: e.routing.targetPort
});
var o = e.routing.tls;
return o && o.termination && (r.spec.tls = {
termination: o.termination
}, o.insecureEdgeTerminationPolicy && (r.spec.tls.insecureEdgeTerminationPolicy = o.insecureEdgeTerminationPolicy), "passthrough" !== o.termination && (o.certificate && (r.spec.tls.certificate = o.certificate), o.key && (r.spec.tls.key = o.key), o.caCertificate && (r.spec.tls.caCertificate = o.caCertificate), o.destinationCACertificate && "reencrypt" === o.termination && (r.spec.tls.destinationCACertificate = o.destinationCACertificate))), r;
}, o._generateDeploymentConfig = function(e, t, n) {
<<<<<<< HEAD
var a = i(e.deploymentConfig.envVars), r = angular.copy(e.labels);
r.deploymentconfig = e.name;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = i(e.deploymentConfig.envVars), a = angular.copy(e.labels);
a.deploymentconfig = e.name;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o, s = {
image: t.toString(),
name: e.name,
ports: n,
<<<<<<< HEAD
<<<<<<< HEAD
env: r,
=======
env: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
env: r,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
resources: _.get(e, "container.resources")
};
o = e.scaling.autoscaling ? e.scaling.minReplicas || 1 : e.scaling.replicas;
var c = {
apiVersion: "v1",
kind: "DeploymentConfig",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
},
spec: {
replicas: o,
selector: {
deploymentconfig: e.name
},
triggers: [],
template: {
metadata: {
<<<<<<< HEAD
<<<<<<< HEAD
labels: a
=======
labels: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
labels: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
spec: {
containers: [ s ]
}
}
}
};
return c.spec.triggers.push({
type: "ImageChange",
imageChangeParams: {
automatic: !!e.deploymentConfig.deployOnNewImage,
containerNames: [ e.name ],
from: {
kind: t.kind,
name: t.toString()
<<<<<<< HEAD
}
}
}), e.deploymentConfig.deployOnConfigChange && c.spec.triggers.push({
type: "ConfigChange"
}), c;
}, o._generateHPA = function(e, t) {
return {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
},
spec: {
scaleTargetRef: {
kind: "DeploymentConfig",
name: t.metadata.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: e.scaling.minReplicas,
maxReplicas: e.scaling.maxReplicas,
targetCPUUtilizationPercentage: e.scaling.targetCPU
}
};
}, o._generateBuildConfig = function(e, t) {
var n = i(e.buildConfig.envVars), r = [ {
generic: {
secret: o._generateSecret()
},
type: "Generic"
} ];
e.buildConfig.buildOnSourceChange && r.push({
github: {
secret: o._generateSecret()
},
type: "GitHub"
}), e.buildConfig.buildOnImageChange && r.push({
imageChange: {},
type: "ImageChange"
}), e.buildConfig.buildOnConfigChange && r.push({
type: "ConfigChange"
});
var a = new URI(e.buildConfig.sourceUrl), s = a.fragment();
s || (s = "master"), a.fragment("");
var c = a.href(), l = {
apiVersion: "v1",
kind: "BuildConfig",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
},
spec: {
output: {
to: {
name: t.toString(),
kind: t.kind
}
},
source: {
git: {
ref: e.buildConfig.gitRef || s,
uri: c
},
type: "Git"
},
strategy: {
type: "Source",
sourceStrategy: {
from: {
kind: "ImageStreamTag",
name: e.imageName + ":" + e.imageTag
},
env: n
}
},
triggers: r
}
};
return e.namespace && (l.spec.strategy.namespace = e.namespace), _.get(e, "buildConfig.secrets.gitSecret[0].name") && (l.spec.source.sourceSecret = _.head(e.buildConfig.secrets.gitSecret)), e.buildConfig.contextDir && (l.spec.source.contextDir = e.buildConfig.contextDir), l;
}, o._generateImageStream = function(e) {
return {
apiVersion: "v1",
kind: "ImageStream",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
}
};
}, o.getServicePort = function(e) {
return {
=======
}
}
}), e.deploymentConfig.deployOnConfigChange && c.spec.triggers.push({
type: "ConfigChange"
}), c;
}, o._generateHPA = function(e, t) {
return {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
},
spec: {
scaleTargetRef: {
kind: "DeploymentConfig",
name: t.metadata.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: e.scaling.minReplicas,
maxReplicas: e.scaling.maxReplicas,
targetCPUUtilizationPercentage: e.scaling.targetCPU || e.scaling.defaultTargetCPU || null
}
<<<<<<< HEAD
};
}, o._generateBuildConfig = function(e, t) {
var n = i(e.buildConfig.envVars), a = [ {
generic: {
secret: o._generateSecret()
},
type: "Generic"
} ];
e.buildConfig.buildOnSourceChange && a.push({
github: {
secret: o._generateSecret()
},
type: "GitHub"
}), e.buildConfig.buildOnImageChange && a.push({
imageChange: {},
type: "ImageChange"
}), e.buildConfig.buildOnConfigChange && a.push({
type: "ConfigChange"
});
var r = new URI(e.buildConfig.sourceUrl), s = r.fragment();
s || (s = "master"), r.fragment("");
var c = r.href(), l = {
apiVersion: "v1",
kind: "BuildConfig",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
},
spec: {
output: {
to: {
name: t.toString(),
kind: t.kind
}
},
source: {
git: {
ref: e.buildConfig.gitRef || s,
uri: c
},
type: "Git"
},
strategy: {
type: "Source",
sourceStrategy: {
from: {
kind: "ImageStreamTag",
name: e.imageName + ":" + e.imageTag
},
env: n
}
},
triggers: a
}
};
return e.namespace && (l.spec.strategy.namespace = e.namespace), _.get(e, "buildConfig.secrets.gitSecret[0].name") && (l.spec.source.sourceSecret = _.head(e.buildConfig.secrets.gitSecret)), e.buildConfig.contextDir && (l.spec.source.contextDir = e.buildConfig.contextDir), l;
}, o._generateImageStream = function(e) {
return {
apiVersion: "v1",
kind: "ImageStream",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
}
};
}, o.getServicePort = function(e) {
return {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
port: e.containerPort,
targetPort: e.containerPort,
protocol: e.protocol,
name: (e.containerPort + "-" + e.protocol).toLowerCase()
};
}, o._generateService = function(e, t, n) {
return n && n.length ? {
kind: "Service",
apiVersion: "v1",
metadata: {
name: t,
labels: e.labels,
annotations: e.annotations
},
spec: {
selector: {
deploymentconfig: e.name
},
ports: _.map(n, o.getServicePort)
}
} : null;
<<<<<<< HEAD
}, o.ifResourcesDontExist = function(n, r) {
=======
}, o.ifResourcesDontExist = function(n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} : null;
}, o.ifResourcesDontExist = function(n, r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function o() {
0 === l && (s.length > 0 ? i.reject({
nameTaken: !0
}) : i.resolve({
nameTaken: !1
}));
}
<<<<<<< HEAD
<<<<<<< HEAD
var i = a.defer(), s = [], c = [], l = n.length;
return n.forEach(function(n) {
var a = t.objectToResourceGroupVersion(n);
return a ? t.apiInfo(a) ? void e.get(a, n.metadata.name, {
namespace: r
=======
var i = r.defer(), s = [], c = [], l = n.length;
return n.forEach(function(n) {
var r = t.objectToResourceGroupVersion(n);
return r ? t.apiInfo(r) ? void e.get(r, n.metadata.name, {
namespace: a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var i = a.defer(), s = [], c = [], l = n.length;
return n.forEach(function(n) {
var a = t.objectToResourceGroupVersion(n);
return a ? t.apiInfo(a) ? void e.get(a, n.metadata.name, {
namespace: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, {
errorNotification: !1
}).then(function(e) {
s.push(e), l--, o();
}, function(e) {
c.push(e), l--, o();
}) : (c.push({
data: {
message: t.unsupportedObjectKindOrVersion(n)
}
}), l--, void o()) : (c.push({
data: {
message: t.invalidObjectKindOrVersion(n)
}
}), l--, void o());
}), i.promise;
}, o;
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").service("Navigate", [ "$location", "$window", "$timeout", "annotationFilter", "LabelFilter", "$filter", "APIService", function(e, t, n, r, a, o, i) {
=======
} ]), angular.module("openshiftConsole").service("Navigate", [ "$location", "$window", "$timeout", "annotationFilter", "LabelFilter", "$filter", "APIService", function(e, t, n, a, r, o, i) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").service("Navigate", [ "$location", "$window", "$timeout", "annotationFilter", "LabelFilter", "$filter", "APIService", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var s = o("annotation"), c = o("buildConfigForBuild"), l = o("isJenkinsPipelineStrategy"), u = o("displayName"), d = function(e, t) {
return _.get(t, "isPipeline") ? "pipelines" : _.isObject(e) && l(e) ? "pipelines" : "builds";
};
return {
<<<<<<< HEAD
<<<<<<< HEAD
toErrorPage: function(n, r, a) {
var o = URI("error").query({
error_description: n,
error: r
}).toString();
a ? t.location.href = o : e.url(o).replace();
=======
toErrorPage: function(n, a, r) {
=======
toErrorPage: function(n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = URI("error").query({
error_description: n,
error: r
}).toString();
<<<<<<< HEAD
r ? t.location.href = o : e.url(o).replace();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a ? t.location.href = o : e.url(o).replace();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
toProjectOverview: function(t) {
e.path(this.projectOverviewURL(t));
},
projectOverviewURL: function(e) {
return "project/" + encodeURIComponent(e) + "/overview";
},
toProjectList: function() {
e.path("projects");
},
membershipURL: function(e) {
return "project/" + encodeURIComponent(e) + "/membership";
},
toProjectMembership: function(t) {
e.path(this.membershipURL(t));
},
<<<<<<< HEAD
<<<<<<< HEAD
catalogURL: function(e) {
var t = angular.isString(e) ? e : _.get(e, "metadata.name");
return t ? "project/" + encodeURIComponent(t) + "/catalog" : "catalog";
=======
catalogURL: function(e) {
var t = angular.isString(e) ? e : _.get(e, "metadata.name");
<<<<<<< HEAD
return t ? "project/" + encodeURIComponent(t) + "/catalog" : "./";
>>>>>>> Add Browse Catalog to Project context view.
=======
return t ? "project/" + encodeURIComponent(t) + "/catalog" : "catalog";
>>>>>>> Set Home Page Preference
},
toProjectCatalog: function(t, n) {
var r = e.path(this.catalogURL(t));
n && r.search(n);
},
<<<<<<< HEAD
quotaURL: function(e) {
return "project/" + encodeURIComponent(e) + "/quota";
},
createFromImageURL: function(e, t, n, r) {
return URI.expand("project/{project}/create/fromimage{?q*}", {
project: n,
q: angular.extend({
imageStream: e.metadata.name,
imageTag: t,
namespace: e.metadata.namespace,
displayName: u(e)
}, r || {})
}).toString();
},
createFromTemplateURL: function(e, t, n) {
return URI.expand("project/{project}/create/fromtemplate{?q*}", {
project: t,
q: angular.extend({
template: e.metadata.name,
namespace: e.metadata.namespace
}, n || {})
}).toString();
},
toNextSteps: function(t, n, r) {
var a = {
name: t
};
_.isObject(r) && _.extend(a, r), e.path("project/" + encodeURIComponent(n) + "/create/next").search(a);
},
toPodsForDeployment: function(t, r) {
1 !== _.size(r) ? (e.url("/project/" + t.metadata.namespace + "/browse/pods"), n(function() {
a.setLabelSelector(new LabelSelector(t.spec.selector, !0));
}, 1)) : this.toResourceURL(_.sample(r));
},
resourceURL: function(e, t, n, r, a) {
if (r = r || "browse", !(e && (e.metadata || t && n))) return null;
t || (t = e.kind), n || (n = e.metadata.namespace);
var s = e;
e.metadata && (s = e.metadata.name);
var c = URI("").segment("project").segmentCoded(n).segment(r);
switch (t) {
case "Build":
var l = o("buildConfigForBuild")(e), u = d(e, a);
=======
=======
>>>>>>> Add Browse Catalog to Project context view.
quotaURL: function(e) {
return "project/" + encodeURIComponent(e) + "/quota";
},
createFromImageURL: function(e, t, n, r) {
return URI.expand("project/{project}/create/fromimage{?q*}", {
project: n,
q: angular.extend({
imageStream: e.metadata.name,
imageTag: t,
namespace: e.metadata.namespace,
displayName: u(e)
}, r || {})
}).toString();
},
createFromTemplateURL: function(e, t, n) {
return URI.expand("project/{project}/create/fromtemplate{?q*}", {
project: t,
q: angular.extend({
template: e.metadata.name,
namespace: e.metadata.namespace
}, n || {})
}).toString();
},
toNextSteps: function(t, n, r) {
var a = {
name: t
};
_.isObject(r) && _.extend(a, r), e.path("project/" + encodeURIComponent(n) + "/create/next").search(a);
},
toPodsForDeployment: function(t, r) {
1 !== _.size(r) ? (e.url("/project/" + t.metadata.namespace + "/browse/pods"), n(function() {
a.setLabelSelector(new LabelSelector(t.spec.selector, !0));
}, 1)) : this.toResourceURL(_.sample(r));
},
resourceURL: function(e, t, n, r, a) {
if (r = r || "browse", !(e && (e.metadata || t && n))) return null;
t || (t = e.kind), n || (n = e.metadata.namespace);
var s = e;
e.metadata && (s = e.metadata.name);
var c = URI("").segment("project").segmentCoded(n).segment(r);
switch (t) {
case "Build":
<<<<<<< HEAD
var l = o("buildConfigForBuild")(e), u = d(e, r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var l = o("buildConfigForBuild")(e), u = d(e, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
l ? c.segment(u).segmentCoded(l).segmentCoded(s) : c.segment(u + "-noconfig").segmentCoded(s);
break;

case "BuildConfig":
<<<<<<< HEAD
<<<<<<< HEAD
c.segment(d(e, a)).segmentCoded(s);
=======
c.segment(d(e, r)).segmentCoded(s);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
c.segment(d(e, a)).segmentCoded(s);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
break;

case "ConfigMap":
c.segment("config-maps").segmentCoded(s);
break;

case "Deployment":
c.segment("deployment").segmentCoded(s);
break;

case "DeploymentConfig":
c.segment("dc").segmentCoded(s);
break;

case "ReplicaSet":
c.segment("rs").segmentCoded(s);
break;

case "ReplicationController":
c.segment("rc").segmentCoded(s);
break;

case "ImageStream":
c.segment("images").segmentCoded(s);
break;

case "ImageStreamTag":
<<<<<<< HEAD
<<<<<<< HEAD
var m = s.indexOf(":");
c.segment("images").segmentCoded(s.substring(0, m)).segmentCoded(s.substring(m + 1));
<<<<<<< HEAD
=======
var p = s.indexOf(":");
c.segment("images").segmentCoded(s.substring(0, p)).segmentCoded(s.substring(p + 1));
>>>>>>> Updates for Service Instance & Bindings
=======
var m = s.indexOf(":");
c.segment("images").segmentCoded(s.substring(0, m)).segmentCoded(s.substring(m + 1));
>>>>>>> Support EnvFrom in the Env Editors
break;

case "ServiceInstance":
c.segment("service-instances").segmentCoded(s);
<<<<<<< HEAD
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Updates for Service Instance & Bindings
break;

case "StatefulSet":
c.segment("stateful-sets").segmentCoded(s);
break;

case "PersistentVolumeClaim":
case "Pod":
case "Route":
case "Secret":
case "Service":
c.segment(i.kindToResource(t)).segmentCoded(s);
break;

default:
<<<<<<< HEAD
<<<<<<< HEAD
var p;
<<<<<<< HEAD
<<<<<<< HEAD
if (e.metadata) p = i.objectToResourceGroupVersion(e); else if (_.get(a, "apiVersion")) {
var g = i.kindToResource(t), f = i.parseGroupVersion(a.apiVersion);
=======
if (e.metadata) p = i.objectToResourceGroupVersion(e); else if (_.get(r, "apiVersion")) {
<<<<<<< HEAD
var g = i.kindToResource(t), f = i.parseGroupVersion(r.apiVersion);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
f.resource = g, p = i.toResourceGroupVersion(f);
=======
var f = i.kindToResource(t), g = i.parseGroupVersion(r.apiVersion);
=======
if (e.metadata) p = i.objectToResourceGroupVersion(e); else if (_.get(a, "apiVersion")) {
var f = i.kindToResource(t), g = i.parseGroupVersion(a.apiVersion);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
g.resource = f, p = i.toResourceGroupVersion(g);
>>>>>>> Patternfly vertical navigation and project bar
} else p = i.toResourceGroupVersion(i.kindToResource(t));
if (!i.apiInfo(p)) return null;
=======
var m;
if (e.metadata) m = i.objectToResourceGroupVersion(e); else if (_.get(r, "apiVersion")) {
var f = i.kindToResource(t), g = i.parseGroupVersion(r.apiVersion);
g.resource = f, m = i.toResourceGroupVersion(g);
} else m = i.toResourceGroupVersion(i.kindToResource(t));
if (!i.apiInfo(m)) return null;
>>>>>>> Updates for Service Instance & Bindings
=======
var p;
if (e.metadata) p = i.objectToResourceGroupVersion(e); else if (_.get(r, "apiVersion")) {
var f = i.kindToResource(t), g = i.parseGroupVersion(r.apiVersion);
g.resource = f, p = i.toResourceGroupVersion(g);
} else p = i.toResourceGroupVersion(i.kindToResource(t));
if (!i.apiInfo(p)) return null;
>>>>>>> Support EnvFrom in the Env Editors
c.segment("other").search({
kind: t,
group: p.group
});
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return _.get(a, "tab") && c.setSearch("tab", a.tab), c.toString();
=======
return c.toString();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return _.get(r, "tab") && c.setSearch("tab", r.tab), c.toString();
>>>>>>> Init Container Display & Link
=======
return _.get(a, "tab") && c.setSearch("tab", a.tab), c.toString();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
toResourceURL: function(t) {
e.url(this.resourceURL(t));
},
configURLForResource: function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
var n, r, a = _.get(e, "kind"), o = _.get(e, "metadata.namespace");
if (!a || !o) return null;
switch (a) {
=======
var n, a, r = _.get(e, "kind"), o = _.get(e, "metadata.namespace");
if (!r || !o) return null;
switch (r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n, r, a = _.get(e, "kind"), o = _.get(e, "metadata.namespace");
if (!a || !o) return null;
switch (a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
case "Build":
return (n = c(e)) ? this.resourceURL(n, "BuildConfig", o, t, {
isPipeline: l(e)
}) : null;

case "ReplicationController":
<<<<<<< HEAD
<<<<<<< HEAD
return (r = s(e, "deploymentConfig")) ? this.resourceURL(r, "DeploymentConfig", o, t) : null;
=======
return (a = s(e, "deploymentConfig")) ? this.resourceURL(a, "DeploymentConfig", o, t) : null;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return (r = s(e, "deploymentConfig")) ? this.resourceURL(r, "DeploymentConfig", o, t) : null;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
return null;
},
resourceListURL: function(e, t) {
var n = {
builds: "builds",
buildconfigs: "builds",
configmaps: "config-maps",
deployments: "deployments",
deploymentconfigs: "deployments",
imagestreams: "images",
pods: "pods",
replicasets: "deployments",
replicationcontrollers: "deployments",
routes: "routes",
secrets: "secrets",
services: "services",
<<<<<<< HEAD
<<<<<<< HEAD
serviceinstances: "service-instances",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
serviceinstances: "service-instances",
>>>>>>> Updates for Service Instance & Bindings
persistentvolumeclaims: "storage",
statefulsets: "stateful-sets"
};
return URI.expand("project/{projectName}/browse/{browsePath}", {
projectName: t,
browsePath: n[e]
}).toString();
},
toResourceList: function(t, n) {
e.url(this.resourceListURL(t, n));
},
yamlURL: function(e, t) {
if (!e) return "";
var n = i.parseGroupVersion(e.apiVersion);
return URI.expand("project/{projectName}/edit/yaml?kind={kind}&name={name}&group={group}&returnURL={returnURL}", {
projectName: e.metadata.namespace,
kind: e.kind,
name: e.metadata.name,
group: n.group || "",
returnURL: t || ""
}).toString();
},
<<<<<<< HEAD
<<<<<<< HEAD
healthCheckURL: function(e, t, n, r) {
=======
healthCheckURL: function(e, t, n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
healthCheckURL: function(e, t, n, r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return URI.expand("project/{projectName}/edit/health-checks?kind={kind}&name={name}&group={group}", {
projectName: e,
kind: t,
name: n,
<<<<<<< HEAD
<<<<<<< HEAD
group: r || ""
=======
group: a || ""
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
group: r || ""
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).toString();
}
};
} ]), angular.module("openshiftConsole").service("NameGenerator", function() {
return {
suggestFromSourceUrl: function(e) {
var t = e.substr(e.lastIndexOf("/") + 1, e.length), n = t.indexOf(".");
return -1 !== n && (t = t.substr(0, n)), t.split("#")[0];
}
};
}), angular.module("openshiftConsole").factory("TaskList", [ "$timeout", function(e) {
function t() {
this.tasks = [];
}
var n = new t();
<<<<<<< HEAD
<<<<<<< HEAD
return t.prototype.add = function(t, r, a, o) {
var i = {
status: "started",
titles: t,
helpLinks: r,
namespace: a
=======
return t.prototype.add = function(t, a, r, o) {
var i = {
status: "started",
titles: t,
helpLinks: a,
namespace: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return t.prototype.add = function(t, r, a, o) {
var i = {
status: "started",
titles: t,
helpLinks: r,
namespace: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
this.tasks.push(i), o().then(function(t) {
i.status = "completed", i.hasErrors = t.hasErrors || !1, i.alerts = t.alerts || [], i.hasErrors || e(function() {
n.deleteTask(i);
}, 6e4);
});
}, t.prototype.taskList = function() {
return this.tasks;
}, t.prototype.deleteTask = function(e) {
var t = n.tasks.indexOf(e);
t >= 0 && this.tasks.splice(t, 1);
}, t.prototype.clear = function() {
n.tasks = [];
}, n;
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("ImageStreamResolver", [ "$q", "APIService", "DataService", function(e, t, n) {
function r() {}
var a = t.getPreferredVersion("imagestreamimages");
return r.prototype.fetchReferencedImageStreamImages = function(t, r, o, i) {
var s = {};
return angular.forEach(t, function(e) {
angular.forEach(e.spec.containers, function(e) {
var t = e.image;
if (t && !r[t] && !s[t]) {
var c = o[t];
if (c) {
var l = c.split("@"), u = n.get(a, c, i);
u.then(function(e) {
if (e && e.image) {
var n = angular.copy(e.image);
n.imageStreamName = l[0], n.imageStreamNamespace = i.project.metadata.name, r[t] = n;
}
}), s[t] = u;
}
}
});
}), e.all(s);
}, r.prototype.buildDockerRefMapForImageStreams = function(e, t) {
=======
} ]), angular.module("openshiftConsole").factory("ImageStreamResolver", [ "$q", "DataService", function(e, t) {
function n() {}
return n.prototype.fetchReferencedImageStreamImages = function(n, r, a, o) {
var i = {};
return angular.forEach(n, function(e) {
angular.forEach(e.spec.containers, function(e) {
var n = e.image;
if (n && !r[n] && !i[n]) {
var s = a[n];
if (s) {
var c = s.split("@"), l = t.get("imagestreamimages", s, o);
l.then(function(e) {
if (e && e.image) {
var t = angular.copy(e.image);
t.imageStreamName = c[0], t.imageStreamNamespace = o.project.metadata.name, r[n] = t;
}
}), i[n] = l;
}
}
});
}), e.all(i);
}, n.prototype.buildDockerRefMapForImageStreams = function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
angular.forEach(e, function(e) {
angular.forEach(e.status.tags, function(n) {
angular.forEach(n.items, function(n) {
n.image && (t[n.dockerImageReference] = e.metadata.name + "@" + n.image);
});
});
});
<<<<<<< HEAD
}, new r();
} ]), angular.module("openshiftConsole").factory("ContainerWebSocket", [ "API_CFG", "$ws", function(e, t) {
return function(n, r) {
return 0 === n.indexOf("/") && (n = ("http:" === window.location.protocol ? "ws://" : "wss://") + e.openshift.hostPort + n), t({
url: n,
method: "WATCH",
protocols: r,
=======
}, new n();
} ]), angular.module("openshiftConsole").factory("ContainerWebSocket", [ "API_CFG", "$ws", function(e, t) {
return function(n, r) {
return 0 === n.indexOf("/") && (n = ("http:" === window.location.protocol ? "ws://" : "wss://") + e.openshift.hostPort + n), t({
url: n,
method: "WATCH",
<<<<<<< HEAD
protocols: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
protocols: r,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
auth: {}
});
};
} ]), angular.module("openshiftConsole").factory("BaseHref", [ "$document", function(e) {
return e.find("base").attr("href") || "/";
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("BuildsService", [ "$filter", "$q", "APIService", "DataService", "Navigate", "gettext", "gettextCatalog", "NotificationsService", function(e, t, n, r, a, o, i, s) {
var c = n.getPreferredVersion("buildconfigs/instantiate"), l = n.getPreferredVersion("builds/clone"), u = e("annotation"), d = e("buildConfigForBuild"), m = e("getErrorDetails"), p = e("isIncompleteBuild"), g = e("isJenkinsPipelineStrategy"), f = e("isNewerResource"), v = function(e) {
var t = u(e, "buildNumber") || parseInt(e.metadata.name.match(/(\d+)$/), 10);
return isNaN(t) ? null : t;
}, h = function(e, t) {
var n = v(e);
return t && n ? t + " #" + n : e.metadata.name;
}, y = function(e) {
return "true" === u(e, "openshift.io/build-config.paused");
}, b = function(e) {
return e.status.startTimestamp || e.metadata.creationTimestamp;
}, S = function(e) {
return _.round(e / 1e3 / 1e3);
}, C = e("imageObjectRef"), w = function(e) {
var t = u(e, "jenkinsStatus");
=======
} ]), angular.module("openshiftConsole").factory("BuildsService", [ "$filter", "$q", "DataService", "Navigate", "NotificationsService", function(e, t, n, a, r) {
=======
} ]), angular.module("openshiftConsole").factory("BuildsService", [ "$filter", "$q", "DataService", "Navigate", "NotificationsService", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = e("annotation"), i = e("buildConfigForBuild"), s = e("getErrorDetails"), c = e("isIncompleteBuild"), l = e("isJenkinsPipelineStrategy"), u = e("isNewerResource"), d = function(e) {
var t = o(e, "buildNumber") || parseInt(e.metadata.name.match(/(\d+)$/), 10);
return isNaN(t) ? null : t;
}, m = function(e, t) {
var n = d(e);
return t && n ? t + " #" + n : e.metadata.name;
}, p = function(e) {
return "true" === o(e, "openshift.io/build-config.paused");
}, f = function(e) {
return e.status.startTimestamp || e.metadata.creationTimestamp;
}, g = function(e) {
return _.round(e / 1e3 / 1e3);
}, v = e("imageObjectRef"), h = function(e) {
var t = o(e, "jenkinsStatus");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").factory("BuildsService", [ "$filter", "$q", "APIService", "DataService", "Navigate", "NotificationsService", function(e, t, n, r, a, o) {
var i = n.getPreferredVersion("buildconfigs/instantiate"), s = n.getPreferredVersion("builds/clone"), c = e("annotation"), l = e("buildConfigForBuild"), u = e("getErrorDetails"), d = e("isIncompleteBuild"), m = e("isJenkinsPipelineStrategy"), p = e("isNewerResource"), f = function(e) {
var t = c(e, "buildNumber") || parseInt(e.metadata.name.match(/(\d+)$/), 10);
return isNaN(t) ? null : t;
}, g = function(e, t) {
var n = f(e);
return t && n ? t + " #" + n : e.metadata.name;
}, v = function(e) {
return "true" === c(e, "openshift.io/build-config.paused");
}, h = function(e) {
return e.status.startTimestamp || e.metadata.creationTimestamp;
}, y = function(e) {
return _.round(e / 1e3 / 1e3);
}, b = e("imageObjectRef"), S = function(e) {
var t = c(e, "jenkinsStatus");
>>>>>>> Fix potential API mismatch in BuildsService
if (!t) return null;
try {
return JSON.parse(t);
} catch (e) {
return Logger.error("Could not parse Jenkins status as JSON", t), null;
}
};
return {
startBuild: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var l = g(e) ? "pipeline" : "build", u = {
kind: "BuildRequest",
apiVersion: n.toAPIVersion(c),
metadata: {
name: e.metadata.name
}
}, d = {
namespace: e.metadata.namespace
};
return r.create(c, e.metadata.name, u, d).then(function(t) {
var n, r, c = h(t, e.metadata.name), u = _.get(e, "spec.runPolicy");
"Serial" === u || "SerialLatestOnly" === u ? (n = i.getString(o(_.capitalize(l))) + " " + c + " " + i.getString(o("successfully queued.")), r = i.getString(o("Builds for")) + " " + e.metadata.name + " " + i.getString(o("are configured to run one at a time."))) : n = i.getString(o(_.capitalize(l))) + " " + c + " " + i.getString(o("successfully created.")), s.addNotification({
type: "success",
message: n,
details: r,
links: [ {
href: a.resourceURL(t),
label: i.getString(o("View Build"))
} ]
});
}, function(e) {
return s.addNotification({
type: "error",
message: i.getString(o("An error occurred while starting the")) + " " + l + ".",
details: m(e)
=======
var o = l(e) ? "pipeline" : "build", i = {
=======
var i = p(e) ? "pipeline" : "build", c = {
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
var s = m(e) ? "pipeline" : "build", c = {
>>>>>>> Fix potential API mismatch in BuildsService
kind: "BuildRequest",
apiVersion: n.toAPIVersion(i),
metadata: {
name: e.metadata.name
}
}, l = {
namespace: e.metadata.namespace
};
<<<<<<< HEAD
<<<<<<< HEAD
return n.create("buildconfigs/instantiate", e.metadata.name, i, c).then(function(t) {
var n, i, s = m(t, e.metadata.name), c = _.get(e, "spec.runPolicy");
"Serial" === c || "SerialLatestOnly" === c ? (n = _.capitalize(o) + " " + s + " successfully queued.", i = "Builds for " + e.metadata.name + " are configured to run one at a time.") : n = _.capitalize(o) + " " + s + " successfully created.", a.addNotification({
type: "success",
message: n,
details: i,
=======
return r.create(s, e.metadata.name, c, l).then(function(t) {
var n, r, s = v(t, e.metadata.name), c = _.get(e, "spec.runPolicy");
"Serial" === c || "SerialLatestOnly" === c ? (n = _.capitalize(i) + " " + s + " successfully queued.", r = "Builds for " + e.metadata.name + " are configured to run one at a time.") : n = _.capitalize(i) + " " + s + " successfully created.", o.addNotification({
=======
return r.create(i, e.metadata.name, c, l).then(function(t) {
var n, r, i = g(t, e.metadata.name), c = _.get(e, "spec.runPolicy");
"Serial" === c || "SerialLatestOnly" === c ? (n = _.capitalize(s) + " " + i + " successfully queued.", r = "Builds for " + e.metadata.name + " are configured to run one at a time.") : n = _.capitalize(s) + " " + i + " successfully created.", o.addNotification({
>>>>>>> Fix potential API mismatch in BuildsService
type: "success",
message: n,
details: r,
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
links: [ {
href: r.resourceURL(t),
label: "View Build"
} ]
});
}, function(e) {
return a.addNotification({
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
message: "An error occurred while starting the " + o + ".",
details: s(e)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "An error occurred while starting the " + i + ".",
details: d(e)
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
}), t.reject(e);
});
},
<<<<<<< HEAD
cancelBuild: function(e, a) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var c = g(e) ? "pipeline" : "build", l = h(e, a), u = {
namespace: e.metadata.namespace
}, d = angular.copy(e), p = n.objectToResourceGroupVersion(d);
return d.status.cancelled = !0, r.update(p, d.metadata.name, d, u).then(function() {
s.addNotification({
type: "success",
message: i.getString(o(_.capitalize(c))) + " " + l + " " + i.getString(o("successfully cancelled."))
=======
message: "An error occurred while starting the " + s + ".",
details: u(e)
}), t.reject(e);
});
},
cancelBuild: function(e, a) {
var i = m(e) ? "pipeline" : "build", s = g(e, a), c = {
namespace: e.metadata.namespace
}, l = angular.copy(e), d = n.objectToResourceGroupVersion(l);
return l.status.cancelled = !0, r.update(d, l.metadata.name, l, c).then(function() {
o.addNotification({
type: "success",
message: _.capitalize(i) + " " + s + " successfully cancelled."
>>>>>>> Fix potential API mismatch in BuildsService
});
}), function(e) {
return s.addNotification({
type: "error",
<<<<<<< HEAD
message: i.getString(o("An error occurred cancelling")) + " " + c + " " + l + ".",
details: m(e)
}), t.reject(e);
};
},
cloneBuild: function(e, c) {
var u = g(e) ? "pipeline" : "build", d = h(e, c), p = {
kind: "BuildRequest",
apiVersion: n.toAPIVersion(l),
metadata: {
name: e.metadata.name
}
}, f = {
namespace: e.metadata.namespace
};
return r.create(l, e.metadata.name, p, f).then(function(e) {
var t = h(e, c);
s.addNotification({
type: "success",
message: i.getString(o(_.capitalize(u))) + " " + d + " " + i.getString(o("is being rebuilt as")) + " " + t + ".",
=======
message: "An error occurred cancelling " + i + " " + s + ".",
details: u(e)
}), t.reject(e);
};
},
cloneBuild: function(e, i) {
var c = m(e) ? "pipeline" : "build", l = g(e, i), d = {
kind: "BuildRequest",
apiVersion: n.toAPIVersion(s),
metadata: {
name: e.metadata.name
}
}, p = {
namespace: e.metadata.namespace
};
return r.create(s, e.metadata.name, d, p).then(function(e) {
var t = g(e, i);
o.addNotification({
type: "success",
message: _.capitalize(c) + " " + l + " is being rebuilt as " + t + ".",
>>>>>>> Fix potential API mismatch in BuildsService
links: [ {
href: a.resourceURL(e),
label: i.getString(o("View Build"))
} ]
});
}, function(e) {
return s.addNotification({
type: "error",
message: i.getString(o("An error occurred while rerunning")) + " " + u + " " + d + ".",
details: m(e)
}), t.reject();
});
},
isPaused: y,
canBuild: function(e) {
return !!e && !e.metadata.deletionTimestamp && !y(e);
},
usesDeploymentConfigs: function(e) {
var t = u(e, "pipeline.alpha.openshift.io/uses");
=======
var o = l(e) ? "pipeline" : "build", i = m(e, a), c = {
=======
var o = l(e) ? "pipeline" : "build", i = p(e, a), c = {
>>>>>>> Updates for Service Instance & Bindings
=======
var o = l(e) ? "pipeline" : "build", i = m(e, a), c = {
>>>>>>> Support EnvFrom in the Env Editors
=======
cancelBuild: function(e, r) {
var o = l(e) ? "pipeline" : "build", i = m(e, r), c = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
namespace: e.metadata.namespace
}, u = angular.copy(e);
return u.status.cancelled = !0, n.update("builds", u.metadata.name, u, c).then(function() {
a.addNotification({
type: "success",
message: _.capitalize(o) + " " + i + " successfully cancelled."
});
}), function(e) {
return a.addNotification({
type: "error",
message: "An error occurred cancelling " + o + " " + i + ".",
details: s(e)
}), t.reject(e);
};
},
cloneBuild: function(e, o) {
var i = l(e) ? "pipeline" : "build", c = m(e, o), u = {
kind: "BuildRequest",
apiVersion: "v1",
metadata: {
name: e.metadata.name
}
}, d = {
namespace: e.metadata.namespace
};
return n.create("builds/clone", e.metadata.name, u, d).then(function(e) {
var t = m(e, o);
a.addNotification({
type: "success",
message: _.capitalize(i) + " " + c + " is being rebuilt as " + t + ".",
links: [ {
href: r.resourceURL(e),
label: "View Build"
} ]
});
}, function(e) {
return a.addNotification({
type: "error",
<<<<<<< HEAD
message: "An error occurred while rerunning " + i + " " + c + ".",
details: s(e)
}), t.reject();
});
},
isPaused: p,
canBuild: function(e) {
return !!e && !e.metadata.deletionTimestamp && !p(e);
},
usesDeploymentConfigs: function(e) {
var t = o(e, "pipeline.alpha.openshift.io/uses");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "An error occurred while rerunning " + c + " " + l + ".",
details: u(e)
}), t.reject();
});
},
isPaused: v,
canBuild: function(e) {
return !!e && !e.metadata.deletionTimestamp && !v(e);
},
usesDeploymentConfigs: function(e) {
var t = c(e, "pipeline.alpha.openshift.io/uses");
>>>>>>> Fix potential API mismatch in BuildsService
if (!t) return [];
try {
t = JSON.parse(t);
} catch (e) {
return void Logger.warn('Could not parse "pipeline.alpha.openshift.io/uses" annotation', e);
}
var n = [];
return _.each(t, function(t) {
t.name && (t.namespace && t.namespace !== _.get(e, "metadata.namespace") || "DeploymentConfig" === t.kind && n.push(t.name));
}), n;
},
validatedBuildsForBuildConfig: function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
return _.pickBy(t, function(t) {
var n = u(t, "buildConfig");
=======
return _.pick(t, function(t) {
=======
return _.pickBy(t, function(t) {
<<<<<<< HEAD
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
var n = o(t, "buildConfig");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n = c(t, "buildConfig");
>>>>>>> Fix potential API mismatch in BuildsService
return !n || n === e;
});
},
latestBuildByConfig: function(e, t) {
var n = {};
return _.each(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var r = d(e) || "";
t && !t(e) || f(e, n[r]) && (n[r] = e);
}), n;
},
getBuildNumber: v,
getBuildDisplayName: h,
getStartTimestsamp: b,
getDuration: function(e) {
var t = _.get(e, "status.duration");
if (t) return S(t);
var n = b(e), r = e.status.completionTimestamp;
=======
var r = l(e) || "";
t && !t(e) || p(e, n[r]) && (n[r] = e);
}), n;
},
getBuildNumber: f,
getBuildDisplayName: g,
getStartTimestsamp: h,
getDuration: function(e) {
var t = _.get(e, "status.duration");
if (t) return y(t);
var n = h(e), r = e.status.completionTimestamp;
>>>>>>> Fix potential API mismatch in BuildsService
return n && r ? moment(r).diff(moment(n)) : 0;
},
incompleteBuilds: function(e) {
return _.map(e, function(e) {
<<<<<<< HEAD
return p(e);
=======
var a = i(e) || "";
t && !t(e) || u(e, n[a]) && (n[a] = e);
=======
var r = i(e) || "";
t && !t(e) || u(e, n[r]) && (n[r] = e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), n;
},
getBuildNumber: d,
getBuildDisplayName: m,
getStartTimestsamp: f,
getDuration: function(e) {
var t = _.get(e, "status.duration");
if (t) return g(t);
var n = f(e), r = e.status.completionTimestamp;
return n && r ? moment(r).diff(moment(n)) : 0;
},
incompleteBuilds: function(e) {
return _.map(e, function(e) {
return c(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return d(e);
>>>>>>> Fix potential API mismatch in BuildsService
});
},
completeBuilds: function(e) {
return _.map(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
return !p(e);
=======
return !c(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return !d(e);
>>>>>>> Fix potential API mismatch in BuildsService
});
},
lastCompleteByBuildConfig: function(t) {
return _.reduce(t, function(t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
if (p(n)) return t;
var r = e("annotation")(n, "buildConfig");
return f(n, t[r]) && (t[r] = n), t;
=======
if (c(n)) return t;
<<<<<<< HEAD
var a = e("annotation")(n, "buildConfig");
return u(n, t[a]) && (t[a] = n), t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e("annotation")(n, "buildConfig");
return u(n, t[r]) && (t[r] = n), t;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
if (d(n)) return t;
var r = e("annotation")(n, "buildConfig");
return p(n, t[r]) && (t[r] = n), t;
>>>>>>> Fix potential API mismatch in BuildsService
}, {});
},
interestingBuilds: function(t) {
var n = {};
return _.filter(t, function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
if (p(t)) return !0;
var r = e("annotation")(t, "buildConfig");
f(t, n[r]) && (n[r] = t);
=======
if (c(t)) return !0;
<<<<<<< HEAD
var a = e("annotation")(t, "buildConfig");
u(t, n[a]) && (n[a] = t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e("annotation")(t, "buildConfig");
u(t, n[r]) && (n[r] = t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
if (d(t)) return !0;
var r = e("annotation")(t, "buildConfig");
p(t, n[r]) && (n[r] = t);
>>>>>>> Fix potential API mismatch in BuildsService
}).concat(_.map(n, function(e) {
return e;
}));
},
groupBuildConfigsByOutputImage: function(e) {
var t = {};
return _.each(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var n = _.get(e, "spec.output.to"), r = C(n, e.metadata.namespace);
r && (t[r] = t[r] || [], t[r].push(e));
=======
var n = _.get(e, "spec.output.to"), a = h(n, e.metadata.namespace);
=======
var n = _.get(e, "spec.output.to"), a = v(n, e.metadata.namespace);
>>>>>>> Add SVG icons
a && (t[a] = t[a] || [], t[a].push(e));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n = _.get(e, "spec.output.to"), r = v(n, e.metadata.namespace);
=======
var n = _.get(e, "spec.output.to"), r = b(n, e.metadata.namespace);
>>>>>>> Fix potential API mismatch in BuildsService
r && (t[r] = t[r] || [], t[r].push(e));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), t;
},
sortBuilds: function(e, t) {
var n = function(e, n) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var r, a, o = v(e), i = v(n);
=======
var r, a, o = f(e), i = f(n);
>>>>>>> Fix potential API mismatch in BuildsService
return o || i ? o ? i ? t ? i - o : o - i : t ? -1 : 1 : t ? 1 : -1 : (r = _.get(e, "metadata.name", ""), a = _.get(n, "metadata.name", ""), t ? a.localeCompare(r) : r.localeCompare(a));
};
return _.toArray(e).sort(function(e, r) {
var a = _.get(e, "metadata.creationTimestamp", ""), o = _.get(r, "metadata.creationTimestamp", "");
return a === o ? n(e, r) : t ? o.localeCompare(a) : a.localeCompare(o);
});
},
<<<<<<< HEAD
getJenkinsStatus: w,
getCurrentStage: function(e) {
var t = w(e), n = _.get(t, "stages", []);
=======
getJenkinsStatus: S,
getCurrentStage: function(e) {
var t = S(e), n = _.get(t, "stages", []);
>>>>>>> Fix potential API mismatch in BuildsService
return _.last(n);
}
};
} ]), angular.module("openshiftConsole").factory("DeploymentsService", [ "$filter", "$q", "APIService", "DataService", "LabelFilter", "gettext", "gettextCatalog", "NotificationsService", function(e, t, n, r, a, o, i, s) {
function c() {}
var l = n.getPreferredVersion("deploymentconfigs/instantiate"), u = n.getPreferredVersion("deploymentconfigs/rollback"), d = n.getPreferredVersion("pods"), m = n.getPreferredVersion("replicationcontrollers"), p = e("annotation");
c.prototype.startLatestDeployment = function(t, a) {
var c = {
kind: "DeploymentRequest",
apiVersion: n.toAPIVersion(l),
name: t.metadata.name,
latest: !0,
force: !0
};
r.create(l, t.metadata.name, c, a).then(function(e) {
s.addNotification({
type: "success",
message: "Deployment #" + e.status.latestVersion + " of " + t.metadata.name + " has started."
});
}, function(t) {
s.addNotification({
type: "error",
message: i.getString(o("An error occurred while starting the deployment.")),
details: e("getErrorDetails")(t)
});
});
}, c.prototype.retryFailedDeployment = function(t, a, c) {
var l = angular.copy(t), u = n.objectToResourceGroupVersion(t), m = t.metadata.name, g = p(t, "deploymentConfig");
r.list(d, a, function(t) {
var n = t.by("metadata.name");
angular.forEach(n, function(t) {
var n = e("annotationName")("deployerPodFor");
t.metadata.labels[n] === m && r.delete(d, t.metadata.name, c).then(function() {
Logger.info("Deployer pod " + t.metadata.name + " deleted");
}, function(t) {
c.alerts = c.alerts || {}, c.alerts.retrydeployer = {
type: "error",
message: i.getString(o("An error occurred while deleting the deployer pod.")),
details: e("getErrorDetails")(t)
=======
var a, r, o = d(e), i = d(n);
return o || i ? o ? i ? t ? i - o : o - i : t ? -1 : 1 : t ? 1 : -1 : (a = _.get(e, "metadata.name", ""), r = _.get(n, "metadata.name", ""), t ? r.localeCompare(a) : a.localeCompare(r));
=======
var r, a, o = d(e), i = d(n);
return o || i ? o ? i ? t ? i - o : o - i : t ? -1 : 1 : t ? 1 : -1 : (r = _.get(e, "metadata.name", ""), a = _.get(n, "metadata.name", ""), t ? a.localeCompare(r) : r.localeCompare(a));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
return _.toArray(e).sort(function(e, r) {
var a = _.get(e, "metadata.creationTimestamp", ""), o = _.get(r, "metadata.creationTimestamp", "");
return a === o ? n(e, r) : t ? o.localeCompare(a) : a.localeCompare(o);
});
},
getJenkinsStatus: h,
getCurrentStage: function(e) {
var t = h(e), n = _.get(t, "stages", []);
return _.last(n);
}
};
} ]), angular.module("openshiftConsole").factory("DeploymentsService", [ "$filter", "$q", "APIService", "DataService", "LabelFilter", "NotificationsService", function(e, t, n, r, a, o) {
function i() {}
var s = n.getPreferredVersion("deploymentconfigs/instantiate"), c = n.getPreferredVersion("deploymentconfigs/rollback"), l = n.getPreferredVersion("pods"), u = n.getPreferredVersion("replicationcontrollers"), d = e("annotation");
i.prototype.startLatestDeployment = function(t, a) {
var i = {
kind: "DeploymentRequest",
apiVersion: n.toAPIVersion(s),
name: t.metadata.name,
latest: !0,
force: !0
};
r.create(s, t.metadata.name, i, a).then(function(e) {
o.addNotification({
type: "success",
message: "Deployment #" + e.status.latestVersion + " of " + t.metadata.name + " has started."
});
}, function(t) {
o.addNotification({
type: "error",
message: "An error occurred while starting the deployment.",
details: e("getErrorDetails")(t)
});
});
}, i.prototype.retryFailedDeployment = function(t, a, i) {
var s = angular.copy(t), c = n.objectToResourceGroupVersion(t), u = t.metadata.name, m = d(t, "deploymentConfig");
r.list(l, a, function(t) {
var n = t.by("metadata.name");
angular.forEach(n, function(t) {
var n = e("annotationName")("deployerPodFor");
t.metadata.labels[n] === u && r.delete(l, t.metadata.name, i).then(function() {
Logger.info("Deployer pod " + t.metadata.name + " deleted");
}, function(t) {
i.alerts = i.alerts || {}, i.alerts.retrydeployer = {
type: "error",
message: "An error occurred while deleting the deployer pod.",
<<<<<<< HEAD
<<<<<<< HEAD
details: a("getErrorDetails")(e)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
details: r("getErrorDetails")(e)
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
details: e("getErrorDetails")(t)
>>>>>>> update deployments service to use getPreferredVersion
};
});
});
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var f = e("annotationName")("deploymentStatus"), v = e("annotationName")("deploymentStatusReason"), h = e("annotationName")("deploymentCancelled");
l.metadata.annotations[f] = "New", delete l.metadata.annotations[v], delete l.metadata.annotations[h], r.update(u, m, l, a).then(function() {
s.addNotification({
=======
var u = r("annotationName")("deploymentStatus"), d = r("annotationName")("deploymentStatusReason"), m = r("annotationName")("deploymentCancelled");
i.metadata.annotations[u] = "New", delete i.metadata.annotations[d], delete i.metadata.annotations[m], n.update("replicationcontrollers", c, i, a).then(function() {
t.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "success",
message: "Retrying deployment " + m + " of " + g + "."
});
}, function(t) {
s.addNotification({
=======
var m = e("annotationName")("deploymentStatus"), p = e("annotationName")("deploymentStatusReason"), f = e("annotationName")("deploymentCancelled");
i.metadata.annotations[m] = "New", delete i.metadata.annotations[p], delete i.metadata.annotations[f], r.update(u, s, i, n).then(function() {
=======
var p = e("annotationName")("deploymentStatus"), f = e("annotationName")("deploymentStatusReason"), g = e("annotationName")("deploymentCancelled");
s.metadata.annotations[p] = "New", delete s.metadata.annotations[f], delete s.metadata.annotations[g], r.update(c, u, s, a).then(function() {
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
o.addNotification({
type: "success",
message: "Retrying deployment " + u + " of " + m + "."
});
}, function(t) {
o.addNotification({
>>>>>>> update deployments service to use getPreferredVersion
type: "error",
<<<<<<< HEAD
message: i.getString(o("An error occurred while retrying the deployment.")),
details: e("getErrorDetails")(t)
});
});
}, c.prototype.rollbackToDeployment = function(t, a, c, l, d) {
var m = t.metadata.name, g = p(t, "deploymentConfig"), f = {
apiVersion: n.toAPIVersion(u),
=======
message: "An error occurred while retrying the deployment.",
details: e("getErrorDetails")(t)
});
});
}, i.prototype.rollbackToDeployment = function(t, a, i, s, l) {
var u = t.metadata.name, m = d(t, "deploymentConfig"), p = {
<<<<<<< HEAD
apiVersion: "apps.openshift.io/v1",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
kind: "DeploymentConfigRollback",
name: g,
spec: {
from: {
name: m
},
includeTemplate: !0,
includeReplicationMeta: a,
includeStrategy: c,
includeTriggers: l
}
};
<<<<<<< HEAD
r.create(u, g, f, d).then(function(t) {
var a = n.objectToResourceGroupVersion(t);
r.update(a, g, t, d).then(function(e) {
s.addNotification({
type: "success",
message: "Deployment #" + e.status.latestVersion + " is rolling back " + g + " to " + m + "."
});
}, function(t) {
s.addNotification({
id: "rollback-deployment-error",
type: "error",
message: i.getString(o("An error occurred while rolling back the deployment.")),
details: e("getErrorDetails")(t)
});
});
}, function(t) {
s.addNotification({
id: "rollback-deployment-error",
type: "error",
message: i.getString(o("An error occurred while rolling back the deployment.")),
details: e("getErrorDetails")(t)
});
});
}, c.prototype.cancelRunningDeployment = function(t, n) {
var a = t.metadata.name, c = e("annotation")(t, "deploymentConfig"), l = angular.copy(t), u = e("annotationName")("deploymentCancelled"), d = e("annotationName")("deploymentStatusReason");
l.metadata.annotations[u] = "true", l.metadata.annotations[d] = "The deployment was cancelled by the user", r.update(m, a, l, n).then(function() {
s.addNotification({
type: "success",
message: "Cancelled deployment " + a + " of " + c + "."
});
}, function(t) {
s.addNotification({
id: "cancel-deployment-error",
type: "error",
message: i.getString(o("An error occurred while cancelling the deployment.")),
details: e("getErrorDetails")(t)
});
});
}, c.prototype.associateDeploymentsToDeploymentConfig = function(t, n, r) {
var o = {}, i = a.getLabelSelector();
return angular.forEach(t, function(t, a) {
var s = e("annotation")(t, "deploymentConfig");
(!r || n && n[s] || i.matches(t)) && (o[s = s || ""] = o[s] || {}, o[s][a] = t);
}), angular.forEach(n, function(e, t) {
o[t] = o[t] || {};
}), o;
}, c.prototype.deploymentBelongsToConfig = function(t, n) {
return !(!t || !n) && n === e("annotation")(t, "deploymentConfig");
}, c.prototype.associateRunningDeploymentToDeploymentConfig = function(t) {
var n = {};
return angular.forEach(t, function(t, r) {
n[r] = {}, angular.forEach(t, function(t, a) {
var o = e("deploymentStatus")(t);
"New" !== o && "Pending" !== o && "Running" !== o || (n[r][a] = t);
});
}), n;
}, c.prototype.getActiveDeployment = function(t) {
var n = e("deploymentIsInProgress"), r = e("annotation"), a = null;
return _.each(t, function(e) {
if (n(e)) return a = null, !1;
"Complete" === r(e, "deploymentStatus") && (!a || a.metadata.creationTimestamp < e.metadata.creationTimestamp) && (a = e);
}), a;
}, c.prototype.getRevision = function(e) {
return p(e, "deployment.kubernetes.io/revision");
}, c.prototype.isActiveReplicaSet = function(e, t) {
var n = this.getRevision(e), r = this.getRevision(t);
return !(!n || !r) && n === r;
}, c.prototype.getActiveReplicaSet = function(e, t) {
var n = this.getRevision(t);
if (!n) return null;
var r = this;
return _.find(e, function(e) {
return r.getRevision(e) === n;
});
<<<<<<< HEAD
<<<<<<< HEAD
}, c.prototype.getScaleResource = function(e) {
var t = {
resource: n.kindToResource(e.kind) + "/scale"
};
switch (e.kind) {
=======
var u = a("annotationName")("deploymentStatus"), d = a("annotationName")("deploymentStatusReason"), m = a("annotationName")("deploymentCancelled");
i.metadata.annotations[u] = "New", delete i.metadata.annotations[d], delete i.metadata.annotations[m], n.update("replicationcontrollers", c, i, r).then(function() {
=======
var u = a("annotationName")("deploymentStatus"), d = a("annotationName")("deploymentStatusReason"), p = a("annotationName")("deploymentCancelled");
i.metadata.annotations[u] = "New", delete i.metadata.annotations[d], delete i.metadata.annotations[p], n.update("replicationcontrollers", c, i, r).then(function() {
>>>>>>> Updates for Service Instance & Bindings
=======
var u = a("annotationName")("deploymentStatus"), d = a("annotationName")("deploymentStatusReason"), m = a("annotationName")("deploymentCancelled");
i.metadata.annotations[u] = "New", delete i.metadata.annotations[d], delete i.metadata.annotations[m], n.update("replicationcontrollers", c, i, r).then(function() {
>>>>>>> Support EnvFrom in the Env Editors
t.addNotification({
type: "success",
message: "Retrying deployment " + c + " of " + l + "."
});
}, function(e) {
t.addNotification({
type: "error",
message: "An error occurred while retrying the deployment.",
details: a("getErrorDetails")(e)
});
});
}, i.prototype.rollbackToDeployment = function(r, o, i, c, l) {
var u = r.metadata.name, d = s(r, "deploymentConfig"), m = {
apiVersion: "apps.openshift.io/v1",
=======
apiVersion: n.toAPIVersion(c),
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
kind: "DeploymentConfigRollback",
name: m,
spec: {
from: {
name: u
},
includeTemplate: !0,
includeReplicationMeta: a,
includeStrategy: i,
includeTriggers: s
}
};
<<<<<<< HEAD
n.create({
group: "apps.openshift.io",
resource: "deploymentconfigs/rollback"
}, d, m, l).then(function(r) {
var o = e.objectToResourceGroupVersion(r);
n.update(o, d, r, l).then(function(e) {
=======
n.create({
group: "apps.openshift.io",
resource: "deploymentconfigs/rollback"
}, d, m, l).then(function(a) {
var o = e.objectToResourceGroupVersion(a);
n.update(o, d, a, l).then(function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
t.addNotification({
=======
r.create(c, m, p, l).then(function(t) {
var a = n.objectToResourceGroupVersion(t);
r.update(a, m, t, l).then(function(e) {
o.addNotification({
>>>>>>> update deployments service to use getPreferredVersion
type: "success",
message: "Deployment #" + e.status.latestVersion + " is rolling back " + m + " to " + u + "."
});
}, function(t) {
o.addNotification({
id: "rollback-deployment-error",
type: "error",
message: "An error occurred while rolling back the deployment.",
details: e("getErrorDetails")(t)
});
});
}, function(t) {
o.addNotification({
id: "rollback-deployment-error",
type: "error",
message: "An error occurred while rolling back the deployment.",
details: e("getErrorDetails")(t)
});
});
}, i.prototype.cancelRunningDeployment = function(t, n) {
var a = t.metadata.name, i = e("annotation")(t, "deploymentConfig"), s = angular.copy(t), c = e("annotationName")("deploymentCancelled"), l = e("annotationName")("deploymentStatusReason");
s.metadata.annotations[c] = "true", s.metadata.annotations[l] = "The deployment was cancelled by the user", r.update(u, a, s, n).then(function() {
o.addNotification({
type: "success",
message: "Cancelled deployment " + a + " of " + i + "."
});
}, function(t) {
o.addNotification({
id: "cancel-deployment-error",
type: "error",
message: "An error occurred while cancelling the deployment.",
details: e("getErrorDetails")(t)
});
});
}, i.prototype.associateDeploymentsToDeploymentConfig = function(t, n, r) {
var o = {}, i = a.getLabelSelector();
return angular.forEach(t, function(t, a) {
var s = e("annotation")(t, "deploymentConfig");
(!r || n && n[s] || i.matches(t)) && (o[s = s || ""] = o[s] || {}, o[s][a] = t);
}), angular.forEach(n, function(e, t) {
o[t] = o[t] || {};
}), o;
}, i.prototype.deploymentBelongsToConfig = function(t, n) {
return !(!t || !n) && n === e("annotation")(t, "deploymentConfig");
}, i.prototype.associateRunningDeploymentToDeploymentConfig = function(t) {
var n = {};
return angular.forEach(t, function(t, r) {
n[r] = {}, angular.forEach(t, function(t, a) {
var o = e("deploymentStatus")(t);
"New" !== o && "Pending" !== o && "Running" !== o || (n[r][a] = t);
});
}), n;
}, i.prototype.getActiveDeployment = function(t) {
var n = e("deploymentIsInProgress"), r = e("annotation"), a = null;
return _.each(t, function(e) {
if (n(e)) return a = null, !1;
"Complete" === r(e, "deploymentStatus") && (!a || a.metadata.creationTimestamp < e.metadata.creationTimestamp) && (a = e);
}), a;
}, i.prototype.getRevision = function(e) {
return d(e, "deployment.kubernetes.io/revision");
}, i.prototype.isActiveReplicaSet = function(e, t) {
var n = this.getRevision(e), r = this.getRevision(t);
return !(!n || !r) && n === r;
}, i.prototype.getActiveReplicaSet = function(e, t) {
var n = this.getRevision(t);
if (!n) return null;
var r = this;
return _.find(e, function(e) {
return r.getRevision(e) === n;
});
}, i.prototype.getScaleResource = function(e) {
var t = {
resource: n.kindToResource(e.kind) + "/scale"
};
<<<<<<< HEAD
switch (t.kind) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
switch (e.kind) {
>>>>>>> update deployments service to use getPreferredVersion
case "DeploymentConfig":
break;

case "Deployment":
case "ReplicaSet":
case "ReplicationController":
<<<<<<< HEAD
<<<<<<< HEAD
t.group = "extensions";
=======
n.group = "extensions";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.group = "extensions";
>>>>>>> update deployments service to use getPreferredVersion
break;

default:
return null;
}
<<<<<<< HEAD
<<<<<<< HEAD
return t;
}, c.prototype.scale = function(e, n) {
var a = this.getScaleResource(e);
if (!a) return t.reject({
=======
return n;
}, i.prototype.scale = function(e, t) {
<<<<<<< HEAD
var a = this.getScaleResource(e);
if (!a) return r.reject({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = this.getScaleResource(e);
if (!r) return a.reject({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
return t;
}, i.prototype.scale = function(e, n) {
var a = this.getScaleResource(e);
if (!a) return t.reject({
>>>>>>> update deployments service to use getPreferredVersion
data: {
message: "Cannot scale kind " + e.kind + "."
}
});
var o = {
apiVersion: "extensions/v1beta1",
kind: "Scale",
metadata: {
name: e.metadata.name,
namespace: e.metadata.namespace,
creationTimestamp: e.metadata.creationTimestamp
},
spec: {
<<<<<<< HEAD
<<<<<<< HEAD
replicas: n
}
};
return r.update(a, e.metadata.name, o, {
namespace: e.metadata.namespace
});
};
var g = function(e, t) {
var n = _.get(t, [ e ]);
return !_.isEmpty(n);
}, f = function(e, t) {
var n = _.get(t, [ e ]);
return !_.isEmpty(n);
};
return c.prototype.isScalable = function(e, t, n, r, a) {
if (f(e.metadata.name, r)) return !1;
var o = p(e, "deploymentConfig");
return !o || !!t && (!t[o] || !g(o, n) && _.get(a, [ o, "metadata", "name" ]) === e.metadata.name);
}, c.prototype.groupByDeploymentConfig = function(t) {
var n = {};
return _.each(t, function(t) {
var r = e("annotation")(t, "deploymentConfig") || "";
_.set(n, [ r, t.metadata.name ], t);
}), n;
}, c.prototype.sortByDeploymentVersion = function(e, t) {
return _.toArray(e).sort(function(e, n) {
var r, a, o = parseInt(p(e, "deploymentVersion"), 10), i = parseInt(p(n, "deploymentVersion"), 10);
return _.isFinite(o) || _.isFinite(i) ? o ? i ? t ? i - o : o - i : t ? -1 : 1 : t ? 1 : -1 : (r = _.get(e, "metadata.name", ""), a = _.get(n, "metadata.name", ""), t ? a.localeCompare(r) : r.localeCompare(a));
});
}, c.prototype.sortByRevision = function(e) {
var t = this, n = function(e) {
var n = t.getRevision(e);
if (!n) return null;
var r = parseInt(n, 10);
return isNaN(r) ? null : r;
};
return _.toArray(e).sort(function(e, t) {
var r = n(e), a = n(t);
return r || a ? r ? a ? a - r : -1 : 1 : e.metadata.name.localeCompare(t.metadata.name);
});
}, c.prototype.setPaused = function(e, t, a) {
var o = angular.copy(e), i = n.objectToResourceGroupVersion(e);
return _.set(o, "spec.paused", t), r.update(i, e.metadata.name, o, a);
}, new c();
=======
replicas: t
=======
replicas: n
>>>>>>> update deployments service to use getPreferredVersion
}
};
return r.update(a, e.metadata.name, o, {
namespace: e.metadata.namespace
});
};
var m = function(e, t) {
var n = _.get(t, [ e ]);
return !_.isEmpty(n);
}, p = function(e, t) {
var n = _.get(t, [ e ]);
return !_.isEmpty(n);
};
return i.prototype.isScalable = function(e, t, n, r, a) {
if (p(e.metadata.name, r)) return !1;
var o = d(e, "deploymentConfig");
return !o || !!t && (!t[o] || !m(o, n) && _.get(a, [ o, "metadata", "name" ]) === e.metadata.name);
}, i.prototype.groupByDeploymentConfig = function(t) {
var n = {};
return _.each(t, function(t) {
var r = e("annotation")(t, "deploymentConfig") || "";
_.set(n, [ r, t.metadata.name ], t);
}), n;
}, i.prototype.sortByDeploymentVersion = function(e, t) {
return _.toArray(e).sort(function(e, n) {
var r, a, o = parseInt(d(e, "deploymentVersion"), 10), i = parseInt(d(n, "deploymentVersion"), 10);
return _.isFinite(o) || _.isFinite(i) ? o ? i ? t ? i - o : o - i : t ? -1 : 1 : t ? 1 : -1 : (r = _.get(e, "metadata.name", ""), a = _.get(n, "metadata.name", ""), t ? a.localeCompare(r) : r.localeCompare(a));
});
}, i.prototype.sortByRevision = function(e) {
var t = this, n = function(e) {
var n = t.getRevision(e);
if (!n) return null;
var r = parseInt(n, 10);
return isNaN(r) ? null : r;
};
return _.toArray(e).sort(function(e, t) {
var r = n(e), a = n(t);
return r || a ? r ? a ? a - r : -1 : 1 : e.metadata.name.localeCompare(t.metadata.name);
});
}, i.prototype.setPaused = function(e, t, a) {
var o = angular.copy(e), i = n.objectToResourceGroupVersion(e);
return _.set(o, "spec.paused", t), r.update(i, e.metadata.name, o, a);
}, new i();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]), angular.module("openshiftConsole").factory("ImageStreamsService", function() {
return {
tagsByName: function(e) {
var t = {};
return angular.forEach(e.spec.tags, function(n) {
t[n.name] = t[n.name] || {}, t[n.name].name = n.name, t[n.name].spec = angular.copy(n);
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var r = t[n.name].spec.from;
if (r) {
var a;
if ("ImageStreamImage" === r.kind ? a = "@" : "ImageStreamTag" === r.kind && (a = ":"), a) {
r._nameConnector = a;
var o = r.name.split(a);
1 === o.length ? (r._imageStreamName = e.metadata.name, r._idOrTag = o[0], r._completeName = r._imageStreamName + a + r._idOrTag) : (r._imageStreamName = o.shift(), r._idOrTag = o.join(a), r._completeName = r._imageStreamName + a + r._idOrTag);
<<<<<<< HEAD
=======
var a = t[n.name].spec.from;
if (a) {
var r;
if ("ImageStreamImage" === a.kind ? r = "@" : "ImageStreamTag" === a.kind && (r = ":"), r) {
a._nameConnector = r;
var o = a.name.split(r);
1 === o.length ? (a._imageStreamName = e.metadata.name, a._idOrTag = o[0], a._completeName = a._imageStreamName + r + a._idOrTag) : (a._imageStreamName = o.shift(), a._idOrTag = o.join(r), a._completeName = a._imageStreamName + r + a._idOrTag);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}
}), angular.forEach(e.status.tags, function(e) {
t[e.tag] = t[e.tag] || {}, t[e.tag].name = e.tag, t[e.tag].status = angular.copy(e);
}), t;
}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), angular.module("openshiftConsole").factory("MembershipService", [ "$filter", "Constants", "gettext", "gettextCatalog", function(e, t, n, r) {
e("annotation");
var a = function() {
return _.reduce(_.slice(arguments), function(e, t, n) {
return t ? _.isEqual(n, 0) ? t : e + "-" + t : e;
}, "");
}, o = function() {
=======
}), angular.module("openshiftConsole").factory("MembershipService", [ "$filter", function(e) {
var t = e("annotation"), n = function() {
=======
}), angular.module("openshiftConsole").factory("MembershipService", [ "$filter", "Constants", function(e, t) {
e("annotation");
var n = function() {
>>>>>>> Update membership filter to use MEMBERSHIP_WHITELIST in Constants.js
return _.reduce(_.slice(arguments), function(e, t, n) {
return t ? _.isEqual(n, 0) ? t : e + "-" + t : e;
}, "");
<<<<<<< HEAD
}, a = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, r = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}), angular.module("openshiftConsole").factory("MembershipService", [ "$filter", "APIService", "Constants", function(e, t, n) {
e("annotation");
var r = function() {
return _.reduce(_.slice(arguments), function(e, t, n) {
return t ? _.isEqual(n, 0) ? t : e + "-" + t : e;
}, "");
}, a = function() {
>>>>>>> Fix membershipService.mapRolebindingsForUI to properly list custom Roles in the output
return {
User: {
kind: "User",
sortOrder: 1,
name: "User",
subjects: {}
},
Group: {
kind: "Group",
sortOrder: 2,
name: "Group",
subjects: {}
},
ServiceAccount: {
kind: "ServiceAccount",
sortOrder: 3,
<<<<<<< HEAD
description: r.getString(n("Service accounts provide a flexible way to control API access without sharing a regular user’s credentials.")),
helpLinkKey: "service_accounts",
name: "ServiceAccount",
subjects: {}
}
};
}, i = function(e) {
return _.reduce(e, function(e, t) {
var n = APIService.parseGroupVersion(t.apiVersion).group;
return e[a(n, t.kind, t.metadata.name)] = t, e;
}, {});
};
return {
sortRoles: function(e) {
return _.sortBy(e, "metadata.name");
},
filterRoles: function(e) {
return _.filter(e, function(e) {
return "Role" === e.kind || _.includes(t.MEMBERSHIP_WHITELIST, e.metadata.name);
});
},
mapRolesForUI: function(e, t) {
return _.merge(i(e), i(t));
},
isLastRole: function(e, t) {
return 1 === _.filter(t, function(t) {
return _.some(t.subjects, {
name: e
});
}).length;
},
getSubjectKinds: o,
mapRolebindingsForUI: function(e, t) {
var n = _.reduce(e, function(e, n) {
var r = a(n.roleRef.apiGroup, n.roleRef.kind, n.roleRef.name);
return _.each(n.subjects, function(n) {
var o = a(n.namespace, n.name);
e[n.kind].subjects[o] || (e[n.kind].subjects[o] = {
name: n.name,
roles: {}
}, n.namespace && (e[n.kind].subjects[o].namespace = n.namespace)), _.includes(e[n.kind].subjects[o].roles, r) || t[r] && (e[n.kind].subjects[o].roles[r] = t[r]);
}), e;
}, o());
return _.sortBy(n, "sortOrder");
}
=======
description: "Service accounts provide a flexible way to control API access without sharing a regular user’s credentials.",
helpLinkKey: "service_accounts",
name: "ServiceAccount",
subjects: {}
}
};
}, o = function(e) {
return _.reduce(e, function(e, n) {
var a = t.parseGroupVersion(n.apiVersion).group;
return e[r(a, n.kind, n.metadata.name)] = n, e;
}, {});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]), angular.module("openshiftConsole").factory("RolesService", [ "$q", "APIService", "DataService", function(e, t, n) {
var r = t.getPreferredVersion("roles"), a = t.getPreferredVersion("clusterroles");
return {
<<<<<<< HEAD
listAllRoles: function(t) {
return e.all([ n.list(r, t, null), n.list(a, {}, null) ]);
}
};
} ]), angular.module("openshiftConsole").factory("RoleBindingsService", [ "$q", "APIService", "DataService", function(e, t, n) {
var r = t.getPreferredVersion("rolebindings"), a = function(e, t) {
return {
kind: "RoleBinding",
apiVersion: "v1",
metadata: {
generateName: _.get(e, "metadata.name") + "-",
namespace: t
},
roleRef: {
name: _.get(e, "metadata.name"),
namespace: _.get(e, "metadata.namespace")
},
subjects: []
};
}, o = function(e, t) {
return _.isEqual(e.kind, "ServiceAccount") && (e.namespace = e.namespace || t), e;
};
return {
create: function(e, r, i, s) {
var c = a(e, i), l = t.objectToResourceGroupVersion(c);
return r = o(r, i), c.subjects.push(angular.copy(r)), n.create(l, null, c, s);
},
addSubject: function(e, r, i, s) {
var c = a(), l = _.extend(c, e), u = t.objectToResourceGroupVersion(l);
if (!r) return l;
if (r = o(r, i), _.isArray(l.subjects)) {
if (_.includes(l.subjects, r)) return;
l.subjects.push(r);
} else l.subjects = [ r ];
return n.update(u, l.metadata.name, l, s);
},
removeSubject: function(t, o, i, s, c) {
var l = _.filter(s, {
roleRef: {
name: o
}
});
return e.all(_.map(l, function(e) {
var o = a();
e = _.extend(o, e);
var s = {
name: t
};
return i && (s.namespace = i), e.subjects = _.reject(e.subjects, s), e.subjects.length ? n.update(r, e.metadata.name, e, c) : n.delete(r, e.metadata.name, c).then(function() {
return e;
=======
sortRoles: function(e) {
return _.sortBy(e, "metadata.name");
},
filterRoles: function(e) {
return _.filter(e, function(e) {
<<<<<<< HEAD
return _.includes(t.MEMBERSHIP_WHITELIST, e.metadata.name);
=======
return "Role" === e.kind || _.includes(n.MEMBERSHIP_WHITELIST, e.metadata.name);
>>>>>>> Fix membershipService.mapRolebindingsForUI to properly list custom Roles in the output
});
},
mapRolesForUI: function(e, t) {
return _.merge(o(e), o(t));
},
isLastRole: function(e, t) {
return 1 === _.filter(t, function(t) {
return _.some(t.subjects, {
name: e
});
}).length;
},
getSubjectKinds: a,
mapRolebindingsForUI: function(e, t) {
var n = _.reduce(e, function(e, n) {
var a = r(n.roleRef.apiGroup, n.roleRef.kind, n.roleRef.name);
return _.each(n.subjects, function(n) {
var o = r(n.namespace, n.name);
e[n.kind].subjects[o] || (e[n.kind].subjects[o] = {
name: n.name,
roles: {}
}, n.namespace && (e[n.kind].subjects[o].namespace = n.namespace)), _.includes(e[n.kind].subjects[o].roles, a) || t[a] && (e[n.kind].subjects[o].roles[a] = t[a]);
}), e;
}, {
User: {
kind: "User",
sortOrder: 1,
name: "User",
subjects: {}
},
Group: {
kind: "Group",
sortOrder: 2,
name: "Group",
subjects: {}
},
ServiceAccount: {
kind: "ServiceAccount",
sortOrder: 3,
description: "Service accounts provide a flexible way to control API access without sharing a regular user’s credentials.",
helpLinkKey: "service_accounts",
name: "ServiceAccount",
subjects: {}
}
});
return _.sortBy(n, "sortOrder");
}
};
} ]), angular.module("openshiftConsole").factory("RolesService", [ "$q", "APIService", "DataService", function(e, t, n) {
var r = t.getPreferredVersion("rolebindings"), a = t.getPreferredVersion("clusterroles");
return {
listAllRoles: function(t) {
return e.all([ n.list(r, t, null), n.list(a, {}, null) ]);
}
};
} ]), angular.module("openshiftConsole").factory("RoleBindingsService", [ "$q", "APIService", "DataService", function(e, t, n) {
var r = t.getPreferredVersion("rolebindings"), a = function(e, t) {
return {
kind: "RoleBinding",
apiVersion: "v1",
metadata: {
generateName: _.get(e, "metadata.name") + "-",
namespace: t
},
roleRef: {
name: _.get(e, "metadata.name"),
namespace: _.get(e, "metadata.namespace")
},
subjects: []
};
}, o = function(e, t) {
return _.isEqual(e.kind, "ServiceAccount") && (e.namespace = e.namespace || t), e;
};
return {
create: function(e, r, i, s) {
var c = a(e, i), l = t.objectToResourceGroupVersion(c);
return r = o(r, i), c.subjects.push(angular.copy(r)), n.create(l, null, c, s);
},
<<<<<<< HEAD
addSubject: function(e, r, a, o) {
<<<<<<< HEAD
var l = i(), u = _.extend(l, e), d = t.objectToResourceGroupVersion(u);
if (!r) return u;
if (r = s(r, a), _.isArray(u.subjects)) {
if (_.includes(u.subjects, r)) return;
u.subjects.push(r);
} else u.subjects = [ r ];
return c(u), n.update(d, u.metadata.name, u, o);
},
<<<<<<< HEAD
<<<<<<< HEAD
removeSubject: function(n, a, o, s) {
var c = _.filter(o, {
=======
removeSubject: function(n, r, o, s, c) {
var l = _.filter(s, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
removeSubject: function(t, a, o, s, l) {
var u = _.filter(s, {
>>>>>>> Update membership to use new rbac endpoints
=======
var c = i(), l = _.extend(c, e), u = t.objectToResourceGroupVersion(l);
=======
addSubject: function(e, r, i, s) {
var c = a(), l = _.extend(c, e), u = t.objectToResourceGroupVersion(l);
>>>>>>> Remove rolBindingsService.list
if (!r) return l;
if (r = o(r, i), _.isArray(l.subjects)) {
if (_.includes(l.subjects, r)) return;
l.subjects.push(r);
} else l.subjects = [ r ];
return n.update(u, l.metadata.name, l, s);
},
removeSubject: function(t, o, i, s, c) {
var l = _.filter(s, {
>>>>>>> Remove System User, System Group from Membership page
roleRef: {
name: o
}
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return e.all(_.map(c, function(e) {
var a = r();
return e = _.extend(a, e), i(e), e.subjects = _.reject(e.subjects, {
=======
return e.all(_.map(l, function(e) {
var r = a();
e = _.extend(r, e), i(e);
var s = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
name: n
}), e.subjects.length ? t.update("rolebindings", e.metadata.name, e, s) : t.delete("rolebindings", e.metadata.name, s).then(function() {
=======
return e.all(_.map(u, function(e) {
=======
return e.all(_.map(l, function(e) {
<<<<<<< HEAD
>>>>>>> Remove System User, System Group from Membership page
var a = i();
e = _.extend(a, e);
var s = {
name: t
};
<<<<<<< HEAD
return o && (s.namespace = o), e.subjects = _.reject(e.subjects, s), e.subjects.length ? n.update(r, e.metadata.name, e, l) : n.delete(r, e.metadata.name, l).then(function() {
>>>>>>> Update membership to use new rbac endpoints
=======
return o && (s.namespace = o), e.subjects = _.reject(e.subjects, s), e.subjects.length ? n.update(r, e.metadata.name, e, c) : n.delete(r, e.metadata.name, c).then(function() {
>>>>>>> Remove System User, System Group from Membership page
=======
var o = a();
e = _.extend(o, e);
var s = {
name: t
};
return i && (s.namespace = i), e.subjects = _.reject(e.subjects, s), e.subjects.length ? n.update(r, e.metadata.name, e, c) : n.delete(r, e.metadata.name, c).then(function() {
>>>>>>> Remove rolBindingsService.list
return e;
});
}));
}
};
} ]), angular.module("openshiftConsole").factory("MetricsService", [ "$filter", "$http", "$q", "$rootScope", "APIDiscovery", function(e, t, n, r, a) {
function o() {
return angular.isDefined(u) ? n.when(u) : a.getMetricsURL().then(function(e) {
return u = (e || "").replace(/\/$/, "");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}));
}
<<<<<<< HEAD
};
} ]), angular.module("openshiftConsole").factory("MetricsService", [ "$filter", "$http", "$q", "$rootScope", "APIDiscovery", function(e, t, n, r, a) {
function o() {
return angular.isDefined(u) ? n.when(u) : a.getMetricsURL().then(function(e) {
return u = (e || "").replace(/\/$/, "");
});
}
function i(e) {
if (e.length) return _.each(e, function(e) {
e.empty || !_.isNumber(e.avg) ? e.value = null : e.value = e.avg;
}), e;
}
function s(e) {
return e.join("|");
}
=======
function i(e) {
if (e.length) return _.each(e, function(e) {
e.empty || !_.isNumber(e.avg) ? e.value = null : e.value = e.avg;
}), e;
}
function s(e) {
return e.join("|");
}
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
function c() {
return o().then(function(e) {
return e ? e + "/m/stats/query" : e;
});
}
function l(e) {
return o().then(function(t) {
var n;
return n = "counter" === e.type ? t + f : t + p, URI.expand(n, {
podUID: e.pod.metadata.uid,
containerName: e.containerName,
metric: e.metric
}).toString();
});
}
var u, d, m, p = "/gauges/{containerName}%2F{podUID}%2F{metric}/data", f = "/counters/{containerName}%2F{podUID}%2F{metric}/data", g = function(e) {
var t = e.split("/");
return {
podUID: t[1],
descriptor: t[2] + "/" + t[3]
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, v = function(e, n, r) {
var a = _.keyBy(r.pods, "metadata.uid");
=======
}, h = function(e, n, a) {
<<<<<<< HEAD
var r = _.indexBy(a.pods, "metadata.uid");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
}, v = function(e, n, a) {
>>>>>>> Add SVG icons
var r = _.keyBy(a.pods, "metadata.uid");
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
}, v = function(e, n, r) {
var a = _.keyBy(r.pods, "metadata.uid");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return t.post(e, n, {
auth: {},
headers: {
Accept: "application/json",
"Content-Type": "application/json",
<<<<<<< HEAD
<<<<<<< HEAD
"Hawkular-Tenant": r.namespace
}
}).then(function(e) {
var t = {}, n = function(e, n) {
var r = f(n), o = _.get(a, [ r.podUID, "metadata", "name" ]), s = i(e);
_.set(t, [ r.descriptor, o ], s);
};
return _.each(e.data.counter, n), _.each(e.data.gauge, n), t;
});
}, h = _.template("descriptor_name:network/tx_rate|network/rx_rate,type:pod,pod_id:<%= uid %>"), y = _.template("descriptor_name:memory/usage|cpu/usage_rate,type:pod_container,pod_id:<%= uid %>,container_name:<%= containerName %>"), b = _.template("descriptor_name:network/tx_rate|network/rx_rate|memory/usage|cpu/usage_rate,type:pod,pod_id:<%= uid %>");
=======
"Hawkular-Tenant": a.namespace
=======
"Hawkular-Tenant": r.namespace
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}).then(function(e) {
var t = {}, n = function(e, n) {
var r = g(n), o = _.get(a, [ r.podUID, "metadata", "name" ]), s = i(e);
_.set(t, [ r.descriptor, o ], s);
};
return _.each(e.data.counter, n), _.each(e.data.gauge, n), t;
});
<<<<<<< HEAD
}, v = _.template("descriptor_name:network/tx_rate|network/rx_rate,type:pod,pod_id:<%= uid %>"), y = _.template("descriptor_name:memory/usage|cpu/usage_rate,type:pod_container,pod_id:<%= uid %>,container_name:<%= containerName %>"), b = _.template("descriptor_name:network/tx_rate|network/rx_rate|memory/usage|cpu/usage_rate,type:pod,pod_id:<%= uid %>");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, h = _.template("descriptor_name:network/tx_rate|network/rx_rate,type:pod,pod_id:<%= uid %>"), y = _.template("descriptor_name:memory/usage|cpu/usage_rate,type:pod_container,pod_id:<%= uid %>,container_name:<%= containerName %>"), b = _.template("descriptor_name:network/tx_rate|network/rx_rate|memory/usage|cpu/usage_rate,type:pod,pod_id:<%= uid %>");
>>>>>>> Add SVG icons
return {
isAvailable: function(e) {
return o().then(function(n) {
return !!n && (!e || !!d || !m && t.get(n).then(function() {
return d = !0, !0;
}, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return m = !0, r.$broadcast("metrics-connection-failed", {
=======
return m = !0, a.$broadcast("metrics-connection-failed", {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return p = !0, a.$broadcast("metrics-connection-failed", {
>>>>>>> Updates for Service Instance & Bindings
=======
return m = !0, a.$broadcast("metrics-connection-failed", {
>>>>>>> Support EnvFrom in the Env Editors
=======
return m = !0, r.$broadcast("metrics-connection-failed", {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
url: n,
response: e
}), !1;
}));
});
},
getMetricsURL: o,
get: function(e) {
return l(e).then(function(n) {
if (!n) return null;
<<<<<<< HEAD
<<<<<<< HEAD
var r = {
bucketDuration: e.bucketDuration,
start: e.start
};
return e.end && (r.end = e.end), t.get(n, {
=======
var a = {
bucketDuration: e.bucketDuration,
start: e.start
};
return e.end && (a.end = e.end), t.get(n, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = {
bucketDuration: e.bucketDuration,
start: e.start
};
return e.end && (r.end = e.end), t.get(n, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": e.namespace
},
<<<<<<< HEAD
<<<<<<< HEAD
params: r
=======
params: a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
params: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).then(function(t) {
return _.assign(t, {
metricID: e.metric,
data: i(t.data)
});
});
});
},
getCurrentUsage: function(e) {
return l(e).then(function(n) {
if (!n) return null;
<<<<<<< HEAD
<<<<<<< HEAD
var r = {
=======
var a = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
bucketDuration: "1mn",
start: "-1mn"
};
return t.get(n, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": e.namespace
},
<<<<<<< HEAD
<<<<<<< HEAD
params: r
=======
params: a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
params: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).then(function(t) {
return _.assign(t, {
metricID: e.metric,
usage: _.head(i(t.data))
<<<<<<< HEAD
=======
});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
},
getPodMetrics: function(e) {
return c().then(function(t) {
var r = {
bucketDuration: e.bucketDuration,
start: e.start
};
e.end && (r.end = e.end);
var a = [], o = [], i = s(_.map(e.pods, "metadata.uid"));
return e.containerName ? (a.push(_.assign({
tags: y({
uid: i,
containerName: e.containerName
})
}, r)), a.push(_.assign({
tags: h({
uid: i
})
}, r))) : a.push(_.assign({
tags: b({
uid: i
})
}, r)), _.each(a, function(n) {
var r = v(t, n, e);
o.push(r);
}), n.all(o).then(function(e) {
var t = {};
return _.each(e, function(e) {
_.assign(t, e);
}), t;
});
});
},
<<<<<<< HEAD
getPodMetrics: function(e) {
return c().then(function(t) {
var r = {
bucketDuration: e.bucketDuration,
start: e.start
};
e.end && (r.end = e.end);
var a = [], o = [], i = s(_.map(e.pods, "metadata.uid"));
return e.containerName ? (a.push(_.assign({
tags: y({
uid: i,
containerName: e.containerName
})
}, r)), a.push(_.assign({
tags: h({
uid: i
})
}, r))) : a.push(_.assign({
tags: b({
uid: i
})
}, r)), _.each(a, function(n) {
var r = v(t, n, e);
o.push(r);
}), n.all(o).then(function(e) {
var t = {};
return _.each(e, function(e) {
_.assign(t, e);
}), t;
});
});
},
getCustomMetrics: function(e) {
var n = e.metadata.namespace, r = e.metadata.uid;
return o().then(function(e) {
if (!e) return null;
var a = e + "/m", o = {
tags: "custom_metric:true,pod_id:" + r
};
return t.get(a, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": n
},
params: o
}).then(function(e) {
return _.map(e.data, function(e) {
return {
id: e.id,
name: e.tags.metric_name,
unit: e.tags.units,
description: e.tags.description,
type: e.type
};
=======
getCustomMetrics: function(e) {
var n = e.metadata.namespace, r = e.metadata.uid;
return o().then(function(e) {
if (!e) return null;
var a = e + "/m", o = {
tags: "custom_metric:true,pod_id:" + r
};
return t.get(a, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": n
},
params: o
}).then(function(e) {
return _.map(e.data, function(e) {
return {
id: e.id,
name: e.tags.metric_name,
unit: e.tags.units,
description: e.tags.description,
type: e.type
};
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
});
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("MetricsCharts", [ "$timeout", "ConversionService", "gettext", "gettextCatalog", function(e, t, n, r) {
var a = function(e, n) {
=======
} ]), angular.module("openshiftConsole").factory("MetricsCharts", [ "$timeout", "ConversionService", function(e, t) {
var n = function(e, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
if (void 0 === e.value || null === e.value) return null;
switch (n) {
case "memory/usage":
return _.round(t.bytesToMiB(e.value), 2);

case "cpu/usage_rate":
return t.millicoresToCores(e.value);

case "network/rx_rate":
case "network/tx_rate":
return _.round(t.bytesToKiB(e.value), 2);

default:
return _.round(e.value);
}
<<<<<<< HEAD
<<<<<<< HEAD
}, o = {
"memory/usage": r.getString(n("Memory")),
"cpu/usage_rate": "CPU",
"network/tx_rate": r.getString(n("Sent")),
"network/rx_rate": r.getString(n("Received"))
=======
}, a = {
=======
}, r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
"memory/usage": "Memory",
"cpu/usage_rate": "CPU",
"network/tx_rate": "Sent",
"network/rx_rate": "Received"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
return {
uniqueID: function() {
return _.uniqueId("metrics-");
},
getDefaultUpdateInterval: function() {
return 6e4;
},
getTimeRangeOptions: function() {
return [ {
<<<<<<< HEAD
label: n("Last hour"),
value: 60
}, {
label: n("Last 4 hours"),
value: 240
}, {
label: n("Last 12 hours"),
value: 720
}, {
label: n("Last day"),
value: 1440
}, {
label: n("Last 3 days"),
value: 4320
}, {
label: n("Last week"),
=======
label: "Last hour",
value: 60
}, {
label: "Last 4 hours",
value: 240
}, {
label: "Last 12 hours",
value: 720
}, {
label: "Last day",
value: 1440
}, {
label: "Last 3 days",
value: 4320
}, {
label: "Last week",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
value: 10080
} ];
},
getDefaultSparklineConfig: function(e, t, n) {
return {
bindto: "#" + e,
axis: {
x: {
show: !n,
type: "timeseries",
padding: {
left: 0,
bottom: 0
},
tick: {
type: "timeseries",
format: "%a %H:%M"
}
},
y: {
show: !n,
label: t,
min: 0,
padding: {
left: 0,
top: 20,
bottom: 0
}
}
},
point: {
show: !1
},
size: {
height: n ? 35 : 175
},
tooltip: {
format: {
value: function(e) {
var n = "cores" === t ? 3 : 2;
return d3.round(e, n) + " " + t;
}
}
}
};
},
getSparklineData: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
var t, n = {
type: "spline",
x: "dates",
names: o
}, r = {};
return _.each(e, function(e, n) {
t = [ "dates" ], r[n] = [ n ], _.each(e, function(e) {
var o = a(e, n);
t.push(e.start), r[n].push(o);
});
}), n.columns = [ t ].concat(_.values(r)), n;
=======
var t, r = {
=======
var t, a = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "spline",
x: "dates",
names: r
}, o = {};
return _.each(e, function(e, r) {
t = [ "dates" ], o[r] = [ r ], _.each(e, function(e) {
var a = n(e, r);
t.push(e.start), o[r].push(a);
});
<<<<<<< HEAD
}), r.columns = [ t ].concat(_.values(o)), r;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), a.columns = [ t ].concat(_.values(o)), a;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
formatUsage: function(e) {
return e < .001 ? "0" : e < 1 ? d3.format(".1r")(e) : d3.format(".2r")(e);
},
redraw: function(t) {
e(function() {
_.each(t, function(e) {
e.flush();
});
}, 0);
}
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("StorageService", [ "$filter", "APIService", "DataService", "NotificationsService", function(e, t, n, r) {
var a = e("getErrorDetails"), o = e("humanizeKind");
=======
} ]), angular.module("openshiftConsole").factory("StorageService", [ "$filter", "APIService", "DataService", "NotificationsService", function(e, t, n, a) {
var r = e("getErrorDetails"), o = e("humanizeKind");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").factory("StorageService", [ "$filter", "APIService", "DataService", "NotificationsService", function(e, t, n, r) {
var a = e("getErrorDetails"), o = e("humanizeKind");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
createVolume: function(e, t) {
return {
name: e,
persistentVolumeClaim: {
claimName: t.metadata.name
}
};
},
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
createVolumeMount: function(e, t, n, r) {
var a = {
name: e,
mountPath: t,
readOnly: !!r
};
return n && (a.subPath = n), a;
},
getVolumeNames: function(e) {
var t = _.get(e, "spec.volumes", []);
return _.map(t, "name");
},
getMountPaths: function(e, t) {
var n = [], r = _.get(e, "spec.containers", []);
return _.each(r, function(e) {
if (!t || t(e)) {
var r = _.get(e, "volumeMounts", []);
_.each(r, function(e) {
n.push(e.mountPath);
});
}
}), n;
},
removeVolume: function(e, i, s) {
var c = angular.copy(e), l = _.get(c, "spec.template.spec.volumes");
_.remove(l, {
name: i.name
});
var u = _.get(c, "spec.template.spec.containers");
_.each(u, function(e) {
_.remove(e.volumeMounts, {
name: i.name
});
});
var d = t.objectToResourceGroupVersion(c);
return n.update(d, c.metadata.name, c, s).then(function() {
r.addNotification({
type: "success",
message: "Volume " + i.name + " removed from " + o(e.kind) + " " + e.metadata.name + "."
});
}, function(t) {
r.addNotification({
type: "error",
message: "An error occurred removing volume " + i.name + " from " + o(e.kind) + " " + e.metadata.name + ".",
details: a(t)
<<<<<<< HEAD
});
});
}
};
} ]), angular.module("openshiftConsole").factory("LimitRangesService", [ "$filter", "$window", "Constants", function(e, t, n) {
var r = e("annotation"), a = e("usageValue"), o = e("usageWithUnits"), i = function(e, t) {
return !!e && (!t || a(e) < a(t));
}, s = function(e, t) {
return !!e && (!t || a(e) > a(t));
}, c = function(e) {
return _.includes(n.CLUSTER_RESOURCE_OVERRIDES_EXEMPT_PROJECT_NAMES, e);
}, l = function(e) {
return _.some(n.CLUSTER_RESOURCE_OVERRIDES_EXEMPT_PROJECT_PREFIXES, function(t) {
return _.startsWith(e, t);
});
}, u = function(e) {
var t = r(e, "quota.openshift.io/cluster-resource-override-enabled");
return !!t && "true" !== t;
}, d = function(e) {
var t = _.get(e, "metadata.name");
return c(t) || l(t) || u(e);
}, m = function(e) {
return !!_.get(t, "OPENSHIFT_CONFIG.clusterResourceOverridesEnabled") && !d(e);
}, p = function(e, t) {
return m(t);
<<<<<<< HEAD
}, g = function(e, t) {
return "cpu" === e && m(t);
}, f = function(e, t, n) {
=======
}, f = function(e, t) {
return "cpu" === e && m(t);
}, g = function(e, t, n) {
>>>>>>> Use new clusterResourceOverridesEnabled flag
var r = {};
return angular.forEach(e, function(e) {
angular.forEach(e.spec.limits, function(e) {
if (e.type === n) {
e.min && s(e.min[t], r.min) && (r.min = e.min[t]), e.max && i(e.max[t], r.max) && (r.max = e.max[t]), e.default && (r.defaultLimit = e.default[t] || r.defaultLimit), e.defaultRequest && (r.defaultRequest = e.defaultRequest[t] || r.defaultRequest);
var a;
e.maxLimitRequestRatio && (a = e.maxLimitRequestRatio[t]) && (!r.maxLimitRequestRatio || a < r.maxLimitRequestRatio) && (r.maxLimitRequestRatio = a);
}
});
}), r;
};
return {
<<<<<<< HEAD
getEffectiveLimitRange: f,
hasClusterResourceOverrides: m,
isRequestCalculated: p,
isLimitCalculated: g,
validatePodLimits: function(t, n, r, i) {
if (!r || !r.length) return [];
var s = f(t, n, "Pod"), c = f(t, n, "Container"), l = 0, u = 0, d = s.min && a(s.min), m = s.max && a(s.max), v = [], h = e("computeResourceLabel")(n, !0);
=======
getEffectiveLimitRange: g,
hasClusterResourceOverrides: m,
isRequestCalculated: p,
isLimitCalculated: f,
validatePodLimits: function(t, n, r, i) {
if (!r || !r.length) return [];
var s = g(t, n, "Pod"), c = g(t, n, "Container"), l = 0, u = 0, d = s.min && a(s.min), m = s.max && a(s.max), v = [], h = e("computeResourceLabel")(n, !0);
>>>>>>> Use new clusterResourceOverridesEnabled flag
return angular.forEach(r, function(e) {
var t = e.resources || {}, r = t.requests && t.requests[n] || c.defaultRequest;
r && (l += a(r));
var o = t.limits && t.limits[n] || c.defaultLimit;
o && (u += a(o));
<<<<<<< HEAD
}), p(0, i) || (d && l < d && v.push(h + " request total for all containers is less than pod minimum (" + o(s.min, n) + ")."), m && l > m && v.push(h + " request total for all containers is greater than pod maximum (" + o(s.max, n) + ").")), g(n, i) || (d && u < d && v.push(h + " limit total for all containers is less than pod minimum (" + o(s.min, n) + ")."), m && u > m && v.push(h + " limit total for all containers is greater than pod maximum (" + o(s.max, n) + ").")), v;
=======
}), p(0, i) || (d && l < d && v.push(h + " request total for all containers is less than pod minimum (" + o(s.min, n) + ")."), m && l > m && v.push(h + " request total for all containers is greater than pod maximum (" + o(s.max, n) + ").")), f(n, i) || (d && u < d && v.push(h + " limit total for all containers is less than pod minimum (" + o(s.min, n) + ")."), m && u > m && v.push(h + " limit total for all containers is greater than pod maximum (" + o(s.max, n) + ").")), v;
>>>>>>> Use new clusterResourceOverridesEnabled flag
}
};
} ]), angular.module("openshiftConsole").factory("RoutesService", [ "$filter", function(e) {
var t = function(e) {
return angular.isString(e);
}, n = function(e, n) {
return _.find(n.spec.ports, function(n) {
return t(e) ? n.name === e : n.targetPort === e;
});
}, r = function(e, r, a, o, i, s) {
if ("Service" === r.kind) {
var c = _.get(a, [ r.name ]);
if (c) {
var l = e.spec.port ? e.spec.port.targetPort : null;
l ? n(l, c) || (t(l) ? o.push(s.getString(i('Route target port is set to "')) + l + s.getString(i('", but service "')) + c.metadata.name + s.getString(i('" has no port with that name.'))) : o.push(s.getString(i('Route target port is set to "')) + l + s.getString(i('", but service "')) + c.metadata.name + s.getString(i('" does not expose that port.')))) : _.size(c.spec.ports) > 1 && o.push('Route has no target port, but service "' + c.metadata.name + '" has multiple ports. The route will round robin traffic across all exposed ports on the service.');
} else o.push(s.getString(i("Routes to service")) + '"' + r.name + '"', s.getString(i("but service does not exist.")));
}
}, a = function(e, t) {
e.spec.tls && (e.spec.tls.termination || t.push("Route has a TLS configuration, but no TLS termination type is specified. TLS will not be enabled until a termination type is set."), "passthrough" === e.spec.tls.termination && e.spec.path && t.push('Route path "' + e.spec.path + '" will be ignored since the route uses passthrough termination.'));
}, o = function(e, t) {
var n = _.get(e, "spec.wildcardPolicy");
angular.forEach(e.status.ingress, function(e) {
var r = _.find(e.conditions, {
type: "Admitted",
status: "False"
});
if (r) {
var a = "Requested host " + (e.host || "<unknown host>") + " was rejected by the router.";
(r.message || r.reason) && (a += " Reason: " + (r.message || r.reason) + "."), t.push(a);
}
r || "Subdomain" !== n || e.wildcardPolicy === n || t.push('Router "' + e.routerName + '" does not support wildcard subdomains. Your route will only be available at host ' + e.host + ".");
});
}, i = function(e) {
return _.some(e.status.ingress, function(e) {
return _.some(e.conditions, {
type: "Admitted",
status: "True"
});
});
}, s = e("annotation"), c = function(e) {
return "true" !== s(e, "openshift.io/host.generated");
}, l = function(e) {
var t = 0;
i(e) && (t += 11);
var n = _.get(e, "spec.alternateBackends");
return _.isEmpty(n) || (t += 5), c(e) && (t += 3), e.spec.tls && (t += 1), t;
}, u = function(e) {
var t = {}, n = function(e, n) {
t[n] = t[n] || [], t[n].push(e);
};
return _.each(e, function(e) {
n(e, e.spec.to.name);
var t = _.get(e, "spec.alternateBackends", []);
_.each(t, function(t) {
"Service" === t.kind && n(e, t.name);
});
}), t;
};
return {
getRouteWarnings: function(e, t) {
var n = [];
return e ? (r(e, e.spec.to, t, n), _.each(e.spec.alternateBackends, function(a) {
r(e, a, t, n);
}), a(e, n), o(e, n), n) : n;
},
getServicePortForRoute: n,
getPreferredDisplayRoute: function(e, t) {
var n = l(e);
return l(t) > n ? t : e;
},
groupByService: function(e, t) {
return t ? u(e) : _.groupBy(e, "spec.to.name");
},
getSubdomain: function(e) {
return _.get(e, "spec.host", "").replace(/^[a-z0-9]([-a-z0-9]*[a-z0-9])\./, "");
},
isCustomHost: c,
sortRoutesByScore: function(e) {
return _.orderBy(e, [ l ], [ "desc" ]);
}
};
} ]), angular.module("openshiftConsole").factory("ChartsService", [ "Logger", function(e) {
return {
updateDonutCenterText: function(t, n, r) {
var a = d3.select(t).select("text.c3-chart-arcs-title");
a ? (a.selectAll("*").remove(), a.insert("tspan").text(n).classed(r ? "donut-title-big-pf" : "donut-title-med-pf", !0).attr("dy", r ? 0 : 5).attr("x", 0), r && a.insert("tspan").text(r).classed("donut-title-small-pf", !0).attr("dy", 20).attr("x", 0)) : e.warn("Can't select donut title element");
}
};
} ]), angular.module("openshiftConsole").service("HomePagePreferenceService", [ "$location", "$timeout", "$q", "$uibModal", "AuthService", "Logger", "Navigate", "NotificationsService", function(e, t, n, r, a, o, i, s) {
var c = function() {
localStorage.removeItem("openshift/home-page-pref/");
};
<<<<<<< HEAD
=======
return {
getHomePagePreference: function() {
var e;
try {
e = JSON.parse(localStorage.getItem("openshift/home-page-pref/"));
} catch (e) {
return o.error("Could not parse homePagePref as JSON", e), "catalog-home";
}
return _.get(e, "type", "catalog-home");
},
setHomePagePreference: function(e) {
localStorage.setItem("openshift/home-page-pref/", JSON.stringify(e));
},
getHomePageProjectName: function() {
var e;
try {
e = JSON.parse(localStorage.getItem("openshift/home-page-pref/"));
} catch (e) {
return o.error("Could not parse homePagePref as JSON", e), null;
}
return e && "project-overview" === e.type ? e.project : null;
},
getHomePagePath: function() {
var e = this.getHomePagePreference();
if ("project-overview" === e) {
var t = this.getHomePageProjectName();
return "/" + i.projectOverviewURL(t) + "?isHomePage=true";
}
return "project-list" === e ? "/projects" : "/catalog";
},
notifyInvalidProjectHomePage: function(e) {
c(), s.addNotification({
id: "invalid-home-page-preference",
type: "warning",
message: "Home page project not found.",
details: "Project " + e + " no longer exists or you do not have access to it.",
links: [ {
href: "",
label: "Set Home Page",
onClick: function() {
return r.open({
<<<<<<< HEAD
animation: !0,
=======
>>>>>>> Update modals to align with PatternFly standard
templateUrl: "views/modals/set-home-page-modal.html",
controller: "SetHomePageModalController"
}), !0;
}
} ]
});
}
};
} ]), angular.module("openshiftConsole").factory("HPAService", [ "$filter", "$q", "LimitRangesService", "MetricsService", function(e, t, n, r) {
var a = function(e, t, n) {
return _.every(n, function(n) {
return _.get(n, [ "resources", t, e ]);
});
}, o = function(e, t) {
return a(e, "requests", t);
}, i = function(e, t) {
return a(e, "limits", t);
}, s = function(e, t, r) {
return !!n.getEffectiveLimitRange(r, e, "Container")[t];
}, c = function(e, t) {
<<<<<<< HEAD
return i(e, "limits", t);
}, l = function(e, t, r, a) {
return !!n.getEffectiveLimitRange(r, e, "Container", a)[t];
}, u = function(e, t, n) {
return l(e, "defaultRequest", t, n);
}, d = function(e, t, n) {
return l(e, "defaultLimit", t, n);
}, m = function(e, t, r) {
return !(!s("cpu", e) && !u("cpu", t, r)) || (!(!c("cpu", e) && !d("cpu", t, e)) || !!n.isLimitCalculated("cpu", r) && (c("memory", e) || d("memory", t, r)));
}, p = e("humanizeKind"), f = e("hasDeploymentConfig");
>>>>>>> Set Home Page Preference
return {
getHomePagePreference: function() {
var e;
try {
e = JSON.parse(localStorage.getItem("openshift/home-page-pref/"));
} catch (e) {
return o.error("Could not parse homePagePref as JSON", e), "catalog-home";
}
return _.get(e, "type", "catalog-home");
},
setHomePagePreference: function(e) {
localStorage.setItem("openshift/home-page-pref/", JSON.stringify(e));
},
getHomePageProjectName: function() {
var e;
try {
e = JSON.parse(localStorage.getItem("openshift/home-page-pref/"));
} catch (e) {
return o.error("Could not parse homePagePref as JSON", e), null;
}
return e && "project-overview" === e.type ? e.project : null;
},
getHomePagePath: function() {
return "/projects";
},
notifyInvalidProjectHomePage: function(e) {
c(), s.addNotification({
id: "invalid-home-page-preference",
type: "warning",
message: "Home page project not found.",
details: "Project " + e + " no longer exists or you do not have access to it.",
links: [ {
href: "",
label: "Set Home Page",
onClick: function() {
return r.open({
templateUrl: "views/modals/set-home-page-modal.html",
controller: "SetHomePageModalController"
}), !0;
}
} ]
});
}
};
} ]), angular.module("openshiftConsole").factory("HPAService", [ "$filter", "$q", "LimitRangesService", "MetricsService", function(e, t, n, r) {
var a = e("annotation"), o = function(e, t, n) {
return _.every(n, function(n) {
return _.get(n, [ "resources", t, e ]);
});
}, i = function(e, t) {
return o(e, "requests", t);
}, s = function(e, t) {
return o(e, "limits", t);
}, c = function(e, t, r) {
return !!n.getEffectiveLimitRange(r, e, "Container")[t];
}, l = function(e, t) {
return c(e, "defaultRequest", t);
}, u = function(e, t) {
return c(e, "defaultLimit", t);
}, d = function(e, t, r) {
return !!n.hasClusterResourceOverrides(r) || (!(!i("cpu", e) && !l("cpu", t)) || !(!s("cpu", e) && !u("cpu", t)));
}, m = e("humanizeKind"), p = e("hasDeploymentConfig"), g = function(e) {
if (!e) return {
message: "Metrics might not be configured by your cluster administrator. Metrics are required for autoscaling.",
reason: "MetricsNotAvailable"
};
}, f = function(e, t, n) {
var r, a = _.get(e, "spec.template.spec.containers", []);
if (!d(a, t, n)) return r = m(e.kind), {
message: "This " + r + " does not have any containers with a CPU request set. Autoscaling will not work without a CPU request.",
reason: "NoCPURequest"
};
}, v = function(e) {
return _.some(e, function(e) {
return a(e, "autoscaling.alpha.kubernetes.io/metrics");
});
}, h = function(e) {
if (_.size(e) > 1) return {
message: "More than one autoscaler is scaling this resource. This is not recommended because they might compete with each other. Consider removing all but one autoscaler.",
reason: "MultipleHPA"
};
}, y = function(e, t) {
if ("ReplicationController" === e.kind && p(e) && _.some(t, function() {
return _.some(t, function(e) {
=======
return s(e, "defaultRequest", t);
}, l = function(e, t) {
return s(e, "defaultLimit", t);
}, u = function(e, t, r) {
return !!n.hasClusterResourceOverrides(r) || (!(!o("cpu", e) && !c("cpu", t)) || !(!i("cpu", e) && !l("cpu", t)));
}, d = e("humanizeKind"), m = e("hasDeploymentConfig"), p = function(e) {
if (!e) return {
message: "Metrics might not be configured by your cluster administrator. Metrics are required for autoscaling.",
reason: "MetricsNotAvailable"
};
}, f = function(e, t, n) {
var r, a = _.get(e, "spec.template.spec.containers", []);
if (!u(a, t, n)) return r = d(e.kind), {
message: "This " + r + " does not have any containers with a CPU request set. Autoscaling will not work without a CPU request.",
reason: "NoCPURequest"
};
}, g = function(e) {
if (_.size(e) > 1) return {
message: "More than one autoscaler is scaling this resource. This is not recommended because they might compete with each other. Consider removing all but one autoscaler.",
reason: "MultipleHPA"
<<<<<<< HEAD
}), "ReplicationController" === e.kind && m(e) && _.some(n, function() {
return _.some(n, function(e) {
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
};
}, v = function(e, t) {
if ("ReplicationController" === e.kind && m(e) && _.some(t, function() {
return _.some(t, function(e) {
>>>>>>> Broke HAPService.getHPAWarnings into a number of smaller functions
return "ReplicationController" === _.get(e, "spec.scaleTargetRef.kind");
});
})) return {
message: "This deployment is scaled by both a deployment configuration and an autoscaler. This is not recommended because they might compete with each other.",
reason: "DeploymentHasHPA"
<<<<<<< HEAD
=======
};
};
return {
hasCPURequest: u,
filterHPA: function(e, t, n) {
return _.filter(e, function(e) {
return e.spec.scaleTargetRef.kind === t && e.spec.scaleTargetRef.name === n;
});
},
getHPAWarnings: function(e, n, a, o) {
return !e || _.isEmpty(n) ? t.when([]) : r.isAvailable().then(function(t) {
return _.compact([ p(t), f(e, a, o), g(n), v(e, n) ]);
});
},
groupHPAs: function(e) {
var t = {};
return _.each(e, function(e) {
var n = e.spec.scaleTargetRef.name, r = e.spec.scaleTargetRef.kind;
n && r && (_.has(t, [ r, n ]) || _.set(t, [ r, n ], []), t[r][n].push(e));
}), t;
}
>>>>>>> Broke HAPService.getHPAWarnings into a number of smaller functions
};
};
return {
usesV2Metrics: function(e) {
return v([ e ]);
},
hasCPURequest: d,
filterHPA: function(e, t, n) {
return _.filter(e, function(e) {
return e.spec.scaleTargetRef.kind === t && e.spec.scaleTargetRef.name === n;
});
},
getHPAWarnings: function(e, n, a, o) {
return !e || _.isEmpty(n) ? t.when([]) : r.isAvailable().then(function(t) {
var r = v(n);
return _.compact([ g(t), !r && f(e, a, o), h(n), y(e, n) ]);
=======
createVolumeMount: function(e, t, n, a) {
var r = {
name: e,
mountPath: t,
readOnly: !!a
};
return n && (r.subPath = n), r;
},
getVolumeNames: function(e) {
var t = _.get(e, "spec.volumes", []);
return _.map(t, "name");
},
getMountPaths: function(e, t) {
var n = [], a = _.get(e, "spec.containers", []);
return _.each(a, function(e) {
if (!t || t(e)) {
var a = _.get(e, "volumeMounts", []);
_.each(a, function(e) {
n.push(e.mountPath);
});
}
}), n;
},
removeVolume: function(e, i, s) {
var c = angular.copy(e), l = _.get(c, "spec.template.spec.volumes");
_.remove(l, {
name: i.name
});
var u = _.get(c, "spec.template.spec.containers");
_.each(u, function(e) {
_.remove(e.volumeMounts, {
name: i.name
});
});
var d = t.objectToResourceGroupVersion(c);
return n.update(d, c.metadata.name, c, s).then(function() {
a.addNotification({
type: "success",
message: "Volume " + i.name + " removed from " + o(e.kind) + " " + e.metadata.name + "."
});
}, function(t) {
a.addNotification({
type: "error",
message: "An error occurred removing volume " + i.name + " from " + o(e.kind) + " " + e.metadata.name + ".",
details: r(t)
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
});
}
<<<<<<< HEAD
};
} ]), angular.module("openshiftConsole").factory("LimitRangesService", [ "$filter", "LIMIT_REQUEST_OVERRIDES", function(e, t) {
var n = e("usageValue"), r = e("usageWithUnits"), a = e("amountAndUnit"), o = function(e, t) {
return !!e && (!t || n(e) < n(t));
}, i = function(e, t) {
return !!e && (!t || n(e) > n(t));
}, s = function(n) {
if (!t) return !1;
var r = e("annotation")(n, "quota.openshift.io/cluster-resource-override-enabled");
return !r || "true" === r;
}, c = function(e, n) {
if (!s(n)) return null;
switch (e) {
case "cpu":
return t.cpuRequestToLimitPercent;
=======
return n.auths ? (_.each(n.auths, function(e, t) {
e.auth ? o.auths[t] = a(e) : o.auths[t] = e;
}), n.credsStore && (o.credsStore = n.credsStore)) : _.each(n, function(e, t) {
o.auths[t] = a(e);
}), o;
}, i = function(e) {
var t = {}, n = _.mapValues(e, function(e, n) {
if (!e) return "";
var r;
return ".dockercfg" === n || ".dockerconfigjson" === n ? o(e, n) : (r = window.atob(e), /[\x00-\x09\x0E-\x1F]/.test(r) ? (t[n] = !0, e) : r);
});
return n.$$nonprintable = t, n;
};
return {
groupSecretsByType: function(e) {
var t = {
source: [],
image: [],
webhook: [],
other: []
};
return _.each(e.by("metadata.name"), function(e) {
switch (e.type) {
case "kubernetes.io/basic-auth":
case "kubernetes.io/ssh-auth":
case "Opaque":
e.data.WebHookSecretKey ? t.webhook.push(e) : t.source.push(e);
break;
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets

case "memory":
return t.memoryRequestToLimitPercent;

default:
return null;
}
<<<<<<< HEAD
}, l = function(e, t) {
return !!c(e, t);
}, u = function(e, n) {
return s(n) && "cpu" === e && !!t.limitCPUToMemoryPercent;
}, d = function(e, t, n, r) {
var s = {};
angular.forEach(e, function(e) {
angular.forEach(e.spec.limits, function(e) {
if (e.type === n) {
e.min && i(e.min[t], s.min) && (s.min = e.min[t]), e.max && o(e.max[t], s.max) && (s.max = e.max[t]), e.default && (s.defaultLimit = e.default[t] || s.defaultLimit), e.defaultRequest && (s.defaultRequest = e.defaultRequest[t] || s.defaultRequest);
var r;
<<<<<<< HEAD
e.maxLimitRequestRatio && (r = e.maxLimitRequestRatio[t]) && (!s.maxLimitRequestRatio || r < s.maxLimitRequestRatio) && (s.maxLimitRequestRatio = r);
}
});
=======
return ".dockercfg" === n || ".dockerconfigjson" === n ? o(e, n) : (r = window.atob(e), /[\x00-\x09\x0E-\x1F]/.test(r) ? (t[n] = !0, e) : r);
=======
}), t;
},
decodeSecretData: i,
getWebhookSecretValue: function(e, t) {
if (_.get(e, "secretReference.name") && t) {
var n = _.find(t, {
metadata: {
name: e.secretReference.name
}
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
});
return i(n.data).WebHookSecretKey;
}
return _.get(e, "secret");
}
};
} ]), angular.module("openshiftConsole").factory("ServicesService", [ "$filter", "$q", "APIService", "DataService", function(e, t, n, r) {
var a = n.getPreferredVersion("services"), o = "service.alpha.openshift.io/dependencies", i = e("annotation"), s = function(e) {
var t = i(e, o);
if (!t) return null;
try {
return JSON.parse(t);
} catch (e) {
return Logger.warn('Could not parse "service.alpha.openshift.io/dependencies" annotation', e), null;
}
}, c = function(e, t) {
t.length ? _.set(e, [ "metadata", "annotations", o ], JSON.stringify(t)) : _.has(e, [ "metadata", "annotations", o ]) && delete e.metadata.annotations[o];
};
return {
getDependentServices: function(e) {
var t, n = s(e);
if (!n) return [];
t = _.get(e, "metadata.namespace");
return _.chain(n).filter(function(e) {
return !(!e.name || e.kind && "Service" !== e.kind || e.namespace && e.namespace !== t);
}).map(function(e) {
return e.name;
}).value();
},
linkService: function(e, t) {
var n = angular.copy(e), o = s(n) || [];
return o.push({
name: t.metadata.name,
namespace: e.metadata.namespace === t.metadata.namespace ? "" : t.metadata.namespace,
kind: t.kind
}), c(n, o), r.update(a, n.metadata.name, n, {
namespace: n.metadata.namespace
});
},
removeServiceLink: function(e, n) {
var o = angular.copy(e), i = s(o) || [], l = _.reject(i, function(t) {
return t.kind === n.kind && (t.namespace || e.metadata.namespace) === n.metadata.namespace && t.name === n.metadata.name;
});
return l.length === i.length ? t.when(!0) : (c(o, l), r.update(a, o.metadata.name, o, {
namespace: o.metadata.namespace
}));
},
isInfrastructure: function(e) {
return "true" === i(e, "service.openshift.io/infrastructure");
}
};
} ]), angular.module("openshiftConsole").factory("ImagesService", [ "$filter", "APIService", "ApplicationGenerator", "DataService", function(e, t, n, r) {
var a = t.getPreferredVersion("imagestreamimports"), o = function(e) {
return _.isArray(e) ? e : _.map(e, function(e, t) {
return {
name: t,
value: e
};
>>>>>>> Update services service to use getPreferredVersion
});
var l, u, d, m;
return s.min && (l = c(t, r)) && (u = a(s.min), d = Math.ceil(u[0] / (l / 100)), m = u[1] || "", s.min = "" + d + m), s;
};
return {
<<<<<<< HEAD
<<<<<<< HEAD
getEffectiveLimitRange: d,
getRequestToLimitPercent: c,
isRequestCalculated: l,
isLimitCalculated: u,
validatePodLimits: function(t, a, o, i) {
if (!o || !o.length) return [];
var s = d(t, a, "Pod", i), c = d(t, a, "Container", i), m = 0, p = 0, f = s.min && n(s.min), g = s.max && n(s.max), v = [], h = e("computeResourceLabel")(a, !0);
return angular.forEach(o, function(e) {
var t = e.resources || {}, r = t.requests && t.requests[a] || c.defaultRequest;
r && (m += n(r));
var o = t.limits && t.limits[a] || c.defaultLimit;
o && (p += n(o));
}), l(a, i) || (f && m < f && v.push(h + " request total for all containers is less than pod minimum (" + r(s.min, a) + ")."), g && m > g && v.push(h + " request total for all containers is greater than pod maximum (" + r(s.max, a) + ").")), u(a, i) || (f && p < f && v.push(h + " limit total for all containers is less than pod minimum (" + r(s.min, a) + ")."), g && p > g && v.push(h + " limit total for all containers is greater than pod maximum (" + r(s.max, a) + ").")), v;
=======
findImage: function(e, t) {
var n = {
=======
findImage: function(e, n) {
var o = {
>>>>>>> Fix deploy image
kind: "ImageStreamImport",
apiVersion: t.toAPIVersion(a),
metadata: {
name: "newapp",
namespace: n.namespace
},
spec: {
import: !1,
images: [ {
from: {
kind: "DockerImage",
name: e
>>>>>>> Update images service to use getPreferredVersion
}
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("RoutesService", [ "$filter", function(e) {
var t = function(e) {
return angular.isString(e);
}, n = function(e, n) {
return _.find(n.spec.ports, function(n) {
return t(e) ? n.name === e : n.targetPort === e;
});
}, r = function(e, r, a, o) {
if ("Service" === r.kind) {
var i = _.get(a, [ r.name ]);
if (i) {
var s = e.spec.port ? e.spec.port.targetPort : null;
s ? n(s, i) || (t(s) ? o.push('Route target port is set to "' + s + '", but service "' + i.metadata.name + '" has no port with that name.') : o.push('Route target port is set to "' + s + '", but service "' + i.metadata.name + '" does not expose that port.')) : _.size(i.spec.ports) > 1 && o.push('Route has no target port, but service "' + i.metadata.name + '" has multiple ports. The route will round robin traffic across all exposed ports on the service.');
} else o.push('Routes to service "' + r.name + '", but service does not exist.');
}
}, a = function(e, t) {
e.spec.tls && (e.spec.tls.termination || t.push("Route has a TLS configuration, but no TLS termination type is specified. TLS will not be enabled until a termination type is set."), "passthrough" === e.spec.tls.termination && e.spec.path && t.push('Route path "' + e.spec.path + '" will be ignored since the route uses passthrough termination.'));
}, o = function(e, t) {
var n = _.get(e, "spec.wildcardPolicy");
angular.forEach(e.status.ingress, function(e) {
var r = _.find(e.conditions, {
type: "Admitted",
status: "False"
});
if (r) {
var a = "Requested host " + (e.host || "<unknown host>") + " was rejected by the router.";
(r.message || r.reason) && (a += " Reason: " + (r.message || r.reason) + "."), t.push(a);
}
r || "Subdomain" !== n || e.wildcardPolicy === n || t.push('Router "' + e.routerName + '" does not support wildcard subdomains. Your route will only be available at host ' + e.host + ".");
});
}, i = function(e) {
return _.some(e.status.ingress, function(e) {
return _.some(e.conditions, {
type: "Admitted",
status: "True"
});
});
}, s = e("annotation"), c = function(e) {
return "true" !== s(e, "openshift.io/host.generated");
}, l = function(e) {
var t = 0;
i(e) && (t += 11);
var n = _.get(e, "spec.alternateBackends");
return _.isEmpty(n) || (t += 5), c(e) && (t += 3), e.spec.tls && (t += 1), t;
}, u = function(e) {
var t = {}, n = function(e, n) {
t[n] = t[n] || [], t[n].push(e);
=======
return r.create(a, null, n, t).then(function(e) {
=======
return r.create(a, null, o, n).then(function(e) {
>>>>>>> Fix deploy image
return {
name: _.get(e, "spec.images[0].from.name"),
image: _.get(e, "status.images[0].image"),
tag: _.get(e, "status.images[0].tag"),
result: _.get(e, "status.images[0].status")
>>>>>>> Update images service to use getPreferredVersion
};
return _.each(e, function(e) {
n(e, e.spec.to.name);
var t = _.get(e, "spec.alternateBackends", []);
_.each(t, function(t) {
"Service" === t.kind && n(e, t.name);
});
}), t;
};
return {
getRouteWarnings: function(e, t) {
var n = [];
return e ? (r(e, e.spec.to, t, n), _.each(e.spec.alternateBackends, function(a) {
r(e, a, t, n);
}), a(e, n), o(e, n), n) : n;
},
getServicePortForRoute: n,
getPreferredDisplayRoute: function(e, t) {
var n = l(e);
return l(t) > n ? t : e;
},
<<<<<<< HEAD
groupByService: function(e, t) {
return t ? u(e) : _.groupBy(e, "spec.to.name");
},
getSubdomain: function(e) {
return _.get(e, "spec.host", "").replace(/^[a-z0-9]([-a-z0-9]*[a-z0-9])\./, "");
=======
getResources: function(e) {
var t = [], r = {
"openshift.io/generated-by": "OpenShiftWebConsole"
}, a = o(e.env), i = [], s = [], c = 0;
if (_.forEach(e.volumes, function(t, n) {
c++;
var r = e.name + "-" + c;
i.push({
name: r,
emptyDir: {}
}), s.push({
name: r,
mountPath: n
});
}), !e.namespace) {
var l = {
kind: "ImageStream",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels
},
spec: {
tags: [ {
name: e.tag,
annotations: _.assign({
"openshift.io/imported-from": e.image
}, r),
from: {
kind: "DockerImage",
name: e.image
>>>>>>> Update images service to use getPreferredVersion
},
isCustomHost: c,
sortRoutesByScore: function(e) {
return _.sortByOrder(e, [ l ], [ "desc" ]);
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("ChartsService", [ "Logger", function(e) {
return {
updateDonutCenterText: function(t, n, r) {
var a = d3.select(t).select("text.c3-chart-arcs-title");
a ? (a.selectAll("*").remove(), a.insert("tspan").text(n).classed(r ? "donut-title-big-pf" : "donut-title-med-pf", !0).attr("dy", r ? 0 : 5).attr("x", 0), r && a.insert("tspan").text(r).classed("donut-title-small-pf", !0).attr("dy", 20).attr("x", 0)) : e.warn("Can't select donut title element");
}
};
} ]), angular.module("openshiftConsole").factory("HPAService", [ "$filter", "$q", "LimitRangesService", "MetricsService", "Logger", function(e, t, n, r, a) {
var o = function(e) {
return n.getRequestToLimitPercent("cpu", e);
}, i = function(e, t, n) {
return _.every(n, function(n) {
return _.get(n, [ "resources", t, e ]);
});
}, s = function(e, t) {
return i(e, "requests", t);
}, c = function(e, t) {
return i(e, "limits", t);
}, l = function(e, t, r, a) {
return !!n.getEffectiveLimitRange(r, e, "Container", a)[t];
}, u = function(e, t, n) {
return l(e, "defaultRequest", t, n);
}, d = function(e, t, n) {
return l(e, "defaultLimit", t, n);
}, m = function(e, t, r) {
return !(!s("cpu", e) && !u("cpu", t, r)) || (!(!c("cpu", e) && !d("cpu", t, e)) || !!n.isLimitCalculated("cpu", r) && (c("memory", e) || d("memory", t, r)));
}, p = e("humanizeKind"), f = e("hasDeploymentConfig");
return {
convertRequestPercentToLimit: function(e, t) {
var n = o(t);
if (!n) return a.warn("convertRequestPercentToLimit called, but no request/limit ratio defined."), NaN;
if (!e) return e;
var r = n / 100 * e;
return Math.round(r);
},
convertLimitPercentToRequest: function(e, t) {
var n = o(t);
if (!n) return a.warn("convertLimitPercentToRequest called, but no request/limit ratio defined."), NaN;
if (!e) return e;
var r = e / (n / 100);
return Math.round(r);
=======
t.push(l);
}
var u = _.assign({
deploymentconfig: e.name
}, e.labels), d = {
kind: "DeploymentConfig",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels,
annotations: r
},
spec: {
strategy: {
resources: {}
},
triggers: [ {
type: "ConfigChange"
}, {
type: "ImageChange",
imageChangeParams: {
automatic: !0,
containerNames: [ e.name ],
from: {
kind: "ImageStreamTag",
name: (e.namespace ? e.image : e.name) + ":" + e.tag,
namespace: e.namespace
}
}
} ],
replicas: 1,
test: !1,
selector: u,
template: {
metadata: {
labels: u,
annotations: r
},
spec: {
volumes: i,
containers: [ {
name: e.name,
image: e.image,
ports: e.ports,
env: a,
volumeMounts: s
} ],
resources: {}
}
}
},
status: {}
};
t.push(d);
var m;
return _.isEmpty(e.ports) || (m = {
kind: "Service",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels,
annotations: r
},
spec: {
selector: {
deploymentconfig: e.name
},
ports: _.map(e.ports, function(e) {
return n.getServicePort(e);
})
}
}, t.push(m)), t;
},
getEnvironment: function(e) {
return _.map(_.get(e, "image.dockerImageMetadata.Config.Env"), function(e) {
var t = e.indexOf("="), n = "", r = "";
return t > 0 ? (n = e.substring(0, t), t + 1 < _.size(e) && (r = e.substring(t + 1))) : n = e, {
name: n,
value: r
};
});
}
};
} ]), angular.module("openshiftConsole").factory("ConversionService", function() {
return {
bytesToMiB: function(e) {
return e ? e / 1048576 : e;
},
bytesToKiB: function(e) {
return e ? e / 1024 : e;
>>>>>>> Update images service to use getPreferredVersion
},
<<<<<<< HEAD
hasCPURequest: m,
filterHPA: function(e, t, n) {
return _.filter(e, function(e) {
return e.spec.scaleTargetRef.kind === t && e.spec.scaleTargetRef.name === n;
=======
millicoresToCores: function(e) {
return e ? e / 1e3 : e;
}
};
}), angular.module("openshiftConsole").service("BreadcrumbsService", [ "$filter", "APIService", "Navigate", function(e, t, n) {
var r = e("annotation"), a = e("displayName"), o = function(e) {
switch (e) {
case "DeploymentConfig":
return "Deployments";

default:
return _.startCase(t.kindToResource(e, !0));
}
}, i = function(e, r, i, s) {
var c, l = [], u = s.humanizedKind || o(r);
return s.includeProject && (c = s.project ? a(s.project) : i, l.push({
title: c,
link: n.projectOverviewURL(i)
})), l.push({
title: u,
link: n.resourceListURL(t.kindToResource(r), i)
}), s.parent && l.push(s.parent), s.subpage ? (l.push({
title: s.displayName || e,
link: n.resourceURL(e, r, i)
}), l.push({
title: s.subpage
})) : l.push({
title: s.displayName || e
}), l;
}, s = function(t, a) {
a = a || {};
var o, s = r(t, "deploymentConfig");
return s && (a.humanizedKind = "Deployments", a.parent = {
title: s,
link: n.configURLForResource(t)
}, (o = e("annotation")(t, "deploymentVersion")) && (a.displayName = "#" + o)), i(t.metadata.name, t.kind, t.metadata.namespace, a);
}, c = function(e, t) {
switch (e.kind) {
case "ReplicationController":
return s(e, t);

default:
return i(e.metadata.name, e.kind, e.metadata.namespace, t);
}
};
return {
getBreadcrumbs: function(e) {
return (e = e || {}).object ? c(e.object, e) : e.kind && e.name && e.namespace ? i(e.name, e.kind, e.namespace, e) : [];
}
};
} ]), angular.module("openshiftConsole").factory("QuotaService", [ "$filter", "$location", "$rootScope", "$routeParams", "$q", "APIService", "Constants", "DataService", "EventsService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l, u) {
var d = o.getPreferredVersion("resourcequotas"), m = o.getPreferredVersion("appliedclusterresourcequotas"), p = e("isNil"), f = e("usageValue"), g = e("usageWithUnits"), v = e("percent"), h = function(e) {
return _.every(e.spec.containers, function(e) {
var t = _.some(_.get(e, "resources.requests"), function(e) {
return !p(e) && 0 !== f(e);
}), n = _.some(_.get(e, "resources.limits"), function(e) {
return !p(e) && 0 !== f(e);
>>>>>>> Update quota service to use getPreferredVersion
});
},
getHPAWarnings: function(e, a, o, i) {
return !e || _.isEmpty(a) ? t.when([]) : r.isAvailable().then(function(t) {
var r = [];
t || r.push({
message: "Metrics might not be configured by your cluster administrator. Metrics are required for autoscaling.",
reason: "MetricsNotAvailable"
});
<<<<<<< HEAD
var s, c, l = _.get(e, "spec.template.spec.containers", []);
return m(l, o, i) || (s = p(e.kind), n.isRequestCalculated("cpu", i) ? (c = "This " + s + " does not have any containers with a CPU limit set. Autoscaling will not work without a CPU limit.", n.isLimitCalculated("cpu", i) && (c += " The CPU limit will be automatically calculated from the container memory limit.")) : c = "This " + s + " does not have any containers with a CPU request set. Autoscaling will not work without a CPU request.", r.push({
message: c,
reason: "NoCPURequest"
})), _.size(a) > 1 && r.push({
message: "More than one autoscaler is scaling this resource. This is not recommended because they might compete with each other. Consider removing all but one autoscaler.",
reason: "MultipleHPA"
}), "ReplicationController" === e.kind && f(e) && _.some(a, function() {
return _.some(a, function(e) {
return "ReplicationController" === _.get(e, "spec.scaleTargetRef.kind");
=======
}, y = function(e) {
return _.has(e, "spec.activeDeadlineSeconds");
}, b = function(e, t) {
var n = h(e), r = y(e);
return _.filter(t, function(e) {
var t = e.spec.quota ? e.spec.quota.scopes : e.spec.scopes;
return _.every(t, function(e) {
switch (e) {
case "Terminating":
return r;

case "NotTerminating":
return !r;

case "BestEffort":
return n;

case "NotBestEffort":
return !n;
}
return !0;
>>>>>>> Update quota service to use getPreferredVersion
});
}) && r.push({
message: "This deployment is scaled by both a deployment configuration and an autoscaler. This is not recommended because they might compete with each other.",
reason: "DeploymentHasHPA"
<<<<<<< HEAD
}), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
},
groupHPAs: function(e) {
var t = {};
return _.each(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
var n = e.spec.scaleTargetRef.name, r = e.spec.scaleTargetRef.kind;
n && r && (_.has(t, [ r, n ]) || _.set(t, [ r, n ], []), t[r][n].push(e));
=======
var n = e.spec.scaleTargetRef.name, a = e.spec.scaleTargetRef.kind;
n && a && (_.has(t, [ a, n ]) || _.set(t, [ a, n ], []), t[a][n].push(e));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n = e.spec.scaleTargetRef.name, r = e.spec.scaleTargetRef.kind;
n && r && (_.has(t, [ r, n ]) || _.set(t, [ r, n ], []), t[r][n].push(e));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), t;
=======
}, S = function(e, t) {
return e ? "Pod" === e.kind ? b(e, t) : _.has(e, "spec.template") ? b(e.spec.template, t) : t : t;
}, C = e("humanizeQuotaResource"), w = e("humanizeKind"), P = function(e, t, n) {
var r = e.status.total || e.status;
if (f(r.hard[n]) <= f(r.used[n])) {
var a, o;
return a = "Pod" === t.kind ? "You will not be able to create the " + w(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + w(t.kind) + " '" + t.metadata.name + "' but no pods will be created until resources are freed.", o = "pods" === n ? "You are at your quota for pods." : "You are at your quota for " + C(n) + " on pods.", {
type: "Pod" === t.kind ? "error" : "warning",
message: o,
details: a,
links: [ {
href: "project/" + e.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
};
}
return null;
}, j = {
cpu: "resources.requests.cpu",
"requests.cpu": "resources.requests.cpu",
"limits.cpu": "resources.limits.cpu",
memory: "resources.requests.memory",
"requests.memory": "resources.requests.memory",
"limits.memory": "resources.limits.memory",
persistentvolumeclaims: "resources.limits.persistentvolumeclaims",
"requests.storage": "resources.request.storage"
}, k = function(e, t, n, r) {
var a = e.status.total || e.status, o = j[r], i = 0;
if (_.each(n.spec.containers, function(e) {
var t = _.get(e, o);
t && (i += f(t));
}), f(a.hard[r]) < f(a.used[r]) + i) {
var s;
return s = "Pod" === t.kind ? "You may not be able to create the " + w(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + w(t.kind) + " '" + t.metadata.name + "' but you may not have pods created until resources are freed.", {
type: "warning",
message: "You are close to your quota for " + C(r) + " on pods.",
details: s,
links: [ {
href: "project/" + e.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
};
}
}, I = function(e, t) {
var n = [], r = "Pod" === e.kind ? e : _.get(e, "spec.template");
return r ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(a) {
var o = t.status.total || t.status;
if (("Pod" !== e.kind || "pods" !== a) && _.has(o, [ "hard", a ]) && _.has(o, [ "used", a ])) {
var i = P(t, e, a);
if (i) n.push(i); else if ("pods" !== a) {
var s = k(t, e, r, a);
s && n.push(s);
}
}
}), n) : n;
}, R = function(e, t, n) {
var r = [];
return e && t ? (_.each(e, function(e) {
var a = S(e, t), i = S(e, n), s = o.objectToResourceGroupVersion(e);
if (s) {
var c = o.kindToResource(e.kind, !0), l = w(e.kind), u = "";
s.group && (u = s.group + "/"), u += s.resource;
var d = function(t) {
var n = t.status.total || t.status;
!p(n.hard[u]) && f(n.hard[u]) <= f(n.used[u]) && r.push({
type: "error",
message: "You are at your quota of " + n.hard[u] + " " + ("1" === n.hard[u] ? l : c) + " in this project.",
details: "You will not be able to create the " + l + " '" + e.metadata.name + "'.",
links: [ {
href: "project/" + t.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
}), r = r.concat(I(e, t));
};
_.each(a, d), _.each(i, d);
}
}), r) : r;
}, E = [ "cpu", "requests.cpu", "memory", "requests.memory", "limits.cpu", "limits.memory" ], T = function(e, t, n, r, a) {
var o, s = "Your project is " + (r < t ? "over" : "at") + " quota. ";
return o = _.includes(E, a) ? s + "It is using " + v(t / r, 0) + " of " + g(n, a) + " " + C(a) + "." : s + "It is using " + t + " of " + r + " " + C(a) + ".", o = _.escape(o), i.QUOTA_NOTIFICATION_MESSAGE && i.QUOTA_NOTIFICATION_MESSAGE[a] && (o += " " + i.QUOTA_NOTIFICATION_MESSAGE[a]), o;
}, N = function(e, t, n) {
var r = function(e) {
var t = e.status.total || e.status;
return _.some(t.hard, function(e, r) {
if ("resourcequotas" === r) return !1;
if (!n || _.includes(n, r)) {
if (!(e = f(e))) return !1;
var a = f(_.get(t, [ "used", r ]));
return !!a && e <= a;
>>>>>>> Update quota service to use getPreferredVersion
}
};
} ]), angular.module("openshiftConsole").factory("PodsService", [ "OwnerReferencesService", function(e) {
return {
<<<<<<< HEAD
getImageIDs: function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
var n = {}, r = /^.*sha256:/;
return _.each(e, function(e) {
var a, o = _.get(e, "status.containerStatuses", []), i = _.find(o, {
name: t
}), s = _.get(i, "imageID", "");
r.test(s) && (a = s.replace(r, ""), n[a] = !0);
}), _.keys(n);
},
generateDebugPod: function(e, t) {
var n = angular.copy(e), r = _.find(n.spec.containers, {
name: t
=======
filterQuotasForResource: S,
isBestEffortPod: h,
isTerminatingPod: y,
getResourceLimitAlerts: I,
getQuotaAlerts: R,
getLatestQuotaAlerts: function(e, t) {
var n, r, o = [];
return o.push(s.list(d, t).then(function(e) {
n = e.by("metadata.name"), l.log("quotas", n);
})), o.push(s.list(m, t).then(function(e) {
r = e.by("metadata.name"), l.log("cluster quotas", r);
})), a.all(o).then(function() {
return {
quotaAlerts: R(e, n, r)
};
>>>>>>> Update quota service to use getPreferredVersion
});
return r ? (n.metadata = {
=======
var n = {}, a = /^.*sha256:/;
=======
var n = {}, r = /^.*sha256:/;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return _.each(e, function(e) {
var a, o = _.get(e, "status.containerStatuses", []), i = _.find(o, {
name: t
}), s = _.get(i, "imageID", "");
r.test(s) && (a = s.replace(r, ""), n[a] = !0);
}), _.keys(n);
},
<<<<<<< HEAD
generateDebugPod: function(e, t) {
var n = angular.copy(e), r = _.find(n.spec.containers, {
name: t
});
<<<<<<< HEAD
return a ? (n.metadata = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return r ? (n.metadata = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
name: e.metadata.name + "-debug",
annotations: {
"debug.openshift.io/source-container": t,
"debug.openshift.io/source-resource": "pods/" + e.metadata.name
},
labels: {}
<<<<<<< HEAD
<<<<<<< HEAD
}, n.spec.restartPolicy = "Never", delete n.spec.host, delete n.spec.nodeName, n.status = {}, delete r.readinessProbe, delete r.livenessProbe, r.command = [ "sleep" ], r.args = [ "3600" ], n.spec.containers = [ r ], n) : null;
=======
}, n.spec.restartPolicy = "Never", delete n.spec.host, delete n.spec.nodeName, n.status = {}, delete a.readinessProbe, delete a.livenessProbe, a.command = [ "sleep" ], a.args = [ "3600" ], n.spec.containers = [ a ], n) : null;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, n.spec.restartPolicy = "Never", delete n.spec.host, delete n.spec.nodeName, n.status = {}, delete r.readinessProbe, delete r.livenessProbe, r.command = [ "sleep" ], r.args = [ "3600" ], n.spec.containers = [ r ], n) : null;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
groupByOwnerUID: function(t) {
return e.groupByControllerUID(t);
},
filterForOwner: function(t, n) {
return e.filterForController(t, n);
}
=======
isAnyQuotaExceeded: N,
isAnyStorageQuotaExceeded: function(e, t) {
return N(e, t, [ "requests.storage", "persistentvolumeclaims" ]);
},
willRequestExceedQuota: function(e, t, n, r) {
var a = function(e) {
var t = e.status.total || e.status, a = f(r);
if (!n) return !1;
var o = _.get(t.hard, n);
if (!(o = f(o))) return !1;
var i = f(_.get(t, [ "used", n ]));
return i ? o < i + a : o < a;
>>>>>>> Update quota service to use getPreferredVersion
};
} ]), angular.module("openshiftConsole").service("CachedTemplateService", function() {
var e = null;
return {
setTemplate: function(t) {
e = t;
},
<<<<<<< HEAD
getTemplate: function() {
return e;
},
clearTemplate: function() {
e = null;
=======
getQuotaNotifications: function(e, a, o) {
var i = [], s = function(e) {
var a = e.status.total || e.status;
_.each(a.hard, function(e, s) {
var c = f(e), l = _.get(a, [ "used", s ]), d = f(l);
"resourcequotas" !== s && c && d && c <= d && i.push({
id: o + "/quota-limit-reached-" + s,
namespace: o,
type: c < d ? "warning" : "info",
message: T(0, d, e, c, s),
isHTML: !0,
skipToast: !0,
showInDrawer: !0,
actions: [ {
name: "View Quotas",
title: "View project quotas",
onClick: function() {
t.url("/project/" + r.project + "/quota"), n.$emit("NotificationDrawerWrapper.hide");
}
}, {
name: "Don't Show Me Again",
title: "Permenantly hide this notificaiton until quota limit changes",
onClick: function(e) {
u.permanentlyHideNotification(e.uid, e.namespace), n.$emit("NotificationDrawerWrapper.clear", e);
}
}, {
name: "Clear",
title: "Clear this notificaiton",
onClick: function(e) {
n.$emit("NotificationDrawerWrapper.clear", e);
>>>>>>> Update quota service to use getPreferredVersion
}
};
<<<<<<< HEAD
}).service("ProcessedTemplateService", function() {
var e = {
params: {
all: [],
generated: []
},
message: null
=======
return _.each(e, s), _.each(a, s), i;
}
>>>>>>> Update quota service to use getPreferredVersion
};
return {
<<<<<<< HEAD
<<<<<<< HEAD
setTemplateData: function(t, n, r) {
=======
setTemplateData: function(t, n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
setTemplateData: function(t, n, r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
_.each(t, function(t) {
e.params.all.push({
name: t.name,
value: t.value
});
}), _.each(n, function(t) {
t.value || e.params.generated.push(t.name);
<<<<<<< HEAD
<<<<<<< HEAD
}), r && (e.message = r);
},
getTemplateData: function() {
return e;
},
clearTemplateData: function() {
e = {
params: {
all: [],
generated: []
},
message: null
};
}
};
}), angular.module("openshiftConsole").factory("SecretsService", [ "$filter", "Logger", "NotificationsService", function(e, t, n) {
var r = function(r, a) {
n.addNotification({
type: "error",
message: "Base64-encoded " + a + " string could not be decoded.",
details: e("getErrorDetails")(r)
}), t.error("Base64-encoded " + a + " string could not be decoded.", r);
}, a = function(e) {
var t = _.pick(e, [ "email", "username", "password" ]);
if (e.auth) try {
_.spread(function(e, n) {
t.username = e, t.password = n;
})(_.split(window.atob(e.auth), ":", 2));
} catch (e) {
return void r(e, "username:password");
=======
}), a && (e.message = a);
=======
}), r && (e.message = r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
getTemplateData: function() {
return e;
},
clearTemplateData: function() {
e = {
params: {
all: [],
generated: []
},
message: null
};
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
return t;
}, o = function(e, t) {
var n, o = {
auths: {}
};
<<<<<<< HEAD
<<<<<<< HEAD
try {
n = JSON.parse(window.atob(e));
} catch (e) {
r(e, t);
}
return ".dockercfg" === t ? _.each(n, function(e, t) {
o.auths[t] = a(e);
}) : (_.each(n.auths, function(e, t) {
e.auth ? o.auths[t] = a(e) : o.auths[t] = e;
}), n.credsStore && (o.credsStore = n.credsStore)), o;
}, i = function(e) {
var t = {}, n = _.mapValues(e, function(e, n) {
var r;
return ".dockercfg" === n || ".dockerconfigjson" === n ? o(e, n) : (r = window.atob(e), /[\x00-\x09\x0E-\x1F]/.test(r) ? (t[n] = !0, e) : r);
});
return n.$$nonprintable = t, n;
=======
}), angular.module("openshiftConsole").factory("SecretsService", function() {
var e = function(e) {
var t = {
auths: {}
}, n = JSON.parse(window.atob(e));
return _.each(n, function(e, n) {
t.auths[n] = {
username: e.username,
password: e.password,
email: e.email
};
}), t;
}, t = function(e) {
var t = {
=======
}), angular.module("openshiftConsole").factory("SecretsService", [ "$filter", "Logger", "NotificationsService", function(e, t, n) {
var r = function(r, a) {
n.addNotification({
type: "error",
message: "Base64-encoded " + a + " string could not be decoded.",
details: e("getErrorDetails")(r)
}), t.error("Base64-encoded " + a + " string could not be decoded.", r);
}, a = function(e) {
var t = _.pick(e, [ "email", "username", "password" ]);
if (e.auth) try {
_.spread(function(e, n) {
t.username = e, t.password = n;
})(_.split(window.atob(e.auth), ":", 2));
} catch (e) {
return void r(e, "username:password");
}
return t;
}, o = function(e, t) {
var n, o = {
>>>>>>> Check 'auth' field when displaying .dockercfg config
auths: {}
};
<<<<<<< HEAD
<<<<<<< HEAD
}), t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} else t.auths[n] = e;
}), n.credsStore && (t.credsStore = n.credsStore), t;
>>>>>>> Avoid runtime error for some dockerconfigjson secrets
=======
try {
n = JSON.parse(window.atob(e));
} catch (e) {
r(e, t);
}
<<<<<<< HEAD
return ".dockercfg" === t ? _.each(n, function(e, t) {
o.auths[t] = r(e);
}) : (_.each(n.auths, function(e, t) {
e.auth ? o.auths[t] = r(e) : o.auths[t] = e;
}), n.credsStore && (o.credsStore = n.credsStore)), o;
>>>>>>> Check 'auth' field when displaying .dockercfg config
=======
return n.auths ? (_.each(n.auths, function(e, t) {
e.auth ? o.auths[t] = a(e) : o.auths[t] = e;
}), n.credsStore && (o.credsStore = n.credsStore)) : _.each(n, function(e, t) {
o.auths[t] = a(e);
}), o;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
return {
groupSecretsByType: function(e) {
var t = {
source: [],
image: [],
<<<<<<< HEAD
webhook: [],
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
other: []
};
return _.each(e.by("metadata.name"), function(e) {
switch (e.type) {
case "kubernetes.io/basic-auth":
case "kubernetes.io/ssh-auth":
case "Opaque":
<<<<<<< HEAD
e.data.WebHookSecretKey ? t.webhook.push(e) : t.source.push(e);
=======
t.source.push(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
break;

case "kubernetes.io/dockercfg":
case "kubernetes.io/dockerconfigjson":
t.image.push(e);
break;

default:
t.other.push(e);
}
}), t;
},
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
decodeSecretData: i,
getWebhookSecretValue: function(e, t) {
if (_.get(e, "secretReference.name") && t) {
var n = _.find(t, {
metadata: {
name: e.secretReference.name
}
=======
decodeSecretData: function(e) {
var t = {}, n = _.mapValues(e, function(e, n) {
if (!e) return "";
var r;
return ".dockercfg" === n || ".dockerconfigjson" === n ? o(e, n) : (r = window.atob(e), /[\x00-\x09\x0E-\x1F]/.test(r) ? (t[n] = !0, e) : r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
return i(n.data).WebHookSecretKey;
}
return _.get(e, "secret");
}
};
} ]), angular.module("openshiftConsole").factory("ServicesService", [ "$filter", "$q", "APIService", "DataService", function(e, t, n, r) {
var a = n.getPreferredVersion("services"), o = "service.alpha.openshift.io/dependencies", i = e("annotation"), s = function(e) {
var t = i(e, o);
=======
decodeSecretData: function(n) {
var a = {}, r = _.mapValues(n, function(n, r) {
var o;
switch (r) {
case ".dockercfg":
return e(n);

case ".dockerconfigjson":
return t(n);

default:
return o = window.atob(n), /[\x00-\x09\x0E-\x1F]/.test(o) ? (a[r] = !0, n) : o;
}
=======
decodeSecretData: function(e) {
var t = {}, n = _.mapValues(e, function(e, n) {
var a;
return ".dockercfg" === n || ".dockerconfigjson" === n ? o(e, n) : (a = window.atob(e), /[\x00-\x09\x0E-\x1F]/.test(a) ? (t[n] = !0, e) : a);
>>>>>>> Check 'auth' field when displaying .dockercfg config
});
return n.$$nonprintable = t, n;
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("ServicesService", [ "$filter", "$q", "DataService", function(e, t, n) {
<<<<<<< HEAD
var a = "service.alpha.openshift.io/dependencies", r = e("annotation"), o = function(e) {
var t = r(e, a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = "service.alpha.openshift.io/dependencies", a = e("annotation"), o = function(e) {
var t = a(e, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (!t) return null;
try {
return JSON.parse(t);
} catch (e) {
return Logger.warn('Could not parse "service.alpha.openshift.io/dependencies" annotation', e), null;
}
<<<<<<< HEAD
}, c = function(e, t) {
t.length ? _.set(e, [ "metadata", "annotations", o ], JSON.stringify(t)) : _.has(e, [ "metadata", "annotations", o ]) && delete e.metadata.annotations[o];
};
return {
getDependentServices: function(e) {
var t, n = s(e);
if (!n) return [];
t = _.get(e, "metadata.namespace");
return _.chain(n).filter(function(e) {
return !(!e.name || e.kind && "Service" !== e.kind || e.namespace && e.namespace !== t);
}).map(function(e) {
return e.name;
}).value();
},
linkService: function(e, t) {
var n = angular.copy(e), o = s(n) || [];
return o.push({
name: t.metadata.name,
namespace: e.metadata.namespace === t.metadata.namespace ? "" : t.metadata.namespace,
kind: t.kind
}), c(n, o), r.update(a, n.metadata.name, n, {
namespace: n.metadata.namespace
});
},
removeServiceLink: function(e, n) {
var o = angular.copy(e), i = s(o) || [], l = _.reject(i, function(t) {
return t.kind === n.kind && (t.namespace || e.metadata.namespace) === n.metadata.namespace && t.name === n.metadata.name;
=======
}), angular.module("openshiftConsole").factory("CatalogService", [ "$filter", "$q", "$window", "APIService", "AuthService", "Catalog", "Constants", "KeywordService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l) {
var u, d = e("tags"), m = r.getPreferredVersion("servicebindings"), p = r.getPreferredVersion("clusterserviceclasses"), f = r.getPreferredVersion("serviceinstances"), g = r.getPreferredVersion("clusterserviceplans"), v = !i.DISABLE_SERVICE_CATALOG_LANDING_PAGE && r.apiInfo(m) && r.apiInfo(p) && r.apiInfo(f) && r.apiInfo(g), h = function() {
c.debug("ProjectsService: clearing catalog items cache"), u = null;
};
a.onUserChanged(h), a.onLogout(h);
var y = function() {
return !!n.OPENSHIFT_CONFIG.templateServiceBrokerEnabled;
}, b = {};
_.each(i.CATALOG_CATEGORIES, function(e) {
_.each(e.items, function(e) {
b[e.id] = e;
var t = _.get(e, "subcategories", []);
_.each(t, function(e) {
_.each(e.items, function(e) {
b[e.id] = e;
});
});
});
});
var S = function(e, t) {
e = e.toLowerCase();
var n;
for (n = 0; n < t.length; n++) if (e === t[n].toLowerCase()) return !0;
return !1;
}, C = function(e, t) {
var n = _.get(e, "categoryAliases", []), r = [ e.id ].concat(n);
return _.some(r, function(e) {
return S(e, t);
});
}, w = function(e) {
return e.from && "ImageStreamTag" === e.from.kind && -1 === e.from.name.indexOf(":") && !e.from.namespace;
}, P = e("displayName"), j = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', "metadata.annotations.description" ];
return {
SERVICE_CATALOG_ENABLED: v,
isTemplateServiceBrokerEnabled: y,
getCatalogItems: function(e) {
if (u && !e) return c.debug("CatalogService: returning cached catalog items"), t.when(u);
c.debug("CatalogService: getCatalogItems, force refresh", e);
var n = !y();
return o.getCatalogItems(n).then(_.spread(function(e, t) {
if (t) {
var n = {
type: "error",
message: t
};
l.addNotification(n);
}
return u = e, e;
}));
},
getCategoryItem: function(e) {
return b[e];
},
categorizeImageStreams: function(e) {
var t = {};
return _.each(e, function(e) {
if (e.status) {
var n = {};
e.spec && e.spec.tags && _.each(e.spec.tags, function(e) {
var t = _.get(e, "annotations.tags");
t && (n[e.name] = t.split(/\s*,\s*/));
});
var r = !1;
_.each(b, function(a) {
(function(e) {
return _.some(e.status.tags, function(e) {
var t = n[e.tag] || [];
return C(a, t) && S("builder", t) && !S("hidden", t);
});
})(e) && (t[a.id] = t[a.id] || [], t[a.id].push(e), r = !0);
}), r || _.some(e.status.tags, function(e) {
var t = n[e.tag] || [];
return S("builder", t) && !S("hidden", t);
}) && (t[""] = t[""] || [], t[""].push(e));
}
}), t;
},
categorizeTemplates: function(e) {
var t = {};
return _.each(e, function(e) {
var n = d(e), r = !1;
_.each(b, function(a) {
C(a, n) && (t[a.id] = t[a.id] || [], t[a.id].push(e), r = !0);
}), r || (t[""] = t[""] || [], t[""].push(e));
}), t;
},
referencesSameImageStream: w,
filterImageStreams: function(e, t) {
if (!t.length) return e;
var n = [];
return _.each(e, function(e) {
var r = _.get(e, "metadata.name", ""), a = P(e, !0), o = [], i = {}, s = {};
_.each(e.spec.tags, function(e) {
if (w(e)) return i[e.name] = e.from.name, s[e.from.name] = s[e.from.name] || [], void s[e.from.name].push(e.name);
o.push(e);
});
var c = _.keyBy(o, "name");
_.each(t, function(e) {
e.test(r) || a && e.test(a) || _.each(o, function(t) {
var n = _.get(t, "annotations.tags", "");
if (/\bbuilder\b/.test(n) && !/\bhidden\b/.test(n)) {
if (!e.test(t.name) && !_.some(s[t.name], function(t) {
return e.test(t);
})) {
var r = _.get(t, "annotations.description");
r && e.test(r) || delete c[t.name];
}
} else delete c[t.name];
});
>>>>>>> Check for new templateServiceBrokerEnabled flag
});
return l.length === i.length ? t.when(!0) : (c(o, l), r.update(a, o.metadata.name, o, {
namespace: o.metadata.namespace
}));
},
<<<<<<< HEAD
isInfrastructure: function(e) {
return "true" === i(e, "service.openshift.io/infrastructure");
=======
filterTemplates: function(e, t) {
return s.filterForKeywords(e, j, t);
>>>>>>> Check for new templateServiceBrokerEnabled flag
}
};
} ]), angular.module("openshiftConsole").factory("ImagesService", [ "$filter", "APIService", "ApplicationGenerator", "DataService", function(e, t, n, r) {
var a = t.getPreferredVersion("imagestreamimports"), o = function(e) {
return _.isArray(e) ? e : _.map(e, function(e, t) {
return {
<<<<<<< HEAD
name: t,
value: e
};
=======
confirm: function(t) {
return e.open({
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: t
}
}).result;
},
confirmSaveLog: function(t) {
return e.open({
templateUrl: "views/modals/confirm-save-log.html",
controller: "ConfirmSaveLogController",
resolve: {
object: t
}
}).result;
},
showJenkinsfileExamples: function() {
e.open({
templateUrl: "views/modals/jenkinsfile-examples-modal.html",
controller: "JenkinsfileExamplesModalController",
size: "lg"
});
},
showComputeUnitsHelp: function() {
e.open({
templateUrl: "views/modals/about-compute-units-modal.html",
controller: "AboutComputeUnitsModalController"
>>>>>>> Update modals to align with PatternFly standard
});
};
return {
findImage: function(e, n) {
var o = {
kind: "ImageStreamImport",
apiVersion: t.toAPIVersion(a),
metadata: {
name: "newapp",
namespace: n.namespace
=======
}, i = function(e, t) {
t.length ? _.set(e, [ "metadata", "annotations", r ], JSON.stringify(t)) : _.has(e, [ "metadata", "annotations", r ]) && delete e.metadata.annotations[r];
};
return {
getDependentServices: function(e) {
var t, n = o(e);
if (!n) return [];
t = _.get(e, "metadata.namespace");
return _.chain(n).filter(function(e) {
return !(!e.name || e.kind && "Service" !== e.kind || e.namespace && e.namespace !== t);
}).map(function(e) {
return e.name;
}).value();
},
linkService: function(e, t) {
var r = angular.copy(e), a = o(r) || [];
return a.push({
name: t.metadata.name,
namespace: e.metadata.namespace === t.metadata.namespace ? "" : t.metadata.namespace,
kind: t.kind
}), i(r, a), n.update("services", r.metadata.name, r, {
namespace: r.metadata.namespace
});
},
removeServiceLink: function(e, r) {
var a = angular.copy(e), s = o(a) || [], c = _.reject(s, function(t) {
return t.kind === r.kind && (t.namespace || e.metadata.namespace) === r.metadata.namespace && t.name === r.metadata.name;
});
return c.length === s.length ? t.when(!0) : (i(a, c), n.update("services", a.metadata.name, a, {
namespace: a.metadata.namespace
}));
},
isInfrastructure: function(e) {
return "true" === a(e, "service.openshift.io/infrastructure");
}
};
} ]), angular.module("openshiftConsole").factory("ImagesService", [ "$filter", "ApplicationGenerator", "DataService", function(e, t, n) {
var r = function(e) {
return _.isArray(e) ? e : _.map(e, function(e, t) {
return {
name: t,
value: e
};
});
};
return {
findImage: function(e, t) {
var r = {
kind: "ImageStreamImport",
apiVersion: "v1",
metadata: {
name: "newapp",
namespace: t.namespace
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
spec: {
import: !1,
images: [ {
from: {
kind: "DockerImage",
name: e
}
} ]
},
status: {}
};
<<<<<<< HEAD
<<<<<<< HEAD
return r.create(a, null, o, n).then(function(e) {
=======
return n.create("imagestreamimports", null, a, t).then(function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return n.create("imagestreamimports", null, r, t).then(function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
name: _.get(e, "spec.images[0].from.name"),
image: _.get(e, "status.images[0].image"),
tag: _.get(e, "status.images[0].tag"),
result: _.get(e, "status.images[0].status")
};
});
},
getVolumes: function(e) {
return _.get(e, "dockerImageMetadata.Config.Volumes");
},
runsAsRoot: function(e) {
var t = _.get(e, "dockerImageMetadata.Config.User");
return !t || "0" === t || "root" === t;
},
getResources: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
var t = [], r = {
"openshift.io/generated-by": "OpenShiftWebConsole"
}, a = o(e.env), i = [], s = [], c = 0;
if (_.forEach(e.volumes, function(t, n) {
c++;
var r = e.name + "-" + c;
i.push({
name: r,
emptyDir: {}
}), s.push({
name: r,
=======
var n = [], r = {
=======
var n = [], a = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
"openshift.io/generated-by": "OpenShiftWebConsole"
}, o = r(e.env), i = [], s = [], c = 0;
if (_.forEach(e.volumes, function(t, n) {
c++;
var r = e.name + "-" + c;
i.push({
name: r,
emptyDir: {}
}), s.push({
<<<<<<< HEAD
name: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
name: r,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
mountPath: n
});
}), !e.namespace) {
var l = {
kind: "ImageStream",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels
},
spec: {
tags: [ {
name: e.tag,
annotations: _.assign({
"openshift.io/imported-from": e.image
}, a),
from: {
kind: "DockerImage",
name: e.image
},
importPolicy: {}
} ]
}
};
<<<<<<< HEAD
t.push(l);
}
var u = _.assign({
deploymentconfig: e.name
}, e.labels), d = {
=======
n.push(l);
}
<<<<<<< HEAD
var u = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var u = _.assign({
deploymentconfig: e.name
}, e.labels), d = {
>>>>>>> Let users edit app label directly for "add to project"
kind: "DeploymentConfig",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels,
annotations: a
},
spec: {
strategy: {
resources: {}
},
triggers: [ {
type: "ConfigChange"
}, {
type: "ImageChange",
imageChangeParams: {
automatic: !0,
containerNames: [ e.name ],
from: {
kind: "ImageStreamTag",
name: (e.namespace ? e.image : e.name) + ":" + e.tag,
namespace: e.namespace
}
}
} ],
replicas: 1,
test: !1,
<<<<<<< HEAD
<<<<<<< HEAD
selector: u,
template: {
metadata: {
labels: u,
=======
selector: {
app: e.name,
deploymentconfig: e.name
},
template: {
metadata: {
labels: _.assign({
deploymentconfig: e.name
}, e.labels),
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
selector: u,
template: {
metadata: {
labels: u,
<<<<<<< HEAD
>>>>>>> Let users edit app label directly for "add to project"
annotations: r
=======
annotations: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
spec: {
volumes: i,
containers: [ {
name: e.name,
image: e.image,
ports: e.ports,
<<<<<<< HEAD
env: a,
=======
env: o,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
volumeMounts: s
} ],
resources: {}
}
}
},
status: {}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
t.push(d);
var m;
return _.isEmpty(e.ports) || (m = {
=======
_.first(e.pullSecrets).name && (u.spec.template.spec.imagePullSecrets = e.pullSecrets), n.push(u);
var d;
return _.isEmpty(e.ports) || (d = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
_.first(e.pullSecrets).name && (d.spec.template.spec.imagePullSecrets = e.pullSecrets), n.push(d);
=======
_.head(e.pullSecrets).name && (d.spec.template.spec.imagePullSecrets = e.pullSecrets), n.push(d);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
n.push(d);
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
var m;
return _.isEmpty(e.ports) || (m = {
>>>>>>> Let users edit app label directly for "add to project"
=======
var p;
return _.isEmpty(e.ports) || (p = {
>>>>>>> Updates for Service Instance & Bindings
=======
var m;
return _.isEmpty(e.ports) || (m = {
>>>>>>> Support EnvFrom in the Env Editors
kind: "Service",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels,
annotations: a
},
spec: {
selector: {
deploymentconfig: e.name
},
ports: _.map(e.ports, function(e) {
<<<<<<< HEAD
return n.getServicePort(e);
})
}
}, t.push(m)), t;
},
getEnvironment: function(e) {
return _.map(_.get(e, "image.dockerImageMetadata.Config.Env"), function(e) {
var t = e.indexOf("="), n = "", r = "";
return t > 0 ? (n = e.substring(0, t), t + 1 < _.size(e) && (r = e.substring(t + 1))) : n = e, {
name: n,
value: r
=======
return t.getServicePort(e);
})
}
}, n.push(m)), n;
},
getEnvironment: function(e) {
return _.map(_.get(e, "image.dockerImageMetadata.Config.Env"), function(e) {
var t = e.indexOf("="), n = "", r = "";
return t > 0 ? (n = e.substring(0, t), t + 1 < _.size(e) && (r = e.substring(t + 1))) : n = e, {
name: n,
<<<<<<< HEAD
value: a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
value: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
});
}
};
} ]), angular.module("openshiftConsole").factory("ConversionService", function() {
return {
bytesToMiB: function(e) {
return e ? e / 1048576 : e;
},
bytesToKiB: function(e) {
return e ? e / 1024 : e;
},
millicoresToCores: function(e) {
return e ? e / 1e3 : e;
}
};
}), angular.module("openshiftConsole").service("BreadcrumbsService", [ "$filter", "APIService", "Navigate", function(e, t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = e("annotation"), a = e("displayName"), o = function(e) {
=======
var a = e("annotation"), r = e("displayName"), o = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e("annotation"), a = e("displayName"), o = function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
switch (e) {
case "DeploymentConfig":
return "Deployments";

default:
return _.startCase(t.kindToResource(e, !0));
}
<<<<<<< HEAD
<<<<<<< HEAD
}, i = function(e, r, i, s) {
var c, l = [], u = s.humanizedKind || o(r);
return s.includeProject && (c = s.project ? a(s.project) : i, l.push({
=======
}, i = function(e, a, i, s) {
var c, l = [], u = s.humanizedKind || o(a);
return s.includeProject && (c = s.project ? r(s.project) : i, l.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, i = function(e, r, i, s) {
var c, l = [], u = s.humanizedKind || o(r);
return s.includeProject && (c = s.project ? a(s.project) : i, l.push({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
title: c,
link: n.projectOverviewURL(i)
})), l.push({
title: u,
<<<<<<< HEAD
<<<<<<< HEAD
link: n.resourceListURL(t.kindToResource(r), i)
}), s.parent && l.push(s.parent), s.subpage ? (l.push({
title: s.displayName || e,
link: n.resourceURL(e, r, i)
=======
link: n.resourceListURL(t.kindToResource(a), i)
}), s.parent && l.push(s.parent), s.subpage ? (l.push({
title: s.displayName || e,
link: n.resourceURL(e, a, i)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
link: n.resourceListURL(t.kindToResource(r), i)
}), s.parent && l.push(s.parent), s.subpage ? (l.push({
title: s.displayName || e,
link: n.resourceURL(e, r, i)
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), l.push({
title: s.subpage
})) : l.push({
title: s.displayName || e
}), l;
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, s = function(t, a) {
a = a || {};
var o, s = r(t, "deploymentConfig");
return s && (a.humanizedKind = "Deployments", a.parent = {
<<<<<<< HEAD
title: s,
link: n.configURLForResource(t)
}, (o = e("annotation")(t, "deploymentVersion")) && (a.displayName = "#" + o)), i(t.metadata.name, t.kind, t.metadata.namespace, a);
=======
}, s = function(t, r) {
r = r || {};
var o, s = a(t, "deploymentConfig");
return s && (r.humanizedKind = "Deployments", r.parent = {
title: s,
link: n.configURLForResource(t)
}, (o = e("annotation")(t, "deploymentVersion")) && (r.displayName = "#" + o)), i(t.metadata.name, t.kind, t.metadata.namespace, r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
title: s,
link: n.configURLForResource(t)
}, (o = e("annotation")(t, "deploymentVersion")) && (a.displayName = "#" + o)), i(t.metadata.name, t.kind, t.metadata.namespace, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, c = function(e, t) {
switch (e.kind) {
case "ReplicationController":
return s(e, t);

default:
return i(e.metadata.name, e.kind, e.metadata.namespace, t);
}
};
return {
getBreadcrumbs: function(e) {
return (e = e || {}).object ? c(e.object, e) : e.kind && e.name && e.namespace ? i(e.name, e.kind, e.namespace, e) : [];
}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("QuotaService", [ "$filter", "$location", "$rootScope", "$routeParams", "$q", "APIService", "Constants", "DataService", "EventsService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l, u) {
var d = o.getPreferredVersion("resourcequotas"), m = o.getPreferredVersion("appliedclusterresourcequotas"), p = e("isNil"), g = e("usageValue"), f = e("usageWithUnits"), v = e("percent"), h = function(e) {
return _.every(e.spec.containers, function(e) {
var t = _.some(_.get(e, "resources.requests"), function(e) {
return !p(e) && 0 !== g(e);
}), n = _.some(_.get(e, "resources.limits"), function(e) {
return !p(e) && 0 !== g(e);
});
return !t && !n;
});
}, y = function(e) {
return _.has(e, "spec.activeDeadlineSeconds");
}, b = function(e, t) {
var n = h(e), r = y(e);
=======
} ]), angular.module("openshiftConsole").factory("QuotaService", [ "APIService", "$filter", "$q", "DataService", "Logger", function(e, t, n, a, r) {
var o = t("isNil"), i = t("usageValue"), s = function(e) {
=======
} ]), angular.module("openshiftConsole").factory("QuotaService", [ "APIService", "$filter", "$location", "$rootScope", "$routeParams", "$q", "Constants", "DataService", "EventsService", "Logger", "NotificationsService", function(e, t, n, a, r, o, i, s, c, l, u) {
<<<<<<< HEAD
var d = t("isNil"), p = t("usageValue"), m = t("usageWithUnits"), f = t("percent"), g = function(e) {
>>>>>>> Quota Notifications
=======
=======
} ]), angular.module("openshiftConsole").factory("QuotaService", [ "APIService", "$filter", "$location", "$rootScope", "$routeParams", "$q", "Constants", "DataService", "EventsService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l, u) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var d = t("isNil"), m = t("usageValue"), p = t("usageWithUnits"), f = t("percent"), g = function(e) {
>>>>>>> Support EnvFrom in the Env Editors
return _.every(e.spec.containers, function(e) {
var t = _.some(_.get(e, "resources.requests"), function(e) {
return !d(e) && 0 !== m(e);
}), n = _.some(_.get(e, "resources.limits"), function(e) {
return !d(e) && 0 !== m(e);
});
return !t && !n;
});
}, v = function(e) {
return _.has(e, "spec.activeDeadlineSeconds");
<<<<<<< HEAD
<<<<<<< HEAD
}, l = function(e, t) {
var n = s(e), a = c(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, v = function(e, t) {
var n = g(e), a = h(e);
>>>>>>> Quota Notifications
=======
}, h = function(e, t) {
<<<<<<< HEAD
var n = g(e), a = v(e);
>>>>>>> Add SVG icons
=======
var n = g(e), r = v(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return _.filter(t, function(e) {
var t = e.spec.quota ? e.spec.quota.scopes : e.spec.scopes;
return _.every(t, function(e) {
switch (e) {
case "Terminating":
<<<<<<< HEAD
<<<<<<< HEAD
return r;

case "NotTerminating":
return !r;
=======
return a;

case "NotTerminating":
return !a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return r;

case "NotTerminating":
return !r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion

case "BestEffort":
return n;

case "NotBestEffort":
return !n;
}
return !0;
});
});
<<<<<<< HEAD
<<<<<<< HEAD
}, S = function(e, t) {
return e ? "Pod" === e.kind ? b(e, t) : _.has(e, "spec.template") ? b(e.spec.template, t) : t : t;
}, C = e("humanizeQuotaResource"), w = e("humanizeKind"), P = function(e, t, n) {
var r = e.status.total || e.status;
if (g(r.hard[n]) <= g(r.used[n])) {
var a, o;
return a = "Pod" === t.kind ? "You will not be able to create the " + w(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + w(t.kind) + " '" + t.metadata.name + "' but no pods will be created until resources are freed.", o = "pods" === n ? "You are at your quota for pods." : "You are at your quota for " + C(n) + " on pods.", {
type: "Pod" === t.kind ? "error" : "warning",
message: o,
details: a,
=======
}, u = function(e, t) {
return e ? "Pod" === e.kind ? l(e, t) : _.has(e, "spec.template") ? l(e.spec.template, t) : t : t;
}, d = t("humanizeQuotaResource"), p = t("humanizeKind"), m = function(e, t, n) {
=======
}, y = function(e, t) {
return e ? "Pod" === e.kind ? h(e, t) : _.has(e, "spec.template") ? h(e.spec.template, t) : t : t;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, b = t("humanizeQuotaResource"), C = t("humanizeKind"), S = function(e, t, n) {
>>>>>>> Quota Notifications
=======
}, b = t("humanizeQuotaResource"), S = t("humanizeKind"), C = function(e, t, n) {
<<<<<<< HEAD
>>>>>>> Service instance details configuration and edit
=======
}, b = t("humanizeQuotaResource"), C = t("humanizeKind"), S = function(e, t, n) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, b = t("humanizeQuotaResource"), S = t("humanizeKind"), C = function(e, t, n) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, b = t("humanizeQuotaResource"), S = t("humanizeKind"), C = function(e, t, n) {
>>>>>>> Adding label filter to ste secrets page
var a = e.status.total || e.status;
if (m(a.hard[n]) <= m(a.used[n])) {
var r, o;
return r = "Pod" === t.kind ? "You will not be able to create the " + S(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + S(t.kind) + " '" + t.metadata.name + "' but no pods will be created until resources are freed.", o = "pods" === n ? "You are at your quota for pods." : "You are at your quota for " + b(n) + " on pods.", {
type: "Pod" === t.kind ? "error" : "warning",
message: o,
details: r,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e.status.total || e.status;
if (m(r.hard[n]) <= m(r.used[n])) {
var a, o;
return a = "Pod" === t.kind ? "You will not be able to create the " + S(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + S(t.kind) + " '" + t.metadata.name + "' but no pods will be created until resources are freed.", o = "pods" === n ? "You are at your quota for pods." : "You are at your quota for " + b(n) + " on pods.", {
type: "Pod" === t.kind ? "error" : "warning",
message: o,
details: a,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
links: [ {
href: "project/" + e.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
};
}
return null;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, j = {
=======
}, g = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, f = {
>>>>>>> Patternfly vertical navigation and project bar
=======
}, w = {
>>>>>>> Quota Notifications
cpu: "resources.requests.cpu",
"requests.cpu": "resources.requests.cpu",
"limits.cpu": "resources.limits.cpu",
memory: "resources.requests.memory",
"requests.memory": "resources.requests.memory",
"limits.memory": "resources.limits.memory",
persistentvolumeclaims: "resources.limits.persistentvolumeclaims",
"requests.storage": "resources.request.storage"
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, k = function(e, t, n, r) {
var a = e.status.total || e.status, o = j[r], i = 0;
if (_.each(n.spec.containers, function(e) {
var t = _.get(e, o);
t && (i += g(t));
}), g(a.hard[r]) < g(a.used[r]) + i) {
var s;
return s = "Pod" === t.kind ? "You may not be able to create the " + w(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + w(t.kind) + " '" + t.metadata.name + "' but you may not have pods created until resources are freed.", {
type: "warning",
message: "You are close to your quota for " + C(r) + " on pods.",
details: s,
=======
}, f = function(e, t, n, a) {
var r = e.status.total || e.status, o = g[a], s = 0;
=======
}, g = function(e, t, n, a) {
var r = e.status.total || e.status, o = f[a], s = 0;
>>>>>>> Patternfly vertical navigation and project bar
=======
}, k = function(e, t, n, a) {
=======
}, P = function(e, t, n, a) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}, k = function(e, t, n, a) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}, P = function(e, t, n, a) {
>>>>>>> Update pod controller to use getPreferredVersion
var r = e.status.total || e.status, o = w[a], i = 0;
>>>>>>> Quota Notifications
=======
}, P = function(e, t, n, r) {
var a = e.status.total || e.status, o = w[r], i = 0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (_.each(n.spec.containers, function(e) {
var t = _.get(e, o);
t && (i += m(t));
}), m(a.hard[r]) < m(a.used[r]) + i) {
var s;
return s = "Pod" === t.kind ? "You may not be able to create the " + S(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + S(t.kind) + " '" + t.metadata.name + "' but you may not have pods created until resources are freed.", {
type: "warning",
<<<<<<< HEAD
<<<<<<< HEAD
message: "You are close to your quota for " + d(a) + " on pods.",
details: c,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "You are close to your quota for " + b(a) + " on pods.",
=======
message: "You are close to your quota for " + b(r) + " on pods.",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
details: s,
>>>>>>> Quota Notifications
links: [ {
href: "project/" + e.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
};
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, I = function(e, t) {
var n = [], r = "Pod" === e.kind ? e : _.get(e, "spec.template");
return r ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(a) {
var o = t.status.total || t.status;
if (("Pod" !== e.kind || "pods" !== a) && _.has(o, [ "hard", a ]) && _.has(o, [ "used", a ])) {
var i = P(t, e, a);
if (i) n.push(i); else if ("pods" !== a) {
var s = k(t, e, r, a);
s && n.push(s);
}
}
}), n) : n;
}, R = function(e, t, n) {
var r = [];
return e && t ? (_.each(e, function(e) {
var a = S(e, t), i = S(e, n), s = o.objectToResourceGroupVersion(e);
if (s) {
var c = o.kindToResource(e.kind, !0), l = w(e.kind), u = "";
s.group && (u = s.group + "/"), u += s.resource;
var d = function(t) {
var n = t.status.total || t.status;
!p(n.hard[u]) && g(n.hard[u]) <= g(n.used[u]) && r.push({
type: "error",
message: "You are at your quota of " + n.hard[u] + " " + ("1" === n.hard[u] ? l : c) + " in this project.",
details: "You will not be able to create the " + l + " '" + e.metadata.name + "'.",
links: [ {
href: "project/" + t.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
}), r = r.concat(I(e, t));
};
_.each(a, d), _.each(i, d);
}
}), r) : r;
}, T = [ "cpu", "requests.cpu", "memory", "requests.memory", "limits.cpu", "limits.memory" ], E = function(e, t, n, r, a) {
var o, s = "Your project is " + (r < t ? "over" : "at") + " quota. ";
return o = _.includes(T, a) ? s + "It is using " + v(t / r, 0) + " of " + f(n, a) + " " + C(a) + "." : s + "It is using " + t + " of " + r + " " + C(a) + ".", o = _.escape(o), i.QUOTA_NOTIFICATION_MESSAGE && i.QUOTA_NOTIFICATION_MESSAGE[a] && (o += " " + i.QUOTA_NOTIFICATION_MESSAGE[a]), o;
}, N = function(e, t, n) {
var r = function(e) {
var t = e.status.total || e.status;
return _.some(t.hard, function(e, r) {
if ("resourcequotas" === r) return !1;
if (!n || _.includes(n, r)) {
if (!(e = g(e))) return !1;
var a = g(_.get(t, [ "used", r ]));
return !!a && e <= a;
}
});
};
return _.some(e, r) || _.some(t, r);
};
return {
filterQuotasForResource: S,
isBestEffortPod: h,
isTerminatingPod: y,
getResourceLimitAlerts: I,
getQuotaAlerts: R,
getLatestQuotaAlerts: function(e, t) {
var n, r, o = [];
return o.push(s.list(d, t).then(function(e) {
n = e.by("metadata.name"), l.log("quotas", n);
})), o.push(s.list(m, t).then(function(e) {
r = e.by("metadata.name"), l.log("cluster quotas", r);
})), a.all(o).then(function() {
return {
quotaAlerts: R(e, n, r)
};
});
},
isAnyQuotaExceeded: N,
isAnyStorageQuotaExceeded: function(e, t) {
return N(e, t, [ "requests.storage", "persistentvolumeclaims" ]);
},
willRequestExceedQuota: function(e, t, n, r) {
var a = function(e) {
var t = e.status.total || e.status, a = g(r);
if (!n) return !1;
var o = _.get(t.hard, n);
if (!(o = g(o))) return !1;
var i = g(_.get(t, [ "used", n ]));
return i ? o < i + a : o < a;
};
return _.some(e, a) || _.some(t, a);
},
<<<<<<< HEAD
getQuotaNotifications: function(e, a, o) {
var i = [], s = function(e) {
var a = e.status.total || e.status;
_.each(a.hard, function(e, s) {
var c = g(e), l = _.get(a, [ "used", s ]), d = g(l);
"resourcequotas" !== s && c && d && c <= d && i.push({
id: "quota-limit-reached-" + s,
namespace: o,
type: c < d ? "warning" : "info",
message: E(0, d, e, c, s),
isHTML: !0,
skipToast: !0,
showInDrawer: !0,
actions: [ {
name: "View Quotas",
title: "View project quotas",
onClick: function() {
t.url("/project/" + r.project + "/quota"), n.$emit("NotificationDrawerWrapper.hide");
=======
deprovision: function(e, t) {
var r, a = {
kind: e.kind,
displayName: e.metadata.name,
okButtonText: "Delete",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel",
delete: function() {
r.close("delete");
}
};
return (r = n.open({
templateUrl: "views/modals/delete-resource.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return a;
}
>>>>>>> Update modals to align with PatternFly standard
}
}, {
name: "Don't Show Me Again",
title: "Permenantly hide this notificaiton until quota limit changes",
onClick: function(e) {
u.permanentlyHideNotification(e.uid, e.namespace), n.$emit("NotificationDrawerWrapper.clear", e);
}
}, {
name: "Clear",
title: "Clear this notificaiton",
onClick: function(e) {
n.$emit("NotificationDrawerWrapper.clear", e);
}
} ]
=======
}, h = function(e, t) {
=======
}, j = function(e, t) {
>>>>>>> Quota Notifications
var n = [], a = "Pod" === e.kind ? e : _.get(e, "spec.template");
return a ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(r) {
var o = t.status.total || t.status;
if (("Pod" !== e.kind || "pods" !== r) && !d(o.hard[r])) {
var i = S(t, e, r);
=======
}, P = function(e, t) {
=======
}, j = function(e, t) {
>>>>>>> Add product icons for service catalog
=======
}, P = function(e, t) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, j = function(e, t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, P = function(e, t) {
>>>>>>> Update template service broker flag name
=======
}, k = function(e, t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}, P = function(e, t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}, k = function(e, t) {
<<<<<<< HEAD
>>>>>>> Update pod controller to use getPreferredVersion
var n = [], a = "Pod" === e.kind ? e : _.get(e, "spec.template");
return a ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(r) {
var o = t.status.total || t.status;
if (("Pod" !== e.kind || "pods" !== r) && _.has(o, [ "hard", r ]) && _.has(o, [ "used", r ])) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var i = C(t, e, r);
>>>>>>> Service instance details configuration and edit
=======
var i = S(t, e, r);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var i = C(t, e, r);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var i = C(t, e, r);
>>>>>>> Adding label filter to ste secrets page
if (i) n.push(i); else if ("pods" !== r) {
var s = P(t, e, a, r);
=======
var n = [], r = "Pod" === e.kind ? e : _.get(e, "spec.template");
return r ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(a) {
var o = t.status.total || t.status;
if (("Pod" !== e.kind || "pods" !== a) && _.has(o, [ "hard", a ]) && _.has(o, [ "used", a ])) {
var i = C(t, e, a);
if (i) n.push(i); else if ("pods" !== a) {
var s = P(t, e, r, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
s && n.push(s);
}
}
}), n) : n;
}, j = function(t, n, r) {
var a = [];
return t && n ? (_.each(t, function(t) {
var o = y(t, n), i = y(t, r), s = e.objectToResourceGroupVersion(t);
if (s) {
var c = e.kindToResource(t.kind, !0), l = S(t.kind), u = "";
s.group && (u = s.group + "/"), u += s.resource;
var p = function(e) {
var n = e.status.total || e.status;
!d(n.hard[u]) && m(n.hard[u]) <= m(n.used[u]) && a.push({
type: "error",
message: "You are at your quota of " + n.hard[u] + " " + ("1" === n.hard[u] ? l : c) + " in this project.",
details: "You will not be able to create the " + l + " '" + t.metadata.name + "'.",
links: [ {
href: "project/" + e.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
}), a = a.concat(k(t, e));
};
_.each(o, p), _.each(i, p);
}
}), a) : a;
}, I = [ "cpu", "requests.cpu", "memory", "requests.memory", "limits.cpu", "limits.memory" ], R = function(e, t, n, r, a) {
var o, s = "Your project is " + (r < t ? "over" : "at") + " quota. ";
return o = _.includes(I, a) ? s + "It is using " + f(t / r, 0) + " of " + p(n, a) + " " + b(a) + "." : s + "It is using " + t + " of " + r + " " + b(a) + ".", o = _.escape(o), i.QUOTA_NOTIFICATION_MESSAGE && i.QUOTA_NOTIFICATION_MESSAGE[a] && (o += " " + i.QUOTA_NOTIFICATION_MESSAGE[a]), o;
}, E = function(e, t, n) {
var r = function(e) {
var t = e.status.total || e.status;
return _.some(t.hard, function(e, r) {
if ("resourcequotas" === r) return !1;
if (!n || _.includes(n, r)) {
if (!(e = m(e))) return !1;
var a = m(_.get(t, [ "used", r ]));
return !!a && e <= a;
}
});
<<<<<<< HEAD
};
return _.some(e, r) || _.some(t, r);
};
=======
}, e.closeOrderingPanel = function() {
e.template && (b(), e.template = null), _.set(e, "ordering.panelName", "");
}, e.deployImageSelected = function() {
_.set(e, "ordering.panelName", "deployImage");
}, e.fromFileSelected = function() {
_.set(e, "ordering.panelName", "fromFile");
}, e.fromProjectSelected = function() {
_.set(e, "ordering.panelName", "fromProject");
}, n.withUser().then(function() {
r.getCatalogItems().then(function(t) {
e.catalogItems = t, v();
});
}), e.$on("$destroy", function() {
b();
}), y && e.$on("$locationChangeStart", function(t) {
f.search().startTour && (e.startGuidedTour(), t.preventDefault());
});
} ]), angular.module("openshiftConsole").controller("ProjectBrowseCatalogController", [ "$scope", "$q", "$routeParams", "DataService", "AuthorizationService", "Catalog", "CatalogService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
var u = n.project;
l.get(u).then(function() {
a.getProjectRules(u).then(function() {
if (a.canIAddToProject(u)) {
var r, l, d = i.getCatalogItems().then(function(e) {
r = e;
}), m = o.getProjectCatalogItems(u).then(_.spread(function(e, t) {
l = e, t && c.addNotification({
type: "error",
message: t
});
}));
t.all([ d, m ]).then(function() {
e.catalogItems = o.sortCatalogItems(_.concat(r, l)), n.filter && (e.keywordFilter = n.filter);
});
} else s.toProjectOverview(u);
});
});
} ]), angular.module("openshiftConsole").factory("EventsService", [ "BrowserStore", function(e) {
var t = e.loadJSON("session", "events") || {}, n = _.get(window, "OPENSHIFT_CONSTANTS.EVENTS_TO_SHOW");
>>>>>>> Add Browse Catalog to Project context view.
return {
filterQuotasForResource: y,
isBestEffortPod: g,
isTerminatingPod: v,
getResourceLimitAlerts: k,
getQuotaAlerts: j,
getLatestQuotaAlerts: function(e, t) {
var n, r, a = [];
return a.push(s.list("resourcequotas", t).then(function(e) {
n = e.by("metadata.name"), l.log("quotas", n);
})), a.push(s.list("appliedclusterresourcequotas", t).then(function(e) {
r = e.by("metadata.name"), l.log("cluster quotas", r);
})), o.all(a).then(function() {
return {
quotaAlerts: j(e, n, r)
};
});
},
isAnyQuotaExceeded: E,
isAnyStorageQuotaExceeded: function(e, t) {
return E(e, t, [ "requests.storage", "persistentvolumeclaims" ]);
},
willRequestExceedQuota: function(e, t, n, r) {
var a = function(e) {
var t = e.status.total || e.status, a = m(r);
if (!n) return !1;
var o = _.get(t.hard, n);
if (!(o = m(o))) return !1;
var i = m(_.get(t, [ "used", n ]));
return i ? o < i + a : o < a;
};
return _.some(e, a) || _.some(t, a);
},
getQuotaNotifications: function(e, t, o) {
var i = [], s = function(e) {
var t = e.status.total || e.status;
_.each(t.hard, function(e, s) {
var c = m(e), l = _.get(t, [ "used", s ]), d = m(l);
"resourcequotas" !== s && c && d && c <= d && i.push({
id: "quota-limit-reached-" + s,
namespace: o,
type: c < d ? "warning" : "info",
message: R(0, d, e, c, s),
isHTML: !0,
skipToast: !0,
showInDrawer: !0,
actions: [ {
name: "View Quotas",
title: "View project quotas",
onClick: function() {
n.url("/project/" + a.project + "/quota"), r.$emit("NotificationDrawerWrapper.hide");
}
}, {
name: "Don't Show Me Again",
title: "Permenantly hide this notificaiton until quota limit changes",
onClick: function(e) {
u.permanentlyHideNotification(e.uid, e.namespace), r.$emit("NotificationDrawerWrapper.clear", e);
}
}, {
name: "Clear",
title: "Clear this notificaiton",
onClick: function(e) {
r.$emit("NotificationDrawerWrapper.clear", e);
}
} ]
});
});
};
return _.each(e, s), _.each(t, s), i;
}
};
} ]), angular.module("openshiftConsole").factory("SecurityCheckService", [ "APIService", "$filter", "Constants", function(e, t, n) {
var r = t("humanizeKind");
return {
getSecurityAlerts: function(t, a) {
var o = [], i = [], s = [], c = [], l = [], u = [];
if (_.each(t, function(t) {
if (_.get(t, "kind")) {
var r = e.objectToResourceGroupVersion(t), a = e.apiInfo(r);
if (a) if (a.namespaced) if ("rolebindings" !== r.resource || "" !== r.group && "rbac.authorization.k8s.io" !== r.group) "roles" !== r.resource || "" !== r.group && "rbac.authorization.k8s.io" !== r.group ? _.find(n.SECURITY_CHECK_WHITELIST, {
resource: r.resource,
group: r.group
}) || u.push(t) : l.push(t); else {
var o = _.get(t, "roleRef.name");
"view" !== o && "system:image-puller" !== o && c.push(t);
} else s.push(t); else i.push(t);
}
}), i.length) {
var d = _.uniq(_.map(i, function(e) {
return "API version " + _.get(e, "apiVersion", "<none>") + " for kind " + r(e.kind);
}));
o.push({
type: "warning",
message: "Some resources will not be created.",
details: "The following resource versions are not supported by the server: " + d.join(", ")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
};
return _.each(e, s), _.each(a, s), i;
}
<<<<<<< HEAD
};
} ]), angular.module("openshiftConsole").factory("SecurityCheckService", [ "APIService", "$filter", "Constants", function(e, t, n) {
var r = t("humanizeKind");
return {
getSecurityAlerts: function(t, a) {
var o = [], i = [], s = [], c = [], l = [], u = [];
if (_.each(t, function(t) {
if (_.get(t, "kind")) {
var r = e.objectToResourceGroupVersion(t), a = e.apiInfo(r);
if (a) if (a.namespaced) if ("rolebindings" !== r.resource || "" !== r.group && "rbac.authorization.k8s.io" !== r.group) "roles" !== r.resource || "" !== r.group && "rbac.authorization.k8s.io" !== r.group ? _.find(n.SECURITY_CHECK_WHITELIST, {
resource: r.resource,
group: r.group
}) || u.push(t) : l.push(t); else {
var o = _.get(t, "roleRef.name");
"view" !== o && "system:image-puller" !== o && c.push(t);
} else s.push(t); else i.push(t);
}
}), i.length) {
var d = _.uniq(_.map(i, function(e) {
return "API version " + _.get(e, "apiVersion", "<none>") + " for kind " + r(e.kind);
}));
o.push({
type: "warning",
message: "Some resources will not be created.",
details: "The following resource versions are not supported by the server: " + d.join(", ")
});
}
if (s.length) {
var m = _.uniq(_.map(s, function(e) {
return r(e.kind);
}));
o.push({
type: "warning",
message: "This will create resources outside of the project, which might impact all users of the cluster.",
details: "Typically only cluster administrators can create these resources. The cluster-level resources being created are: " + m.join(", ")
});
}
=======
if (s.length) {
var m = _.uniq(_.map(s, function(e) {
return r(e.kind);
}));
o.push({
type: "warning",
message: "This will create resources outside of the project, which might impact all users of the cluster.",
details: "Typically only cluster administrators can create these resources. The cluster-level resources being created are: " + m.join(", ")
});
}
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
if (c.length) {
var p = [];
_.each(c, function(e) {
_.each(e.subjects, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
var t = r(e.kind) + " ";
"ServiceAccount" === e.kind && (t += (e.namespace || a) + "/"), t += e.name, p.push(t);
=======
var t = a(e.kind) + " ";
<<<<<<< HEAD
<<<<<<< HEAD
"ServiceAccount" === e.kind && (t += (e.namespace || r) + "/"), t += e.name, p.push(t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
"ServiceAccount" === e.kind && (t += (e.namespace || r) + "/"), t += e.name, m.push(t);
>>>>>>> Updates for Service Instance & Bindings
=======
"ServiceAccount" === e.kind && (t += (e.namespace || r) + "/"), t += e.name, p.push(t);
>>>>>>> Support EnvFrom in the Env Editors
=======
var t = r(e.kind) + " ";
"ServiceAccount" === e.kind && (t += (e.namespace || a) + "/"), t += e.name, p.push(t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), p = _.uniq(p), o.push({
type: "warning",
message: "This will grant permissions to your project.",
details: "Permissions are being granted to: " + p.join(", ")
});
}
if (l.length && o.push({
type: "info",
message: "This will create additional membership roles within the project.",
details: "Admins will be able to grant these custom roles to users, groups, and service accounts."
}), u.length) {
<<<<<<< HEAD
var g = _.uniq(_.map(u, function(e) {
<<<<<<< HEAD
return r(e.kind);
=======
=======
var f = _.uniq(_.map(u, function(e) {
<<<<<<< HEAD
>>>>>>> Patternfly vertical navigation and project bar
return a(e.kind);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return r(e.kind);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
o.push({
type: "warning",
message: "This will create resources that may have security or project behavior implications.",
details: "Make sure you understand what they do before creating them. The resources being created are: " + f.join(", ")
});
}
return o;
}
};
} ]), angular.module("openshiftConsole").factory("LabelsService", function() {
var e = function(e) {
return _.get(e, "spec.template", {
metadata: {
labels: {}
}
});
};
return {
<<<<<<< HEAD
<<<<<<< HEAD
groupBySelector: function(t, n, r) {
var a = {}, o = {};
return r = r || {}, _.each(n, function(e) {
o[e.metadata.uid] = new LabelSelector(e.spec.selector);
}), _.each(t, function(t) {
if (!r.include || r.include(t)) {
var i = _.filter(n, function(n) {
var a = o[n.metadata.uid];
return r.matchTemplate ? a.matches(e(t)) : r.matchSelector ? a.covers(new LabelSelector(t.spec.selector)) : a.matches(t);
});
i.length || _.set(a, [ "", t.metadata.name ], t), _.each(i, function(e) {
var n = _.get(e, r.key || "metadata.name", "");
_.set(a, [ n, t.metadata.name ], t);
});
<<<<<<< HEAD
}
}), a;
}
};
}), angular.module("openshiftConsole").factory("CatalogService", [ "$filter", "$q", "$window", "APIService", "AuthService", "Catalog", "Constants", "KeywordService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l) {
var u, d = e("tags"), m = r.getPreferredVersion("servicebindings"), p = r.getPreferredVersion("clusterserviceclasses"), g = r.getPreferredVersion("serviceinstances"), f = r.getPreferredVersion("clusterserviceplans"), v = !i.DISABLE_SERVICE_CATALOG_LANDING_PAGE && r.apiInfo(m) && r.apiInfo(p) && r.apiInfo(g) && r.apiInfo(f), h = function() {
c.debug("ProjectsService: clearing catalog items cache"), u = null;
};
a.onUserChanged(h), a.onLogout(h);
var y = {};
_.each(i.CATALOG_CATEGORIES, function(e) {
_.each(e.items, function(e) {
y[e.id] = e;
var t = _.get(e, "subcategories", []);
_.each(t, function(e) {
_.each(e.items, function(e) {
y[e.id] = e;
=======
groupBySelector: function(t, n, a) {
var r = {}, o = {};
return a = a || {}, _.each(n, function(e) {
=======
groupBySelector: function(t, n, r) {
var a = {}, o = {};
return r = r || {}, _.each(n, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
o[e.metadata.uid] = new LabelSelector(e.spec.selector);
}), _.each(t, function(t) {
if (!r.include || r.include(t)) {
var i = _.filter(n, function(n) {
var a = o[n.metadata.uid];
return r.matchTemplate ? a.matches(e(t)) : r.matchSelector ? a.covers(new LabelSelector(t.spec.selector)) : a.matches(t);
=======
var t = _.head(e);
return t.isVisible = !0, t.isUsed = !0, n.selectedTerminalContainer = t, e;
}, j = function(e) {
n.noContainersYet && (n.noContainersYet = 0 === n.containersRunning(e.status.containerStatuses));
}, k = function(e) {
_.each(e, function(e) {
var t = _.find(n.pod.status.containerStatuses, {
name: e.containerName
}), r = w(t);
e.containerState = r;
>>>>>>> Add Browse Catalog to Project context view.
});
i.length || _.set(a, [ "", t.metadata.name ], t), _.each(i, function(e) {
var n = _.get(e, r.key || "metadata.name", "");
_.set(a, [ n, t.metadata.name ], t);
});
}
}), a;
}
};
<<<<<<< HEAD
}), angular.module("openshiftConsole").factory("CatalogService", [ "$filter", "$q", "APIService", "AuthService", "Catalog", "Constants", "KeywordService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c) {
var l, u = e("tags"), d = n.getPreferredVersion("servicebindings"), m = n.getPreferredVersion("clusterserviceclasses"), p = n.getPreferredVersion("serviceinstances"), f = n.getPreferredVersion("clusterserviceplans"), g = !o.DISABLE_SERVICE_CATALOG_LANDING_PAGE && n.apiInfo(d) && n.apiInfo(m) && n.apiInfo(p) && n.apiInfo(f), v = function() {
s.debug("ProjectsService: clearing catalog items cache"), l = null;
=======
p.get(t.project).then(_.spread(function(r, o) {
h = o, n.project = r, n.projectContext = o, i.get(n.podsVersion, t.pod, o, {
errorNotification: !1
}).then(function(e) {
R(e);
var r = {};
r[e.metadata.name] = e, n.logOptions.container = t.container || e.spec.containers[0].name, n.containerTerminals = P(), j(e), c.fetchReferencedImageStreamImages(r, n.imagesByDockerReference, n.imageStreamImageRefByDockerReference, h), v.push(i.watchObject(n.podsVersion, t.pod, o, function(e, t) {
R(e, t), k(n.containerTerminals), j(e);
}));
}, function(t) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The pod details could not be loaded.",
details: e("getErrorDetails")(t)
>>>>>>> Add Browse Catalog to Project context view.
};
r.onUserChanged(v), r.onLogout(v);
var h = function() {
return !!o.TEMPLATE_SERVICE_BROKER_ENABLED;
}, y = {};
_.each(o.CATALOG_CATEGORIES, function(e) {
_.each(e.items, function(e) {
y[e.id] = e;
var t = _.get(e, "subcategories", []);
_.each(t, function(e) {
_.each(e.items, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
r[e.id] = e;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i[e.id] = e;
>>>>>>> Add bindings list to resource pages
=======
u[e.id] = e;
>>>>>>> Adopt service catalog API changes
=======
y[e.id] = e;
>>>>>>> Add search catalog in project context
});
});
});
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var b = function(e, t) {
=======
var o = function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var s = function(e, t) {
>>>>>>> Add bindings list to resource pages
=======
var d = function(e, t) {
>>>>>>> Adopt service catalog API changes
=======
var b = function(e, t) {
>>>>>>> Add search catalog in project context
e = e.toLowerCase();
var n;
for (n = 0; n < t.length; n++) if (e === t[n].toLowerCase()) return !0;
return !1;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, S = function(e, t) {
var n = _.get(e, "categoryAliases", []), r = [ e.id ].concat(n);
return _.some(r, function(e) {
return b(e, t);
});
}, C = function(e) {
return e.from && "ImageStreamTag" === e.from.kind && -1 === e.from.name.indexOf(":") && !e.from.namespace;
}, w = e("displayName"), P = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', "metadata.annotations.description" ];
return {
SERVICE_CATALOG_ENABLED: v,
getCatalogItems: function(e) {
return u && !e ? (c.debug("CatalogService: returning cached catalog items"), t.when(u)) : (c.debug("CatalogService: getCatalogItems, force refresh", e), o.getCatalogItems(!0).then(_.spread(function(e, t) {
if (t) {
var n = {
type: "error",
message: t
};
<<<<<<< HEAD
l.addNotification(n);
}
return u = e, e;
})));
},
getCategoryItem: function(e) {
return y[e];
=======
}, i = function(e, t) {
=======
}, c = function(e, t) {
>>>>>>> Add bindings list to resource pages
=======
}, m = function(e, t) {
>>>>>>> Adopt service catalog API changes
=======
}, S = function(e, t) {
<<<<<<< HEAD
>>>>>>> Add search catalog in project context
var n = _.get(e, "categoryAliases", []), a = [ e.id ].concat(n);
return _.some(a, function(e) {
=======
var n = _.get(e, "categoryAliases", []), r = [ e.id ].concat(n);
return _.some(r, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return b(e, t);
});
}, C = function(e) {
return e.from && "ImageStreamTag" === e.from.kind && -1 === e.from.name.indexOf(":") && !e.from.namespace;
}, w = e("displayName"), P = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', "metadata.annotations.description" ];
return {
SERVICE_CATALOG_ENABLED: g,
isTemplateServiceBrokerEnabled: h,
getCatalogItems: function(e) {
if (l && !e) return s.debug("CatalogService: returning cached catalog items"), t.when(l);
s.debug("CatalogService: getCatalogItems, force refresh", e);
var n = !h();
return a.getCatalogItems(n).then(_.spread(function(e, t) {
if (t) {
var n = {
=======
n.hasFullscreen = s.hasFullscreen(!0), n.fullscreenTerminal = function() {
s.requestFullscreen("#container-terminal-wrapper"), setTimeout(p);
}, n.exitFullscreen = function() {
s.exitFullscreen();
}, n.debugTerminal = function(t) {
var r = m.generateDebugPod(n.pod, t);
r ? i.create(n.podsVersion, null, r, o).then(function(e) {
var s = _.find(n.pod.spec.containers, {
name: t
});
n.debugPod = e, $(window).on("beforeunload.debugPod", function() {
return "Are you sure you want to leave with the debug terminal open? The debug pod will not be deleted unless you close the dialog.";
}), u = i.watchObject(n.podsVersion, r.metadata.name, o, function(e) {
n.debugPod = e;
}), a.open({
templateUrl: "views/modals/debug-terminal.html",
controller: "DebugTerminalModalController",
scope: n,
resolve: {
container: function() {
return s;
},
image: function() {
return _.get(n, [ "imagesByDockerReference", s.image ]);
}
}
}).result.then(d);
}, function(r) {
n.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + t,
details: e("getErrorDetails")(r)
};
}) : n.alerts["debug-container-error"] = {
>>>>>>> Update modals to align with PatternFly standard
type: "error",
message: t
};
c.addNotification(n);
}
return l = e, e;
}));
<<<<<<< HEAD
<<<<<<< HEAD
},
getCategoryItem: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return r[e];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return i[e];
>>>>>>> Add bindings list to resource pages
=======
return u[e];
>>>>>>> Adopt service catalog API changes
=======
return y[e];
>>>>>>> Add search catalog in project context
},
categorizeImageStreams: function(e) {
=======
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$q", "$location", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "PromiseUtils", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, r, a, o, i) {
=======
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$q", "$location", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HomePagePreferenceService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "PromiseUtils", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, r, a, o, i) {
>>>>>>> Set Home Page Preference
n.projectName = t.project, n.limitRanges = {}, n.limitsByType = {}, n.labelSuggestions = {}, n.alerts = n.alerts || {}, n.quotaHelp = "Limits resource usage within this project.", n.emptyMessageLimitRanges = "Loading...", n.limitRangeHelp = "Defines minimum and maximum constraints for runtime resources such as memory and CPU.", n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0;
var s = r.getPreferredVersion("appliedclusterresourcequotas"), c = r.getPreferredVersion("resourcequotas"), l = r.getPreferredVersion("limitranges"), u = [], d = e("usageValue");
n.isAtLimit = function(e, t) {
var n = e.status.total || e.status, r = d(_.get(n, [ "hard", t ]));
if (!r) return !1;
var a = d(_.get(n, [ "used", t ]));
return !!a && a >= r;
};
var m = e("humanizeQuotaResource"), p = function(e, t) {
return "cpu" === e || "requests.cpu" === e ? "cpu" === t || "requests.cpu" === t ? 0 : -1 : "cpu" === t || "requests.cpu" === t ? 1 : "memory" === e || "requests.memory" === e ? "memory" === t || "requests.memory" === t ? 0 : -1 : "memory" === t || "requests.memory" === t ? 1 : "limits.cpu" === e ? "limits.cpu" === t ? 0 : -1 : "limits.cpu" === t ? 1 : "limits.memory" === e ? "limits.memory" === t ? 0 : -1 : "limits.memory" === t ? 1 : (e = m(e), t = m(t), e.localeCompare(t));
}, f = function(e) {
>>>>>>> Add Browse Catalog to Project context view.
var t = {};
return _.each(e, function(e) {
if (e.status) {
var n = {};
e.spec && e.spec.tags && _.each(e.spec.tags, function(e) {
var t = _.get(e, "annotations.tags");
t && (n[e.name] = t.split(/\s*,\s*/));
});
<<<<<<< HEAD
<<<<<<< HEAD
var r = !1;
_.each(y, function(a) {
(function(e) {
return _.some(e.status.tags, function(e) {
var t = n[e.tag] || [];
return S(a, t) && b("builder", t) && !b("hidden", t);
});
})(e) && (t[a.id] = t[a.id] || [], t[a.id].push(e), r = !0);
}), r || _.some(e.status.tags, function(e) {
var t = n[e.tag] || [];
return b("builder", t) && !b("hidden", t);
=======
var a = !1;
_.each(y, function(r) {
=======
var r = !1;
_.each(y, function(a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
(function(e) {
return _.some(e.status.tags, function(e) {
var t = n[e.tag] || [];
return S(a, t) && b("builder", t) && !b("hidden", t);
});
})(e) && (t[a.id] = t[a.id] || [], t[a.id].push(e), r = !0);
}), r || _.some(e.status.tags, function(e) {
var t = n[e.tag] || [];
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return o("builder", t) && !o("hidden", t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return s("builder", t) && !s("hidden", t);
>>>>>>> Add bindings list to resource pages
=======
return d("builder", t) && !d("hidden", t);
>>>>>>> Adopt service catalog API changes
=======
return b("builder", t) && !b("hidden", t);
>>>>>>> Add search catalog in project context
}) && (t[""] = t[""] || [], t[""].push(e));
}
}), t;
},
categorizeTemplates: function(e) {
var t = {};
return _.each(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var n = d(e), r = !1;
_.each(y, function(a) {
S(a, n) && (t[a.id] = t[a.id] || [], t[a.id].push(e), r = !0);
}), r || (t[""] = t[""] || [], t[""].push(e));
}), t;
},
referencesSameImageStream: C,
=======
var n = a(e), o = !1;
_.each(r, function(a) {
i(a, n) && (t[a.id] = t[a.id] || [], t[a.id].push(e), o = !0);
}), o || (t[""] = t[""] || [], t[""].push(e));
}), t;
},
referencesSameImageStream: s,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n = r(e), a = !1;
_.each(u, function(r) {
m(r, n) && (t[r.id] = t[r.id] || [], t[r.id].push(e), a = !0);
}), a || (t[""] = t[""] || [], t[""].push(e));
}), t;
},
<<<<<<< HEAD
referencesSameImageStream: l,
>>>>>>> Add bindings list to resource pages
=======
referencesSameImageStream: p,
>>>>>>> Adopt service catalog API changes
=======
var n = u(e), a = !1;
_.each(y, function(r) {
S(r, n) && (t[r.id] = t[r.id] || [], t[r.id].push(e), a = !0);
}), a || (t[""] = t[""] || [], t[""].push(e));
=======
var n = u(e), r = !1;
_.each(y, function(a) {
S(a, n) && (t[a.id] = t[a.id] || [], t[a.id].push(e), r = !0);
}), r || (t[""] = t[""] || [], t[""].push(e));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), t;
},
referencesSameImageStream: C,
>>>>>>> Add search catalog in project context
filterImageStreams: function(e, t) {
if (!t.length) return e;
var n = [];
return _.each(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var r = _.get(e, "metadata.name", ""), a = w(e, !0), o = [], i = {}, s = {};
_.each(e.spec.tags, function(e) {
if (C(e)) return i[e.name] = e.from.name, s[e.from.name] = s[e.from.name] || [], void s[e.from.name].push(e.name);
o.push(e);
});
var c = _.keyBy(o, "name");
_.each(t, function(e) {
e.test(r) || a && e.test(a) || _.each(o, function(t) {
var n = _.get(t, "annotations.tags", "");
if (/\bbuilder\b/.test(n) && !/\bhidden\b/.test(n)) {
if (!e.test(t.name) && !_.some(s[t.name], function(t) {
return e.test(t);
})) {
var r = _.get(t, "annotations.description");
r && e.test(r) || delete c[t.name];
}
} else delete c[t.name];
});
});
var l;
_.isEmpty(c) || ((l = angular.copy(e)).status.tags = _.filter(l.status.tags, function(e) {
var t = i[e.tag];
return t ? c[t] : c[e.tag];
}), n.push(l));
}), n;
},
filterTemplates: function(e, t) {
return s.filterForKeywords(e, P, t);
=======
var a = _.get(e, "metadata.name", ""), r = c(e, !0), o = [], i = {}, l = {};
=======
var a = _.get(e, "metadata.name", ""), r = u(e, !0), o = [], i = {}, s = {};
>>>>>>> Add bindings list to resource pages
=======
var a = _.get(e, "metadata.name", ""), r = f(e, !0), o = [], i = {}, s = {};
>>>>>>> Adopt service catalog API changes
=======
var a = _.get(e, "metadata.name", ""), r = w(e, !0), o = [], i = {}, s = {};
>>>>>>> Add search catalog in project context
=======
var r = _.get(e, "metadata.name", ""), a = w(e, !0), o = [], i = {}, s = {};
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
_.each(e.spec.tags, function(e) {
if (C(e)) return i[e.name] = e.from.name, s[e.from.name] = s[e.from.name] || [], void s[e.from.name].push(e.name);
o.push(e);
});
<<<<<<< HEAD
<<<<<<< HEAD
var c = _.keyBy(o, "name");
_.each(t, function(e) {
e.test(r) || a && e.test(a) || _.each(o, function(t) {
var n = _.get(t, "annotations.tags", "");
if (/\bbuilder\b/.test(n) && !/\bhidden\b/.test(n)) {
if (!e.test(t.name) && !_.some(s[t.name], function(t) {
return e.test(t);
})) {
var r = _.get(t, "annotations.description");
r && e.test(r) || delete c[t.name];
}
} else delete c[t.name];
});
});
var l;
_.isEmpty(c) || ((l = angular.copy(e)).status.tags = _.filter(l.status.tags, function(e) {
var t = i[e.tag];
return t ? c[t] : c[e.tag];
}), n.push(l));
}), n;
},
filterTemplates: function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return n.filterForKeywords(e, l, t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return a.filterForKeywords(e, d, t);
>>>>>>> Add bindings list to resource pages
=======
return a.filterForKeywords(e, g, t);
>>>>>>> Adopt service catalog API changes
=======
return i.filterForKeywords(e, P, t);
>>>>>>> Add search catalog in project context
}
};
} ]), angular.module("openshiftConsole").factory("ModalsService", [ "$uibModal", function(e) {
return {
confirm: function(t) {
return e.open({
<<<<<<< HEAD
=======
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: t
}
}).result;
},
confirmSaveLog: function(t) {
return e.open({
<<<<<<< HEAD
=======
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/confirm-save-log.html",
controller: "ConfirmSaveLogController",
resolve: {
object: t
}
}).result;
},
showJenkinsfileExamples: function() {
e.open({
<<<<<<< HEAD
=======
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/jenkinsfile-examples-modal.html",
controller: "JenkinsfileExamplesModalController",
size: "lg"
});
},
showComputeUnitsHelp: function() {
e.open({
<<<<<<< HEAD
=======
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/about-compute-units-modal.html",
controller: "AboutComputeUnitsModalController"
});
}
};
} ]), angular.module("openshiftConsole").factory("CLIHelp", [ "$filter", function(e) {
var t = e("annotation");
return {
getLogsCommand: function(e, n) {
if (!e) return null;
<<<<<<< HEAD
<<<<<<< HEAD
var r, a, o;
switch (e.kind) {
case "Pod":
r = "oc logs " + e.metadata.name, n && (r += " -c " + n);
break;

case "DeploymentConfig":
r = "oc logs dc/" + e.metadata.name;
=======
=======
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
var C = r("orderObjectsByDate"), w = [ "metadata.name" ], P = [], j = function() {
n.filteredPods = s.filterForKeywords(S, w, P), n.filteredReplicationControllers = s.filterForKeywords(y, w, P), n.filteredReplicaSets = s.filterForKeywords(b, w, P), n.filteredBuilds = s.filterForKeywords(h, w, P), n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), w, P);
}, k = function(e) {
n.logOptions.pods[e.metadata.name] = {
container: e.spec.containers[0].name
}, n.logCanRun.pods[e.metadata.name] = !_.includes([ "New", "Pending", "Unknown" ], e.status.phase);
}, I = function(e) {
n.logOptions.replicationControllers[e.metadata.name] = {};
var t = r("annotation")(e, "deploymentVersion");
t && (n.logOptions.replicationControllers[e.metadata.name].version = t), n.logCanRun.replicationControllers[e.metadata.name] = !_.includes([ "New", "Pending" ], r("deploymentStatus")(e));
}, R = function(e) {
n.logOptions.builds[e.metadata.name] = {}, n.logCanRun.builds[e.metadata.name] = !_.includes([ "New", "Pending", "Error" ], e.status.phase);
<<<<<<< HEAD
}, T = function() {
n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), w, P);
}, E = function() {
=======
}, E = function() {
n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), w, P);
}, T = function() {
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
S = _.filter(n.pods, function(e) {
return !n.filters.hideOlderResources || "Succeeded" !== e.status.phase && "Failed" !== e.status.phase;
}), n.filteredPods = s.filterForKeywords(S, w, P);
}, N = r("isIncompleteBuild"), D = r("buildConfigForBuild"), A = r("isRecentBuild"), B = function() {
moment().subtract(5, "m");
h = _.filter(n.builds, function(e) {
if (!n.filters.hideOlderResources) return !0;
if (N(e)) return !0;
var t = D(e);
return t ? n.latestBuildByConfig[t].metadata.name === e.metadata.name : A(e);
}), n.filteredBuilds = s.filterForKeywords(h, w, P);
}, L = r("deploymentStatus"), V = r("deploymentIsInProgress"), O = function() {
y = _.filter(n.replicationControllers, function(e) {
return !n.filters.hideOlderResources || (V(e) || "Active" === L(e));
}), n.filteredReplicationControllers = s.filterForKeywords(y, w, P);
}, U = function() {
b = _.filter(n.replicaSets, function(e) {
return !n.filters.hideOlderResources || _.get(e, "status.replicas");
}), n.filteredReplicaSets = s.filterForKeywords(b, w, P);
};
n.toggleItem = function(e, t, a, o) {
var i = $(e.target);
if (o || !i || !i.closest("a", t).length) {
var s, c;
switch (a.kind) {
case "Build":
s = !n.expanded.builds[a.metadata.name], n.expanded.builds[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
var l = _.get(n.podsByName, r("annotation")(a, "buildPod"));
l && p.$emit(c, l);
>>>>>>> Add Browse Catalog to Project context view.
break;

case "ReplicationController":
a = t(e, "deploymentConfig"), o = t(e, "deploymentVersion"), r = a && o ? "oc logs --version " + o + " dc/" + a : "oc logs rc/" + e.metadata.name;
break;

case "BuildConfig":
r = "oc logs bc/" + e.metadata.name;
break;

case "Build":
a = t(e, "buildConfig"), r = "oc logs --version " + (o = t(e, "buildNumber")) + " bc/" + a;
=======
var a, r, o;
=======
var r, a, o;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
switch (e.kind) {
case "Pod":
r = "oc logs " + e.metadata.name, n && (r += " -c " + n);
break;

case "DeploymentConfig":
r = "oc logs dc/" + e.metadata.name;
break;

case "ReplicationController":
a = t(e, "deploymentConfig"), o = t(e, "deploymentVersion"), r = a && o ? "oc logs --version " + o + " dc/" + a : "oc logs rc/" + e.metadata.name;
break;

case "BuildConfig":
r = "oc logs bc/" + e.metadata.name;
break;

case "Build":
<<<<<<< HEAD
r = t(e, "buildConfig"), a = "oc logs --version " + (o = t(e, "buildNumber")) + " bc/" + r;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a = t(e, "buildConfig"), r = "oc logs --version " + (o = t(e, "buildNumber")) + " bc/" + a;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
break;

default:
return null;
}
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return r += " -n " + e.metadata.namespace;
}
<<<<<<< HEAD
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("EnvironmentService", [ "$filter", "keyValueEditorUtils", function(e, t) {
var n = function(e) {
return "Pod" === e.kind ? _.get(e, "spec.containers", []) : _.get(e, "spec.template.spec.containers", []);
};
return {
getContainers: n,
normalize: function(e) {
var t = n(e);
_.each(t, function(e) {
e.env = e.env || [], e.envFrom = e.envFrom || [];
=======
} ]), angular.module("openshiftConsole").factory("EnvironmentService", [ "$filter", "keyValueEditorUtils", function(a, b) {
var c = function(a) {
return "Pod" === a.kind ? _.get(a, "spec.containers", []) :_.get(a, "spec.template.spec.containers", []);
};
return {
getContainers:c,
normalize:function(a) {
var b = c(a);
_.each(b, function(a) {
a.env = a.env || [];
>>>>>>> Create reusable edit-environment-variables component
=======
}, n.viewPodsForSet = function(e) {
var t = _.get(n, [ "podsByOwnerUID", e.metadata.uid ], []);
_.isEmpty(t) || u.toPodsForDeployment(e, t);
}, m.get(e.project).then(_.spread(function(e, r) {
n.project = e, n.projectContext = r, g.push(o.watch("pods", r, function(e) {
n.podsByName = e.by("metadata.name"), n.pods = C(n.podsByName, !0), n.podsByOwnerUID = d.groupByOwnerUID(n.pods), n.podsLoaded = !0, _.each(n.pods, k), T(), c.log("pods", n.pods);
})), g.push(o.watch({
resource: "statefulsets",
group: "apps",
version: "v1beta1"
}, r, function(e) {
n.statefulSets = e.by("metadata.name"), n.statefulSetsLoaded = !0, E(), c.log("statefulSets", n.statefulSets);
}, {
poll: f,
pollInterval: 6e4
})), g.push(o.watch("replicationcontrollers", r, function(e) {
n.replicationControllers = C(e.by("metadata.name"), !0), n.replicationControllersLoaded = !0, _.each(n.replicationControllers, I), O(), c.log("replicationcontrollers", n.replicationControllers);
})), g.push(o.watch("builds", r, function(e) {
n.builds = C(e.by("metadata.name"), !0), n.latestBuildByConfig = a.latestBuildByConfig(n.builds), n.buildsLoaded = !0, _.each(n.builds, R), B(), c.log("builds", n.builds);
})), g.push(o.watch({
group: "extensions",
resource: "replicasets"
}, r, function(e) {
n.replicaSets = C(e.by("metadata.name"), !0), n.replicaSetsLoaded = !0, U(), c.log("replicasets", n.replicaSets);
}, {
poll: f,
pollInterval: 6e4
})), n.$on("$destroy", function() {
o.unwatchAll(g);
}), n.$watch("filters.hideOlderResources", function() {
T(), B(), O(), U(), E();
var e = t.search();
e.hideOlderResources = n.filters.hideOlderResources ? "true" : "false", t.replace().search(e);
}), n.$watch("kindSelector.selected.kind", function() {
var e = t.search();
e.kind = n.kindSelector.selected.kind, t.replace().search(e);
}), n.$watch("filters.text", _.debounce(function() {
n.filterKeywords = P = s.generateKeywords(n.filters.text), n.$apply(j);
}, 50, {
maxWait: 250
})), n.$watch("renderOptions.collapseEventsSidebar", function(e, t) {
e !== t && (localStorage.setItem("monitoring.eventsidebar.collapsed", n.renderOptions.collapseEventsSidebar ? "true" : "false"), p.$emit("metrics.charts.resize"));
>>>>>>> Add Browse Catalog to Project context view.
});
<<<<<<< HEAD
=======
}));
} ]), angular.module("openshiftConsole").controller("MembershipController", [ "$filter", "$location", "$routeParams", "$scope", "$timeout", "$uibModal", "APIService", "AuthService", "AuthorizationService", "DataService", "ProjectsService", "MembershipService", "NotificationsService", "RoleBindingsService", "RolesService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
var g, v = n.project, h = e("humanizeKind"), y = e("annotation"), b = e("canI"), S = i.getPreferredVersion("serviceaccounts");
r.roleBindingsVersion = i.getPreferredVersion("rolebindings");
var C = [], w = {
notice: {
yourLastRole: _.template('Removing the role "<%= roleName %>" may completely remove your ability to see this project.')
},
warning: {
serviceAccount: _.template("Removing a system role granted to a service account may cause unexpected behavior.")
>>>>>>> Update membership to use new rbac endpoints
},
compact: function(e) {
var r = n(e);
_.each(r, function(e) {
e.env = t.compactEntries(e.env), e.envFrom = _.reject(e.envFrom, function(e) {
return !_.get(e, "configMapRef.name") && !_.get(e, "secretRef.name");
});
=======
return a += " -n " + e.metadata.namespace;
}
};
} ]), angular.module("openshiftConsole").factory("EnvironmentService", [ "$filter", "keyValueEditorUtils", function(e, t) {
var n = function(e) {
return "Pod" === e.kind ? _.get(e, "spec.containers", []) : _.get(e, "spec.template.spec.containers", []);
};
return {
getContainers: n,
normalize: function(e) {
var t = n(e);
_.each(t, function(e) {
e.env = e.env || [], e.envFrom = e.envFrom || [];
});
},
compact: function(e) {
var a = n(e);
_.each(a, function(e) {
e.env = t.compactEntries(e.env);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
},
<<<<<<< HEAD
copyAndNormalize: function(e) {
var t = angular.copy(e);
return this.normalize(t), t;
},
<<<<<<< HEAD
<<<<<<< HEAD
isEnvironmentEqual: function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = n(e), a = n(t);
if (r.length !== a.length) return !1;
var o, i, s, c, l;
for (o = 0; o < r.length; o++) {
if (r[o].name !== a[o].name) return !1;
if (i = r[o].env || [], s = a[o].env || [], c = r[o].envFrom || [], l = a[o].envFrom || [], !_.isEqual(i, s) || !_.isEqual(c, l)) return !1;
=======
var a = n(e), r = n(t);
if (a.length !== r.length) return !1;
var o, i, s, c, l;
for (o = 0; o < a.length; o++) {
if (a[o].name !== r[o].name) return !1;
<<<<<<< HEAD
if (i = a[o].env || [], s = r[o].env || [], !_.isEqual(i, s)) return !1;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
if (i = a[o].env || [], s = r[o].env || [], c = a[o].envFrom || [], l = r[o].envFrom || [], !_.isEqual(i, s) || !_.isEqual(c, l)) return !1;
>>>>>>> Support EnvFrom in the Env Editors
=======
var r = n(e), a = n(t);
if (r.length !== a.length) return !1;
var o, i, s, c, l;
for (o = 0; o < r.length; o++) {
if (r[o].name !== a[o].name) return !1;
if (i = r[o].env || [], s = a[o].env || [], c = r[o].envFrom || [], l = a[o].envFrom || [], !_.isEqual(i, s) || !_.isEqual(c, l)) return !1;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
errorReason: _.template('Reason: "<%= httpErr %>"')
=======
errorReason: _.template('"<%= httpErr %>"')
>>>>>>> Remove extra 'reason' in membership prompt
=======
update: {
subject: {
success: _.template('The role "<%= roleName %>" was granted to "<%= subjectName %>".'),
error: _.template('The role "<%= roleName %>" could not be granted to "<%= subjectName %>".'),
exists: _.template('The role "<%= roleName %>" has already been granted to "<%= subjectName %>".')
}
}
>>>>>>> Remove the http error template from the membership controller as it is no longer useful
}, P = function(e, t, n) {
m.addNotification({
type: e,
message: t,
details: n
});
}, j = function() {
r.disableAddForm = !1, r.newBinding.name = "", r.newBinding.namespace = v, r.newBinding.newRole = null;
}, k = function(e) {
l.list(S, e).then(function(e) {
var t = _.keys(e.by("metadata.name")).sort();
angular.extend(r, {
serviceAccounts: t,
refreshServiceAccounts: function(e) {
e && !_.includes(r.serviceAccounts, e) ? r.serviceAccounts = [ e ].concat(t) : r.serviceAccounts = t;
>>>>>>> Update membership to use new rbac endpoints
}
<<<<<<< HEAD
return !0;
=======
});
});
}, I = function(e) {
l.list(r.roleBindingsVersion, g, null, {
errorNotification: !1
}).then(function(e) {
angular.extend(r, {
canShowRoles: !0,
roleBindings: e.by("metadata.name"),
subjectKindsForUI: d.mapRolebindingsForUI(e.by("metadata.name"), C)
}), j();
}, function() {
e && (r.roleBindings[e.metadata.name] = e, r.subjectKindsForUI = d.mapRolebindingsForUI(r.roleBindings, C)), j();
});
}, R = function(t, n) {
r.disableAddForm = !0, p.create(t, n, v, g).then(function() {
I(), P("success", w.update.subject.success({
roleName: t.metadata.name,
subjectName: n.name
}));
}, function(r) {
j(), I(), P("error", w.update.subject.error({
roleName: t.metadata.name,
subjectName: n.name
}), e("getErrorDetails")(r));
});
}, E = function(t, n, a) {
r.disableAddForm = !0, p.addSubject(t, n, a, g).then(function() {
I(), P("success", w.update.subject.success({
roleName: t.roleRef.name,
subjectName: n.name
}));
}, function(r) {
j(), I(), P("error", w.update.subject.error({
roleName: t.roleRef.name,
subjectName: n.name
}), e("getErrorDetails")(r));
});
}, T = {};
n.tab && (T[n.tab] = !0);
var N = d.getSubjectKinds();
angular.extend(r, {
selectedTab: T,
projectName: v,
forms: {},
subjectKinds: N,
newBinding: {
role: "",
kind: n.tab || "User",
name: ""
},
toggleEditMode: function() {
j(), r.mode.edit = !r.mode.edit;
},
mode: {
edit: !1
>>>>>>> Add Browse Catalog to Project context view.
},
mergeEdits: function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
var r, a = angular.copy(t), o = n(e), i = n(a);
for (r = 0; r < i.length; r++) i[r].env = _.get(o, [ r, "env" ], []), i[r].envFrom = _.get(o, [ r, "envFrom" ], []);
return a;
=======
var a, r = angular.copy(t), o = n(e), i = n(r);
for (a = 0; a < i.length; a++) i[a].env = _.get(o, [ a, "env" ], []), i[a].envFrom = _.get(o, [ a, "envFrom" ], []);
return r;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r, a = angular.copy(t), o = n(e), i = n(a);
for (r = 0; r < i.length; r++) i[r].env = _.get(o, [ r, "env" ], []), i[r].envFrom = _.get(o, [ r, "envFrom" ], []);
return a;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").provider("keyValueEditorConfig", [ function() {
var e = {
keyMinlength: "",
keyMaxlength: "",
valueMinlength: "",
valueMaxlength: "",
keyValidator: "[a-zA-Z0-9-_]+",
valueValidator: "",
keyValidatorError: "Validation error",
keyValidatorErrorTooltip: void 0,
keyValidatorErrorTooltipIcon: "pficon pficon-help",
valueValidatorError: "Validation error",
valueValidatorErrorTooltip: void 0,
valueValidatorErrorTooltipIcon: "pficon pficon-help",
keyPlaceholder: "",
valuePlaceholder: "",
keyRequiredError: "Key is required"
};
this.set = function(t, n) {
angular.isObject(t) ? angular.extend(e, t) : e[t] = n;
}, this.$get = [ function() {
return e;
} ];
} ]), angular.module("openshiftConsole").factory("keyValueEditorUtils", [ "$timeout", "$window", function(e, t) {
var n = function() {
return {
name: "",
value: ""
};
<<<<<<< HEAD
<<<<<<< HEAD
}, r = [ "apiObj", "cannotDelete", "isReadonly", "isReadonlyKey", "isReadonlyValue", "keyValidator", "keyValidatorError", "keyValidatorErrorTooltip", "keyValidatorErrorTooltipIcon", "refType", "selected", "selectedValueFrom", "selectedValueFromKey", "valueValidatorError", "valueIcon", "valueIconTooltip", "valueAlt", "valueValidator", "valueValidatorErrorTooltip", "valueValidatorErrorTooltipIcon" ], a = function(e) {
return _.each(r, function(t) {
=======
}, a = [ "apiObj", "cannotDelete", "isReadonly", "isReadonlyKey", "isReadonlyValue", "keyValidator", "keyValidatorError", "keyValidatorErrorTooltip", "keyValidatorErrorTooltipIcon", "refType", "selected", "selectedValueFrom", "selectedValueFromKey", "valueValidatorError", "valueIcon", "valueIconTooltip", "valueAlt", "valueValidator", "valueValidatorErrorTooltip", "valueValidatorErrorTooltipIcon" ], r = function(e) {
return _.each(a, function(t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, r = [ "apiObj", "cannotDelete", "isReadonly", "isReadonlyKey", "isReadonlyValue", "keyValidator", "keyValidatorError", "keyValidatorErrorTooltip", "keyValidatorErrorTooltipIcon", "refType", "selected", "selectedValueFrom", "selectedValueFromKey", "valueValidatorError", "valueIcon", "valueIconTooltip", "valueAlt", "valueValidator", "valueValidatorErrorTooltip", "valueValidatorErrorTooltipIcon" ], a = function(e) {
return _.each(r, function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e[t] = void 0, delete e[t];
}), e;
}, o = function(e) {
return _.compact(_.map(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
return (e = a(e)).name || e.value || e.valueFrom ? e : void 0;
=======
return (e = r(e)).name || e.value || e.valueFrom ? e : void 0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return (e = a(e)).name || e.value || e.valueFrom ? e : void 0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
}, i = function(e, t) {
return {
object: _.find(t, function(t) {
return "ConfigMap" === t.kind && t.metadata.name === e.valueFrom.configMapKeyRef.name;
=======
},
roleHelp: function(e) {
if (e) {
var t = _.get(e, "metadata.namespace"), n = _.get(e, "metadata.name"), r = t ? t + " / " + n + ": " : "";
return e ? r + (y(e, "description") || "") : "";
}
}
});
var D = function(e, t, n, a) {
var o = {
title: "Confirm Removal",
alerts: {},
detailsMarkup: w.remove.areYouSure.html.subject({
roleName: n,
kindName: h(t),
subjectName: e
>>>>>>> Update membership to use new rbac endpoints
}),
key: e.valueFrom.configMapKeyRef.key
};
<<<<<<< HEAD
}, s = function(e, t) {
return {
object: _.find(t, function(t) {
return "Secret" === t.kind && t.metadata.name === e.valueFrom.secretKeyRef.name;
}),
key: e.valueFrom.secretKeyRef.key
};
}, c = function(e, t) {
var n = null;
return e.valueFrom.configMapKeyRef ? n = i(e, t) : e.valueFrom.secretKeyRef && (n = s(e, t)), n;
};
return {
newEntry: n,
addEntry: function(e, t) {
e && e.push(t || {
name: "",
value: ""
=======
return _.isEqual(e, a) && (o.detailsMarkup = w.remove.areYouSure.html.self({
roleName: n,
subjectName: e
}), d.isLastRole(r.user.metadata.name, r.roleBindings) && (o.alerts.currentUserLabelRole = {
type: "error",
message: w.notice.yourLastRole({
roleName: n
})
})), _.isEqual(t, "ServiceAccount") && _.startsWith(n, "system:") && (o.alerts.editingServiceAccountRole = {
type: "error",
message: w.warning.serviceAccount()
}), o;
};
s.withUser().then(function(e) {
r.user = e;
}), u.list().then(function(e) {
var t = _.keys(e.by("metadata.name")).sort();
angular.extend(r, {
projects: t,
selectProject: function(e) {
r.newBinding.name = "", k({
namespace: e
>>>>>>> Update membership to use new rbac endpoints
});
},
<<<<<<< HEAD
addEntryWithSelectors: function(e) {
e && e.push({
name: "",
selectedValueFrom: null,
selectedValueFromKey: null,
valueFrom: {}
=======
refreshProjects: function(e) {
e && !_.includes(r.projects, e) ? r.projects = [ e ].concat(t) : r.projects = t;
}
});
}), u.get(n.project).then(_.spread(function(n, a) {
g = a, I(), k(g), angular.extend(r, {
project: n,
subjectKinds: N,
canUpdateRolebindings: b("rolebindings", "update", v),
confirmRemove: function(n, a, i, s) {
var l = null, u = D(n, a, i, r.user.metadata.name);
_.isEqual(n, r.user.metadata.name) && d.isLastRole(r.user.metadata.name, r.roleBindings) && (l = !0), o.open({
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return u;
}
}
}).result.then(function() {
p.removeSubject(n, i, s, r.roleBindings, g).then(function(e) {
l ? t.url("catalog") : (c.getProjectRules(v, !0).then(function() {
I(e[0]);
var t = b("rolebindings", "update", v);
angular.extend(r, {
canUpdateRolebindings: t,
mode: {
edit: !!r.mode.edit && t
}
});
}), P("success", w.remove.success({
roleName: i,
subjectName: n
})));
}, function(t) {
P("error", w.remove.error({
roleName: i,
subjectName: n
}), e("getErrorDetails")(t));
});
>>>>>>> Add Browse Catalog to Project context view.
});
},
altTextForValueFrom: function(e, t) {
if (!e.value && e.valueFrom) {
e.valueIcon = "pficon pficon-help", e.valueIconTooltip = "This is a referenced value that will be generated when a container is created.  On running pods you can check the resolved values by going to the Terminal tab and echoing the environment variable.";
var n = {
config: "configMapKeyRef",
secret: "secretKeyRef",
field: "fieldRef"
<<<<<<< HEAD
};
e.valueFrom[n.config] ? (e.apiObj = {
kind: "ConfigMap",
metadata: {
name: e.valueFrom[n.config].name,
namespace: t
}
<<<<<<< HEAD
}, e.refType = n.config) : e.valueFrom[n.secret] ? (e.apiObj = {
kind: "Secret",
metadata: {
name: e.valueFrom[n.secret].name,
namespace: t
=======
});
i && _.some(i.subjects, o) ? P("error", w.update.subject.exists({
roleName: n.metadata.name,
subjectName: e
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})) : i ? I(i, o, a) : k(n, o);
>>>>>>> Add Browse Catalog to Project context view.
}
}, e.refType = n.secret, e.valueIcon = "fa fa-user-secret") : e.valueFrom[n.field] ? (e.isReadonlyValue = !0, e.refType = n.field, e.valueAlt = "Set to the field " + e.valueFrom.fieldRef.fieldPath + " in current object") : (e.isReadonlyValue = !0, e.valueAlt = "Set to a reference on a " + _.head(_.keys(e.valueFrom)));
=======
})) : i ? E(i, o, a) : R(n, o);
=======
})) : i ? T(i, o, a) : R(n, o);
>>>>>>> Configurable inactivity timeout in console
=======
})) : i ? E(i, o, a) : R(n, o);
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
})) : i ? T(i, o, a) : R(n, o);
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
})) : i ? E(i, o, a) : R(n, o);
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
}
}), f.listAllRoles(g, {
errorNotification: !1
}).then(function(e) {
C = d.mapRolesForUI(_.head(e).by("metadata.name"), _.last(e).by("metadata.name"));
var t = d.sortRoles(C), n = d.filterRoles(C), a = function(e, t) {
return _.some(t, {
metadata: {
name: e
>>>>>>> Update membership to use new rbac endpoints
}
<<<<<<< HEAD
=======
});
};
I(), angular.extend(r, {
toggle: {
roles: !1
>>>>>>> Add Browse Catalog to Project context view.
},
setEntryPerms: function(e, t, n) {
e.valueFrom && (e.valueFrom.configMapKeyRef && (n || (e.isReadonlyValue = !0)), e.valueFrom.secretKeyRef && (t || (e.isReadonlyValue = !0)));
},
cleanEntry: a,
cleanEntries: function(e) {
return _.map(e, a);
},
compactEntries: o,
mapEntries: function(e) {
return Logger.log("DEPRECATED: mapEntries() drops valueFrom from the entry."), _.reduce(o(e), function(e, t) {
return e[t.name] = t.value, e;
}, {});
},
setFocusOn: function(n, r) {
e(function() {
var e = _.head(t.document.querySelectorAll(n));
e && (e.focus(), r && (e.value = "", e.value = r));
}, 25);
},
uniqueForKey: function(e, t) {
return "key-value-editor-key-" + e + "-" + t;
},
uniqueForValue: function(e, t) {
return "key-value-editor-value-" + e + "-" + t;
},
findReferenceValue: c,
findReferenceValueForEntries: function(e, t) {
_.each(e, function(e) {
var n;
e.valueFrom && (n = c(e, t)) && (_.set(e, "selectedValueFrom", n.object), _.set(e, "selectedValueFromKey", n.key));
});
}
};
=======
};
e.valueFrom[n.config] ? (e.apiObj = {
kind: "ConfigMap",
metadata: {
name: e.valueFrom[n.config].name,
namespace: t
}
}, e.refType = n.config) : e.valueFrom[n.secret] ? (e.apiObj = {
kind: "Secret",
metadata: {
name: e.valueFrom[n.secret].name,
namespace: t
}
}, e.refType = n.secret, e.valueIcon = "fa fa-user-secret") : e.valueFrom[n.field] ? (e.isReadonlyValue = !0, e.refType = n.field, e.valueAlt = "Set to the field " + e.valueFrom.fieldRef.fieldPath + " in current object") : (e.isReadonlyValue = !0, e.valueAlt = "Set to a reference on a " + _.head(_.keys(e.valueFrom)));
}
},
setEntryPerms: function(e, t, n) {
e.valueFrom && (e.valueFrom.configMapKeyRef && (n || (e.isReadonlyValue = !0)), e.valueFrom.secretKeyRef && (t || (e.isReadonlyValue = !0)));
},
cleanEntry: a,
cleanEntries: function(e) {
return _.map(e, a);
},
compactEntries: o,
mapEntries: function(e) {
return Logger.log("DEPRECATED: mapEntries() drops valueFrom from the entry."), _.reduce(o(e), function(e, t) {
return e[t.name] = t.value, e;
}, {});
},
setFocusOn: function(n, r) {
e(function() {
var e = _.head(t.document.querySelectorAll(n));
e && (e.focus(), r && (e.value = "", e.value = r));
}, 25);
},
uniqueForKey: function(e, t) {
return "key-value-editor-key-" + e + "-" + t;
},
uniqueForValue: function(e, t) {
return "key-value-editor-value-" + e + "-" + t;
},
findReferenceValue: c,
findReferenceValueForEntries: function(e, t) {
_.each(e, function(e) {
var n;
e.valueFrom && (n = c(e, t)) && (_.set(e, "selectedValueFrom", n.object), _.set(e, "selectedValueFromKey", n.key));
});
}
};
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]), angular.module("openshiftConsole").factory("FullscreenService", [ "IS_SAFARI", function(e) {
var t = document.documentElement.requestFullScreen || document.documentElement.webkitRequestFullScreen || document.documentElement.mozRequestFullScreen || document.documentElement.msRequestFullscreen, n = function(e) {
if (!e || !_.isString(e)) return e;
var t = $(e);
return t.length ? t[0] : null;
};
return {
hasFullscreen: function(n) {
return (!n || !e) && !!t;
},
requestFullscreen: function(e) {
t && (e = n(e)) && t.call(e);
},
exitFullscreen: function() {
document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();
}
};
} ]), angular.module("openshiftConsole").factory("AppsService", function() {
var e = function(e) {
return _.get(e, "metadata.labels.app", "");
}, t = function(e, t) {
return e || t ? e ? t ? e.toLowerCase().localeCompare(t.toLowerCase()) : -1 : 1 : 0;
};
return {
groupByApp: function(t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = _.groupBy(t, e);
return n && _.mapValues(r, function(e) {
return _.sortBy(e, n);
}), r;
=======
var a = _.groupBy(t, e);
return n && _.mapValues(a, function(e) {
return _.sortBy(e, n);
}), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = _.groupBy(t, e);
return n && _.mapValues(r, function(e) {
return _.sortBy(e, n);
}), r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
sortAppNames: function(e) {
e.sort(t);
}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), angular.module("openshiftConsole").factory("ResourceAlertsService", [ "$filter", "AlertMessageService", "DeploymentsService", "Navigate", "NotificationsService", "gettextCatalog", "gettext", "QuotaService", function(e, t, n, r, a, o, i, s) {
var c = e("annotation"), l = e("humanizeKind"), u = e("deploymentStatus"), d = e("groupedPodWarnings"), m = function(e, t, n, r) {
e[t + "-" + n.reason] = {
type: r,
=======
}), angular.module("openshiftConsole").factory("ResourceAlertsService", [ "$filter", "AlertMessageService", "DeploymentsService", "Navigate", "QuotaService", function(e, t, n, a, r) {
var o = e("annotation"), i = e("humanizeKind"), s = e("deploymentStatus"), c = e("groupedPodWarnings"), l = function(e, t, n, a) {
=======
}), angular.module("openshiftConsole").factory("ResourceAlertsService", [ "$filter", "AlertMessageService", "DeploymentsService", "Navigate", "NotificationsService", "QuotaService", function(e, t, n, a, r, o) {
var i = e("annotation"), s = e("humanizeKind"), c = e("deploymentStatus"), l = e("groupedPodWarnings"), u = function(e, t, n, a) {
>>>>>>> Quota Notifications
e[t + "-" + n.reason] = {
type: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").factory("ResourceAlertsService", [ "$filter", "AlertMessageService", "DeploymentsService", "Navigate", "NotificationsService", "QuotaService", function(e, t, n, r, a, o) {
var i = e("annotation"), s = e("humanizeKind"), c = e("deploymentStatus"), l = e("groupedPodWarnings"), u = function(e, t, n, r) {
e[t + "-" + n.reason] = {
type: r,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
message: n.message
};
};
return {
getPodAlerts: function(e, n) {
if (_.isEmpty(e)) return {};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var a = {}, s = d(e);
return _.each(s, function(e, s) {
var c = _.head(e);
if (c) {
var l = "pod_warning" + s, u = {
type: c.severity || "warning",
message: c.message
};
switch (c.reason) {
case "Looping":
case "NonZeroExit":
var d = r.resourceURL(c.pod, "Pod", n), m = URI(d).addSearch({
tab: "logs",
container: c.container
}).toString();
u.links = [ {
href: m,
label: o.getString(i("View Log"))
=======
var r = {}, o = c(e);
=======
var r = {}, o = l(e);
>>>>>>> Quota Notifications
=======
var a = {}, o = l(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return _.each(o, function(e, o) {
var i = _.head(e);
if (i) {
var s = "pod_warning" + o, c = {
type: i.severity || "warning",
message: i.message
};
switch (i.reason) {
case "Looping":
case "NonZeroExit":
var l = r.resourceURL(i.pod, "Pod", n), u = URI(l).addSearch({
tab: "logs",
container: i.container
}).toString();
c.links = [ {
href: u,
label: "View Log"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ];
=======
m.push(i.watch(u, r, function(e) {
n.buildsLoaded = !0, s = e.by("metadata.name"), h();
}));
var y = !1;
m.push(i.watch(n.buildConfigsVersion, r, function(e) {
if (n.buildConfigsLoaded = !0, n.buildConfigs = _.pickBy(e.by("metadata.name"), f), _.isEmpty(n.buildConfigs) && !y && (y = !0, o.SAMPLE_PIPELINE_TEMPLATE)) {
var t = o.SAMPLE_PIPELINE_TEMPLATE.name, r = o.SAMPLE_PIPELINE_TEMPLATE.namespace;
i.get(d, t, {
namespace: r
}, {
errorNotification: !1
}).then(function(e) {
n.createSampleURL = c.createFromTemplateURL(e, n.projectName);
});
}
h();
})), n.startBuild = a.startBuild, n.$on("$destroy", function() {
i.unwatchAll(m);
});
}));
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "AuthorizationService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
e.projectName = n.project, e.buildConfigName = n.buildconfig, e.buildConfig = null, e.labelSuggestions = {}, e.alerts = {}, e.breadcrumbs = [], e.forms = {}, e.expand = {
imageEnv: !1
}, n.isPipeline ? e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + n.project + "/browse/pipelines"
}) : e.breadcrumbs.push({
title: "Builds",
link: "project/" + n.project + "/browse/builds"
}), e.breadcrumbs.push({
title: n.buildconfig
}), e.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), e.buildsVersion = r.getPreferredVersion("builds"), e.buildConfigsInstantiateVersion = r.getPreferredVersion("buildconfigs/instantiate"), e.secretsVersion = r.getPreferredVersion("secrets"), e.emptyMessage = "Loading...", e.aceLoaded = function(e) {
var t = e.getSession();
t.setOption("tabSize", 2), t.setOption("useSoftTabs", !0), e.$blockScrolling = 1 / 0;
};
var f = t("buildConfigForBuild"), g = t("buildStrategy"), v = t("orderByDisplayName"), h = t("getErrorDetails"), y = [], b = [], S = [];
e.valueFromObjects = [];
var C = function(t) {
e.updatedBuildConfig = angular.copy(t), e.envVars = g(e.updatedBuildConfig).env || [];
};
e.compareTriggers = function(e, t) {
return _.isNumber(e.value) ? -1 : "ConfigChange" === e.value ? -1 : "ConfigChange" === t.value ? 1 : "ImageChange" === e.value ? -1 : "ImageChange" === t.value ? 1 : e.value.localeCompare(t.value);
}, e.saveEnvVars = function() {
u.hideNotification("save-bc-env-error"), e.envVars = _.filter(e.envVars, "name"), g(e.updatedBuildConfig).env = p.compactEntries(angular.copy(e.envVars)), s.update(e.buildConfigsVersion, n.buildconfig, e.updatedBuildConfig, e.projectContext).then(function() {
u.addNotification({
type: "success",
message: "Environment variables for build config " + e.buildConfigName + " were successfully updated."
}), e.forms.bcEnvVars.$setPristine();
}, function(n) {
u.addNotification({
id: "save-bc-env-error",
type: "error",
message: "An error occurred updating environment variables for build config " + e.buildConfigName + ".",
details: t("getErrorDetails")(n)
});
});
}, e.clearEnvVarUpdates = function() {
C(e.buildConfig), e.forms.bcEnvVars.$setPristine();
};
var w, P = function(n, a) {
e.loaded = !0, e.buildConfig = n, e.buildConfigPaused = o.isPaused(e.buildConfig), e.buildConfig.spec.source.images && (e.imageSources = e.buildConfig.spec.source.images, e.imageSourcesPaths = [], e.imageSources.forEach(function(n) {
e.imageSourcesPaths.push(t("destinationSourcePair")(n.paths));
}));
var c = _.get(g(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
w !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (w = l, s.get(r.kindToResource(c.kind), c.name, {
namespace: c.namespace || e.projectName
}, {
errorNotification: !1
}).then(function(t) {
e.BCEnvVarsFromImage = i.getEnvironment(t);
}, function() {
e.BCEnvVarsFromImage = [];
})) : e.BCEnvVarsFromImage = []), C(n), "DELETED" === a && (e.alerts.deleted = {
type: "warning",
message: "This build configuration has been deleted."
}, e.buildConfigDeleted = !0), !e.forms.bcEnvVars || e.forms.bcEnvVars.$pristine ? C(n) : e.alerts.background_update = {
type: "warning",
message: "This build configuration has been updated in the background. Saving your changes may create a conflict or cause loss of data.",
links: [ {
label: "Reload Environment Variables",
onClick: function() {
return e.clearEnvVarUpdates(), !0;
}
} ]
}, e.paused = o.isPaused(e.buildConfig);
};
d.get(n.project).then(_.spread(function(r, i) {
function d() {
c.getLabelSelector().isEmpty() || !$.isEmptyObject(e.builds) || $.isEmptyObject(e.unfilteredBuilds) ? delete e.alerts.builds : e.alerts.builds = {
type: "warning",
details: "The active filters are hiding all builds."
};
}
e.project = r, e.projectContext = i, s.get(e.buildConfigsVersion, n.buildconfig, i, {
errorNotification: !1
}).then(function(t) {
P(t), y.push(s.watchObject(e.buildConfigsVersion, n.buildconfig, i, P));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This build configuration can not be found, it may have been deleted." : "The build configuration details could not be loaded.",
details: 404 === n.status ? "Any remaining build history for this build will be shown." : t("getErrorDetails")(n)
};
}), s.list("configmaps", i, null, {
errorNotification: !1
}).then(function(t) {
b = v(t.by("metadata.name")), e.valueFromObjects = b.concat(S);
}, function(e) {
403 !== e.code && u.addNotification({
id: "build-config-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: h(e)
});
}), a.canI(e.secretsVersion, "list", n.project) && s.list("secrets", i, null, {
errorNotification: !1
}).then(function(t) {
S = v(t.by("metadata.name")), e.webhookSecrets = m.groupSecretsByType(t).webhook, e.valueFromObjects = b.concat(S);
}, function(e) {
403 !== e.code && u.addNotification({
id: "build-config-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: h(e)
});
}), y.push(s.watch(e.buildsVersion, i, function(t, r, a) {
if (e.emptyMessage = "No builds to show", r) {
if (f(a) === n.buildconfig) {
var i = a.metadata.name;
switch (r) {
case "ADDED":
case "MODIFIED":
e.unfilteredBuilds[i] = a;
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
break;

case "NonZeroExitTerminatingPod":
<<<<<<< HEAD
if (t.isAlertPermanentlyHidden(l, n)) return;
u.links = [ {
href: "",
label: o.getString(i("Don't Show Me Again")),
onClick: function() {
return t.permanentlyHideAlert(l, n), !0;
}
} ];
}
<<<<<<< HEAD
a[l] = u;
}
}), a;
},
getDeploymentStatusAlerts: function(e, t) {
if (!e || !t) return {};
var n, a = {}, s = _.get(e, "metadata.name"), l = u(t), d = c(t, "deploymentVersion"), m = d ? s + " #" + d : t.metadata.name, p = r.resourceURL(t);
switch (l) {
case "Cancelled":
a[t.metadata.uid + "-cancelled"] = {
type: "info",
message: o.getString(i("Deployment")) + " " + m + " " + o.getString(i("was cancelled.")),
links: [ {
href: p,
label: o.getString(i("View Deployment"))
=======
if (t.isAlertPermanentlyHidden(s, n)) return;
c.links = [ {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return t.permanentlyHideAlert(s, n), !0;
=======
} else e.unfilteredBuilds = o.validatedBuildsForBuildConfig(n.buildconfig, t.by("metadata.name"));
e.builds = c.getLabelSelector().select(e.unfilteredBuilds), d(), c.addLabelSuggestionsFromResources(e.unfilteredBuilds, e.labelSuggestions), c.setLabelSuggestions(e.labelSuggestions), e.orderedBuilds = o.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds);
}, {
http: {
params: {
labelSelector: t("labelName")("buildConfig") + "=" + _.truncate(e.buildConfigName, {
length: 63,
omission: ""
})
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
}
} ];
}
<<<<<<< HEAD
a[s] = c;
}
}), a;
},
getDeploymentStatusAlerts: function(e, t) {
if (!e || !t) return {};
var n, a = {}, o = _.get(e, "metadata.name"), s = c(t), l = i(t, "deploymentVersion"), u = l ? o + " #" + l : t.metadata.name, d = r.resourceURL(t);
switch (s) {
case "Cancelled":
a[t.metadata.uid + "-cancelled"] = {
type: "info",
message: "Deployment " + u + " was cancelled.",
links: [ {
href: d,
label: "View Deployment"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
=======
})), c.onActiveFiltersChanged(function(t) {
e.$apply(function() {
e.builds = t.select(e.unfilteredBuilds), e.orderedBuilds = o.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds), d();
});
}), e.startBuild = function() {
o.startBuild(e.buildConfig);
}, e.showJenkinsfileExamples = function() {
l.showJenkinsfileExamples();
}, e.$on("$destroy", function() {
s.unwatchAll(y);
});
}));
} ]), angular.module("openshiftConsole").controller("BuildController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "DataService", "ModalsService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c) {
e.projectName = n.project, e.build = null, e.buildConfig = null, e.buildConfigName = n.buildconfig, e.builds = {}, e.alerts = {}, e.showSecret = !1, e.renderOptions = {
hideFilterWidget: !0
}, e.breadcrumbs = [], n.isPipeline ? (e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + n.project + "/browse/pipelines"
}), n.buildconfig && e.breadcrumbs.push({
title: n.buildconfig,
link: "project/" + n.project + "/browse/pipelines/" + n.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + n.project + "/browse/builds"
}), n.buildconfig && e.breadcrumbs.push({
title: n.buildconfig,
link: "project/" + n.project + "/browse/builds/" + n.buildconfig
})), e.breadcrumbs.push({
title: n.build
}), e.buildsVersion = r.getPreferredVersion("builds"), e.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), e.podsVersion = r.getPreferredVersion("pods");
var l, u = t("annotation"), d = [], m = function(t) {
e.logCanRun = !_.includes([ "New", "Pending", "Error" ], t.status.phase);
}, p = function() {
e.buildConfig ? e.canBuild = a.canBuild(e.buildConfig) : e.canBuild = !1;
};
c.get(n.project).then(_.spread(function(r, s) {
e.project = r, e.projectContext = s, e.logOptions = {};
var c = function() {
e.eventObjects = l ? [ e.build, l ] : [ e.build ];
}, f = function(t, n) {
e.loaded = !0, e.build = t, m(t), c();
var r = u(t, "buildNumber");
r && e.breadcrumbs[2] && (e.breadcrumbs[2].title = "#" + r), "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This build has been deleted."
});
var a;
l || (a = u(t, "buildPod")) && o.get(e.podsVersion, a, s, {
errorNotification: !1
}).then(function(e) {
l = e, c();
});
}, g = function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "Build configuration " + e.buildConfigName + " has been deleted."
}, e.buildConfigDeleted = !0), e.buildConfig = t, e.buildConfigPaused = a.isPaused(e.buildConfig), p();
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
};
break;

case "Failed":
<<<<<<< HEAD
n = URI(p).addSearch({
tab: "logs"
}).toString(), a[t.metadata.uid + "-failed"] = {
type: "error",
message: o.getString(i("Deployment")) + " " + m + " " + o.getString(i("failed.")),
reason: c(t, "openshift.io/deployment.status-reason"),
links: [ {
href: n,
label: o.getString(i("View Log"))
}, {
href: "project/" + t.metadata.namespace + "/browse/events",
label: o.getString(i("View Events"))
} ]
};
}
return a;
},
getPausedDeploymentAlerts: function(t) {
var r = {};
return _.get(t, "spec.paused") && (r[t.metadata.uid + "-paused"] = {
=======
n = URI(d).addSearch({
tab: "logs"
}).toString(), a[t.metadata.uid + "-failed"] = {
type: "error",
message: "Deployment " + u + " failed.",
reason: i(t, "openshift.io/deployment.status-reason"),
links: [ {
href: n,
label: "View Log"
}, {
href: "project/" + t.metadata.namespace + "/browse/events",
label: "View Events"
} ]
};
}
return a;
},
getPausedDeploymentAlerts: function(t) {
<<<<<<< HEAD
var a = {};
return _.get(t, "spec.paused") && (a[t.metadata.uid + "-paused"] = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = {};
return _.get(t, "spec.paused") && (r[t.metadata.uid + "-paused"] = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "info",
message: t.metadata.name + " is paused.",
details: "This will stop any new rollouts or triggers from running until resumed.",
links: [ {
href: "",
label: "Resume Rollouts",
onClick: function() {
<<<<<<< HEAD
<<<<<<< HEAD
return n.setPaused(t, !1, {
namespace: t.metadata.namespace
}).then(_.noop, function(n) {
r[t.metadata.uid + "-pause-error"] = {
type: "error",
message: "An error occurred resuming the " + l(t.kind) + ".",
details: e("getErrorDetails")(n)
};
}), !0;
}
} ]
}), r;
=======
n.setPaused(t, !1, {
=======
return n.setPaused(t, !1, {
>>>>>>> Fix problem where UI appears unresponsive while waiting for websocket update
namespace: t.metadata.namespace
}).then(_.noop, function(n) {
r[t.metadata.uid + "-pause-error"] = {
type: "error",
message: "An error occurred resuming the " + s(t.kind) + ".",
details: e("getErrorDetails")(n)
};
}), !0;
}
} ]
<<<<<<< HEAD
}), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
getServiceInstanceAlerts: function(e) {
var t = {};
if (!e) return t;
<<<<<<< HEAD
<<<<<<< HEAD
var n = e.metadata.uid, r = _.find(e.status.conditions, {
reason: "ErrorFindingNamespaceForInstance"
}), a = _.find(e.status.conditions, {
=======
var n = e.metadata.uid, a = _.find(e.status.conditions, {
reason: "ErrorFindingNamespaceForInstance"
}), r = _.find(e.status.conditions, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n = e.metadata.uid, r = _.find(e.status.conditions, {
reason: "ErrorFindingNamespaceForInstance"
}), a = _.find(e.status.conditions, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
reason: "ProvisionFailed"
}), o = _.find(e.status.conditions, {
reason: "DeprovisioningFailed"
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return r && m(t, n, r, "warning"), a && m(t, n, a, "error"), o && m(t, n, o, "error"), t;
},
setQuotaNotifications: function(e, t, n) {
var r = s.getQuotaNotifications(e, t, n);
_.each(r, function(e) {
a.isNotificationPermanentlyHidden(e) || a.addNotification(e);
});
=======
return a && l(t, n, a, "warning"), r && l(t, n, r, "error"), o && l(t, n, o, "error"), t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return a && u(t, n, a, "warning"), r && u(t, n, r, "error"), o && u(t, n, o, "error"), t;
=======
return r && u(t, n, r, "warning"), a && u(t, n, a, "error"), o && u(t, n, o, "error"), t;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
setQuotaNotifications: function(e, t, n) {
var r = o.getQuotaNotifications(e, t, n);
_.each(r, function(e) {
a.isNotificationPermanentlyHidden(e) || a.addNotification(e);
});
>>>>>>> Quota Notifications
}
};
} ]), angular.module("openshiftConsole").factory("ListRowUtils", function() {
var e = function(e) {
var t = _.get(e, "metadata.uid");
return t ? "overview/expand/" + t : null;
}, t = function(t) {
var n = e(t.apiObject);
if (n) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = sessionStorage.getItem(n);
r || !t.state.expandAll ? t.expanded = "true" === r : t.expanded = !0;
=======
var a = sessionStorage.getItem(n);
a || !t.state.expandAll ? t.expanded = "true" === a : t.expanded = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = sessionStorage.getItem(n);
r || !t.state.expandAll ? t.expanded = "true" === r : t.expanded = !0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else t.expanded = !1;
};
return {
getNotifications: function(e, t) {
var n = _.get(e, "metadata.uid");
return n ? _.get(t, [ "notificationsByObjectUID", n ]) : null;
},
ui: {
toggleExpand: function(t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
if (n || !($(t.target).closest("a").length > 0 || $(t.target).closest("button").length > 0)) {
var r = e(this.apiObject);
r && (this.expanded = !this.expanded, sessionStorage.setItem(r, this.expanded ? "true" : "false"));
=======
if (n || !($(t.target).closest("a").length > 0)) {
=======
if (n || !($(t.target).closest("a").length > 0 || $(t.target).closest("button").length > 0)) {
<<<<<<< HEAD
>>>>>>> Fix overview kebab styling
var a = e(this.apiObject);
a && (this.expanded = !this.expanded, sessionStorage.setItem(a, this.expanded ? "true" : "false"));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e(this.apiObject);
r && (this.expanded = !this.expanded, sessionStorage.setItem(r, this.expanded ? "true" : "false"));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
},
$onInit: function() {
_.set(this, "selectedTab.networking", !0), t(this);
}
}
};
}), angular.module("openshiftConsole").factory("OwnerReferencesService", function() {
var e = function(e) {
return _.get(e, "metadata.ownerReferences");
};
return {
getOwnerReferences: e,
getControllerReferences: function(t) {
var n = e(t);
return _.filter(n, "controller");
},
groupByControllerUID: function(t) {
var n = {};
return _.each(t, function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var r = !1;
_.each(e(t), function(e) {
e.controller && (r = !0, n[e.uid] = n[e.uid] || [], n[e.uid].push(t));
}), r || (n[""] = n[""] || [], n[""].push(t));
}), n;
},
filterForController: function(t, n) {
var r = _.get(n, "metadata.uid");
return _.filter(t, function(t) {
return _.some(e(t), {
uid: r,
controller: !0
});
});
}
};
}), angular.module("openshiftConsole").factory("ServiceInstancesService", [ "$filter", "$q", "$uibModal", "APIService", "BindingService", "CatalogService", "DataService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c) {
var l = r.getPreferredVersion("clusterserviceclasses"), u = r.getPreferredVersion("clusterserviceplans"), d = function(e) {
return _.get(e, "spec.clusterServiceClassRef.name");
}, m = function(e) {
return _.get(e, "spec.clusterServicePlanRef.name");
}, p = function(e, n) {
if (angular.isDefined(n)) return t.when(n);
var o = {
namespace: e.metadata.namespace
<<<<<<< HEAD
}, s = r.getPreferredVersion("serviceinstancecredentials");
=======
}, s = r.getPreferredVersion("servicebindings");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return i.list(s, o).then(function(t) {
return n = t.by("metadata.name"), a.getBindingsForResource(n, e);
});
}, g = function(t) {
var n = {
namespace: t.metadata.namespace
}, a = r.getPreferredVersion("serviceinstances");
c.hideNotification("deprovision-service-error");
var o = {
propagationPolicy: null
};
return i.delete(a, t.metadata.name, n, o).then(function() {
c.addNotification({
type: "success",
message: "Provisioned service '" + t.metadata.name + "' was marked for deletion."
});
}, function(n) {
c.addNotification({
id: "deprovision-service-error",
type: "error",
message: "An error occurred while deleting provisioned service " + t.metadata.name + ".",
details: e("getErrorDetails")(n)
}), s("An error occurred while deleting provisioned service " + t.metadata.name + ".", n);
});
}, f = function(t, n) {
if (o.SERVICE_CATALOG_ENABLED) {
var a = {
namespace: t.metadata.namespace
<<<<<<< HEAD
}, l = r.getPreferredVersion("serviceinstancecredentials");
p(t, n).then(function(t) {
_.each(t, function(t) {
t.metadata.deletionTimestamp && i.delete(l, t.metadata.name, a).then(function() {
=======
}, l = r.getPreferredVersion("servicebindings");
p(t, n).then(function(t) {
_.each(t, function(t) {
if (!t.metadata.deletionTimestamp) {
var n = {
propagationPolicy: null
};
i.delete(l, t.metadata.name, a, n).then(function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
c.addNotification({
type: "success",
message: "Binding " + t.metadata.name + "' was marked for deletion."
});
}).catch(function(n) {
c.addNotification({
type: "error",
message: "Binding " + t.metadata.name + "' could not be deleted.",
details: e("getErrorDetails")(n)
}), s.error("Binding " + t.metadata.name + "' could not be deleted.", n);
});
<<<<<<< HEAD
=======
var a = !1;
_.each(e(t), function(e) {
e.controller && (a = !0, n[e.uid] = n[e.uid] || [], n[e.uid].push(t));
}), a || (n[""] = n[""] || [], n[""].push(t));
}), n;
},
filterForController: function(t, n) {
var a = _.get(n, "metadata.uid");
return _.filter(t, function(t) {
return _.some(e(t), {
uid: a,
controller: !0
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return {
getServiceClassNameForInstance: d,
fetchServiceClassForInstance: function(e) {
var t = d(e);
return i.get(l, t, {});
},
getServicePlanNameForInstance: m,
fetchServicePlanForInstance: function(e) {
var t = m(e);
return i.get(u, t, {});
},
isCurrentPlan: function(e, t) {
return m(e) === _.get(t, "metadata.name");
},
deprovision: function(e, t) {
var r, a = {
kind: e.kind,
displayName: e.metadata.name,
okButtonText: "Delete",
=======
}, e.removeVolume = function(t) {
var n;
n = _.get(e, "deployment.spec.paused") ? "This will remove the volume from the deployment." : "This will remove the volume from the deployment and start a new rollout.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
u.confirm({
title: "Remove volume " + t.name + "?",
details: n,
okButtonText: "Remove",
>>>>>>> Update modals to align with PatternFly standard
okButtonClass: "btn-danger",
cancelButtonText: "cel",
delete: function() {
r.close("delete");
}
};
return (r = n.open({
<<<<<<< HEAD
=======
animation: !0,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
templateUrl: "views/modals/delete-resource.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return a;
<<<<<<< HEAD
=======
}), angular.module("openshiftConsole").factory("ServiceInstancesService", [ "$filter", "$uibModal", "DataService", "NotificationsService", function(e, t, n, a) {
return {
deprovision: function(r) {
var o = e("getErrorDetails"), i = {
alerts: {
deprovision: {
=======
}), angular.module("openshiftConsole").factory("ServiceInstancesService", [ "$filter", "$q", "$uibModal", "APIService", "BindingService", "CatalogService", "DataService", "Logger", "NotificationsService", function(e, t, n, a, r, o, i, s, c) {
var l = a.getPreferredVersion("clusterserviceclasses"), u = a.getPreferredVersion("clusterserviceplans"), d = function(e) {
return _.get(e, "spec.clusterServiceClassRef.name");
}, m = function(e) {
return _.get(e, "spec.clusterServicePlanRef.name");
}, p = function(e, n) {
if (angular.isDefined(n)) return t.when(n);
var o = {
namespace: e.metadata.namespace
}, s = a.getPreferredVersion("serviceinstancecredentials");
return i.list(s, o).then(function(t) {
return n = t.by("metadata.name"), r.getBindingsForResource(n, e);
=======
}
}
})).result.then(function() {
g(e, t), f(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}, f = function(t) {
var n = {
namespace: t.metadata.namespace
}, r = a.getPreferredVersion("serviceinstances");
c.hideNotification("deprovision-service-error");
var o = {
propagationPolicy: null
};
<<<<<<< HEAD
return i.delete(r, t.metadata.name, n, o).then(function() {
c.addNotification({
type: "success",
message: "Provisioned service '" + t.metadata.name + "' was marked for deletion."
});
}, function(n) {
c.addNotification({
id: "deprovision-service-error",
type: "error",
message: "An error occurred while deleting provisioned service " + t.metadata.name + ".",
details: e("getErrorDetails")(n)
}), s("An error occurred while deleting provisioned service " + t.metadata.name + ".", n);
});
}, g = function(t, n) {
if (o.SERVICE_CATALOG_ENABLED) {
var r = {
namespace: t.metadata.namespace
}, l = a.getPreferredVersion("serviceinstancecredentials");
p(t, n).then(function(t) {
_.each(t, function(t) {
<<<<<<< HEAD
t.metadata.deletionTimestamp && i.delete(u, t.metadata.name, r).then(function() {
=======
t.metadata.deletionTimestamp || i.delete(l, t.metadata.name, r).then(function() {
>>>>>>> Adopt service catalog API changes
c.addNotification({
type: "success",
message: "Binding " + t.metadata.name + "' was marked for deletion."
});
}).catch(function(n) {
c.addNotification({
>>>>>>> Delete bindings when deleting a service instance
type: "error",
message: "Binding " + t.metadata.name + "' could not be deleted.",
details: e("getErrorDetails")(n)
}), s.error("Binding " + t.metadata.name + "' could not be deleted.", n);
});
});
});
<<<<<<< HEAD
}
};
<<<<<<< HEAD
return {
getServiceClassNameForInstance: d,
fetchServiceClassForInstance: function(e) {
var t = d(e);
return i.get(l, t, {});
},
getServicePlanNameForInstance: m,
fetchServicePlanForInstance: function(e) {
var t = m(e);
return i.get(u, t, {});
},
isCurrentPlan: function(e, t) {
return m(e) === _.get(t, "metadata.name");
},
deprovision: function(e, t) {
var a, r = {
kind: e.kind,
displayName: e.metadata.name,
okButtonText: "Delete",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel",
delete: function() {
a.close("delete");
}
=======
}));
} ]), angular.module("openshiftConsole").controller("DeploymentConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "NotificationsService", "Logger", "ProjectsService", "StorageService", "LabelFilter", "labelNameFilter", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v) {
var h = {};
e.projectName = n.project, e.deploymentConfigName = n.deploymentconfig, e.deploymentConfig = null, e.deployments = {}, e.unfilteredDeployments = {}, e.imagesByDockerReference = {}, e.builds = {}, e.labelSuggestions = {}, e.forms = {}, e.alerts = {}, e.breadcrumbs = a.getBreadcrumbs({
name: n.deploymentconfig,
kind: "DeploymentConfig",
namespace: n.project
}), e.emptyMessage = "Loading...", e.deploymentConfigsInstantiateVersion = r.getPreferredVersion("deploymentconfigs/instantiate"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.horizontalPodAutoscalersVersion = r.getPreferredVersion("horizontalpodautoscalers");
var y = r.getPreferredVersion("builds"), b = r.getPreferredVersion("imagestreams"), S = r.getPreferredVersion("limitranges"), C = r.getPreferredVersion("replicationcontrollers");
e.healthCheckURL = u.healthCheckURL(n.project, "DeploymentConfig", n.deploymentconfig, e.deploymentConfigsVersion.group);
var w = t("mostRecent"), P = t("orderObjectsByDate"), j = [];
p.get(n.project).then(_.spread(function(r, a) {
function u() {
g.getLabelSelector().isEmpty() || !$.isEmptyObject(e.deployments) || $.isEmptyObject(e.unfilteredDeployments) ? delete e.alerts.deployments : e.alerts.deployments = {
type: "warning",
details: "The active filters are hiding all deployments."
>>>>>>> Add Browse Catalog to Project context view.
};
return (a = n.open({
animation: !0,
templateUrl: "views/modals/delete-resource.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return r;
}
}
})).result.then(function() {
g(e, t), f(e);
});
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "CatalogService", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f) {
=======
} ]), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "CatalogService", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function g() {
var t = f.search();
return t.serviceExternalName ? _.find(e.catalogItems, {
resource: {
<<<<<<< HEAD
<<<<<<< HEAD
metadata: {
name: n
>>>>>>> Updates for Service Instance & Bindings
}
}
})).result.then(function() {
f(e, t), g(e);
=======
});
})), t.$on("$destroy", function() {
o.unwatchAll(p);
});
} ]), angular.module("openshiftConsole").controller("ServicesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ProjectsService", "LabelFilter", "Logger", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.services = {}, n.unfilteredServices = {}, n.routesByService = {}, n.routes = {}, n.labelSuggestions = {}, n.clearFilter = function() {
i.clear();
};
var c = r.getPreferredVersion("services"), l = [];
o.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && _.isEmpty(n.services) && !_.isEmpty(n.unfilteredServices);
}
n.project = e, l.push(a.watch(c, t, function(e) {
n.servicesLoaded = !0, n.unfilteredServices = e.by("metadata.name"), i.addLabelSuggestionsFromResources(n.unfilteredServices, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), n.services = i.getLabelSelector().select(n.unfilteredServices), r(), s.log("services (subscribe)", n.unfilteredServices);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.services = e.select(n.unfilteredServices), r();
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
=======
o.get(e.deploymentConfigsVersion, n.deploymentconfig, a, {
errorNotification: !1
}).then(function(r) {
e.loaded = !0, e.deploymentConfig = r, e.strategyParams = t("deploymentStrategyParams")(r), p(), j.push(o.watchObject(e.deploymentConfigsVersion, n.deploymentconfig, a, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This deployment configuration has been deleted."
}), e.deploymentConfig = t, e.updatingPausedState = !1, p(), c.fetchReferencedImageStreamImages([ t.spec.template ], e.imagesByDockerReference, h, a);
>>>>>>> Add Browse Catalog to Project context view.
}));
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", "$filter", function(e, t, n, r, a, o) {
e.projectName = t.project, e.service = null, e.services = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Services",
link: "project/" + t.project + "/browse/services"
}, {
title: t.service
} ], e.podFailureReasons = {
Pending: "This pod will not receive traffic until all of its containers have been created."
};
<<<<<<< HEAD
var i = n.getPreferredVersion("pods"), s = n.getPreferredVersion("endpoints");
e.eventsVersion = n.getPreferredVersion("events"), e.routesVersion = n.getPreferredVersion("routes"), e.servicesVersion = n.getPreferredVersion("services");
var c = {}, l = [], u = function() {
e.service && (e.portsByRoute = {}, _.each(e.service.spec.ports, function(t) {
var n = !1;
t.nodePort && (e.showNodePorts = !0), _.each(e.routesForService, function(r) {
r.spec.port && r.spec.port.targetPort !== t.name && r.spec.port.targetPort !== t.targetPort || (e.portsByRoute[r.metadata.name] = e.portsByRoute[r.metadata.name] || [], e.portsByRoute[r.metadata.name].push(t), n = !0);
}), n || (e.portsByRoute[""] = e.portsByRoute[""] || [], e.portsByRoute[""].push(t));
}));
}, d = function() {
if (e.podsForService = {}, e.service) {
var t = new LabelSelector(e.service.spec.selector);
e.podsForService = t.select(c);
=======
}), j.push(o.watch(C, a, function(r, a, o) {
var s = n.deploymentconfig;
if (e.emptyMessage = "No deployments to show", a) {
if (i.deploymentBelongsToConfig(o, n.deploymentconfig)) {
var c = o.metadata.name;
switch (a) {
case "ADDED":
case "MODIFIED":
e.unfilteredDeployments[c] = o, t("deploymentIsInProgress")(o) ? (e.deploymentConfigDeploymentsInProgress[s] = e.deploymentConfigDeploymentsInProgress[s] || {}, e.deploymentConfigDeploymentsInProgress[s][c] = o) : e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c], o.causes = t("deploymentCauses")(o);
break;

case "DELETED":
delete e.unfilteredDeployments[c], e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c];
>>>>>>> Add Browse Catalog to Project context view.
}
}, m = function(t, n) {
e.loaded = !0, e.service = t, d(), u(), "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This service has been deleted."
>>>>>>> Update service, services controllers to use getPreferredVersion
});
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "CatalogService", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g) {
function f() {
var t = g.search();
return t.serviceExternalName ? _.find(e.catalogItems, {
resource: {
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
spec: {
externalName: t.serviceExternalName
}
}
}) : null;
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
function v() {
var n = f();
if (n) e.$broadcast("open-overlay-panel", n); else if (y) if (p.startTour) d(function() {
g.replace(), g.search("startTour", null), e.startGuidedTour();
=======
if (v) if (m.startTour) d(function() {
=======
if (v) if (p.startTour) d(function() {
>>>>>>> Support EnvFrom in the Env Editors
f.replace(), f.search("startTour", null), e.startGuidedTour();
>>>>>>> Updates for Service Instance & Bindings
}, 500); else if (_.get(h, "auto_launch")) {
=======
if (h) if (p.startTour) d(function() {
f.replace(), f.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(v, "auto_launch")) {
>>>>>>> Add SVG icons
=======
function v() {
var n = g();
if (n) e.$broadcast("open-overlay-panel", n); else if (y) if (p.startTour) d(function() {
f.replace(), f.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(h, "auto_launch")) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var r = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(r) && d(function() {
e.startGuidedTour() && localStorage.setItem(r, "true");
}, 500);
}
}
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var h = _.get(a, "GUIDED_TOURS.landing_page_tour"), y = h && h.enabled && h.steps;
e.saasOfferings = a.SAAS_OFFERINGS, e.viewMembership = function(e) {
i.toProjectMembership(e.metadata.name);
}, y && (e.startGuidedTour = function() {
return !u.isWindowBelowBreakpoint(u.WINDOW_SIZE_SM) && (l.startTour(h.steps), !0);
}), s.clearNotifications();
var b = function() {
var t = _.get(e, "template.metadata.uid");
t && c.addItem(t);
}, S = function(e) {
return "PartialObjectMetadata" === e.kind;
}, C = function(e) {
return S(e) ? o.get("templates", e.metadata.name, {
namespace: e.metadata.namespace
}) : m.when(e);
};
e.templateSelected = function(t) {
C(t).then(function(t) {
_.set(e, "ordering.panelName", "template"), e.template = t;
=======
a.get(t.project).then(_.spread(function(n, a) {
e.project = n, e.projectContext = a, r.get(e.servicesVersion, t.service, a, {
errorNotification: !1
}).then(function(n) {
m(n), l.push(r.watchObject(e.servicesVersion, t.service, a, m));
}, function(t) {
e.loaded = !0, e.alerts.load = {
=======
})), o.list(S, a).then(function(e) {
d = e.by("metadata.name"), p();
}), j.push(o.watch(b, a, function(t) {
var n = t.by("metadata.name");
c.buildDockerRefMapForImageStreams(n, h), e.deploymentConfig && c.fetchReferencedImageStreamImages([ e.deploymentConfig.spec.template ], e.imagesByDockerReference, h, a), m.log("imagestreams (subscribe)", e.imageStreams);
})), j.push(o.watch(y, a, function(t) {
e.builds = t.by("metadata.name"), m.log("builds (subscribe)", e.builds);
})), j.push(o.watch(e.horizontalPodAutoscalersVersion, a, function(t) {
e.autoscalers = s.filterHPA(t.by("metadata.name"), "DeploymentConfig", n.deploymentconfig), p();
})), g.onActiveFiltersChanged(function(t) {
e.$apply(function() {
e.deployments = t.select(e.unfilteredDeployments), e.orderedDeployments = P(e.deployments, !0), u();
});
}), e.canDeploy = function() {
return !!e.deploymentConfig && (!e.deploymentConfig.metadata.deletionTimestamp && (!e.deploymentInProgress && !e.deploymentConfig.spec.paused));
}, e.startLatestDeployment = function() {
e.canDeploy() && i.startLatestDeployment(e.deploymentConfig, a);
}, e.scale = function(n) {
i.scale(e.deploymentConfig, n).then(_.noop, function(n) {
e.alerts["scale-error"] = {
>>>>>>> Add Browse Catalog to Project context view.
type: "error",
message: "The service details could not be loaded.",
details: o("getErrorDetails")(t)
};
}), l.push(r.watch(e.servicesVersion, a, function(t) {
e.services = t.by("metadata.name");
})), l.push(r.watch(i, a, function(e) {
c = e.by("metadata.name"), d();
})), l.push(r.watch(s, a, function(n) {
e.podsWithEndpoints = {};
var r = n.by("metadata.name")[t.service];
r && _.each(r.subsets, function(t) {
_.each(t.addresses, function(t) {
"Pod" === _.get(t, "targetRef.kind") && (e.podsWithEndpoints[t.targetRef.name] = !0);
>>>>>>> Update service, services controllers to use getPreferredVersion
});
}, e.closeOrderingPanel = function() {
e.template && (b(), e.template = null), _.set(e, "ordering.panelName", "");
}, e.deployImageSelected = function() {
_.set(e, "ordering.panelName", "deployImage");
}, e.fromFileSelected = function() {
_.set(e, "ordering.panelName", "fromFile");
}, e.fromProjectSelected = function() {
_.set(e, "ordering.panelName", "fromProject");
}, n.withUser().then(function() {
r.getCatalogItems().then(function(t) {
e.catalogItems = t, v();
});
<<<<<<< HEAD
}), e.$on("$destroy", function() {
b();
}), y && e.$on("$locationChangeStart", function(t) {
g.search().startTour && (e.startGuidedTour(), t.preventDefault());
});
} ]), angular.module("openshiftConsole").controller("ProjectBrowseCatalogController", [ "$scope", "$q", "$routeParams", "DataService", "AuthorizationService", "Catalog", "CatalogService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
var u = n.project;
l.get(u).then(function() {
a.getProjectRules(u).then(function() {
if (a.canIAddToProject(u)) {
var r, l, d = i.getCatalogItems().then(function(e) {
r = e;
}), m = o.getProjectCatalogItems(u).then(_.spread(function(e, t) {
l = e, t && c.addNotification({
type: "error",
message: t
=======
})), l.push(r.watch(e.routesVersion, a, function(n) {
e.routesForService = {}, angular.forEach(n.by("metadata.name"), function(n) {
"Service" === n.spec.to.kind && n.spec.to.name === t.service && (e.routesForService[n.metadata.name] = n);
}), u(), Logger.log("routes (subscribe)", e.routesByService);
})), e.$on("$destroy", function() {
r.unwatchAll(l);
>>>>>>> Update service, services controllers to use getPreferredVersion
});
<<<<<<< HEAD
}));
t.all([ d, m ]).then(function() {
e.catalogItems = o.sortCatalogItems(_.concat(r, l)), n.filter && (e.keywordFilter = n.filter);
});
} else s.toProjectOverview(u);
});
=======
};
var k = function() {
if (_.get(e, "deploymentConfig.spec.paused")) return !1;
var t = _.get(e, "deploymentConfig.spec.triggers", []);
return _.some(t, {
type: "ConfigChange"
});
};
e.removeVolume = function(t) {
var n;
n = k() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
l.confirm({
title: "Remove volume " + t.name + "?",
details: n,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
}).then(function() {
f.removeVolume(e.deploymentConfig, t, a);
});
}, e.$on("$destroy", function() {
o.unwatchAll(j);
>>>>>>> Add Browse Catalog to Project context view.
});
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("EventsService", [ "BrowserStore", function(e) {
var t = e.loadJSON("session", "events") || {}, n = _.get(window, "OPENSHIFT_CONSTANTS.EVENTS_TO_SHOW");
return {
isImportantAPIEvent: function(e) {
return n[e.reason];
},
markRead: function(n) {
_.set(t, [ n, "read" ], !0), e.saveJSON("session", "events", t);
},
isRead: function(e) {
return _.get(t, [ e, "read" ]);
},
markCleared: function(n) {
_.set(t, [ n, "cleared" ], !0), e.saveJSON("session", "events", t);
},
isCleared: function(e) {
return _.get(t, [ e, "cleared" ]);
}
<<<<<<< HEAD
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ProjectsController", [ "$scope", "$filter", "$location", "$route", "$timeout", "AuthService", "DataService", "KeywordService", "Navigate", "gettextCatalog", "gettext", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
var p, g, f = [], v = [], h = !1;
e.alerts = e.alerts || {}, e.loading = !0, e.showGetStarted = !1, e.canCreate = void 0, e.search = {
text: ""
}, e.limitListTo = 250;
var y, b = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', 'metadata.annotations["openshift.io/description"]', 'metadata.annotations["openshift.io/requester"]' ], S = function() {
e.projects = s.filterForKeywords(g, b, v);
}, C = t("displayName"), w = function() {
=======
} ]), angular.module("openshiftConsole").controller("ProjectsController", [ "$scope", "$filter", "$location", "$route", "$timeout", "AuthService", "DataService", "KeywordService", "Navigate", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u) {
var d, m, p = [], f = [], g = !1;
e.alerts = e.alerts || {}, e.loading = !0, e.showGetStarted = !1, e.canCreate = void 0, e.search = {
text: ""
}, e.limitListTo = 250;
var h, v = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', 'metadata.annotations["openshift.io/description"]', 'metadata.annotations["openshift.io/requester"]' ], y = function() {
e.projects = s.filterForKeywords(m, v, f);
}, b = t("displayName"), C = function() {
>>>>>>> Updates for Service Instance & Bindings
var t = _.get(e, "sortConfig.currentField.id");
y !== t && (e.sortConfig.isAscending = "metadata.creationTimestamp" !== t);
var n = function(e) {
return C(e).toLowerCase();
}, r = e.sortConfig.isAscending ? "asc" : "desc";
switch (t) {
case 'metadata.annotations["openshift.io/display-name"]':
<<<<<<< HEAD
<<<<<<< HEAD
g = _.orderBy(p, [ n, "metadata.name" ], [ r ]);
break;

case 'metadata.annotations["openshift.io/requester"]':
g = _.orderBy(p, [ t, n ], [ r, "asc" ]);
break;

default:
g = _.orderBy(p, [ t ], [ r ]);
=======
p = _.orderBy(d, [ n, "metadata.name" ], [ a ]);
=======
m = _.orderBy(d, [ n, "metadata.name" ], [ a ]);
>>>>>>> Support EnvFrom in the Env Editors
break;

case 'metadata.annotations["openshift.io/requester"]':
m = _.orderBy(d, [ t, n ], [ a, "asc" ]);
break;

default:
<<<<<<< HEAD
p = _.orderBy(d, [ t ], [ a ]);
>>>>>>> Updates for Service Instance & Bindings
=======
m = _.orderBy(d, [ t ], [ a ]);
>>>>>>> Support EnvFrom in the Env Editors
}
y = t;
}, P = function() {
w(), S();
=======
}), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "Catalog", "Constants", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$routeParams", "$location", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
function p() {
if (f) if (d.startTour) u(function() {
m.replace(), m.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(g, "auto_launch")) {
=======
}), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "Catalog", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, g) {
function f() {
=======
}), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "Catalog", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f) {
function g() {
>>>>>>> Patternfly vertical navigation and project bar
if (v) if (p.startTour) d(function() {
f.replace(), f.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(h, "auto_launch")) {
>>>>>>> Bug 1471033 - Only request template metadata
var n = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(n) && d(function() {
e.startGuidedTour() && localStorage.setItem(n, "true");
}, 500);
}
}
var h = _.get(r, "GUIDED_TOURS.landing_page_tour"), v = h && h.enabled && h.steps;
=======
var v = _.get(r, "GUIDED_TOURS.landing_page_tour"), h = v && v.enabled && v.steps;
>>>>>>> Add SVG icons
=======
spec: {
externalName: t.serviceExternalName
}
}
}) : null;
}
=======
>>>>>>> Add search catalog in project context
function v() {
var n = g();
if (n) e.$broadcast("open-overlay-panel", n); else if (y) if (p.startTour) d(function() {
f.replace(), f.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(h, "auto_launch")) {
<<<<<<< HEAD
var a = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(a) && d(function() {
=======
function h() {
var n = v();
if (n) e.$broadcast("open-overlay-panel", n); else if (b) if (f.startTour) m(function() {
g.replace(), g.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(y, "auto_launch")) {
var a = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(a) && m(function() {
>>>>>>> Update template service broker flag name
=======
var a = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(a) && d(function() {
>>>>>>> Add search catalog in project context
e.startGuidedTour() && localStorage.setItem(a, "true");
}, 500);
=======
var j = {};
e.projectName = n.project, e.kind = d, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {};
var k = r.getPreferredVersion("builds"), I = r.getPreferredVersion("imagestreams"), R = r.getPreferredVersion("horizontalpodautoscalers"), E = r.getPreferredVersion("limitranges"), T = r.getPreferredVersion("pods"), N = r.getPreferredVersion("replicasets"), D = r.getPreferredVersion("resourcequotas"), A = r.getPreferredVersion("appliedclusterresourcequotas");
e.deploymentsVersion = r.getPreferredVersion("deployments"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.deploymentConfigsLogVersion = "deploymentconfigs/log";
var $ = [];
=======
}));
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "keyValueEditorUtils", "kind", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "StorageService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b) {
var S = !1, C = t("annotation"), w = t("humanizeKind")(d), P = t("hasDeployment"), j = r.getPreferredVersion("builds"), k = r.getPreferredVersion("imagestreams"), I = r.getPreferredVersion("horizontalpodautoscalers"), R = r.getPreferredVersion("limitranges"), E = r.getPreferredVersion("pods"), T = r.getPreferredVersion("replicasets"), N = r.getPreferredVersion("replicationcontrollers"), D = r.getPreferredVersion("resourcequotas"), A = r.getPreferredVersion("appliedclusterresourcequotas");
switch (d) {
case "ReplicaSet":
e.resource = T, e.healthCheckURL = g.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions");
break;

case "ReplicationController":
e.resource = N, e.healthCheckURL = g.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
}
var $ = {};
e.projectName = n.project, e.kind = d, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {}, e.deploymentsVersion = r.getPreferredVersion("deployments"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.deploymentConfigsLogVersion = "deploymentconfigs/log";
var B = [];
>>>>>>> Use correct preferred version on replica set page
p.isAvailable().then(function(t) {
e.metricsAvailable = t;
});
var L = t("deploymentStatus"), V = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], L(t));
}, O = t("isIE")();
y.get(n.project).then(_.spread(function(r, u) {
e.project = r, e.projectContext = u;
var p = {}, y = function() {
if (e.hpaForRS = c.filterHPA(p, d, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = c.filterHPA(p, "DeploymentConfig", e.deploymentConfigName);
e.autoscalers = e.hpaForRS.concat(t);
} else if (e.deployment && e.isActive) {
var r = c.filterHPA(p, "Deployment", e.deployment.metadata.name);
e.autoscalers = e.hpaForRS.concat(r);
} else e.autoscalers = e.hpaForRS;
}, N = function() {
B.push(i.watch(e.resource, u, function(t) {
var n, r = [];
angular.forEach(t.by("metadata.name"), function(t) {
(C(t, "deploymentConfig") || "") === e.deploymentConfigName && r.push(t);
}), n = s.getActiveDeployment(r), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, y();
}));
}, U = function() {
c.getHPAWarnings(e.replicaSet, e.autoscalers, e.limitRanges, r).then(function(t) {
e.hpaWarnings = t;
});
}, F = function(r) {
var a = C(r, "deploymentConfig");
if (a) {
S = !0, e.deploymentConfigName = a;
var o = C(r, "deploymentVersion");
o && (e.logOptions.version = o), e.healthCheckURL = g.healthCheckURL(n.project, "DeploymentConfig", a), i.get(e.deploymentConfigsVersion, a, u, {
errorNotification: !1
}).then(function(t) {
e.deploymentConfig = t;
}, function(n) {
404 !== n.status ? e.alerts.load = {
type: "error",
message: "The deployment configuration details could not be loaded.",
details: t("getErrorDetails")(n)
} : e.deploymentConfigMissing = !0;
});
>>>>>>> Add Browse Catalog to Project context view.
}
}
<<<<<<< HEAD
<<<<<<< HEAD
var h = _.get(r, "GUIDED_TOURS.landing_page_tour"), y = h && h.enabled && h.steps;
>>>>>>> Bug 1506153 - Use query param serviceExternalName
=======
var h = _.get(r, "GUIDED_TOURS.landing_page_tour"), y = h && h.enabled && h.steps;
>>>>>>> Add search catalog in project context
e.saasOfferings = r.SAAS_OFFERINGS, e.viewMembership = function(e) {
i.toProjectMembership(e.metadata.name);
}, y && (e.startGuidedTour = function() {
return !u.isWindowBelowBreakpoint(u.WINDOW_SIZE_SM) && (l.startTour(h.steps), !0);
}), s.clearNotifications();
var b = function() {
<<<<<<< HEAD
=======
var y = _.get(o, "GUIDED_TOURS.landing_page_tour"), b = y && y.enabled && y.steps;
e.saasOfferings = o.SAAS_OFFERINGS, e.viewMembership = function(e) {
s.toProjectMembership(e.metadata.name);
}, b && (e.startGuidedTour = function() {
return !d.isWindowBelowBreakpoint(d.WINDOW_SIZE_SM) && (u.startTour(y.steps), !0);
}), c.clearNotifications();
<<<<<<< HEAD
<<<<<<< HEAD
var C = function() {
>>>>>>> Update template service broker flag name
=======
var S = function() {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var S = function() {
>>>>>>> Adding label filter to ste secrets page
=======
>>>>>>> Add search catalog in project context
var t = _.get(e, "template.metadata.uid");
t && c.addItem(t);
}, S = function(e) {
return "PartialObjectMetadata" === e.kind;
}, C = function(e) {
return S(e) ? o.get("templates", e.metadata.name, {
namespace: e.metadata.namespace
}) : m.when(e);
};
e.templateSelected = function(t) {
C(t).then(function(t) {
_.set(e, "ordering.panelName", "template"), e.template = t;
});
}, e.closeOrderingPanel = function() {
e.template && (b(), e.template = null), _.set(e, "ordering.panelName", "");
}, e.deployImageSelected = function() {
_.set(e, "ordering.panelName", "deployImage");
}, e.fromFileSelected = function() {
_.set(e, "ordering.panelName", "fromFile");
}, e.fromProjectSelected = function() {
_.set(e, "ordering.panelName", "fromProject");
}, n.withUser().then(function() {
a.getCatalogItems().then(function(t) {
e.catalogItems = t, v();
});
<<<<<<< HEAD
}), e.$on("$destroy", function() {
b();
}), y && e.$on("$locationChangeStart", function(t) {
f.search().startTour && (e.startGuidedTour(), t.preventDefault());
=======
r && i.get(e.deploymentsVersion, r.name, u).then(function(t) {
e.deployment = t, e.healthCheckURL = g.healthCheckURL(n.project, "Deployment", t.metadata.name, "apps"), B.push(i.watchObject(e.deploymentsVersion, t.metadata.name, u, function(t, r) {
if ("DELETED" === r) return e.alerts["deployment-deleted"] = {
type: "warning",
message: "The deployment controlling this replica set has been deleted."
}, e.healthCheckURL = g.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions"), e.deploymentMissing = !0, void delete e.deployment;
e.deployment = t, e.breadcrumbs = o.getBreadcrumbs({
object: e.replicaSet,
displayName: "#" + s.getRevision(e.replicaSet),
parent: {
title: e.deployment.metadata.name,
link: g.resourceURL(e.deployment)
},
humanizedKind: "Deployments"
}), x(), y();
})), B.push(i.watch(T, u, function(e) {
var t = e.by("metadata.name");
q = M(t);
}));
>>>>>>> Use correct preferred version on replica set page
});
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("EventsService", [ "BrowserStore", function(e) {
var t = e.loadJSON("session", "events") || {}, n = _.get(window, "OPENSHIFT_CONSTANTS.EVENTS_TO_SHOW");
return {
isImportantEvent: function(e) {
var t = e.reason;
return n[t];
},
markRead: function(n) {
_.set(t, [ n.metadata.uid, "read" ], !0), e.saveJSON("session", "events", t);
},
isRead: function(e) {
return _.get(t, [ e.metadata.uid, "read" ]);
},
markCleared: function(n) {
_.set(t, [ n.metadata.uid, "cleared" ], !0), e.saveJSON("session", "events", t);
},
isCleared: function(e) {
return _.get(t, [ e.metadata.uid, "cleared" ]);
=======
}, H = function() {
if (!_.isEmpty($)) {
var t = _.get(e, "replicaSet.spec.template");
<<<<<<< HEAD
t && l.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, j, u);
>>>>>>> Add Browse Catalog to Project context view.
}
};
} ]), angular.module("openshiftConsole").controller("ProjectsController", [ "$scope", "$filter", "$location", "$route", "$timeout", "AuthService", "DataService", "KeywordService", "Navigate", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u) {
=======
} ]), angular.module("openshiftConsole").controller("ProjectsController", [ "$scope", "$filter", "$location", "$route", "$timeout", "AuthService", "DataService", "KeywordService", "Navigate", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var d, m, p = [], f = [], g = !1;
e.alerts = e.alerts || {}, e.loading = !0, e.showGetStarted = !1, e.canCreate = void 0, e.search = {
text: ""
}, e.limitListTo = 250;
var v, h = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', 'metadata.annotations["openshift.io/description"]', 'metadata.annotations["openshift.io/requester"]' ], y = function() {
e.projects = s.filterForKeywords(m, h, f);
}, b = t("displayName"), S = function() {
var t = _.get(e, "sortConfig.currentField.id");
v !== t && (e.sortConfig.isAscending = "metadata.creationTimestamp" !== t);
var n = function(e) {
return b(e).toLowerCase();
}, r = e.sortConfig.isAscending ? "asc" : "desc";
switch (t) {
case 'metadata.annotations["openshift.io/display-name"]':
m = _.orderBy(d, [ n, "metadata.name" ], [ r ]);
=======
t && l.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, $, u);
}
};
i.get(e.resource, n.replicaSet, u, {
errorNotification: !1
}).then(function(t) {
switch (e.loaded = !0, e.replicaSet = t, V(t), d) {
case "ReplicationController":
F(t);
>>>>>>> Use correct preferred version on replica set page
break;

case 'metadata.annotations["openshift.io/requester"]':
m = _.orderBy(d, [ t, n ], [ r, "asc" ]);
break;

default:
m = _.orderBy(d, [ t ], [ r ]);
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
g = t;
}, b = function() {
y(), h();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
h = t;
=======
v = t;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add SVG icons
}, S = function() {
C(), y();
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
}, C = function() {
S(), y();
>>>>>>> Service instance details configuration and edit
=======
}, S = function() {
C(), y();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, C = function() {
S(), y();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, C = function() {
S(), y();
>>>>>>> Adding label filter to ste secrets page
};
e.sortConfig = {
fields: [ {
id: 'metadata.annotations["openshift.io/display-name"]',
<<<<<<< HEAD
title: l.getString(u("Display Name")),
sortType: "alpha"
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
=======
O(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
U(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Use new clusterResourceOverridesEnabled flag
object: t
}), B.push(i.watchObject(e.resource, n.replicaSet, u, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This " + w + " has been deleted."
}), e.replicaSet = t, V(t), U(), H(), e.deployment && x();
})), e.deploymentConfigName && N(), B.push(i.watch(E, u, function(t) {
var n = t.by("metadata.name");
e.podsForDeployment = h.filterForOwner(n, e.replicaSet);
}));
}, function(r) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The " + w + " details could not be loaded.",
details: t("getErrorDetails")(r)
}, e.breadcrumbs = o.getBreadcrumbs({
name: n.replicaSet,
kind: d,
namespace: n.project
});
}), B.push(i.watch(e.resource, u, function(n, r, a) {
e.replicaSets = n.by("metadata.name"), "ReplicationController" === d && (e.deploymentsByDeploymentConfig = s.associateDeploymentsToDeploymentConfig(e.replicaSets));
var o, i;
a && (o = C(a, "deploymentConfig"), i = a.metadata.name), e.deploymentConfigDeploymentsInProgress = e.deploymentConfigDeploymentsInProgress || {}, r ? "ADDED" === r || "MODIFIED" === r && t("deploymentIsInProgress")(a) ? (e.deploymentConfigDeploymentsInProgress[o] = e.deploymentConfigDeploymentsInProgress[o] || {}, e.deploymentConfigDeploymentsInProgress[o][i] = a) : "MODIFIED" === r && e.deploymentConfigDeploymentsInProgress[o] && delete e.deploymentConfigDeploymentsInProgress[o][i] : e.deploymentConfigDeploymentsInProgress = s.associateRunningDeploymentToDeploymentConfig(e.deploymentsByDeploymentConfig), a ? "DELETED" !== r && (a.causes = t("deploymentCauses")(a)) : angular.forEach(e.replicaSets, function(e) {
e.causes = t("deploymentCauses")(e);
});
})), B.push(i.watch(k, u, function(e) {
var t = e.by("metadata.name");
l.buildDockerRefMapForImageStreams(t, $), H(), m.log("imagestreams (subscribe)", t);
})), B.push(i.watch(j, u, function(t) {
e.builds = t.by("metadata.name"), m.log("builds (subscribe)", e.builds);
<<<<<<< HEAD
})), $.push(i.watch(R, u, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
p = e.by("metadata.name"), y(), V();
>>>>>>> Add Browse Catalog to Project context view.
=======
=======
})), B.push(i.watch(I, u, function(e) {
>>>>>>> Use correct preferred version on replica set page
p = e.by("metadata.name"), y(), U();
>>>>>>> Use new clusterResourceOverridesEnabled flag
}, {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
id: "metadata.name",
title: l.getString(u("Name")),
sortType: "alpha"
=======
poll: V,
=======
poll: U,
>>>>>>> Set Home Page Preference
=======
poll: V,
>>>>>>> Update directives/processTemplate to use getPreferredVersion
=======
poll: V,
>>>>>>> Fix potential API mismatch in BuildsService
=======
poll: O,
>>>>>>> Use correct preferred version on replica set page
pollInterval: 6e4
})), i.list(R, u).then(function(t) {
e.limitRanges = t.by("metadata.name"), U();
});
B.push(i.watch(D, u, function(t) {
e.quotas = t.by("metadata.name");
>>>>>>> Configurable inactivity timeout in console
}, {
<<<<<<< HEAD
id: 'metadata.annotations["openshift.io/requester"]',
title: l.getString(u("Creator")),
sortType: "alpha"
}, {
id: "metadata.creationTimestamp",
title: l.getString(u("Creation Date")),
sortType: "alpha"
} ],
isAscending: !0,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
onSortChange: P
};
var j = function(t) {
p = _.toArray(t.by("metadata.name")), e.loading = !1, e.showGetStarted = _.isEmpty(p) && !e.isProjectListIncomplete, P();
}, k = function() {
h || m.list().then(j);
=======
poll: !0,
pollInterval: 6e4
})), B.push(i.watch(A, u, function(t) {
e.clusterQuotas = t.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
}));
var G = t("deploymentIsLatest");
e.showRollbackAction = function() {
return "Complete" === L(e.replicaSet) && !G(e.replicaSet, e.deploymentConfig) && !e.replicaSet.metadata.deletionTimestamp && a.canI("deploymentconfigrollbacks", "create");
}, e.retryFailedDeployment = function(t) {
s.retryFailedDeployment(t, u, e);
}, e.rollbackToDeployment = function(t, n, r, a) {
s.rollbackToDeployment(t, n, r, a, u, e);
}, e.cancelRunningDeployment = function(e) {
s.cancelRunningDeployment(e, u);
}, e.scale = function(n) {
var r = e.deployment || e.deploymentConfig || e.replicaSet;
s.scale(r, n).then(_.noop, function(n) {
e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: "An error occurred scaling.",
details: t("getErrorDetails")(n)
>>>>>>> Use correct preferred version on replica set page
};
e.newProjectPanelShown = !1, e.createProject = function(t) {
for (var n = _.get(t, "target"); n && !angular.element(n).hasClass("btn"); ) n = n.parentElement;
e.popupElement = n, e.newProjectPanelShown = !0;
=======
onSortChange: S
=======
onSortChange: C
>>>>>>> Service instance details configuration and edit
=======
onSortChange: S
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
onSortChange: C
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
onSortChange: C
>>>>>>> Adding label filter to ste secrets page
};
<<<<<<< HEAD
var w = function(t) {
d = _.toArray(t.by("metadata.name")), e.loading = !1, e.showGetStarted = _.isEmpty(d) && !e.isProjectListIncomplete, C();
}, P = function() {
g || u.list().then(w);
=======
var K = t("hasDeploymentConfig");
e.isScalable = function() {
return !!_.isEmpty(e.autoscalers) && (!K(e.replicaSet) && !P(e.replicaSet) || (!(!e.deploymentConfigMissing && !e.deploymentMissing) || !(!e.deploymentConfig && !e.deployment) && (e.isActive && !q)));
}, e.removeVolume = function(n) {
var r = "This will remove the volume from the " + t("humanizeKind")(e.replicaSet.kind) + ".";
n.persistentVolumeClaim ? r += " It will not delete the persistent volume claim." : n.secret ? r += " It will not delete the secret." : n.configMap && (r += " It will not delete the config map.");
f.confirm({
title: "Remove volume " + n.name + "?",
details: r,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
}).then(function() {
b.removeVolume(e.replicaSet, n, u);
});
}, e.$on("$destroy", function() {
i.unwatchAll(B);
});
}));
} ]), angular.module("openshiftConsole").controller("StatefulSetsController", [ "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", "LabelFilter", "PodsService", function(e, t, n, r, a, o, i) {
e.projectName = t.project, e.labelSuggestions = {}, e.clearFilter = function() {
o.clear();
>>>>>>> Use correct preferred version on replica set page
};
<<<<<<< HEAD
e.newProjectPanelShown = !1, e.createProject = function() {
e.newProjectPanelShown = !0;
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
e.newProjectPanelShown = !1, e.createProject = function(t) {
for (var n = _.get(t, "target"); n && !angular.element(n).hasClass("btn"); ) n = n.parentElement;
e.popupElement = n, e.newProjectPanelShown = !0;
>>>>>>> Use create project popup rather than the create-project page
}, e.closeNewProjectPanel = function() {
e.newProjectPanelShown = !1;
}, e.onNewProject = function() {
e.newProjectPanelShown = !1, P();
}, e.editProjectPanelShown = !1, e.editProject = function(t) {
e.editingProject = t, e.editProjectPanelShown = !0;
}, e.closeEditProjectPanel = function() {
e.editProjectPanelShown = !1;
}, e.onEditProject = function() {
e.editProjectPanelShown = !1, P();
}, e.onDeleteProject = P, e.goToProject = function(e) {
c.toProjectOverview(e);
<<<<<<< HEAD
}, e.$watch("search.text", _.debounce(function(t) {
e.keywords = v = s.generateKeywords(t), e.$applyAsync(S);
}, 350)), o.withUser().then(function() {
m.list().then(function(t) {
e.isProjectListIncomplete = m.isProjectListIncomplete(), j(t), !e.isProjectListIncomplete && _.size(p) <= 250 && (f.push(m.watch(e, j)), h = !0);
}, function() {
e.isProjectListIncomplete = !0, e.loading = !1, p = [], P();
=======
p = e.by("metadata.name"), y(), O();
}, {
poll: V,
pollInterval: 6e4
})), i.list(E, u).then(function(t) {
e.limitRanges = t.by("metadata.name"), O();
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
});
<<<<<<< HEAD
}), m.canCreate().then(function() {
=======
title: "Display Name",
sortType: "alpha"
}, {
id: "metadata.name",
title: "Name",
sortType: "alpha"
}, {
id: 'metadata.annotations["openshift.io/requester"]',
title: "Creator",
sortType: "alpha"
}, {
id: "metadata.creationTimestamp",
title: "Creation Date",
sortType: "alpha"
} ],
isAscending: !0,
onSortChange: b
}, e.newProjectPanelShown = !1, e.createProject = function() {
e.newProjectPanelShown = !0;
}, e.closeNewProjectPanel = function() {
e.newProjectPanelShown = !1;
}, e.onNewProject = function() {
e.newProjectPanelShown = !1;
}, e.editProjectPanelShown = !1, e.editProject = function(t) {
e.editingProject = t, e.editProjectPanelShown = !0;
}, e.closeEditProjectPanel = function() {
e.editProjectPanelShown = !1;
}, e.onEditProject = function() {
e.editProjectPanelShown = !1;
}, e.$watch("search.text", _.debounce(function(t) {
e.keywords = p = s.generateKeywords(t), e.$apply(h);
}, 50, {
maxWait: 250
})), o.withUser().then(function() {
m.push(i.watch("projects", e, function(t) {
u = _.toArray(t.by("metadata.name")), e.loading = !1, e.showGetStarted = _.isEmpty(u), b();
}));
}), l.canCreate().then(function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, e.$watch("search.text", _.debounce(function(t) {
e.keywords = f = s.generateKeywords(t), e.$applyAsync(y);
}, 350)), o.withUser().then(function() {
u.list().then(function(t) {
e.isProjectListIncomplete = u.isProjectListIncomplete(), w(t), !e.isProjectListIncomplete && _.size(d) <= 250 && (p.push(u.watch(e, w)), g = !0);
}, function() {
e.isProjectListIncomplete = !0, e.loading = !1, d = [], C();
});
}), u.canCreate().then(function() {
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
}), u.canCreate().then(function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.canCreate = !0;
}, function(t) {
e.canCreate = !1;
var n = t.data || {};
if (403 !== t.status) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = "Failed to determine create project permission";
return 0 !== t.status && (r += " (" + t.status + ")"), void d.warn(r);
}
if (n.details) {
var a = [];
_.forEach(n.details.causes || [], function(e) {
e.message && a.push(e.message);
}), _.isEmpty(a) || (e.newProjectMessage = a.join("\n"));
}
}), e.$on("$destroy", function() {
i.unwatchAll(f);
});
} ]), angular.module("openshiftConsole").controller("PodsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ProjectsService", "LabelFilter", "Logger", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.pods = {}, n.unfilteredPods = {}, n.labelSuggestions = {}, n.clearFilter = function() {
i.clear();
=======
var a = "Failed to determine create project permission";
return 0 !== t.status && (a += " (" + t.status + ")"), void l.warn(a);
}
if (n.details) {
var r = [];
=======
var r = "Failed to determine create project permission";
return 0 !== t.status && (r += " (" + t.status + ")"), void l.warn(r);
}
if (n.details) {
var a = [];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
_.forEach(n.details.causes || [], function(e) {
e.message && a.push(e.message);
}), _.isEmpty(a) || (e.newProjectMessage = a.join("\n"));
}
}), e.$on("$destroy", function() {
i.unwatchAll(p);
});
} ]), angular.module("openshiftConsole").controller("PodsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ProjectsService", "LabelFilter", "Logger", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.pods = {}, n.unfilteredPods = {}, n.labelSuggestions = {}, n.clearFilter = function() {
i.clear();
};
<<<<<<< HEAD
<<<<<<< HEAD
var s = [];
a.get(e.project).then(_.spread(function(e, a) {
function r() {
<<<<<<< HEAD
o.getLabelSelector().isEmpty() || !$.isEmptyObject(t.pods) || $.isEmptyObject(t.unfilteredPods) ? delete t.alerts.pods : t.alerts.pods = {
type: "warning",
details: "The active filters are hiding all pods."
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
var c = r.getPreferredVersion("pods"), l = [];
o.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && _.isEmpty(n.pods) && !_.isEmpty(n.unfilteredPods);
=======
t.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(t.pods) && !_.isEmpty(t.unfilteredPods);
>>>>>>> Replacing empty tables with empty state message
}
<<<<<<< HEAD
n.project = e, l.push(a.watch(c, t, function(e) {
n.podsLoaded = !0, n.unfilteredPods = e.by("metadata.name"), n.pods = i.getLabelSelector().select(n.unfilteredPods), i.addLabelSuggestionsFromResources(n.unfilteredPods, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), r(), s.log("pods (subscribe)", n.unfilteredPods);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.pods = e.select(n.unfilteredPods), r();
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("PodController", [ "$filter", "$rootScope", "$routeParams", "$scope", "$timeout", "$uibModal", "APIService", "DataService", "FullscreenService", "ImageStreamResolver", "Logger", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g) {
r.projectName = n.project, r.pod = null, r.imageStreams = {}, r.imagesByDockerReference = {}, r.imageStreamImageRefByDockerReference = {}, r.builds = {}, r.alerts = {}, r.terminalDisconnectAlert = {}, r.renderOptions = r.renderOptions || {}, r.renderOptions.hideFilterWidget = !0, r.logOptions = {}, r.terminalTabWasSelected = !1, r.breadcrumbs = [ {
=======
t.project = e, s.push(n.watch("pods", a, function(e) {
t.podsLoaded = !0, t.unfilteredPods = e.by("metadata.name"), t.pods = o.getLabelSelector().select(t.unfilteredPods), o.addLabelSuggestionsFromResources(t.unfilteredPods, t.labelSuggestions), o.setLabelSuggestions(t.labelSuggestions), r(), i.log("pods (subscribe)", t.unfilteredPods);
})), o.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.pods = e.select(t.unfilteredPods), r();
=======
var c = a.getPreferredVersion("pods"), l = [];
=======
var c = r.getPreferredVersion("pods"), l = [];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
o.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && _.isEmpty(n.pods) && !_.isEmpty(n.unfilteredPods);
}
n.project = e, l.push(a.watch(c, t, function(e) {
n.podsLoaded = !0, n.unfilteredPods = e.by("metadata.name"), n.pods = i.getLabelSelector().select(n.unfilteredPods), i.addLabelSuggestionsFromResources(n.unfilteredPods, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), r(), s.log("pods (subscribe)", n.unfilteredPods);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
<<<<<<< HEAD
n.pods = e.select(n.unfilteredPods), a();
>>>>>>> Update pods controller to use getPreferredVersion
=======
n.pods = e.select(n.unfilteredPods), r();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("PodController", [ "$scope", "$filter", "$routeParams", "$timeout", "$uibModal", "Logger", "DataService", "FullscreenService", "ImageStreamResolver", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
e.projectName = n.project, e.pod = null, e.imageStreams = {}, e.imagesByDockerReference = {}, e.imageStreamImageRefByDockerReference = {}, e.builds = {}, e.alerts = {}, e.terminalDisconnectAlert = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.logOptions = {}, e.terminalTabWasSelected = !1, e.breadcrumbs = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").controller("PodController", [ "$filter", "$routeParams", "$scope", "$timeout", "$uibModal", "APIService", "DataService", "FullscreenService", "ImageStreamResolver", "Logger", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
=======
} ]), angular.module("openshiftConsole").controller("PodController", [ "$filter", "$routeParams", "$scope", "$timeout", "$uibModal", "APIService", "DataService", "FullscreenService", "ImageStreamResolver", "Logger", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.pod = null, n.imageStreams = {}, n.imagesByDockerReference = {}, n.imageStreamImageRefByDockerReference = {}, n.builds = {}, n.alerts = {}, n.terminalDisconnectAlert = {}, n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0, n.logOptions = {}, n.terminalTabWasSelected = !1, n.breadcrumbs = [ {
>>>>>>> Update pod controller to use getPreferredVersion
title: "Pods",
link: "project/" + t.project + "/browse/pods"
}, {
<<<<<<< HEAD
title: n.pod
<<<<<<< HEAD
} ], r.terminalDisconnectAlert.disconnect = {
type: "warning",
message: "This terminal has been disconnected. If you reconnect, your terminal history will be lost."
}, r.noContainersYet = !0, r.selectedTab = {};
var f = i.getPreferredVersion("imagestreams"), v = i.getPreferredVersion("builds");
r.podsVersion = i.getPreferredVersion("pods"), r.podsLogVersion = i.getPreferredVersion("pods/log"), r.eventsVersion = i.getPreferredVersion("events"), r.deploymentConfigsVersion = i.getPreferredVersion("deploymentconfigs");
var h = [], y = null, b = null;
d.isAvailable().then(function(e) {
r.metricsAvailable = e;
});
var S = function() {
if (r.pod) {
var e = _.find(r.pod.status.containerStatuses, {
name: r.logOptions.container
}), t = _.get(e, "state"), n = _.head(_.keys(t)), a = _.includes([ "running", "waiting", "terminated" ], n) ? n : "", o = _.get(e, "lastState"), i = _.head(_.keys(o)), s = _.get(e, "state.waiting");
angular.extend(r, {
containerStatusKey: a,
containerStateReason: _.get(t, [ n, "reason" ])
}), s ? angular.extend(r, {
lasStatusKey: i,
containerStartTime: _.get(o, [ i, "startedAt" ]),
containerEndTime: _.get(o, [ i, "finishedAt" ])
}) : angular.extend(r, {
containerStartTime: _.get(t, [ n, "startedAt" ]),
containerEndTime: _.get(t, [ n, "finishedAt" ])
=======
} ]), angular.module("openshiftConsole").controller("PodController", [ "$scope", "$filter", "$routeParams", "$timeout", "$uibModal", "Logger", "DataService", "FullscreenService", "ImageStreamResolver", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
a.projectName = c.project, a.pod = null, a.imageStreams = {}, a.imagesByDockerReference = {}, a.imageStreamImageRefByDockerReference = {}, a.builds = {}, a.alerts = {}, a.terminalDisconnectAlert = {}, a.renderOptions = a.renderOptions || {}, a.renderOptions.hideFilterWidget = !0, a.logOptions = {}, a.terminalTabWasSelected = !1, a.breadcrumbs = [ {
title:"Pods",
link:"project/" + c.project + "/browse/pods"
}, {
title:c.pod
} ], a.terminalDisconnectAlert.disconnect = {
type:"warning",
message:"This terminal has been disconnected. If you reconnect, your terminal history will be lost."
}, a.noContainersYet = !0, a.selectedTab = {};
var n = [], o = null;
j.isAvailable().then(function(b) {
a.metricsAvailable = b;
=======
} ], e.terminalDisconnectAlert.disconnect = {
type: "warning",
message: "This terminal has been disconnected. If you reconnect, your terminal history will be lost."
}, e.noContainersYet = !0, e.selectedTab = {};
var p = [], f = null;
l.isAvailable().then(function(t) {
e.metricsAvailable = t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
title: t.pod
} ], n.terminalDisconnectAlert.disconnect = {
type: "warning",
message: "This terminal has been disconnected. If you reconnect, your terminal history will be lost."
}, n.noContainersYet = !0, n.selectedTab = {};
var f = o.getPreferredVersion("imagestreams"), g = o.getPreferredVersion("builds");
n.podsVersion = o.getPreferredVersion("pods"), n.podsLogVersion = o.getPreferredVersion("pods/log"), n.eventsVersion = o.getPreferredVersion("events"), n.deploymentConfigsVersion = o.getPreferredVersion("deploymentconfigs");
var v = [], h = null;
u.isAvailable().then(function(e) {
n.metricsAvailable = e;
>>>>>>> Update pod controller to use getPreferredVersion
});
var y = function() {
if (n.pod) {
var e = _.find(n.pod.status.containerStatuses, {
name: n.logOptions.container
}), t = _.get(e, "state"), r = _.head(_.keys(t)), a = _.includes([ "running", "waiting", "terminated" ], r) ? r : "", o = _.get(e, "lastState"), i = _.head(_.keys(o)), s = _.get(e, "state.waiting");
angular.extend(n, {
containerStatusKey: a,
containerStateReason: _.get(t, [ r, "reason" ])
}), s ? angular.extend(n, {
lasStatusKey: i,
containerStartTime: _.get(o, [ i, "startedAt" ]),
containerEndTime: _.get(o, [ i, "finishedAt" ])
}) : angular.extend(n, {
containerStartTime: _.get(t, [ r, "startedAt" ]),
containerEndTime: _.get(t, [ r, "finishedAt" ])
=======
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "APIService", "DataService", "Logger", "ProjectsService", "$filter", function(e, t, n, r, a, o, i) {
e.projectName = t.project, e.service = null, e.services = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Services",
link: "project/" + t.project + "/browse/services"
}, {
title: t.service
} ], e.podFailureReasons = {
Pending: "This pod will not receive traffic until all of its containers have been created."
};
var s = n.getPreferredVersion("pods"), c = n.getPreferredVersion("endpoints");
e.eventsVersion = n.getPreferredVersion("events"), e.routesVersion = n.getPreferredVersion("routes"), e.servicesVersion = n.getPreferredVersion("services");
var l = {}, u = [], d = function() {
e.service && (e.portsByRoute = {}, _.each(e.service.spec.ports, function(t) {
var n = !1;
t.nodePort && (e.showNodePorts = !0), _.each(e.routesForService, function(r) {
r.spec.port && r.spec.port.targetPort !== t.name && r.spec.port.targetPort !== t.targetPort || (e.portsByRoute[r.metadata.name] = e.portsByRoute[r.metadata.name] || [], e.portsByRoute[r.metadata.name].push(t), n = !0);
}), n || (e.portsByRoute[""] = e.portsByRoute[""] || [], e.portsByRoute[""].push(t));
}));
}, m = function() {
if (e.podsForService = {}, e.service) {
var t = new LabelSelector(e.service.spec.selector);
e.podsForService = t.select(l);
}
}, p = function(t, n) {
e.loaded = !0, e.service = t, m(), d(), "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This service has been deleted."
});
};
o.get(t.project).then(_.spread(function(n, o) {
e.project = n, e.projectContext = o, r.get(e.servicesVersion, t.service, o, {
errorNotification: !1
}).then(function(n) {
p(n), u.push(r.watchObject(e.servicesVersion, t.service, o, p));
}, function(t) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The service details could not be loaded.",
details: i("getErrorDetails")(t)
};
}), u.push(r.watch(e.servicesVersion, o, function(t) {
e.services = t.by("metadata.name");
})), u.push(r.watch(s, o, function(e) {
l = e.by("metadata.name"), m();
})), u.push(r.watch(c, o, function(n) {
e.podsWithEndpoints = {};
var r = n.by("metadata.name")[t.service];
r && _.each(r.subsets, function(t) {
_.each(t.addresses, function(t) {
"Pod" === _.get(t, "targetRef.kind") && (e.podsWithEndpoints[t.targetRef.name] = !0);
});
});
})), u.push(r.watch(e.routesVersion, o, function(n) {
e.routesForService = {}, angular.forEach(n.by("metadata.name"), function(n) {
"Service" === n.spec.to.kind && n.spec.to.name === t.service && (e.routesForService[n.metadata.name] = n);
}), d(), a.log("routes (subscribe)", e.routesForService);
})), e.$on("$destroy", function() {
r.unwatchAll(u);
>>>>>>> Fix service page logging
});
}
}, b = function() {
var e = $("<span>").css({
position: "absolute",
top: "-100px"
}).addClass("terminal-font").text(_.repeat("x", 10)).appendTo("body"), t = {
width: e.width() / 10,
height: e.height()
};
return e.remove(), t;
}(), S = $(window), C = function(e) {
e || (e = 0), b.height && b.width && n.selectedTab.terminal && !(e > 10) && n.$apply(function() {
var t = $(".container-terminal-wrapper").get(0);
if (t) {
var a = t.getBoundingClientRect();
if (0 !== a.left || 0 !== a.top || 0 !== a.width || 0 !== a.height) {
var o = S.width(), i = S.height(), s = o - a.left - 54, c = i - a.top - 36;
n.terminalCols = Math.max(_.floor(s / b.width), 80), n.terminalRows = Math.max(_.floor(c / b.height), 24);
} else r(function() {
C(e + 1);
}, 50);
} else r(function() {
C(e + 1);
}, 50);
});
};
n.$watch("selectedTab.terminal", function(e) {
e ? (b.height && b.width ? $(window).on("resize.terminalsize", _.debounce(C, 100)) : l.warn("Unable to calculate the bounding box for a character.  Terminal will not be able to resize."), r(C, 0)) : $(window).off("resize.terminalsize");
}), n.onTerminalSelectChange = function(e) {
_.each(n.containerTerminals, function(e) {
e.isVisible = !1;
}), e.isVisible = !0, e.isUsed = !0, n.selectedTerminalContainer = e;
};
<<<<<<< HEAD
<<<<<<< HEAD
var u = function(a) {
var b = _.get(a, "state", {});
return _.head(_.keys(b));
}, v = function() {
var b = [];
_.each(a.pod.spec.containers, function(c) {
var d = _.find(a.pod.status.containerStatuses, {
name:c.name
}), e = u(d);
b.push({
containerName:c.name,
isVisible:!1,
isUsed:!1,
containerState:e
});
});
var c = _.head(b);
return c.isVisible = !0, c.isUsed = !0, a.selectedTerminalContainer = c, b;
}, w = function(b) {
a.noContainersYet && (a.noContainersYet = 0 === a.containersRunning(b.status.containerStatuses));
}, x = function(b) {
_.each(b, function(b) {
var c = _.find(a.pod.status.containerStatuses, {
name:b.containerName
}), d = u(c);
b.containerState = d;
});
}, y = b("annotation"), z = function(b, c) {
if (a.loaded = !0, a.pod = b, a.dcName = y(b, "deploymentConfig"), a.rcName = y(b, "deployment"), a.deploymentVersion = y(b, "deploymentVersion"), a.logCanRun = !_.includes([ "New", "Pending", "Unknown" ], b.status.phase), p(), delete a.controllerRef, !a.dcName) {
var d = k.getControllerReferences(b);
a.controllerRef = _.find(d, function(a) {
return "ReplicationController" === a.kind || "ReplicaSet" === a.kind || "Build" === a.kind;
>>>>>>> Create reusable edit-environment-variables component
});
}
}, C = function() {
<<<<<<< HEAD
var e = $("<span>").css({
position: "absolute",
top: "-100px"
}).addClass("terminal-font").text(_.repeat("x", 10)).appendTo("body"), t = {
width: e.width() / 10,
height: e.height()
};
return e.remove(), t;
}(), w = $(window), P = function(e) {
e || (e = 0), C.height && C.width && r.selectedTab.terminal && !(e > 10) && r.$evalAsync(function() {
var t = $(".container-terminal-wrapper").get(0);
if (t) {
var n = t.getBoundingClientRect();
if (0 !== n.left || 0 !== n.top || 0 !== n.width || 0 !== n.height) {
var o = w.width(), i = w.height(), s = o - n.left - 54, c = i - n.top - 36;
r.terminalCols = Math.max(_.floor(s / C.width), 80), r.terminalRows = Math.max(_.floor(c / C.height), 24);
} else a(function() {
P(e + 1);
}, 50);
} else a(function() {
P(e + 1);
}, 50);
});
<<<<<<< HEAD
}, j = function() {
$(window).on("resize.terminalsize", _.debounce(P, 100)), y || (y = t.$on("oscHeader.toggleNav", function() {
setTimeout(P, 150);
}));
}, k = function() {
$(window).off("resize.terminalsize"), y && (y(), y = null);
=======
if (e.plan && e.serviceClass && e.serviceInstance) {
var t = _.get(e.plan, "spec.instanceUpdateParameterSchema"), n = _.size(_.get(t, "properties")) > 0 || _.get(e.serviceClass, "spec.planUpdatable") && _.size(e.servicePlans) > 1;
e.editAvailable = n && !y(e.serviceInstance) && !_.get(e.serviceInstance, "status.asyncOpInProgress") && !_.get(e.serviceInstance, "metadata.deletionTimestamp");
}
}, w = function() {
e.parameterFormDefinition = angular.copy(_.get(e.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), e.parameterSchema = _.get(e.plan, "spec.instanceCreateParameterSchema"), S();
}, P = function() {
var t = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.plan = _.find(e.servicePlans, {
metadata: {
name: t
}
}), w(), C();
}, j = function() {
e.serviceClass && !f && (e.servicePlans ? P() : f = i.getServicePlansForServiceClass(e.serviceClass).then(function(t) {
var n = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.servicePlans = _.reject(t.by("metadata.name"), function(e) {
return _.get(e, "status.removedFromBrokerCatalog") && e.metadata.name !== n;
}), P(), f = null;
}));
}, k = function() {
e.serviceInstance && !p && (e.serviceClass ? j() : p = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = h(e.serviceInstance, e.serviceClass), b(), p = null, j();
}));
}, I = function(t, n) {
e.loaded = !0, e.serviceInstance = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This provisioned service has been deleted."
}), k(), S(), C();
>>>>>>> Add Browse Catalog to Project context view.
};
r.$watch("selectedTab.terminal", function(e) {
e ? (C.height && C.width ? j() : u.warn("Unable to calculate the bounding box for a character.  Terminal will not be able to resize."), a(P, 0)) : k();
}), r.onTerminalSelectChange = function(e) {
_.each(r.containerTerminals, function(e) {
e.isVisible = !1;
}), e.isVisible = !0, e.isUsed = !0, r.selectedTerminalContainer = e;
};
var I = function(e) {
var t = _.get(e, "state", {});
return _.head(_.keys(t));
}, R = function() {
var e = [];
_.each(r.pod.spec.containers, function(t) {
var n = _.find(r.pod.status.containerStatuses, {
name: t.name
}), a = I(n);
e.push({
containerName: t.name,
isVisible: !1,
isUsed: !1,
containerState: a
});
});
var t = _.head(e);
return t.isVisible = !0, t.isUsed = !0, r.selectedTerminalContainer = t, e;
}, T = function(e) {
r.noContainersYet && (r.noContainersYet = 0 === r.containersRunning(e.status.containerStatuses));
}, E = function(e) {
_.each(e, function(e) {
var t = _.find(r.pod.status.containerStatuses, {
name: e.containerName
}), n = I(t);
e.containerState = n;
});
}, N = e("annotation"), D = function(e, t) {
if (r.loaded = !0, r.pod = e, r.dcName = N(e, "deploymentConfig"), r.rcName = N(e, "deployment"), r.deploymentVersion = N(e, "deploymentVersion"), r.logCanRun = !_.includes([ "New", "Pending", "Unknown" ], e.status.phase), S(), delete r.controllerRef, !r.dcName) {
var n = m.getControllerReferences(e);
r.controllerRef = _.find(n, function(e) {
return "ReplicationController" === e.kind || "ReplicaSet" === e.kind || "Build" === e.kind;
});
}
"DELETED" === t && (r.alerts.deleted = {
=======
var b = function(e) {
=======
var w = function(e) {
>>>>>>> Update pod controller to use getPreferredVersion
var t = _.get(e, "state", {});
return _.head(_.keys(t));
}, P = function() {
var e = [];
_.each(n.pod.spec.containers, function(t) {
var r = _.find(n.pod.status.containerStatuses, {
name: t.name
}), a = w(r);
e.push({
containerName: t.name,
isVisible: !1,
isUsed: !1,
containerState: a
});
});
var t = _.head(e);
return t.isVisible = !0, t.isUsed = !0, n.selectedTerminalContainer = t, e;
}, k = function(e) {
n.noContainersYet && (n.noContainersYet = 0 === n.containersRunning(e.status.containerStatuses));
}, j = function(e) {
_.each(e, function(e) {
var t = _.find(n.pod.status.containerStatuses, {
name: e.containerName
}), r = w(t);
e.containerState = r;
});
}, I = e("annotation"), R = function(e, t) {
if (n.loaded = !0, n.pod = e, n.dcName = I(e, "deploymentConfig"), n.rcName = I(e, "deployment"), n.deploymentVersion = I(e, "deploymentVersion"), n.logCanRun = !_.includes([ "New", "Pending", "Unknown" ], e.status.phase), y(), delete n.controllerRef, !n.dcName) {
var r = d.getControllerReferences(e);
n.controllerRef = _.find(r, function(e) {
return "ReplicationController" === e.kind || "ReplicaSet" === e.kind || "Build" === e.kind;
});
}
<<<<<<< HEAD
"DELETED" === n && (e.alerts.deleted = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
"DELETED" === t && (n.alerts.deleted = {
>>>>>>> Update pod controller to use getPreferredVersion
type: "warning",
message: "This pod has been deleted."
});
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
g.get(n.project).then(_.spread(function(t, a) {
b = a, r.project = t, r.projectContext = a, s.get(r.podsVersion, n.pod, a, {
errorNotification: !1
<<<<<<< HEAD
}).then(function(e) {
<<<<<<< HEAD
D(e);
var t = {};
t[e.metadata.name] = e, r.logOptions.container = n.container || e.spec.containers[0].name, r.containerTerminals = R(), T(e), l.fetchReferencedImageStreamImages(t, r.imagesByDockerReference, r.imageStreamImageRefByDockerReference, b), h.push(s.watchObject(r.podsVersion, n.pod, a, function(e, t) {
D(e, t), E(r.containerTerminals), T(e);
=======
}).then(function(t) {
k(t);
var a = {};
<<<<<<< HEAD
a[t.metadata.name] = t, e.logOptions.container = n.container || t.spec.containers[0].name, e.containerTerminals = C(), S(t), c.fetchReferencedImageStreamImages(a, e.imagesByDockerReference, e.imageStreamImageRefByDockerReference, f), p.push(i.watchObject("pods", n.pod, l, function(t, n) {
<<<<<<< HEAD
P(t, n), w(e.containerTerminals), S(t);
>>>>>>> Update template service broker flag name
=======
a[t.metadata.name] = t, e.logOptions.container = n.container || t.spec.containers[0].name, e.containerTerminals = S(), C(t), c.fetchReferencedImageStreamImages(a, e.imagesByDockerReference, e.imageStreamImageRefByDockerReference, f), p.push(i.watchObject("pods", n.pod, l, function(t, n) {
P(t, n), w(e.containerTerminals), C(t);
>>>>>>> Adding label filter to ste secrets page
}));
}, function(t) {
r.loaded = !0, r.alerts.load = {
type: "error",
message: "The pod details could not be loaded.",
details: e("getErrorDetails")(t)
};
}), r.$watch("logOptions.container", S), h.push(s.watch(f, a, function(e) {
r.imageStreams = e.by("metadata.name"), l.buildDockerRefMapForImageStreams(r.imageStreams, r.imageStreamImageRefByDockerReference), l.fetchReferencedImageStreamImages(r.pods, r.imagesByDockerReference, r.imageStreamImageRefByDockerReference, a), u.log("imagestreams (subscribe)", r.imageStreams);
})), h.push(s.watch(v, a, function(e) {
r.builds = e.by("metadata.name"), u.log("builds (subscribe)", r.builds);
}));
var i, d = function() {
var t = r.debugPod;
i && (s.unwatch(i), i = null), $(window).off("beforeunload.debugPod"), t && (s.delete(r.podsVersion, t.metadata.name, a, {
gracePeriodSeconds: 0
}).then(_.noop, function(n) {
r.alerts["debug-container-error"] = {
type: "error",
message: "Could not delete pod " + t.metadata.name,
details: e("getErrorDetails")(n)
};
}), r.debugPod = null);
}, m = function() {
$(".terminal:visible").focus();
};
r.hasFullscreen = c.hasFullscreen(!0), r.fullscreenTerminal = function() {
c.requestFullscreen("#container-terminal-wrapper"), setTimeout(m);
}, r.exitFullscreen = function() {
c.exitFullscreen();
}, r.debugTerminal = function(t) {
var n = p.generateDebugPod(r.pod, t);
n ? s.create(r.podsVersion, null, n, a).then(function(e) {
var c = _.find(r.pod.spec.containers, {
name: t
});
r.debugPod = e, $(window).on("beforeunload.debugPod", function() {
return "Are you sure you want to leave with the debug terminal open? The debug pod will not be deleted unless you close the dialog.";
}), i = s.watchObject(r.podsVersion, n.metadata.name, a, function(e) {
r.debugPod = e;
}), o.open({
templateUrl: "views/modals/debug-terminal.html",
controller: "DebugTerminalModalController",
scope: r,
resolve: {
container: function() {
return c;
=======
};
m.get(c.project).then(_.spread(function(d, j) {
o = j, a.project = d, a.projectContext = j, g.get("pods", c.pod, j, {
errorNotification:!1
}).then(function(b) {
z(b);
var d = {};
d[b.metadata.name] = b, a.logOptions.container = c.container || b.spec.containers[0].name, a.containerTerminals = v(), w(b), i.fetchReferencedImageStreamImages(d, a.imagesByDockerReference, a.imageStreamImageRefByDockerReference, o), n.push(g.watchObject("pods", c.pod, j, function(b, c) {
z(b, c), x(a.containerTerminals), w(b);
=======
m.get(n.project).then(_.spread(function(a, l) {
=======
p.get(n.project).then(_.spread(function(a, l) {
>>>>>>> Updates for Service Instance & Bindings
=======
m.get(n.project).then(_.spread(function(a, l) {
>>>>>>> Support EnvFrom in the Env Editors
f = l, e.project = a, e.projectContext = l, i.get("pods", n.pod, l, {
errorNotification: !1
}).then(function(t) {
<<<<<<< HEAD
j(t);
=======
P(t);
>>>>>>> Bug 1505281 - Improve import YAML results message
var a = {};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
a[t.metadata.name] = t, e.logOptions.container = n.container || t.spec.containers[0].name, e.containerTerminals = C(), S(t), c.fetchReferencedImageStreamImages(a, e.imagesByDockerReference, e.imageStreamImageRefByDockerReference, f), p.push(i.watchObject("pods", n.pod, l, function(t, n) {
j(t, n), w(e.containerTerminals), S(t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a[t.metadata.name] = t, e.logOptions.container = n.container || t.spec.containers[0].name, e.containerTerminals = S(), C(t), c.fetchReferencedImageStreamImages(a, e.imagesByDockerReference, e.imageStreamImageRefByDockerReference, f), p.push(i.watchObject("pods", n.pod, l, function(t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
P(t, n), w(e.containerTerminals), C(t);
>>>>>>> Service instance details configuration and edit
=======
j(t, n), w(e.containerTerminals), C(t);
>>>>>>> Add product icons for service catalog
=======
P(t, n), w(e.containerTerminals), C(t);
>>>>>>> Handle displaying parameters when secrets are not available.
=======
a[t.metadata.name] = t, e.logOptions.container = n.container || t.spec.containers[0].name, e.containerTerminals = C(), S(t), c.fetchReferencedImageStreamImages(a, e.imagesByDockerReference, e.imageStreamImageRefByDockerReference, f), p.push(i.watchObject("pods", n.pod, l, function(t, n) {
<<<<<<< HEAD
j(t, n), w(e.containerTerminals), S(t);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
k(t, n), w(e.containerTerminals), S(t);
>>>>>>> Fix for adding non-builder templates to a project
=======
P(t, n), w(e.containerTerminals), S(t);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
a[t.metadata.name] = t, e.logOptions.container = n.container || t.spec.containers[0].name, e.containerTerminals = S(), C(t), c.fetchReferencedImageStreamImages(a, e.imagesByDockerReference, e.imageStreamImageRefByDockerReference, f), p.push(i.watchObject("pods", n.pod, l, function(t, n) {
P(t, n), w(e.containerTerminals), C(t);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
}));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The pod details could not be loaded.",
details: t("getErrorDetails")(n)
=======
p.get(t.project).then(_.spread(function(a, o) {
h = o, n.project = a, n.projectContext = o, i.get(n.podsVersion, t.pod, o, {
=======
p.get(t.project).then(_.spread(function(r, o) {
h = o, n.project = r, n.projectContext = o, i.get(n.podsVersion, t.pod, o, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(e) {
I(e);
=======
R(e);
<<<<<<< HEAD
>>>>>>> Add search catalog in project context
var a = {};
a[e.metadata.name] = e, n.logOptions.container = t.container || e.spec.containers[0].name, n.containerTerminals = P(), k(e), c.fetchReferencedImageStreamImages(a, n.imagesByDockerReference, n.imageStreamImageRefByDockerReference, h), v.push(i.watchObject(n.podsVersion, t.pod, o, function(e, t) {
=======
var r = {};
r[e.metadata.name] = e, n.logOptions.container = t.container || e.spec.containers[0].name, n.containerTerminals = P(), k(e), c.fetchReferencedImageStreamImages(r, n.imagesByDockerReference, n.imageStreamImageRefByDockerReference, h), v.push(i.watchObject(n.podsVersion, t.pod, o, function(e, t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
R(e, t), j(n.containerTerminals), k(e);
}));
}, function(t) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The pod details could not be loaded.",
details: e("getErrorDetails")(t)
>>>>>>> Update pod controller to use getPreferredVersion
};
}), n.$watch("logOptions.container", y), v.push(i.watch(f, o, function(e) {
n.imageStreams = e.by("metadata.name"), c.buildDockerRefMapForImageStreams(n.imageStreams, n.imageStreamImageRefByDockerReference), c.fetchReferencedImageStreamImages(n.pods, n.imagesByDockerReference, n.imageStreamImageRefByDockerReference, o), l.log("imagestreams (subscribe)", n.imageStreams);
})), v.push(i.watch(g, o, function(e) {
n.builds = e.by("metadata.name"), l.log("builds (subscribe)", n.builds);
}));
var u, d = function() {
var t = n.debugPod;
u && (i.unwatch(u), u = null), $(window).off("beforeunload.debugPod"), t && (i.delete(n.podsVersion, t.metadata.name, o, {
gracePeriodSeconds: 0
}).then(_.noop, function(r) {
n.alerts["debug-container-error"] = {
type: "error",
message: "Could not delete pod " + t.metadata.name,
details: e("getErrorDetails")(r)
};
}), n.debugPod = null);
}, p = function() {
$(".terminal:visible").focus();
};
n.hasFullscreen = s.hasFullscreen(!0), n.fullscreenTerminal = function() {
s.requestFullscreen("#container-terminal-wrapper"), setTimeout(p);
}, n.exitFullscreen = function() {
s.exitFullscreen();
}, n.debugTerminal = function(t) {
var r = m.generateDebugPod(n.pod, t);
r ? i.create(n.podsVersion, null, r, o).then(function(e) {
var s = _.find(n.pod.spec.containers, {
name: t
});
n.debugPod = e, $(window).on("beforeunload.debugPod", function() {
return "Are you sure you want to leave with the debug terminal open? The debug pod will not be deleted unless you close the dialog.";
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), k = g.watchObject("pods", d.metadata.name, j, function(b) {
a.debugPod = b;
});
var h = e.open({
animation:!0,
templateUrl:"views/modals/debug-terminal.html",
controller:"DebugTerminalModalController",
scope:a,
resolve:{
container:function() {
return f;
>>>>>>> Create reusable edit-environment-variables component
},
image: function() {
return _.get(r, [ "imagesByDockerReference", c.image ]);
}
<<<<<<< HEAD
}
}).result.then(d);
}, function(n) {
r.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + t,
details: e("getErrorDetails")(n)
};
}) : r.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + t
};
}, r.containersRunning = function(e) {
=======
}), u = i.watchObject("pods", a.metadata.name, l, function(t) {
e.debugPod = t;
=======
}), u = i.watchObject(n.podsVersion, a.metadata.name, o, function(e) {
n.debugPod = e;
>>>>>>> Update pod controller to use getPreferredVersion
}), r.open({
=======
}), u = i.watchObject(n.podsVersion, r.metadata.name, o, function(e) {
n.debugPod = e;
}), a.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
templateUrl: "views/modals/debug-terminal.html",
controller: "DebugTerminalModalController",
scope: n,
resolve: {
container: function() {
return s;
},
image: function() {
return _.get(n, [ "imagesByDockerReference", s.image ]);
}
},
backdrop: "static"
}).result.then(d);
}, function(r) {
n.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + t,
details: e("getErrorDetails")(r)
};
}) : n.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + t
};
<<<<<<< HEAD
}, e.containersRunning = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, n.containersRunning = function(e) {
>>>>>>> Update pod controller to use getPreferredVersion
var t = 0;
return e && e.forEach(function(e) {
e.state && e.state.running && t++;
}), t;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, r.$on("$destroy", function() {
s.unwatchAll(h), d(), k();
=======
},
backdrop:"static"
});
h.result.then(m);
}, function(d) {
a.alerts["debug-container-error"] = {
type:"error",
message:"Could not debug container " + c,
details:b("getErrorDetails")(d)
};
}) :void (a.alerts["debug-container-error"] = {
type:"error",
message:"Could not debug container " + c
});
}, a.containersRunning = function(a) {
var b = 0;
return a && a.forEach(function(a) {
a.state && a.state.running && b++;
}), b;
}, a.$on("$destroy", function() {
g.unwatchAll(n), m(), $(window).off("resize.terminalsize");
>>>>>>> Create reusable edit-environment-variables component
=======
}, e.$on("$destroy", function() {
i.unwatchAll(p), m(), $(window).off("resize.terminalsize");
>>>>>>> Support EnvFrom in the Env Editors
=======
}, n.$on("$destroy", function() {
i.unwatchAll(v), d(), $(window).off("resize.terminalsize");
>>>>>>> Update pod controller to use getPreferredVersion
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$q", "$location", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HomePagePreferenceService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "PromiseUtils", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", "gettext", "gettextCatalog", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "gettextCatalog", "gettext", "ProjectsService", function(e, t, n, r, a, o, i, s, c) {
n.projectName = t.project, n.limitRanges = {}, n.limitsByType = {}, n.labelSuggestions = {}, n.alerts = n.alerts || {}, n.quotaHelp = i.getString(s("Limits resource usage within this project.")), n.emptyMessageLimitRanges = s("Loading..."), n.limitRangeHelp = i.getString(s("Defines minimum and maximum constraints for runtime resources such as memory and CPU.")), n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0;
var l = r.getPreferredVersion("appliedclusterresourcequotas"), u = r.getPreferredVersion("resourcequotas"), d = r.getPreferredVersion("limitranges"), m = [], p = e("usageValue");
=======
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "DataService", "ProjectsService", "Logger", function(e, t, n, a, r, o) {
=======
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$q", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "PromiseUtils", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "DataService", "ProjectsService", "Logger", function(e, t, n, a, r, o) {
>>>>>>> Wait for service classes and plans to load
n.projectName = t.project, n.limitRanges = {}, n.limitsByType = {}, n.labelSuggestions = {}, n.alerts = n.alerts || {}, n.quotaHelp = "Limits resource usage within this project.", n.emptyMessageLimitRanges = "Loading...", n.limitRangeHelp = "Defines minimum and maximum constraints for runtime resources such as memory and CPU.", n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0;
var i = [], s = e("usageValue");
>>>>>>> Adopt service catalog API changes
n.isAtLimit = function(e, t) {
var n = e.status.total || e.status, r = p(_.get(n, [ "hard", t ]));
if (!r) return !1;
var a = p(_.get(n, [ "used", t ]));
return !!a && a >= r;
};
var g = e("humanizeQuotaResource"), f = function(e, t) {
return "cpu" === e || "requests.cpu" === e ? "cpu" === t || "requests.cpu" === t ? 0 : -1 : "cpu" === t || "requests.cpu" === t ? 1 : "memory" === e || "requests.memory" === e ? "memory" === t || "requests.memory" === t ? 0 : -1 : "memory" === t || "requests.memory" === t ? 1 : "limits.cpu" === e ? "limits.cpu" === t ? 0 : -1 : "limits.cpu" === t ? 1 : "limits.memory" === e ? "limits.memory" === t ? 0 : -1 : "limits.memory" === t ? 1 : (e = g(e), t = g(t), e.localeCompare(t));
}, v = function(e) {
var t = {};
return _.each(e, function(e) {
var n = _.get(e, "spec.quota.hard") || _.get(e, "spec.hard"), r = _.keys(n).sort(f);
t[e.metadata.name] = r;
}), t;
};
c.get(t.project).then(_.spread(function(e, r) {
n.project = e, m.push(a.watch(u, r, function(e) {
n.quotas = _.sortBy(e.by("metadata.name"), "metadata.name"), n.orderedTypesByQuota = v(n.quotas), o.log("quotas", n.quotas);
}, {
poll: !0,
pollInterval: 6e4
})), m.push(a.watch(l, r, function(e) {
n.clusterQuotas = _.sortBy(e.by("metadata.name"), "metadata.name"), n.orderedTypesByClusterQuota = v(n.clusterQuotas), n.namespaceUsageByClusterQuota = {}, _.each(n.clusterQuotas, function(e) {
if (e.status) {
var r = _.find(e.status.namespaces, {
namespace: t.project
});
n.namespaceUsageByClusterQuota[e.metadata.name] = r.status;
}
}), o.log("cluster quotas", n.clusterQuotas);
}, {
poll: !0,
pollInterval: 6e4
})), m.push(a.watch(d, r, function(e) {
n.limitRanges = _.sortBy(e.by("metadata.name"), "metadata.name"), n.emptyMessageLimitRanges = i.getString(s("There are no limit ranges set on this project.")), angular.forEach(n.limitRanges, function(e) {
var t = e.metadata.name;
n.limitsByType[t] = {}, angular.forEach(e.spec.limits, function(e) {
var r = n.limitsByType[t][e.type] = {};
angular.forEach(e.max, function(e, t) {
r[t] = r[t] || {}, r[t].max = e;
}), angular.forEach(e.min, function(e, t) {
r[t] = r[t] || {}, r[t].min = e;
}), angular.forEach(e.default, function(e, t) {
r[t] = r[t] || {}, r[t].default = e;
}), angular.forEach(e.defaultRequest, function(e, t) {
r[t] = r[t] || {}, r[t].defaultRequest = e;
}), angular.forEach(e.maxLimitRequestRatio, function(e, t) {
r[t] = r[t] || {}, r[t].maxLimitRequestRatio = e;
});
});
}), o.log("limitRanges", n.limitRanges);
}, {
poll: !0,
pollInterval: 6e4
})), n.$on("$destroy", function() {
a.unwatchAll(m);
});
}));
} ]), angular.module("openshiftConsole").controller("MonitoringController", [ "$routeParams", "$location", "$scope", "$filter", "BuildsService", "DataService", "ImageStreamResolver", "KeywordService", "Logger", "MetricsService", "Navigate", "PodsService", "ProjectsService", "$rootScope", "gettextCatalog", "gettext", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f) {
n.projectName = e.project, n.alerts = n.alerts || {}, n.renderOptions = n.renderOptions || {}, n.renderOptions.showEventsSidebar = !0, n.renderOptions.collapseEventsSidebar = "true" === localStorage.getItem("monitoring.eventsidebar.collapsed");
var v = r("isIE")(), h = [];
n.kinds = [ {
kind: g.getString(f("All"))
}, {
kind: "Pods"
}, {
label: g.getString(f("Deployments")),
kind: "ReplicationControllers"
}, {
kind: g.getString(f("Builds"))
}, {
kind: g.getString(f("Stateful Sets"))
=======
}, e.$on("$destroy", function() {
i.unwatchAll(p), m(), $(window).off("resize.terminalsize");
=======
}, e.$on("$destroy", function() {
i.unwatchAll(m), p(), $(window).off("resize.terminalsize");
>>>>>>> Updates for Service Instance & Bindings
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "BindingService", "ResourceAlertsService", "RoutesService", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "DataService", "ProjectsService", "Logger", function(e, t, n, a, r, o) {
=======
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$q", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "PromiseUtils", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, a, r, o, i) {
>>>>>>> Update quota controller to  use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$q", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "PromiseUtils", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.limitRanges = {}, n.limitsByType = {}, n.labelSuggestions = {}, n.alerts = n.alerts || {}, n.quotaHelp = "Limits resource usage within this project.", n.emptyMessageLimitRanges = "Loading...", n.limitRangeHelp = "Defines minimum and maximum constraints for runtime resources such as memory and CPU.", n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0;
var s = r.getPreferredVersion("appliedclusterresourcequotas"), c = r.getPreferredVersion("resourcequotas"), l = r.getPreferredVersion("limitranges"), u = [], d = e("usageValue");
n.isAtLimit = function(e, t) {
var n = e.status.total || e.status, r = d(_.get(n, [ "hard", t ]));
if (!r) return !1;
var a = d(_.get(n, [ "used", t ]));
return !!a && a >= r;
};
<<<<<<< HEAD
var m = e("humanizeQuotaResource"), p = function(e, t) {
return "cpu" === e || "requests.cpu" === e ? "cpu" === t || "requests.cpu" === t ? 0 : -1 : "cpu" === t || "requests.cpu" === t ? 1 : "memory" === e || "requests.memory" === e ? "memory" === t || "requests.memory" === t ? 0 : -1 : "memory" === t || "requests.memory" === t ? 1 : "limits.cpu" === e ? "limits.cpu" === t ? 0 : -1 : "limits.cpu" === t ? 1 : "limits.memory" === e ? "limits.memory" === t ? 0 : -1 : "limits.memory" === t ? 1 : (e = m(e), t = m(t), e.localeCompare(t));
}, f = function(e) {
var t = {};
return _.each(e, function(e) {
var n = _.get(e, "spec.quota.hard") || _.get(e, "spec.hard"), r = _.keys(n).sort(p);
t[e.metadata.name] = r;
}), t;
=======
a.cancel = y, a.$on("$destroy", b);
var S = o.getPreferredVersion("limitranges");
m.get(r.project).then(_.spread(function(e, t) {
a.hideCPU = l.hasClusterResourceOverrides(e);
var n = {
resource: o.kindToResource(r.kind),
group: r.group
>>>>>>> Use new clusterResourceOverridesEnabled flag
};
i.get(t.project).then(_.spread(function(e, r) {
n.project = e, a.list(c, r).then(function(e) {
n.quotas = _.sortBy(e.by("metadata.name"), "metadata.name"), n.orderedTypesByQuota = f(n.quotas), o.log("quotas", n.quotas);
}), a.list(s, r).then(function(e) {
n.clusterQuotas = _.sortBy(e.by("metadata.name"), "metadata.name"), n.orderedTypesByClusterQuota = f(n.clusterQuotas), n.namespaceUsageByClusterQuota = {}, _.each(n.clusterQuotas, function(e) {
if (e.status) {
var r = _.find(e.status.namespaces, {
namespace: t.project
});
n.namespaceUsageByClusterQuota[e.metadata.name] = r.status;
}
}), o.log("cluster quotas", n.clusterQuotas);
}), a.list(l, r).then(function(e) {
n.limitRanges = _.sortBy(e.by("metadata.name"), "metadata.name"), n.emptyMessageLimitRanges = "There are no limit ranges set on this project.", angular.forEach(n.limitRanges, function(e) {
var t = e.metadata.name;
n.limitsByType[t] = {}, angular.forEach(e.spec.limits, function(e) {
var r = n.limitsByType[t][e.type] = {};
angular.forEach(e.max, function(e, t) {
r[t] = r[t] || {}, r[t].max = e;
}), angular.forEach(e.min, function(e, t) {
r[t] = r[t] || {}, r[t].min = e;
}), angular.forEach(e.default, function(e, t) {
r[t] = r[t] || {}, r[t].default = e;
}), angular.forEach(e.defaultRequest, function(e, t) {
r[t] = r[t] || {}, r[t].defaultRequest = e;
}), angular.forEach(e.maxLimitRequestRatio, function(e, t) {
r[t] = r[t] || {}, r[t].maxLimitRequestRatio = e;
});
});
}), o.log("limitRanges", n.limitRanges);
}), n.$on("$destroy", function() {
a.unwatchAll(u);
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("MonitoringController", [ "$routeParams", "$location", "$scope", "$filter", "BuildsService", "DataService", "ImageStreamResolver", "KeywordService", "Logger", "MetricsService", "Navigate", "PodsService", "ProjectsService", "$rootScope", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
n.projectName = e.project, n.alerts = n.alerts || {}, n.renderOptions = n.renderOptions || {}, n.renderOptions.showEventsSidebar = !0, n.renderOptions.collapseEventsSidebar = "true" === localStorage.getItem("monitoring.eventsidebar.collapsed");
var f = r("isIE")(), g = [];
n.kinds = [ {
kind: "All"
=======
} else u.toErrorPage("Health checks are not supported for kind " + r.kind + ".");
} else u.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditBuildConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "SOURCE_URL_PATTERN", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
e.projectName = r.project, e.buildConfig = null, e.alerts = {}, e.sourceURLPattern = d, e.options = {}, e.jenkinsfileOptions = {
type: "path"
}, e.selectTypes = {
ImageStreamTag: "Image Stream Tag",
ImageStreamImage: "Image Stream Image",
DockerImage: "Docker Image Repository"
}, e.buildFromTypes = [ "ImageStreamTag", "ImageStreamImage", "DockerImage" ], e.pushToTypes = [ "ImageStreamTag", "DockerImage", "None" ], e.jenkinsfileTypes = [ {
id: "path",
title: "From Source Repository"
}, {
id: "inline",
title: "Inline"
} ], e.view = {
advancedOptions: !1,
hasHooks: !1
}, e.breadcrumbs = [], r.isPipeline ? (e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + r.project + "/browse/pipelines"
}), e.breadcrumbs.push({
title: r.buildconfig,
link: "project/" + r.project + "/browse/pipelines/" + r.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + r.project + "/browse/builds"
}), e.breadcrumbs.push({
title: r.buildconfig,
link: "project/" + r.project + "/browse/builds/" + r.buildconfig
})), e.breadcrumbs.push({
title: r.isPipeline ? "Edit Pipelines" : "Edit Builds"
}), e.imageOptions = {
from: {},
to: {},
fromSource: {}
}, e.sources = {
binary: !1,
dockerfile: !1,
git: !1,
images: !1,
contextDir: !1,
none: !0
}, e.triggers = {
webhookTriggers: [],
imageChangeTriggers: [],
builderImageChangeTrigger: {},
configChangeTrigger: {}
}, e.runPolicyTypes = [ "Serial", "Parallel", "SerialLatestOnly" ], e.buildHookTypes = [ {
id: "command",
label: "Command"
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
}, {
kind: "Pods"
}, {
label: "Deployments",
kind: "ReplicationControllers"
}, {
kind: "Builds"
}, {
<<<<<<< HEAD
kind: "StatefulSets"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ], n.kindSelector = {
selected: _.find(n.kinds, {
kind: e.kind
}) || _.head(n.kinds)
}, n.logOptions = {
pods: {},
replicationControllers: {},
builds: {},
statefulSets: {}
}, n.logCanRun = {
pods: {},
replicationControllers: {},
builds: {},
statefulSets: {}
}, n.logEmpty = {
pods: {},
replicationControllers: {},
builds: {},
statefulSets: {}
}, n.expanded = {
pods: {},
replicationControllers: {},
replicaSets: {},
builds: {},
statefulSets: {}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var y = r("isNil");
=======
var v = r("isNil");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.filters = {
hideOlderResources: y(e.hideOlderResources) || "true" === e.hideOlderResources,
text: ""
};
var b, S, C, w;
l.isAvailable().then(function(e) {
n.metricsAvailable = e;
=======
id: "scriptArgs",
label: "Shell script with arguments"
} ], e.buildHookSelection = {
type: {}
}, e.getArgumentsDescription = function() {
switch (_.get(e, "buildHookSelection.type.id", "")) {
case "args":
return "Enter the arguments that will be appended to the default image entry point.";

case "commandArgs":
return "Enter the arguments that will be appended to the command.";

case "scriptArgs":
return "Enter the arguments that will be appended to the script.";
}
return null;
};
var f = function() {
var t = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.args")), n = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.command")), r = !!_.get(e, "buildConfig.spec.postCommit.script");
e.view.hasHooks = t || n || r;
var a;
a = t && n ? "commandArgs" : t && r ? "scriptArgs" : t ? "args" : r ? "script" : "command", e.buildHookSelection.type = _.find(e.buildHookTypes, {
id: a
});
}, g = function() {
if (e.view.hasHooks) switch (e.buildHookSelection.type.id) {
case "script":
delete e.updatedBuildConfig.spec.postCommit.command, delete e.updatedBuildConfig.spec.postCommit.args;
break;

case "command":
delete e.updatedBuildConfig.spec.postCommit.script, delete e.updatedBuildConfig.spec.postCommit.args;
break;

case "args":
delete e.updatedBuildConfig.spec.postCommit.script, delete e.updatedBuildConfig.spec.postCommit.command;
break;

case "scriptArgs":
delete e.updatedBuildConfig.spec.postCommit.command;
break;

case "commandArgs":
delete e.updatedBuildConfig.spec.postCommit.script;
} else delete e.updatedBuildConfig.spec.postCommit.command, delete e.updatedBuildConfig.spec.postCommit.args, delete e.updatedBuildConfig.spec.postCommit.script;
};
e.secrets = {};
var v = o.getPreferredVersion("buildconfigs"), h = o.getPreferredVersion("secrets"), y = [], b = t("buildStrategy"), S = t("orderByDisplayName"), C = t("getErrorDetails"), w = [], P = [];
e.valueFromObjects = [];
var j = function() {
var t;
e.buildConfig ? (t = c.resourceURL(e.buildConfig), n.path(t)) : a.history.back();
};
e.cancel = j;
var k = function() {
l.hideNotification("edit-build-config-error"), l.hideNotification("edit-build-config-conflict"), l.hideNotification("edit-build-config-deleted");
};
e.$on("$destroy", k), u.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, i.canI("buildconfigs", "update", r.project) ? (s.get(v, r.buildconfig, a, {
errorNotification: !1
}).then(function(t) {
e.buildConfig = t, f(), e.updatedBuildConfig = angular.copy(e.buildConfig), e.buildStrategy = b(e.updatedBuildConfig), e.strategyType = e.buildConfig.spec.strategy.type, e.envVars = e.buildStrategy.env || [], e.triggers = I(e.triggers, e.buildConfig.spec.triggers), e.sources = B(e.sources, e.buildConfig.spec.source), _.has(t, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile") && (e.jenkinsfileOptions.type = "inline"), i.canI(h, "list", r.project) && s.list(h, a).then(function(t) {
var n = m.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.webhookSecrets = m.groupSecretsByType(t).webhook, e.webhookSecrets.unshift(""), e.secrets.secretsByType = _.each(r, function(e) {
e.unshift("");
<<<<<<< HEAD
<<<<<<< HEAD
}), D(), j = C(t.by("metadata.name")), e.valueFromObjects = P.concat(j);
>>>>>>> Add Browse Catalog to Project context view.
=======
}), N(), P = S(t.by("metadata.name")), e.valueFromObjects = w.concat(P);
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
=======
}), D(), P = S(t.by("metadata.name")), e.valueFromObjects = w.concat(P);
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
});
<<<<<<< HEAD
var P = r("orderObjectsByDate"), j = [ "metadata.name" ], k = [], I = function() {
n.filteredPods = s.filterForKeywords(w, j, k), n.filteredReplicationControllers = s.filterForKeywords(S, j, k), n.filteredReplicaSets = s.filterForKeywords(C, j, k), n.filteredBuilds = s.filterForKeywords(b, j, k), n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), j, k);
}, R = function(e) {
=======
var C = r("orderObjectsByDate"), w = [ "metadata.name" ], P = [], k = function() {
n.filteredPods = s.filterForKeywords(S, w, P), n.filteredReplicationControllers = s.filterForKeywords(y, w, P), n.filteredReplicaSets = s.filterForKeywords(b, w, P), n.filteredBuilds = s.filterForKeywords(h, w, P), n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), w, P);
}, j = function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.logOptions.pods[e.metadata.name] = {
container: e.spec.containers[0].name
}, n.logCanRun.pods[e.metadata.name] = !_.includes([ "New", "Pending", "Unknown" ], e.status.phase);
}, T = function(e) {
n.logOptions.replicationControllers[e.metadata.name] = {};
var t = r("annotation")(e, "deploymentVersion");
t && (n.logOptions.replicationControllers[e.metadata.name].version = t), n.logCanRun.replicationControllers[e.metadata.name] = !_.includes([ "New", "Pending" ], r("deploymentStatus")(e));
<<<<<<< HEAD
}, E = function(e) {
=======
}, R = function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.logOptions.builds[e.metadata.name] = {}, n.logCanRun.builds[e.metadata.name] = !_.includes([ "New", "Pending", "Error" ], e.status.phase);
}, N = function() {
n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), j, k);
}, D = function() {
w = _.filter(n.pods, function(e) {
return !n.filters.hideOlderResources || "Succeeded" !== e.status.phase && "Failed" !== e.status.phase;
<<<<<<< HEAD
}), n.filteredPods = s.filterForKeywords(w, j, k);
}, A = r("isIncompleteBuild"), B = r("buildConfigForBuild"), L = r("isRecentBuild"), x = function() {
=======
}), n.filteredPods = s.filterForKeywords(S, w, P);
}, N = r("isIncompleteBuild"), D = r("buildConfigForBuild"), A = r("isRecentBuild"), B = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
moment().subtract(5, "m");
b = _.filter(n.builds, function(e) {
if (!n.filters.hideOlderResources) return !0;
<<<<<<< HEAD
if (A(e)) return !0;
var t = B(e);
return t ? n.latestBuildByConfig[t].metadata.name === e.metadata.name : L(e);
}), n.filteredBuilds = s.filterForKeywords(b, j, k);
}, V = r("deploymentStatus"), O = r("deploymentIsInProgress"), U = function() {
S = _.filter(n.replicationControllers, function(e) {
return !n.filters.hideOlderResources || (O(e) || "Active" === V(e));
}), n.filteredReplicationControllers = s.filterForKeywords(S, j, k);
}, F = function() {
C = _.filter(n.replicaSets, function(e) {
return !n.filters.hideOlderResources || _.get(e, "status.replicas");
}), n.filteredReplicaSets = s.filterForKeywords(C, j, k);
};
<<<<<<< HEAD
n.toggleItem = function(e, t, a, o) {
var i = $(e.target);
if (o || !i || !i.closest("a", t).length) {
var s, c;
switch (a.kind) {
case "Build":
s = !n.expanded.builds[a.metadata.name], n.expanded.builds[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
var l = _.get(n.podsByName, r("annotation")(a, "buildPod"));
l && p.$emit(c, l);
break;

case "ReplicationController":
s = !n.expanded.replicationControllers[a.metadata.name], n.expanded.replicationControllers[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
var u = r("annotation")(a, "deployerPod");
u && p.$emit(c, {
kind: "Pod",
metadata: {
name: u
}
}), _.each(n.podsByOwnerUID[a.metadata.uid], function(e) {
p.$emit(c, e);
=======
var f = a("isNil");
=======
var g = a("isNil");
>>>>>>> Patternfly vertical navigation and project bar
=======
var v = a("isNil");
>>>>>>> Allow unlimited websockets on Edge - also fix leaking websockets on monitoring page
n.filters = {
hideOlderResources: v(e.hideOlderResources) || "true" === e.hideOlderResources,
text: ""
};
<<<<<<< HEAD
var h, y, b, S;
l.isAvailable().then(function(e) {
n.metricsAvailable = e;
=======
}), c.list("configmaps", a, null, {
=======
})) : (e.imageSourceFromObjects = [], e.sourceImages.forEach(function(t) {
e.imageSourceFromObjects.push(t.from);
}))), e.options.forcePull = !!e.buildStrategy.forcePull, "Docker" === e.strategyType && (e.options.noCache = !!e.buildConfig.spec.strategy.dockerStrategy.noCache, e.buildFromTypes.push("None")), y.push(s.watchObject(v, r.buildconfig, a, function(t, n) {
"MODIFIED" === n && l.addNotification({
id: "edit-build-config-conflict",
type: "warning",
message: "This build configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."
}), "DELETED" === n && (l.addNotification({
id: "edit-build-config-deleted",
type: "warning",
message: "This build configuration has been deleted."
}), e.disableInputs = !0), e.buildConfig = t;
})), e.loaded = !0;
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The build configuration details could not be loaded.",
details: "Reason: " + t("getErrorDetails")(n)
};
}), s.list("configmaps", a, null, {
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
errorNotification: !1
}).then(function(t) {
w = S(t.by("metadata.name")), e.valueFromObjects = w.concat(P);
}, function(e) {
403 !== e.code && l.addNotification({
id: "edit-build-config-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
<<<<<<< HEAD
details: w(e)
>>>>>>> Add Browse Catalog to Project context view.
});
var C = a("orderObjectsByDate"), w = [ "metadata.name" ], P = [], k = function() {
n.filteredPods = s.filterForKeywords(S, w, P), n.filteredReplicationControllers = s.filterForKeywords(y, w, P), n.filteredReplicaSets = s.filterForKeywords(b, w, P), n.filteredBuilds = s.filterForKeywords(h, w, P), n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), w, P);
}, j = function(e) {
n.logOptions.pods[e.metadata.name] = {
container: e.spec.containers[0].name
}, n.logCanRun.pods[e.metadata.name] = !_.includes([ "New", "Pending", "Unknown" ], e.status.phase);
}, I = function(e) {
n.logOptions.replicationControllers[e.metadata.name] = {};
var t = a("annotation")(e, "deploymentVersion");
t && (n.logOptions.replicationControllers[e.metadata.name].version = t), n.logCanRun.replicationControllers[e.metadata.name] = !_.includes([ "New", "Pending" ], a("deploymentStatus")(e));
}, R = function(e) {
n.logOptions.builds[e.metadata.name] = {}, n.logCanRun.builds[e.metadata.name] = !_.includes([ "New", "Pending", "Error" ], e.status.phase);
}, E = function() {
n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), w, P);
}, T = function() {
S = _.filter(n.pods, function(e) {
return !n.filters.hideOlderResources || "Succeeded" !== e.status.phase && "Failed" !== e.status.phase;
}), n.filteredPods = s.filterForKeywords(S, w, P);
}, N = a("isIncompleteBuild"), D = a("buildConfigForBuild"), A = a("isRecentBuild"), B = function() {
moment().subtract(5, "m");
h = _.filter(n.builds, function(e) {
if (!n.filters.hideOlderResources) return !0;
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (N(e)) return !0;
var t = D(e);
return t ? n.latestBuildByConfig[t].metadata.name === e.metadata.name : A(e);
}), n.filteredBuilds = s.filterForKeywords(h, w, P);
<<<<<<< HEAD
}, L = a("deploymentStatus"), U = a("deploymentIsInProgress"), O = function() {
=======
}, L = r("deploymentStatus"), U = r("deploymentIsInProgress"), O = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
y = _.filter(n.replicationControllers, function(e) {
return !n.filters.hideOlderResources || (U(e) || "Active" === L(e));
}), n.filteredReplicationControllers = s.filterForKeywords(y, w, P);
}, V = function() {
b = _.filter(n.replicaSets, function(e) {
return !n.filters.hideOlderResources || _.get(e, "status.replicas");
}), n.filteredReplicaSets = s.filterForKeywords(b, w, P);
};
n.toggleItem = function(e, t, a, o) {
var i = $(e.target);
if (o || !i || !i.closest("a", t).length) {
var s, c;
switch (a.kind) {
case "Build":
s = !n.expanded.builds[a.metadata.name], n.expanded.builds[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
var l = _.get(n.podsByName, r("annotation")(a, "buildPod"));
l && p.$emit(c, l);
break;

case "ReplicationController":
s = !n.expanded.replicationControllers[a.metadata.name], n.expanded.replicationControllers[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
var u = r("annotation")(a, "deployerPod");
u && p.$emit(c, {
kind: "Pod",
metadata: {
name: u
}
<<<<<<< HEAD
}), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
p.$emit(s, e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
m.$emit(s, e);
>>>>>>> Updates for Service Instance & Bindings
=======
p.$emit(s, e);
>>>>>>> Support EnvFrom in the Env Editors
=======
=======
}), _.each(n.podsByOwnerUID[a.metadata.uid], function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
p.$emit(c, e);
>>>>>>> Rework monitoring page - replace list-view-pf with list-pf markup structure and css
});
break;

case "ReplicaSet":
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
s = !n.expanded.replicaSets[a.metadata.name], n.expanded.replicaSets[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a), _.each(n.podsByOwnerUID[a.metadata.uid], function(e) {
p.$emit(c, e);
=======
i = !n.expanded.replicaSets[r.metadata.name], n.expanded.replicaSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
p.$emit(s, e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i = !n.expanded.replicaSets[r.metadata.name], n.expanded.replicaSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", m.$emit(s, r), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
m.$emit(s, e);
>>>>>>> Updates for Service Instance & Bindings
=======
i = !n.expanded.replicaSets[r.metadata.name], n.expanded.replicaSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
p.$emit(s, e);
>>>>>>> Support EnvFrom in the Env Editors
=======
s = !n.expanded.replicaSets[r.metadata.name], n.expanded.replicaSets[r.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, r), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
=======
s = !n.expanded.replicaSets[a.metadata.name], n.expanded.replicaSets[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a), _.each(n.podsByOwnerUID[a.metadata.uid], function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
p.$emit(c, e);
>>>>>>> Rework monitoring page - replace list-view-pf with list-pf markup structure and css
});
break;

case "Pod":
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
s = !n.expanded.pods[a.metadata.name], n.expanded.pods[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
break;

case "StatefulSet":
<<<<<<< HEAD
s = !n.expanded.statefulSets[a.metadata.name], n.expanded.statefulSets[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
=======
i = !n.expanded.pods[r.metadata.name], n.expanded.pods[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r);
=======
details: C(e)
});
})) : c.toErrorPage("You do not have authority to update build config " + r.buildconfig + ".", "access_denied");
}));
var I = function(n, r) {
function a(n, r) {
return t("imageObjectRef")(n, e.projectName) === t("imageObjectRef")(r, e.projectName);
}
var o = b(e.buildConfig).from;
return r.forEach(function(e) {
switch (e.type) {
case "Generic":
case "GitHub":
case "GitLab":
case "Bitbucket":
n.webhookTriggers.push({
lastTriggerType: e.type,
data: e
});
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
break;

case "StatefulSet":
i = !n.expanded.statefulSets[r.metadata.name], n.expanded.statefulSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i = !n.expanded.pods[r.metadata.name], n.expanded.pods[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", m.$emit(s, r);
break;

<<<<<<< HEAD
case "StatefulSet":
i = !n.expanded.statefulSets[r.metadata.name], n.expanded.statefulSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", m.$emit(s, r);
>>>>>>> Updates for Service Instance & Bindings
=======
i = !n.expanded.pods[r.metadata.name], n.expanded.pods[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r);
=======
case "ConfigChange":
n.configChangeTrigger = {
present: !0,
data: e
};
}
}), _.isEmpty(n.builderImageChangeTrigger) && (n.builderImageChangeTrigger = {
present: !1,
data: {
imageChange: {},
type: "ImageChange"
}
}), _.isEmpty(n.configChangeTrigger) && (n.configChangeTrigger = {
present: !1,
data: {
type: "ConfigChange"
}
}), n;
};
e.aceLoaded = function(e) {
var t = e.getSession();
t.setOption("tabSize", 2), t.setOption("useSoftTabs", !0), e.$blockScrolling = 1 / 0;
};
var R = function(e) {
return _.map(p.compactEntries(e), function(e) {
return {
sourcePath: e.name,
destinationDir: e.value
};
});
}, E = function(t) {
var n = {};
switch (t.type) {
case "ImageStreamTag":
n = {
kind: t.type,
name: t.imageStreamTag.imageStream + ":" + t.imageStreamTag.tagObject.tag
}, t.imageStreamTag.namespace !== e.buildConfig.metadata.namespace && (n.namespace = t.imageStreamTag.namespace);
>>>>>>> Configurable inactivity timeout in console
break;

<<<<<<< HEAD
case "StatefulSet":
i = !n.expanded.statefulSets[r.metadata.name], n.expanded.statefulSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r);
>>>>>>> Support EnvFrom in the Env Editors
=======
s = !n.expanded.pods[r.metadata.name], n.expanded.pods[r.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, r);
break;

case "StatefulSet":
s = !n.expanded.statefulSets[r.metadata.name], n.expanded.statefulSets[r.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, r);
>>>>>>> Rework monitoring page - replace list-view-pf with list-pf markup structure and css
=======
s = !n.expanded.pods[a.metadata.name], n.expanded.pods[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
=======
case "DockerImage":
n = {
kind: t.type,
name: t.dockerImage
};
break;

case "ImageStreamImage":
var r = t.imageStreamImage.split("/");
(n = {
kind: t.type,
name: _.last(r)
}).namespace = 1 !== _.size(r) ? _.head(r) : e.buildConfig.metadata.namespace;
}
return n;
}, T = function(e) {
return _.filter(e, function(e) {
return !_.isEmpty(e.data.type) && !_.isEmpty(e.data[_.toLower(e.data.type)]);
});
}, N = function() {
var t = [].concat(e.triggers.imageChangeTriggers, e.triggers.builderImageChangeTrigger, e.triggers.configChangeTrigger);
return t = _.filter(t, function(e) {
return _.has(e, "disabled") && !e.disabled || e.present;
}), t = t.concat(T(e.triggers.webhookTriggers)), t = _.map(t, "data");
}, D = function() {
switch (e.secrets.picked = {
gitSecret: e.buildConfig.spec.source.sourceSecret ? [ e.buildConfig.spec.source.sourceSecret ] : [ {
name: ""
} ],
pullSecret: b(e.buildConfig).pullSecret ? [ b(e.buildConfig).pullSecret ] : [ {
name: ""
} ],
pushSecret: e.buildConfig.spec.output.pushSecret ? [ e.buildConfig.spec.output.pushSecret ] : [ {
name: ""
} ]
}, e.strategyType) {
case "Source":
case "Docker":
e.secrets.picked.sourceSecrets = e.buildConfig.spec.source.secrets || [ {
secret: {
name: ""
},
destinationDir: ""
} ];
break;

case "Custom":
e.secrets.picked.sourceSecrets = b(e.buildConfig).secrets || [ {
secretSource: {
name: ""
},
mountPath: ""
} ];
}
}, A = function(e, t, n) {
t.name ? e[n] = t : delete e[n];
}, $ = function(t, n) {
var r = "Custom" === e.strategyType ? "secretSource" : "secret", a = _.filter(n, function(e) {
return e[r].name;
});
_.isEmpty(a) ? delete t.secrets : t.secrets = a;
}, B = function(e, t) {
return "None" === t.type ? e : (e.none = !1, angular.forEach(t, function(t, n) {
e[n] = !0;
}), e);
};
e.save = function() {
switch (e.disableInputs = !0, g(), b(e.updatedBuildConfig).forcePull = e.options.forcePull, e.strategyType) {
case "Docker":
b(e.updatedBuildConfig).noCache = e.options.noCache;
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
break;

case "StatefulSet":
s = !n.expanded.statefulSets[a.metadata.name], n.expanded.statefulSets[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< HEAD
}
}, n.viewPodsForSet = function(e) {
var t = _.get(n, [ "podsByOwnerUID", e.metadata.uid ], []);
_.isEmpty(t) || u.toPodsForDeployment(e, t);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, m.get(e.project).then(_.spread(function(e, r) {
n.project = e, n.projectContext = r, h.push(o.watch("pods", r, function(e) {
n.podsByName = e.by("metadata.name"), n.pods = P(n.podsByName, !0), n.podsByOwnerUID = d.groupByOwnerUID(n.pods), n.podsLoaded = !0, _.each(n.pods, R), D(), c.log("pods", n.pods);
})), h.push(o.watch({
resource: "statefulsets",
group: "apps",
version: "v1beta1"
}, r, function(e) {
n.statefulSets = e.by("metadata.name"), n.statefulSetsLoaded = !0, N(), c.log("statefulSets", n.statefulSets);
}, {
poll: v,
pollInterval: 6e4
})), h.push(o.watch("replicationcontrollers", r, function(e) {
n.replicationControllers = P(e.by("metadata.name"), !0), n.replicationControllersLoaded = !0, _.each(n.replicationControllers, T), U(), c.log("replicationcontrollers", n.replicationControllers);
})), h.push(o.watch("builds", r, function(e) {
n.builds = P(e.by("metadata.name"), !0), n.latestBuildByConfig = a.latestBuildByConfig(n.builds), n.buildsLoaded = !0, _.each(n.builds, E), x(), c.log("builds", n.builds);
})), h.push(o.watch({
group: "extensions",
resource: "replicasets"
}, r, function(e) {
n.replicaSets = P(e.by("metadata.name"), !0), n.replicaSetsLoaded = !0, F(), c.log("replicasets", n.replicaSets);
}, {
poll: v,
pollInterval: 6e4
})), n.$on("$destroy", function() {
o.unwatchAll(h);
}), n.$watch("filters.hideOlderResources", function() {
D(), x(), U(), F(), N();
=======
}, m.get(e.project).then(_.spread(function(e, a) {
=======
}, p.get(e.project).then(_.spread(function(e, a) {
>>>>>>> Updates for Service Instance & Bindings
=======
}, m.get(e.project).then(_.spread(function(e, a) {
<<<<<<< HEAD
>>>>>>> Support EnvFrom in the Env Editors
n.project = e, n.projectContext = a, o.watch("pods", a, function(e) {
n.podsByName = e.by("metadata.name"), n.pods = C(n.podsByName, !0), n.podsByOwnerUID = d.groupByOwnerUID(n.pods), n.podsLoaded = !0, _.each(n.pods, j), E(), c.log("pods", n.pods);
}), o.watch({
=======
n.project = e, n.projectContext = a, g.push(o.watch("pods", a, function(e) {
=======
}, m.get(e.project).then(_.spread(function(e, r) {
n.project = e, n.projectContext = r, g.push(o.watch("pods", r, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.podsByName = e.by("metadata.name"), n.pods = C(n.podsByName, !0), n.podsByOwnerUID = d.groupByOwnerUID(n.pods), n.podsLoaded = !0, _.each(n.pods, j), T(), c.log("pods", n.pods);
})), g.push(o.watch({
>>>>>>> Allow unlimited websockets on Edge - also fix leaking websockets on monitoring page
resource: "statefulsets",
group: "apps",
version: "v1beta1"
}, r, function(e) {
n.statefulSets = e.by("metadata.name"), n.statefulSetsLoaded = !0, E(), c.log("statefulSets", n.statefulSets);
}, {
poll: f,
pollInterval: 6e4
})), g.push(o.watch("replicationcontrollers", r, function(e) {
n.replicationControllers = C(e.by("metadata.name"), !0), n.replicationControllersLoaded = !0, _.each(n.replicationControllers, I), O(), c.log("replicationcontrollers", n.replicationControllers);
})), g.push(o.watch("builds", r, function(e) {
n.builds = C(e.by("metadata.name"), !0), n.latestBuildByConfig = a.latestBuildByConfig(n.builds), n.buildsLoaded = !0, _.each(n.builds, R), B(), c.log("builds", n.builds);
})), g.push(o.watch({
group: "extensions",
resource: "replicasets"
}, r, function(e) {
n.replicaSets = C(e.by("metadata.name"), !0), n.replicaSetsLoaded = !0, V(), c.log("replicasets", n.replicaSets);
}, {
poll: f,
pollInterval: 6e4
})), n.$on("$destroy", function() {
o.unwatchAll(g);
}), n.$watch("filters.hideOlderResources", function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
E(), B(), U(), O(), T();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
E(), A(), U(), O(), T();
>>>>>>> Improve YAML editor validation and feedback
=======
E(), B(), U(), O(), T();
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
T(), A(), U(), O(), E();
>>>>>>> Add bindings list to resource pages
=======
E(), A(), U(), O(), T();
>>>>>>> Add the ability to add a secret to an application
=======
I(), A(), U(), O(), T();
>>>>>>> Enable new landing page experience by default
=======
T(), A(), U(), O(), I();
>>>>>>> Updates for Service Instance & Bindings
=======
E(), A(), U(), O(), I();
>>>>>>> Support EnvFrom in the Env Editors
=======
T(), B(), O(), F(), E();
>>>>>>> Allow unlimited websockets on Edge - also fix leaking websockets on monitoring page
=======
N(), B(), O(), F(), E();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
T(), B(), O(), F(), E();
>>>>>>> Update template service broker flag name
=======
T(), B(), O(), V(), E();
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
T(), B(), O(), V(), E();
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
T(), B(), O(), V(), E();
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
T(), B(), O(), V(), E();
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
T(), B(), O(), V(), E();
>>>>>>> Update createFromImage controller to use getPreferredVersion
var e = t.search();
e.hideOlderResources = n.filters.hideOlderResources ? "true" : "false", t.replace().search(e);
}), n.$watch("kindSelector.selected.kind", function() {
var e = t.search();
e.kind = n.kindSelector.selected.kind, t.replace().search(e);
}), n.$watch("filters.text", _.debounce(function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
n.filterKeywords = k = s.generateKeywords(n.filters.text), n.$apply(I);
=======
g = !c.expanded.statefulSets[e.metadata.name], c.expanded.statefulSets[e.metadata.name] = g, h = g ? "event.resource.highlight" :"event.resource.clear-highlight", n.$emit(h, e);
}
}
}, c.viewPodsForSet = function(a) {
var b = _.get(c, [ "podsByOwnerUID", a.metadata.uid ], []);
_.isEmpty(b) || k.toPodsForDeployment(a, b);
}, m.get(a.project).then(_.spread(function(a, d) {
c.project = a, c.projectContext = d, f.watch("pods", d, function(a) {
c.podsByName = a.by("metadata.name"), c.pods = u(c.podsByName, !0), c.podsByOwnerUID = l.groupByOwnerUID(c.pods), c.podsLoaded = !0, _.each(c.pods, y), C(), i.log("pods", c.pods);
}), f.watch({
resource:"statefulsets",
group:"apps",
version:"v1beta1"
}, d, function(a) {
c.statefulSets = a.by("metadata.name"), c.statefulSetsLoaded = !0, B(), i.log("statefulSets", c.statefulSets);
}), f.watch("replicationcontrollers", d, function(a) {
c.replicationControllers = u(a.by("metadata.name"), !0), c.replicationControllersLoaded = !0, _.each(c.replicationControllers, z), J(), i.log("replicationcontrollers", c.replicationControllers);
}), f.watch("builds", d, function(a) {
c.builds = u(a.by("metadata.name"), !0), c.latestBuildByConfig = e.latestBuildByConfig(c.builds), c.buildsLoaded = !0, _.each(c.builds, A), G(), i.log("builds", c.builds);
}), f.watch({
group:"extensions",
resource:"replicasets"
}, d, function(a) {
c.replicaSets = u(a.by("metadata.name"), !0), c.replicaSetsLoaded = !0, K(), i.log("replicasets", c.replicaSets);
}), c.$on("$destroy", function() {
f.unwatchAll(o);
}), c.$watch("filters.hideOlderResources", function() {
C(), G(), J(), K(), B();
var a = b.search();
a.hideOlderResources = c.filters.hideOlderResources ? "true" :"false", b.replace().search(a);
}), c.$watch("kindSelector.selected.kind", function() {
var a = b.search();
a.kind = c.kindSelector.selected.kind, b.replace().search(a);
}), c.$watch("filters.text", _.debounce(function() {
c.filterKeywords = w = h.generateKeywords(c.filters.text), c.$apply(x);
>>>>>>> Improve monitoring page collapsed rows
=======
n.filterKeywords = w = s.generateKeywords(n.filters.text), n.$apply(k);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.filterKeywords = k = s.generateKeywords(n.filters.text), n.$apply(j);
>>>>>>> Allow unlimited websockets on Edge - also fix leaking websockets on monitoring page
=======
n.filterKeywords = k = s.generateKeywords(n.filters.text), n.$apply(P);
>>>>>>> Service instance details configuration and edit
=======
n.filterKeywords = k = s.generateKeywords(n.filters.text), n.$apply(j);
>>>>>>> Add product icons for service catalog
=======
n.filterKeywords = k = s.generateKeywords(n.filters.text), n.$apply(P);
>>>>>>> Handle displaying parameters when secrets are not available.
=======
n.filterKeywords = k = s.generateKeywords(n.filters.text), n.$apply(j);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
n.filterKeywords = k = s.generateKeywords(n.filters.text), n.$apply(P);
>>>>>>> Update template service broker flag name
=======
n.filterKeywords = P = s.generateKeywords(n.filters.text), n.$apply(k);
>>>>>>> Fix for adding non-builder templates to a project
=======
n.filterKeywords = k = s.generateKeywords(n.filters.text), n.$apply(P);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
n.filterKeywords = P = s.generateKeywords(n.filters.text), n.$apply(k);
>>>>>>> Update pod controller to use getPreferredVersion
}, 50, {
maxWait: 250
})), n.$watch("renderOptions.collapseEventsSidebar", function(e, t) {
e !== t && (localStorage.setItem("monitoring.eventsidebar.collapsed", n.renderOptions.collapseEventsSidebar ? "true" : "false"), p.$emit("metrics.charts.resize"));
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("MembershipController", [ "$filter", "$location", "$routeParams", "$scope", "$timeout", "$uibModal", "APIService", "AuthService", "AuthorizationService", "DataService", "ProjectsService", "MembershipService", "NotificationsService", "RoleBindingsService", "RolesService", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v) {
var h, y = n.project, b = e("humanizeKind"), S = e("annotation"), C = e("canI"), w = i.getPreferredVersion("serviceaccounts");
r.roleBindingsVersion = i.getPreferredVersion("rolebindings");
var P = [], j = {
notice: {
yourLastRole: _.template(v.getString(f('Removing the role "<%= roleName %>" may completely remove your ability to see this project.')))
},
warning: {
serviceAccount: _.template(v.getString(f("Removing a system role granted to a service account may cause unexpected behavior.")))
=======
} ]), angular.module("openshiftConsole").controller("MembershipController", [ "$filter", "$location", "$routeParams", "$scope", "$timeout", "$uibModal", "AuthService", "AuthorizationService", "DataService", "ProjectsService", "MembershipService", "NotificationsService", "RoleBindingsService", "RolesService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
<<<<<<< HEAD
<<<<<<< HEAD
=======
} ]), angular.module("openshiftConsole").controller("MembershipController", [ "$filter", "$location", "$routeParams", "$scope", "$timeout", "$uibModal", "AuthService", "AuthorizationService", "DataService", "ProjectsService", "MembershipService", "NotificationsService", "RoleBindingsService", "RolesService", function(e, t, n, a, r, o, i, s, c, l, u, d, p, m) {
>>>>>>> Updates for Service Instance & Bindings
=======
} ]), angular.module("openshiftConsole").controller("MembershipController", [ "$filter", "$location", "$routeParams", "$scope", "$timeout", "$uibModal", "AuthService", "AuthorizationService", "DataService", "ProjectsService", "MembershipService", "NotificationsService", "RoleBindingsService", "RolesService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Support EnvFrom in the Env Editors
var f, g = n.project, h = e("humanizeKind"), v = e("annotation"), y = e("canI"), b = [], C = {
=======
var f, g = n.project, v = e("humanizeKind"), h = e("annotation"), y = e("canI"), b = [], C = {
>>>>>>> Add SVG icons
=======
var f, g = n.project, v = e("humanizeKind"), h = e("annotation"), y = e("canI"), b = [], S = {
>>>>>>> Service instance details configuration and edit
=======
var f, g = n.project, v = e("humanizeKind"), h = e("annotation"), y = e("canI"), b = [], C = {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
=======
} ]), angular.module("openshiftConsole").controller("MembershipController", [ "$filter", "$location", "$routeParams", "$scope", "$timeout", "$uibModal", "AuthService", "AuthorizationService", "DataService", "ProjectsService", "MembershipService", "NotificationsService", "RoleBindingsService", "RolesService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var f, g = n.project, v = e("humanizeKind"), h = e("annotation"), y = e("canI"), b = [], S = {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var f, g = n.project, v = e("humanizeKind"), h = e("annotation"), y = e("canI"), b = [], S = {
>>>>>>> Adding label filter to ste secrets page
notice: {
yourLastRole: _.template('Removing the role "<%= roleName %>" may completely remove your ability to see this project.')
},
warning: {
serviceAccount: _.template("Removing a system role granted to a service account may cause unexpected behavior.")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
remove: {
areYouSure: {
html: {
<<<<<<< HEAD
subject: _.template(v.getString(f("Are you sure you want to remove <strong><%- roleName %></strong> from the <%- kindName %> <strong><%- subjectName %></strong>?"))),
self: _.template(v.getString(f("Are you sure you want to remove <strong><%- roleName %></strong> from <strong><%- subjectName %></strong> (you)?")))
=======
subject: _.template("Are you sure you want to remove <strong><%- roleName %></strong> from the <%- kindName %> <strong><%- subjectName %></strong>?"),
self: _.template("Are you sure you want to remove <strong><%- roleName %></strong> from <strong><%- subjectName %></strong> (you)?")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
<<<<<<< HEAD
},
success: _.template('The role "<%= roleName %>" was removed from "<%= subjectName %>".'),
error: _.template('The role "<%= roleName %>" was not removed from "<%= subjectName %>".')
},
update: {
subject: {
success: _.template('The role "<%= roleName %>" was granted to "<%= subjectName %>".'),
error: _.template('The role "<%= roleName %>" could not be granted to "<%= subjectName %>".'),
exists: _.template('The role "<%= roleName %>" has already been granted to "<%= subjectName %>".')
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = T(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = E(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete S(e.updatedBuildConfig).from : S(e.updatedBuildConfig).from = E(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = E(e.imageOptions.to), S(e.updatedBuildConfig).env = f.compactEntries(e.envVars), A(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), A(S(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), A(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
case "Source":
case "Docker":
$(e.updatedBuildConfig.spec.source, e.secrets.picked.sourceSecrets);
break;

case "Custom":
$(S(e.updatedBuildConfig), e.secrets.picked.sourceSecrets);
>>>>>>> Configurable inactivity timeout in console
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
},
errorReason: _.template('Reason: "<%= httpErr %>"')
}, C = function(e, t, n) {
d.addNotification({
type: e,
message: t,
details: n
=======
e.updatedBuildConfig.spec.triggers = N(), I(), c.update(h, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
u.addNotification({
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = R(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = T(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete b(e.updatedBuildConfig).from : b(e.updatedBuildConfig).from = T(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = T(e.imageOptions.to), b(e.updatedBuildConfig).env = p.compactEntries(e.envVars), D(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), D(b(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), D(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = R(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = E(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete b(e.updatedBuildConfig).from : b(e.updatedBuildConfig).from = E(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = E(e.imageOptions.to), b(e.updatedBuildConfig).env = p.compactEntries(e.envVars), D(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), D(b(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), D(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = R(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = T(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete b(e.updatedBuildConfig).from : b(e.updatedBuildConfig).from = T(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = T(e.imageOptions.to), b(e.updatedBuildConfig).env = p.compactEntries(e.envVars), D(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), D(b(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), D(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = R(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = E(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete b(e.updatedBuildConfig).from : b(e.updatedBuildConfig).from = E(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = E(e.imageOptions.to), b(e.updatedBuildConfig).env = p.compactEntries(e.envVars), A(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), A(b(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), A(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
case "Source":
case "Docker":
$(e.updatedBuildConfig.spec.source, e.secrets.picked.sourceSecrets);
break;

case "Custom":
$(b(e.updatedBuildConfig), e.secrets.picked.sourceSecrets);
}
e.updatedBuildConfig.spec.triggers = N(), k(), s.update(v, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
l.addNotification({
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
type: "success",
message: "Build config " + e.updatedBuildConfig.metadata.name + " was successfully updated."
}), j();
}, function(n) {
e.disableInputs = !1, l.addNotification({
id: "edit-build-config-error",
type: "error",
message: "An error occurred updating build config " + e.updatedBuildConfig.metadata.name + ".",
details: t("getErrorDetails")(n)
});
>>>>>>> Add Browse Catalog to Project context view.
});
<<<<<<< HEAD
}, w = function() {
r.disableAddForm = !1, r.newBinding.name = "", r.newBinding.namespace = g, r.newBinding.newRole = null;
}, P = function(e) {
c.list("serviceaccounts", e).then(function(e) {
var t = _.keys(e.by("metadata.name")).sort();
angular.extend(r, {
serviceAccounts: t,
refreshServiceAccounts: function(e) {
<<<<<<< HEAD
e && !_.includes(a.serviceAccounts, e) ? a.serviceAccounts = [ e ].concat(t) : a.serviceAccounts = t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}, k = function(e, t, n) {
m.addNotification({
type: e,
message: t,
details: n
=======
}, e.$on("$destroy", function() {
s.unwatchAll(y);
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
});
<<<<<<< HEAD
}, I = function() {
r.disableAddForm = !1, r.newBinding.name = "", r.newBinding.namespace = y, r.newBinding.newRole = null;
}, R = function(e) {
l.list(w, e).then(function(e) {
var t = _.keys(e.by("metadata.name")).sort();
angular.extend(r, {
serviceAccounts: t,
refreshServiceAccounts: function(e) {
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e && !_.includes(r.serviceAccounts, e) ? r.serviceAccounts = [ e ].concat(t) : r.serviceAccounts = t;
}
});
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, T = function(e) {
l.list(r.roleBindingsVersion, h, null, {
errorNotification: !1
}).then(function(e) {
angular.extend(r, {
canShowRoles: !0,
roleBindings: e.by("metadata.name"),
subjectKindsForUI: d.mapRolebindingsForUI(e.by("metadata.name"), P)
}), I();
}, function() {
e && (r.roleBindings[e.metadata.name] = e, r.subjectKindsForUI = d.mapRolebindingsForUI(r.roleBindings, P)), I();
});
}, E = function(t, n) {
r.disableAddForm = !0, p.create(t, n, y, h).then(function() {
T(), k("success", j.update.subject.success({
roleName: t.metadata.name,
subjectName: n.name
}));
}, function(r) {
I(), T(), k("error", j.update.subject.error({
roleName: t.metadata.name,
subjectName: n.name
}), e("getErrorDetails")(r));
});
}, N = function(t, n, a) {
r.disableAddForm = !0, p.addSubject(t, n, a, h).then(function() {
T(), k("success", j.update.subject.success({
roleName: t.roleRef.name,
subjectName: n.name
}));
<<<<<<< HEAD
}, function(r) {
I(), T(), k("error", j.update.subject.error({
roleName: t.roleRef.name,
subjectName: n.name
}), e("getErrorDetails")(r));
});
}, D = {};
n.tab && (D[n.tab] = !0);
var A = d.getSubjectKinds();
angular.extend(r, {
selectedTab: D,
projectName: y,
forms: {},
subjectKinds: A,
=======
});
}, j = function(e) {
=======
}, P = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, j = function(e) {
>>>>>>> Add product icons for service catalog
=======
}, P = function(e) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, j = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, P = function(e) {
>>>>>>> Update template service broker flag name
=======
}, k = function(e) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}, P = function(e) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}, k = function(e) {
>>>>>>> Update pod controller to use getPreferredVersion
c.list("rolebindings", f, null, {
=======
} ]), angular.module("openshiftConsole").controller("EditDeploymentConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$uibModal", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "EnvironmentService", "Navigate", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g) {
e.projectName = r.project, e.deploymentConfig = null, e.alerts = {}, e.view = {
advancedStrategyOptions: !1,
advancedImageOptions: !1
}, e.triggers = {}, e.breadcrumbs = c.getBreadcrumbs({
name: r.name,
kind: r.kind,
namespace: r.project,
subpage: "Edit Deployment Config"
}), e.deploymentConfigStrategyTypes = [ "Recreate", "Rolling", "Custom" ];
var v = t("orderByDisplayName"), h = t("getErrorDetails"), y = function(t, n) {
e.alerts["from-value-objects"] = {
type: "error",
message: t,
details: n
};
}, b = i.getPreferredVersion("deploymentconfigs"), S = i.getPreferredVersion("configmaps"), C = i.getPreferredVersion("secrets"), w = [], P = [], j = [];
e.valueFromObjects = [];
var k = function(e) {
switch (e) {
case "Recreate":
return "recreateParams";

case "Rolling":
return "rollingParams";

case "Custom":
return "customParams";

default:
return void Logger.error("Unknown deployment strategy type: " + e);
}
};
p.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, s.canI("deploymentconfigs", "update", r.project) ? l.get(b, r.deploymentconfig, a, {
>>>>>>> Add Browse Catalog to Project context view.
errorNotification: !1
}).then(function(e) {
angular.extend(r, {
canShowRoles: !0,
roleBindings: e.by("metadata.name"),
subjectKindsForUI: u.mapRolebindingsForUI(e.by("metadata.name"), b)
}), w();
}, function() {
e && (r.roleBindings[e.metadata.name] = e, r.subjectKindsForUI = u.mapRolebindingsForUI(r.roleBindings, b)), w();
});
}, j = function(t, n) {
r.disableAddForm = !0, m.create(t, n, g, f).then(function() {
k(), C("success", S.update.subject.success({
roleName: t.metadata.name,
subjectName: n.name
}));
}, function(r) {
w(), k(), C("error", S.update.subject.error({
roleName: t.metadata.name,
subjectName: n.name
}), S.errorReason({
httpErr: e("getErrorDetails")(r)
}));
});
}, I = function(t, n, a) {
r.disableAddForm = !0, m.addSubject(t, n, a, f).then(function() {
k(), C("success", S.update.subject.success({
roleName: t.roleRef.name,
subjectName: n.name
}));
}, function(r) {
w(), k(), C("error", S.update.subject.error({
roleName: t.roleRef.name,
subjectName: n.name
}), S.errorReason({
httpErr: e("getErrorDetails")(r)
}));
});
}, R = {};
n.tab && (R[n.tab] = !0);
var E = u.getSubjectKinds();
angular.extend(r, {
selectedTab: R,
projectName: g,
forms: {},
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
subjectKinds: E,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
subjectKinds: T,
>>>>>>> Add bindings list to resource pages
=======
subjectKinds: E,
>>>>>>> Add the ability to add a secret to an application
=======
subjectKinds: I,
>>>>>>> Enable new landing page experience by default
=======
subjectKinds: T,
>>>>>>> Updates for Service Instance & Bindings
=======
subjectKinds: E,
>>>>>>> Support EnvFrom in the Env Editors
newBinding: {
role: "",
kind: n.tab || "User",
name: ""
},
toggleEditMode: function() {
<<<<<<< HEAD
<<<<<<< HEAD
I(), r.mode.edit = !r.mode.edit;
=======
w(), a.mode.edit = !a.mode.edit;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
w(), r.mode.edit = !r.mode.edit;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
mode: {
edit: !1
},
selectTab: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
r.newBinding.kind = e, r.newBinding.name = "";
}
}), angular.extend(r, {
=======
a.newBinding.kind = e, a.newBinding.name = "";
}
}), angular.extend(a, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r.newBinding.kind = e, r.newBinding.name = "";
}
}), angular.extend(r, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
excludeExistingRoles: function(e) {
return function(t) {
return !_.some(e, {
kind: t.kind,
metadata: {
name: t.metadata.name
}
});
};
},
roleHelp: function(e) {
if (e) {
<<<<<<< HEAD
<<<<<<< HEAD
var t = _.get(e, "metadata.namespace"), n = _.get(e, "metadata.name"), r = t ? t + " / " + n + ": " : "";
return e ? r + (S(e, "description") || "") : "";
}
}
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var $ = function(e, t, n, a) {
=======
var N = function(e, t, n, r) {
>>>>>>> Add notification-drawer to show curated list of events to user
=======
var I = function(e, t, n, r) {
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
var I = function(e, t, n, r) {
>>>>>>> Adjust events to show in the drawer
var o = {
title: "Confirm Removal",
alerts: {},
detailsMarkup: j.remove.areYouSure.html.subject({
roleName: n,
kindName: v.getString(b(t)),
subjectName: e
}),
okButtonText: v.getString(f("Remove")),
okButtonClass: "btn-danger",
cancelButtonText: v.getString(f("Cancel"))
};
<<<<<<< HEAD
return _.isEqual(e, a) && (o.detailsMarkup = j.remove.areYouSure.html.self({
roleName: n,
subjectName: e
}), d.isLastRole(r.user.metadata.name, r.roleBindings) && (o.alerts.currentUserLabelRole = {
type: "error",
message: j.notice.yourLastRole({
=======
var t = _.get(e, "metadata.namespace"), n = _.get(e, "metadata.name"), a = t ? t + " / " + n + ": " : "";
return e ? a + (h(e, "description") || "") : "";
=======
var t = _.get(e, "metadata.namespace"), n = _.get(e, "metadata.name"), r = t ? t + " / " + n + ": " : "";
return e ? r + (h(e, "description") || "") : "";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}
=======
_.set(r, [ t.name, "triggerData" ], o);
}), r;
}(e.updatedDeploymentConfig.spec.template.spec.containers, e.updatedDeploymentConfig.spec.triggers), e.secrets = {
pullSecrets: angular.copy(e.deploymentConfig.spec.template.spec.imagePullSecrets) || [ {
name: ""
} ]
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = k(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
type: "ConfigChange"
}), "Custom" !== e.strategyData.type || _.has(e.strategyData, "customParams.environment") || (e.strategyData.customParams.environment = []), l.list(S, a, null, {
errorNotification: !1
}).then(function(t) {
P = v(t.by("metadata.name")), e.availableConfigMaps = P, e.valueFromObjects = P.concat(j);
}, function(e) {
403 !== e.status && y("Could not load config maps", h(e));
}), l.list(C, a, null, {
errorNotification: !1
}).then(function(t) {
j = v(t.by("metadata.name")), e.availableSecrets = j, e.valueFromObjects = P.concat(j);
var n = f.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.secretsByType = _.each(r, function(e) {
e.unshift("");
>>>>>>> Add Browse Catalog to Project context view.
});
var T = function(e, t, n, a) {
var o = {
alerts: {},
detailsMarkup: S.remove.areYouSure.html.subject({
roleName: n,
kindName: v(t),
subjectName: e
}),
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
return _.isEqual(e, a) && (o.detailsMarkup = S.remove.areYouSure.html.self({
roleName: n,
subjectName: e
}), u.isLastRole(r.user.metadata.name, r.roleBindings) && (o.alerts.currentUserLabelRole = {
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: C.notice.yourLastRole({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: S.notice.yourLastRole({
>>>>>>> Service instance details configuration and edit
=======
message: C.notice.yourLastRole({
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
message: S.notice.yourLastRole({
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
message: S.notice.yourLastRole({
>>>>>>> Adding label filter to ste secrets page
roleName: n
})
})), _.isEqual(t, "ServiceAccount") && _.startsWith(n, "system:") && (o.alerts.editingServiceAccountRole = {
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: j.warning.serviceAccount()
}), o;
};
<<<<<<< HEAD
s.withUser().then(function(e) {
r.user = e;
}), u.list().then(function(e) {
var t = _.keys(e.by("metadata.name")).sort();
angular.extend(r, {
projects: t,
selectProject: function(e) {
r.newBinding.name = "", R({
=======
message: C.warning.serviceAccount()
=======
message: S.warning.serviceAccount()
>>>>>>> Service instance details configuration and edit
=======
message: C.warning.serviceAccount()
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
message: S.warning.serviceAccount()
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
message: S.warning.serviceAccount()
>>>>>>> Adding label filter to ste secrets page
}), o;
};
i.withUser().then(function(e) {
r.user = e;
}), l.list().then(function(e) {
var t = _.keys(e.by("metadata.name")).sort();
angular.extend(r, {
projects: t,
selectProject: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
a.newBinding.name = "", k({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.newBinding.name = "", P({
>>>>>>> Fix for adding non-builder templates to a project
=======
a.newBinding.name = "", k({
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
a.newBinding.name = "", P({
>>>>>>> Update pod controller to use getPreferredVersion
=======
r.newBinding.name = "", P({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
namespace: e
});
},
refreshProjects: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
e && !_.includes(r.projects, e) ? r.projects = [ e ].concat(t) : r.projects = t;
}
});
}), u.get(n.project).then(_.spread(function(n, a) {
h = a, T(), R(h), angular.extend(r, {
project: n,
subjectKinds: A,
canUpdateRolebindings: C("rolebindings", "update", y),
confirmRemove: function(n, a, i, s) {
var l = null, u = $(n, a, i, r.user.metadata.name);
_.isEqual(n, r.user.metadata.name) && d.isLastRole(r.user.metadata.name, r.roleBindings) && (l = !0), o.open({
=======
e && !_.includes(a.projects, e) ? a.projects = [ e ].concat(t) : a.projects = t;
=======
e && !_.includes(r.projects, e) ? r.projects = [ e ].concat(t) : r.projects = t;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
});
}), l.get(n.project).then(_.spread(function(n, a) {
f = a, k(), P(f), angular.extend(r, {
project: n,
subjectKinds: E,
canUpdateRolebindings: y("rolebindings", "update", g),
<<<<<<< HEAD
confirmRemove: function(n, r, i) {
var c = null, l = T(n, r, i, a.user.metadata.name);
_.isEqual(n, a.user.metadata.name) && u.isLastRole(a.user.metadata.name, a.roleBindings) && (c = !0), o.open({
=======
confirmRemove: function(n, a, i, c) {
var l = null, d = T(n, a, i, r.user.metadata.name);
_.isEqual(n, r.user.metadata.name) && u.isLastRole(r.user.metadata.name, r.roleBindings) && (l = !0), o.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}) : d.toErrorPage("You do not have authority to update deployment config " + r.deploymentconfig + ".", "access_denied");
}));
var I = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, R = function(t) {
_.has(e.strategyData, t) || a.open({
>>>>>>> Update modals to align with PatternFly standard
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
<<<<<<< HEAD
<<<<<<< HEAD
return u;
=======
return {
alerts: e.alerts,
title: "Keep some existing " + e.originalStrategy.toLowerCase() + " strategy parameters?",
details: "The timeout parameter and any pre or post lifecycle hooks will be copied from " + e.originalStrategy.toLowerCase() + " strategy to " + e.strategyData.type.toLowerCase() + " strategy. After saving the changes, " + e.originalStrategy.toLowerCase() + " strategy parameters will be removed.",
okButtonText: "Yes",
okButtonClass: "btn-primary",
cancelButtonText: "No"
};
>>>>>>> Update modals to align with PatternFly standard
}
}
}).result.then(function() {
<<<<<<< HEAD
<<<<<<< HEAD
p.removeSubject(n, i, s, r.roleBindings, h).then(function(e) {
l ? t.url("catalog") : (c.getProjectRules(y, !0).then(function() {
T(e[0]);
var t = C("rolebindings", "update", y);
angular.extend(r, {
canUpdateRolebindings: t,
mode: {
edit: !!r.mode.edit && t
=======
e.strategyData[t] = angular.copy(e.strategyData[k(e.originalStrategy)]);
}, function() {
e.strategyData[t] = {};
});
};
e.strategyChanged = function() {
var t = k(e.strategyData.type);
I() ? R(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
image: "",
command: [],
environment: []
}), e.strategyParamsPropertyName = t;
};
var E = function(e, t, n, r) {
var a = {
kind: "ImageStreamTag",
namespace: t.namespace,
name: t.imageStream + ":" + t.tagObject.tag
};
return n ? (n.imageChangeParams.from = a, n.imageChangeParams.automatic = r) : n = {
type: "ImageChange",
imageChangeParams: {
automatic: r,
containerNames: [ e ],
from: a
>>>>>>> Add Browse Catalog to Project context view.
}
<<<<<<< HEAD
=======
}, n;
}, T = function() {
var t = _.reject(e.updatedDeploymentConfig.spec.triggers, function(e) {
return "ImageChange" === e.type || "ConfigChange" === e.type;
>>>>>>> Configurable inactivity timeout in console
});
<<<<<<< HEAD
}), k("success", j.remove.success({
=======
return l;
}
}
}).result.then(function() {
<<<<<<< HEAD
m.removeSubject(n, i, a.roleBindings, f).then(function(e) {
c ? t.url("./") : (s.getProjectRules(g, !0).then(function() {
P(e[0]);
=======
m.removeSubject(n, i, c, a.roleBindings, f).then(function(e) {
=======
m.removeSubject(n, i, c, r.roleBindings, f).then(function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
l ? t.url("./") : (s.getProjectRules(g, !0).then(function() {
<<<<<<< HEAD
<<<<<<< HEAD
k(e[0]);
>>>>>>> Fix for adding non-builder templates to a project
=======
P(e[0]);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
k(e[0]);
>>>>>>> Update pod controller to use getPreferredVersion
var t = y("rolebindings", "update", g);
angular.extend(r, {
canUpdateRolebindings: t,
mode: {
edit: !!r.mode.edit && t
=======
return _.each(e.containerConfigByName, function(n, r) {
n.hasDeploymentTrigger ? t.push(E(r, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: r
}).image = n.image;
}), e.triggers.hasConfigTrigger && t.push({
type: "ConfigChange"
}), t;
}, N = function() {
m.hideNotification("edit-deployment-config-error");
};
e.save = function() {
if (e.disableInputs = !0, _.each(e.containerConfigByName, function(t, n) {
_.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: n
}).env = g.compactEntries(t.env);
}), I() && delete e.strategyData[k(e.originalStrategy)], "Rolling" === e.strategyData.type) {
var r = e.strategyData[e.strategyParamsPropertyName].maxSurge, a = Number(r);
"" === r ? e.strategyData[e.strategyParamsPropertyName].maxSurge = null : _.isFinite(a) && (e.strategyData[e.strategyParamsPropertyName].maxSurge = a);
var o = e.strategyData[e.strategyParamsPropertyName].maxUnavailable, i = Number(o);
"" === o ? e.strategyData[e.strategyParamsPropertyName].maxUnavailable = null : _.isFinite(i) && (e.strategyData[e.strategyParamsPropertyName].maxUnavailable = i);
<<<<<<< HEAD
>>>>>>> Add Browse Catalog to Project context view.
}
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), S("success", C.remove.success({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), C("success", S.remove.success({
>>>>>>> Service instance details configuration and edit
=======
}), S("success", C.remove.success({
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), C("success", S.remove.success({
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}), C("success", S.remove.success({
>>>>>>> Adding label filter to ste secrets page
roleName: i,
subjectName: n
})));
}, function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
k("error", j.remove.error({
roleName: i,
subjectName: n
}), e("getErrorDetails")(t));
=======
}
"Custom" !== e.strategyData.type && _.each([ "pre", "mid", "post" ], function(t) {
_.has(e.strategyData, [ e.strategyParamsPropertyName, t, "execNewPod", "env" ]) && (e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env = g.compactEntries(e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env));
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = g.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = T(), N(), l.update(b, e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
m.addNotification({
type: "success",
message: "Deployment config " + e.updatedDeploymentConfig.metadata.name + " was successfully updated."
});
var t = d.resourceURL(e.updatedDeploymentConfig);
n.url(t);
}, function(n) {
e.disableInputs = !1, m.addNotification({
id: "edit-deployment-config-error",
type: "error",
message: "An error occurred updating deployment config " + e.updatedDeploymentConfig.metadata.name + ".",
details: t("getErrorDetails")(n)
>>>>>>> Configurable inactivity timeout in console
});
});
},
addRoleTo: function(e, t, n, a) {
=======
S("error", C.remove.error({
=======
C("error", S.remove.error({
>>>>>>> Service instance details configuration and edit
=======
S("error", C.remove.error({
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
C("error", S.remove.error({
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
C("error", S.remove.error({
>>>>>>> Adding label filter to ste secrets page
roleName: i,
subjectName: n
}), S.errorReason({
httpErr: e("getErrorDetails")(t)
}));
});
});
},
<<<<<<< HEAD
addRoleTo: function(e, t, n, r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
addRoleTo: function(e, t, n, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = {
name: e,
kind: t
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
"ServiceAccount" === t && (o.namespace = a);
var i = _.find(r.roleBindings, {
=======
"ServiceAccount" === t && (o.namespace = r);
var i = _.find(a.roleBindings, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
"ServiceAccount" === t && (o.namespace = a);
var i = _.find(r.roleBindings, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
roleRef: {
name: n.metadata.name
}
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
i && _.some(i.subjects, o) ? k("error", j.update.subject.exists({
roleName: n.metadata.name,
subjectName: e
<<<<<<< HEAD
})) : i ? N(i, o, a) : E(n, o);
}
}), g.listAllRoles(h, {
errorNotification: !1
}).then(function(e) {
P = d.mapRolesForUI(_.head(e).by("metadata.name"), _.last(e).by("metadata.name"));
var t = d.sortRoles(P), n = d.filterRoles(P), a = function(e, t) {
=======
i && _.some(i.subjects, o) ? S("error", C.update.subject.exists({
=======
i && _.some(i.subjects, o) ? C("error", S.update.subject.exists({
>>>>>>> Service instance details configuration and edit
=======
i && _.some(i.subjects, o) ? S("error", C.update.subject.exists({
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
i && _.some(i.subjects, o) ? C("error", S.update.subject.exists({
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
i && _.some(i.subjects, o) ? C("error", S.update.subject.exists({
>>>>>>> Adding label filter to ste secrets page
roleName: n.metadata.name,
subjectName: e
<<<<<<< HEAD
})) : i ? R(i, o, r) : j(n, o);
=======
})) : i ? I(i, o, r) : j(n, o);
>>>>>>> Add search catalog in project context
=======
})) : i ? I(i, o, a) : j(n, o);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}), p.listAllRoles(f, {
errorNotification: !1
}).then(function(e) {
b = u.mapRolesForUI(_.head(e).by("metadata.name"), _.last(e).by("metadata.name"));
<<<<<<< HEAD
var t = u.sortRoles(b), n = u.filterRoles(b), r = function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var t = u.sortRoles(b), n = u.filterRoles(b), a = function(e, t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return _.some(t, {
metadata: {
<<<<<<< HEAD
name: e
=======
name: e.autoscaling.name,
labels: p.mapEntries(p.compactEntries(e.labels))
},
spec: {
scaleTargetRef: {
kind: n.kind,
name: n.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: e.autoscaling.minReplicas,
maxReplicas: e.autoscaling.maxReplicas,
targetCPUUtilizationPercentage: e.autoscaling.targetCPU
>>>>>>> Use new clusterResourceOverridesEnabled flag
}
});
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
T(), angular.extend(r, {
=======
j(), angular.extend(a, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
P(), angular.extend(a, {
>>>>>>> Service instance details configuration and edit
=======
j(), angular.extend(a, {
>>>>>>> Add product icons for service catalog
=======
P(), angular.extend(a, {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
j(), angular.extend(a, {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
P(), angular.extend(a, {
>>>>>>> Update template service broker flag name
=======
k(), angular.extend(a, {
>>>>>>> Fix for adding non-builder templates to a project
=======
P(), angular.extend(a, {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
k(), angular.extend(a, {
>>>>>>> Update pod controller to use getPreferredVersion
=======
k(), angular.extend(r, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
toggle: {
roles: !1
},
filteredRoles: n,
<<<<<<< HEAD
<<<<<<< HEAD
toggleRoles: function() {
r.toggle.roles = !r.toggle.roles, r.toggle.roles ? r.filteredRoles = t : (r.filteredRoles = n, a(r.newBinding.role, n) || (r.newBinding.role = null));
=======
showAllRoles: function() {
=======
toggleRoles: function() {
<<<<<<< HEAD
>>>>>>> Fix issue 2272: Show hidden roles checkbox isnt functioning properly
a.toggle.roles = !a.toggle.roles, a.toggle.roles ? a.filteredRoles = t : (a.filteredRoles = n, r(a.newBinding.role, n) || (a.newBinding.role = null));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r.toggle.roles = !r.toggle.roles, r.toggle.roles ? r.filteredRoles = t : (r.filteredRoles = n, a(r.newBinding.role, n) || (r.newBinding.role = null));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
});
});
<<<<<<< HEAD
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("BuildsController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "BuildsService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
r.projectName = n.project, r.builds = {}, r.unfilteredBuildConfigs = {}, r.buildConfigs = void 0, r.labelSuggestions = {}, r.latestByConfig = {}, r.clearFilter = function() {
s.clear();
};
var u = e("buildConfigForBuild"), d = a.getPreferredVersion("builds"), m = a.getPreferredVersion("buildconfigs"), p = [];
l.get(n.project).then(_.spread(function(t, n) {
function a(e) {
var t = s.getLabelSelector();
if (t.isEmpty()) return !0;
var n = u(e) || "";
return n && r.unfilteredBuildConfigs[n] ? !!r.buildConfigs[n] : t.matches(e);
}
function l(e) {
if (u(e)) return !1;
var t = s.getLabelSelector();
return !!t.isEmpty() || t.matches(e);
}
<<<<<<< HEAD
function g() {
r.latestByConfig = o.latestBuildByConfig(r.builds, a), r.buildsNoConfig = _.pickBy(r.builds, l), angular.forEach(r.buildConfigs, function(e, t) {
r.latestByConfig[t] = r.latestByConfig[t] || null;
=======
}, f = function(t) {
=======
e.$on("$destroy", h);
var y = a.getPreferredVersion("horizontalpodautoscalers"), b = a.getPreferredVersion("limitranges");
m.get(n.project).then(_.spread(function(t, r) {
e.project = t;
var l = "HorizontalPodAutoscaler" === n.kind ? "update" : "create";
if (o.canI({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, l, n.project)) {
var m = function(t) {
>>>>>>> Bug 1540916: Set correct group in HPA scale target
e.disableInputs = !0, (t = angular.copy(t)).metadata.labels = p.mapEntries(p.compactEntries(e.labels)), t.spec.minReplicas = e.autoscaling.minReplicas, t.spec.maxReplicas = e.autoscaling.maxReplicas, t.spec.targetCPUUtilizationPercentage = e.autoscaling.targetCPU, s.update(y, t.metadata.name, t, r).then(function(e) {
d.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully updated."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: g(t)
>>>>>>> Use new clusterResourceOverridesEnabled flag
});
}
function f() {
var e = _.omitBy(r.latestByConfig, _.isNull);
r.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(r.buildConfigs) && _.isEmpty(e);
}
r.project = t;
var v = e("isJenkinsPipelineStrategy");
p.push(i.watch(d, n, function(e) {
r.buildsLoaded = !0, r.builds = _.omitBy(e.by("metadata.name"), v), g(), s.addLabelSuggestionsFromResources(r.builds, r.labelSuggestions), c.log("builds (subscribe)", r.builds);
})), p.push(i.watch(m, n, function(e) {
r.unfilteredBuildConfigs = _.omitBy(e.by("metadata.name"), v), s.addLabelSuggestionsFromResources(r.unfilteredBuildConfigs, r.labelSuggestions), s.setLabelSuggestions(r.labelSuggestions), r.buildConfigs = s.getLabelSelector().select(r.unfilteredBuildConfigs), g(), f(), c.log("buildconfigs (subscribe)", r.buildConfigs);
})), s.onActiveFiltersChanged(function(e) {
r.$evalAsync(function() {
r.buildConfigs = e.select(r.unfilteredBuildConfigs), g(), f();
});
<<<<<<< HEAD
}), r.$on("$destroy", function() {
i.unwatchAll(p);
=======
function l(a) {
var b = j(a);
if (b) return !1;
var c = e.getLabelSelector();
return !!c.isEmpty() || c.matches(a);
=======
} ]), angular.module("openshiftConsole").controller("BuildsController", [ "$routeParams", "$scope", "DataService", "$filter", "LabelFilter", "Logger", "$location", "BuildsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c) {
t.projectName = e.project, t.builds = {}, t.unfilteredBuildConfigs = {}, t.buildConfigs = void 0, t.labelSuggestions = {}, t.alerts = t.alerts || {}, t.emptyMessage = "Loading...", t.latestByConfig = {};
var l = a("buildConfigForBuild"), u = [];
c.get(e.project).then(_.spread(function(e, i) {
function c(e) {
var n = r.getLabelSelector();
if (n.isEmpty()) return !0;
var a = l(e) || "";
return a && t.unfilteredBuildConfigs[a] ? !!t.buildConfigs[a] : n.matches(e);
=======
} ]), angular.module("openshiftConsole").controller("BuildsController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "BuildsService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
a.projectName = n.project, a.builds = {}, a.unfilteredBuildConfigs = {}, a.buildConfigs = void 0, a.labelSuggestions = {}, a.latestByConfig = {}, a.clearFilter = function() {
=======
} ]), angular.module("openshiftConsole").controller("BuildsController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "BuildsService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
r.projectName = n.project, r.builds = {}, r.unfilteredBuildConfigs = {}, r.buildConfigs = void 0, r.labelSuggestions = {}, r.latestByConfig = {}, r.clearFilter = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
s.clear();
=======
}, f = {};
f = "HorizontalPodAutoscaler" === n.kind ? {
resource: "horizontalpodautoscalers",
group: "autoscaling",
version: "v1"
} : {
resource: a.kindToResource(n.kind),
group: n.group
}, s.get(f, n.name, r).then(function(a) {
if (e.labels = _.map(_.get(a, "metadata.labels", {}), function(e, t) {
return {
name: t,
value: e
};
}), "HorizontalPodAutoscaler" === n.kind) e.targetKind = _.get(a, "spec.scaleTargetRef.kind"), e.targetName = _.get(a, "spec.scaleTargetRef.name"), _.assign(e.autoscaling, {
minReplicas: _.get(a, "spec.minReplicas"),
maxReplicas: _.get(a, "spec.maxReplicas"),
targetCPU: _.get(a, "spec.targetCPUUtilizationPercentage")
}), e.disableInputs = !1, e.save = function() {
m(a);
}, e.breadcrumbs = i.getBreadcrumbs({
name: e.targetName,
kind: e.targetKind,
namespace: n.project,
project: t,
subpage: "Autoscale"
}); else {
e.breadcrumbs = i.getBreadcrumbs({
object: a,
project: t,
subpage: "Autoscale"
}), e.save = function() {
e.disableInputs = !0, h();
var t = {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: e.autoscaling.name,
labels: p.mapEntries(p.compactEntries(e.labels))
},
spec: {
scaleTargetRef: {
kind: a.kind,
name: a.metadata.name,
apiVersion: a.apiVersion
},
minReplicas: e.autoscaling.minReplicas,
maxReplicas: e.autoscaling.maxReplicas,
targetCPUUtilizationPercentage: e.autoscaling.targetCPU
}
};
s.create(y, null, t, r).then(function(e) {
d.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully created."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: g(t)
});
});
};
var o = {}, l = function() {
var n = _.get(a, "spec.template.spec.containers", []);
e.showCPURequestWarning = !c.hasCPURequest(n, o, t);
>>>>>>> Bug 1540916: Set correct group in HPA scale target
};
var u = e("buildConfigForBuild"), d = a.getPreferredVersion("builds"), m = a.getPreferredVersion("buildconfigs"), p = [];
l.get(n.project).then(_.spread(function(t, n) {
function a(e) {
var t = s.getLabelSelector();
if (t.isEmpty()) return !0;
var n = u(e) || "";
<<<<<<< HEAD
return n && a.unfilteredBuildConfigs[n] ? !!a.buildConfigs[n] : t.matches(e);
>>>>>>> Update builds controller to use getPreferredVersion
=======
return n && r.unfilteredBuildConfigs[n] ? !!r.buildConfigs[n] : t.matches(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function l(e) {
if (u(e)) return !1;
var t = s.getLabelSelector();
return !!t.isEmpty() || t.matches(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
function f() {
r.latestByConfig = o.latestBuildByConfig(r.builds, a), r.buildsNoConfig = _.pickBy(r.builds, l), angular.forEach(r.buildConfigs, function(e, t) {
r.latestByConfig[t] = r.latestByConfig[t] || null;
});
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
function n() {
var a = _.omit(b.latestByConfig, _.isNull);
!e.getLabelSelector().isEmpty() && _.isEmpty(b.buildConfigs) && _.isEmpty(a) ? b.alerts.builds = {
type:"warning",
details:"The active filters are hiding all builds."
} :delete b.alerts.builds;
}
b.project = a;
var o = d("isJenkinsPipelineStrategy");
k.push(c.watch("builds", g, function(a) {
b.builds = _.omit(a.by("metadata.name"), o), b.emptyMessage = "No builds to show", m(), e.addLabelSuggestionsFromResources(b.builds, b.labelSuggestions), f.log("builds (subscribe)", b.builds);
})), k.push(c.watch("buildconfigs", g, function(a) {
b.unfilteredBuildConfigs = _.omit(a.by("metadata.name"), o), e.addLabelSuggestionsFromResources(b.unfilteredBuildConfigs, b.labelSuggestions), e.setLabelSuggestions(b.labelSuggestions), b.buildConfigs = e.getLabelSelector().select(b.unfilteredBuildConfigs), m(), n(), f.log("buildconfigs (subscribe)", b.buildConfigs);
})), e.onActiveFiltersChanged(function(a) {
b.$apply(function() {
b.buildConfigs = a.select(b.unfilteredBuildConfigs), m(), n();
});
}), b.$on("$destroy", function() {
c.unwatchAll(k);
>>>>>>> Fix missing builds with no build config
});
}));
} ]), angular.module("openshiftConsole").controller("PipelinesController", [ "$filter", "$routeParams", "$scope", "APIService", "BuildsService", "Constants", "DataService", "Logger", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
n.projectName = t.project, n.alerts = n.alerts || {}, n.buildConfigs = {};
var u = r.getPreferredVersion("builds"), d = r.getPreferredVersion("templates");
n.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), n.buildConfigsInstantiateVersion = r.getPreferredVersion("buildconfigs/instantiate");
var m = [];
l.get(t.project).then(_.spread(function(t, r) {
n.project = t;
var s = {}, l = e("buildConfigForBuild"), p = e("isIncompleteBuild"), g = e("isJenkinsPipelineStrategy"), f = e("isNewerResource"), v = function(e, t) {
if (!p(t)) {
=======
function p() {
=======
function m() {
>>>>>>> Updates for Service Instance & Bindings
var e = _.omitBy(t.latestByConfig, _.isNull);
!r.getLabelSelector().isEmpty() && _.isEmpty(t.buildConfigs) && _.isEmpty(e) ? t.alerts.builds = {
=======
function g() {
<<<<<<< HEAD
var e = _.omitBy(a.latestByConfig, _.isNull);
<<<<<<< HEAD
!s.getLabelSelector().isEmpty() && _.isEmpty(a.buildConfigs) && _.isEmpty(e) ? a.alerts.builds = {
>>>>>>> Update builds controller to use getPreferredVersion
type: "warning",
details: "The active filters are hiding all builds."
} : delete a.alerts.builds;
=======
a.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(a.buildConfigs) && _.isEmpty(e);
>>>>>>> Replacing empty tables with empty state message
=======
var e = _.omitBy(r.latestByConfig, _.isNull);
r.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(r.buildConfigs) && _.isEmpty(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
r.project = t;
var v = e("isJenkinsPipelineStrategy");
p.push(i.watch(d, n, function(e) {
r.buildsLoaded = !0, r.builds = _.omitBy(e.by("metadata.name"), v), f(), s.addLabelSuggestionsFromResources(r.builds, r.labelSuggestions), c.log("builds (subscribe)", r.builds);
})), p.push(i.watch(m, n, function(e) {
r.unfilteredBuildConfigs = _.omitBy(e.by("metadata.name"), v), s.addLabelSuggestionsFromResources(r.unfilteredBuildConfigs, r.labelSuggestions), s.setLabelSuggestions(r.labelSuggestions), r.buildConfigs = s.getLabelSelector().select(r.unfilteredBuildConfigs), f(), g(), c.log("buildconfigs (subscribe)", r.buildConfigs);
})), s.onActiveFiltersChanged(function(e) {
r.$evalAsync(function() {
r.buildConfigs = e.select(r.unfilteredBuildConfigs), f(), g();
});
}), r.$on("$destroy", function() {
i.unwatchAll(p);
});
}));
} ]), angular.module("openshiftConsole").controller("PipelinesController", [ "$filter", "$routeParams", "$scope", "APIService", "BuildsService", "Constants", "DataService", "Logger", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
n.projectName = t.project, n.alerts = n.alerts || {}, n.buildConfigs = {};
var u = r.getPreferredVersion("builds"), d = r.getPreferredVersion("templates");
n.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), n.buildConfigsInstantiateVersion = r.getPreferredVersion("buildconfigs/instantiate");
var m = [];
l.get(t.project).then(_.spread(function(t, r) {
n.project = t;
<<<<<<< HEAD
var c = {}, u = e("buildConfigForBuild"), d = e("isIncompleteBuild"), m = e("isJenkinsPipelineStrategy"), p = e("isNewerResource"), f = function(e, t) {
if (!d(t)) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var s = {}, l = e("buildConfigForBuild"), p = e("isIncompleteBuild"), f = e("isJenkinsPipelineStrategy"), g = e("isNewerResource"), v = function(e, t) {
if (!p(t)) {
>>>>>>> Update pipelines controller to use getPreferredVersion
n.statsByConfig[e] || (n.statsByConfig[e] = {
count: 0,
totalDuration: 0
});
<<<<<<< HEAD
<<<<<<< HEAD
var r = n.statsByConfig[e];
r.count++, r.totalDuration += a.getDuration(t), r.avgDuration = _.round(r.totalDuration / r.count);
}
}, h = function() {
var e = {}, t = {};
n.statsByConfig = {}, _.each(s, function(r) {
if (g(r)) {
var a = l(r) || "";
n.buildConfigs[a] || (n.buildConfigs[a] = null), p(r) ? _.set(e, [ a, r.metadata.name ], r) : f(r, t[a]) && (t[a] = r), v(a, r);
=======
var a = n.statsByConfig[e];
a.count++, a.totalDuration += r.getDuration(t), a.avgDuration = _.round(a.totalDuration / a.count);
}
}, h = function() {
var e = {}, t = {};
<<<<<<< HEAD
n.statsByConfig = {}, _.each(c, function(a) {
if (m(a)) {
var r = u(a) || "";
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
n.buildConfigs[r] || (n.buildConfigs[r] = null), d(a) ? _.set(e, [ r, a.metadata.name ], a) : p(a, t[r]) && (t[r] = a), g(r, a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.buildConfigs[r] || (n.buildConfigs[r] = null), d(a) ? _.set(e, [ r, a.metadata.name ], a) : p(a, t[r]) && (t[r] = a), f(r, a);
>>>>>>> Patternfly vertical navigation and project bar
=======
n.buildConfigs[r] || (n.buildConfigs[r] = null), d(a) ? _.set(e, [ r, a.metadata.name ], a) : m(a, t[r]) && (t[r] = a), f(r, a);
>>>>>>> Updates for Service Instance & Bindings
=======
n.buildConfigs[r] || (n.buildConfigs[r] = null), d(a) ? _.set(e, [ r, a.metadata.name ], a) : p(a, t[r]) && (t[r] = a), f(r, a);
>>>>>>> Support EnvFrom in the Env Editors
=======
n.statsByConfig = {}, _.each(s, function(a) {
if (f(a)) {
var r = l(a) || "";
n.buildConfigs[r] || (n.buildConfigs[r] = null), p(a) ? _.set(e, [ r, a.metadata.name ], a) : g(a, t[r]) && (t[r] = a), v(r, a);
>>>>>>> Update pipelines controller to use getPreferredVersion
=======
var r = n.statsByConfig[e];
r.count++, r.totalDuration += a.getDuration(t), r.avgDuration = _.round(r.totalDuration / r.count);
}
}, h = function() {
var e = {}, t = {};
n.statsByConfig = {}, _.each(s, function(r) {
if (f(r)) {
var a = l(r) || "";
n.buildConfigs[a] || (n.buildConfigs[a] = null), p(r) ? _.set(e, [ a, r.metadata.name ], r) : g(r, t[a]) && (t[a] = r), v(a, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}), _.each(t, function(t, n) {
_.set(e, [ n, t.metadata.name ], t);
}), n.interestingBuildsByConfig = e;
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
m.push(i.watch(u, r, function(e) {
n.buildsLoaded = !0, s = e.by("metadata.name"), h();
}));
<<<<<<< HEAD
var y = !1;
m.push(i.watch(n.buildConfigsVersion, r, function(e) {
<<<<<<< HEAD
if (n.buildConfigsLoaded = !0, n.buildConfigs = _.pickBy(e.by("metadata.name"), g), _.isEmpty(n.buildConfigs) && !y && (y = !0, o.SAMPLE_PIPELINE_TEMPLATE)) {
var t = o.SAMPLE_PIPELINE_TEMPLATE.name, r = o.SAMPLE_PIPELINE_TEMPLATE.namespace;
i.get(d, t, {
namespace: r
=======
var v = !1;
l.push(i.watch("buildconfigs", s, function(e) {
if (n.buildConfigsLoaded = !0, n.buildConfigs = _.pickBy(e.by("metadata.name"), m), _.isEmpty(n.buildConfigs) && !v && (v = !0, a.SAMPLE_PIPELINE_TEMPLATE)) {
var t = a.SAMPLE_PIPELINE_TEMPLATE.name, o = a.SAMPLE_PIPELINE_TEMPLATE.namespace;
i.get("templates", t, {
namespace: o
>>>>>>> Add SVG icons
=======
if (n.buildConfigsLoaded = !0, n.buildConfigs = _.pickBy(e.by("metadata.name"), f), _.isEmpty(n.buildConfigs) && !y && (y = !0, o.SAMPLE_PIPELINE_TEMPLATE)) {
var t = o.SAMPLE_PIPELINE_TEMPLATE.name, r = o.SAMPLE_PIPELINE_TEMPLATE.namespace;
i.get(d, t, {
namespace: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, {
<<<<<<< HEAD
errorNotification: !1
}).then(function(e) {
n.createSampleURL = c.createFromTemplateURL(e, n.projectName);
});
}
<<<<<<< HEAD
h();
})), n.startBuild = a.startBuild, n.$on("$destroy", function() {
i.unwatchAll(m);
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "AuthorizationService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
=======
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.projectName = n.project, e.buildConfigName = n.buildconfig, e.buildConfig = null, e.labelSuggestions = {}, e.alerts = {}, e.breadcrumbs = [], e.forms = {}, e.expand = {
imageEnv: !1
}, n.isPipeline ? e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + n.project + "/browse/pipelines"
}) : e.breadcrumbs.push({
title: "Builds",
link: "project/" + n.project + "/browse/builds"
}), e.breadcrumbs.push({
title: n.buildconfig
<<<<<<< HEAD
}), e.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), e.buildsVersion = r.getPreferredVersion("builds"), e.buildConfigsInstantiateVersion = r.getPreferredVersion("buildconfigs/instantiate"), e.secretsVersion = r.getPreferredVersion("secrets"), e.emptyMessage = "Loading...", e.aceLoaded = function(e) {
=======
}), e.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), e.buildsVersion = r.getPreferredVersion("builds"), e.buildConfigsInstantiateVersion = r.getPreferredVersion("buildconfigs/instantiate"), e.emptyMessage = "Loading...", e.aceLoaded = function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var t = e.getSession();
t.setOption("tabSize", 2), t.setOption("useSoftTabs", !0), e.$blockScrolling = 1 / 0;
=======
title: "Edit"
} ];
var d = function() {
c.hideNotification("edit-route-error");
};
r.$on("$destroy", d);
var m = function() {
t.path(r.routeURL);
};
r.cancel = m;
var p, f = a.getPreferredVersion("routes"), g = a.getPreferredVersion("services");
l.get(n.project).then(_.spread(function(t, a) {
if (r.project = t, o.canI("routes", "update", n.project)) {
var l, v = e("orderByDisplayName"), h = function() {
s.toErrorPage('Editing routes with non-service targets is unsupported. You can edit the route with the "Edit YAML" action instead.');
};
i.get(f, r.routeName, a).then(function(e) {
"Service" === e.spec.to.kind ? (l = angular.copy(e), p = _.get(l, "spec.host"), "Subdomain" === _.get(l, "spec.wildcardPolicy") && (p = "*." + u.getSubdomain(l)), r.routing = {
host: p,
wildcardPolicy: _.get(l, "spec.wildcardPolicy"),
path: _.get(l, "spec.path"),
targetPort: _.get(l, "spec.port.targetPort"),
tls: angular.copy(_.get(l, "spec.tls"))
}, i.list(g, a).then(function(e) {
r.loading = !1;
var t = e.by("metadata.name");
r.routing.to = l.spec.to, r.routing.alternateServices = [], _.each(_.get(l, "spec.alternateBackends"), function(e) {
if ("Service" !== e.kind) return h(), !1;
r.routing.alternateServices.push(e);
}), r.services = v(t);
})) : h();
}, function() {
s.toErrorPage("Could not load route " + r.routeName + ".");
});
var y = function() {
var e = angular.copy(l), t = _.get(r, "routing.to.name");
_.set(e, "spec.to.name", t);
var n = _.get(r, "routing.to.weight");
isNaN(n) || _.set(e, "spec.to.weight", n);
var a = r.routing.host;
p !== a && (a.startsWith("*.") && (a = "wildcard" + a.substring(1)), e.spec.host = a), e.spec.path = r.routing.path;
var o = r.routing.targetPort;
o ? _.set(e, "spec.port.targetPort", o) : delete e.spec.port, _.get(r, "routing.tls.termination") ? (e.spec.tls = r.routing.tls, "passthrough" === e.spec.tls.termination && (delete e.spec.path, delete e.spec.tls.certificate, delete e.spec.tls.key, delete e.spec.tls.caCertificate), "reencrypt" !== e.spec.tls.termination && delete e.spec.tls.destinationCACertificate) : delete e.spec.tls;
var i = _.get(r, "routing.alternateServices", []);
return _.isEmpty(i) ? delete e.spec.alternateBackends : e.spec.alternateBackends = _.map(i, function(e) {
return {
kind: "Service",
name: e.name,
weight: e.weight
>>>>>>> Bug 1540783 - Keep hostname updates in route editor
};
var g = t("buildConfigForBuild"), f = t("buildStrategy"), v = t("orderByDisplayName"), h = t("getErrorDetails"), y = [], b = [], S = [];
e.valueFromObjects = [];
var C = function(t) {
e.updatedBuildConfig = angular.copy(t), e.envVars = f(e.updatedBuildConfig).env || [];
};
<<<<<<< HEAD
e.compareTriggers = function(e, t) {
return _.isNumber(e.value) ? -1 : "ConfigChange" === e.value ? -1 : "ConfigChange" === t.value ? 1 : "ImageChange" === e.value ? -1 : "ImageChange" === t.value ? 1 : e.value.localeCompare(t.value);
}, e.saveEnvVars = function() {
u.hideNotification("save-bc-env-error"), e.envVars = _.filter(e.envVars, "name"), f(e.updatedBuildConfig).env = p.compactEntries(angular.copy(e.envVars)), s.update(e.buildConfigsVersion, n.buildconfig, e.updatedBuildConfig, e.projectContext).then(function() {
u.addNotification({
=======
r.updateRoute = function() {
if (r.form.$valid) {
d(), r.disableInputs = !0;
var t = y();
i.update(f, r.routeName, t, a).then(function() {
c.addNotification({
>>>>>>> Bug 1540783 - Keep hostname updates in route editor
type: "success",
message: "Environment variables for build config " + e.buildConfigName + " were successfully updated."
}), e.forms.bcEnvVars.$setPristine();
}, function(n) {
u.addNotification({
id: "save-bc-env-error",
type: "error",
message: "An error occurred updating environment variables for build config " + e.buildConfigName + ".",
details: t("getErrorDetails")(n)
});
});
}, e.clearEnvVarUpdates = function() {
C(e.buildConfig), e.forms.bcEnvVars.$setPristine();
};
<<<<<<< HEAD
<<<<<<< HEAD
var w, P = function(n, a) {
e.loaded = !0, e.buildConfig = n, e.buildConfigPaused = o.isPaused(e.buildConfig), e.buildConfig.spec.source.images && (e.imageSources = e.buildConfig.spec.source.images, e.imageSourcesPaths = [], e.imageSources.forEach(function(n) {
e.imageSourcesPaths.push(t("destinationSourcePair")(n.paths));
}));
var c = _.get(f(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
w !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (w = l, s.get(r.kindToResource(c.kind), c.name, {
=======
var v, h = function(n, s) {
e.loaded = !0, e.buildConfig = n, e.buildConfigPaused = r.isPaused(e.buildConfig), e.buildConfig.spec.source.images && (e.imageSources = e.buildConfig.spec.source.images, e.imageSourcesPaths = [], e.imageSources.forEach(function(n) {
e.imageSourcesPaths.push(t("destinationSourcePair")(n.paths));
}));
var c = _.get(p(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
v !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (v = l, i.get(a.kindToResource(c.kind), c.name, {
>>>>>>> Add SVG icons
=======
var C, w = function(n, s) {
e.loaded = !0, e.buildConfig = n, e.buildConfigPaused = a.isPaused(e.buildConfig), e.buildConfig.spec.source.images && (e.imageSources = e.buildConfig.spec.source.images, e.imageSourcesPaths = [], e.imageSources.forEach(function(n) {
e.imageSourcesPaths.push(t("destinationSourcePair")(n.paths));
}));
var c = _.get(f(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
C !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (C = l, i.get(r.kindToResource(c.kind), c.name, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
namespace: c.namespace || e.projectName
=======
p();
})), c.startBuild = f.startBuild, c.$on("$destroy", function() {
g.unwatchAll(j);
=======
l.push(i.watch("builds", s, function(e) {
n.buildsLoaded = !0, c = e.by("metadata.name"), g();
}));
var h = !1;
l.push(i.watch("buildconfigs", s, function(e) {
if (n.buildConfigsLoaded = !0, n.buildConfigs = _.pickBy(e.by("metadata.name"), m), _.isEmpty(n.buildConfigs) && !h && (h = !0, a.SAMPLE_PIPELINE_TEMPLATE)) {
var t = a.SAMPLE_PIPELINE_TEMPLATE.name, o = a.SAMPLE_PIPELINE_TEMPLATE.namespace;
i.get("templates", t, {
namespace: o
=======
m.push(i.watch(u, a, function(e) {
n.buildsLoaded = !0, s = e.by("metadata.name"), h();
}));
var y = !1;
m.push(i.watch(n.buildConfigsVersion, a, function(e) {
if (n.buildConfigsLoaded = !0, n.buildConfigs = _.pickBy(e.by("metadata.name"), f), _.isEmpty(n.buildConfigs) && !y && (y = !0, o.SAMPLE_PIPELINE_TEMPLATE)) {
var t = o.SAMPLE_PIPELINE_TEMPLATE.name, a = o.SAMPLE_PIPELINE_TEMPLATE.namespace;
i.get(d, t, {
namespace: a
>>>>>>> Update pipelines controller to use getPreferredVersion
}, {
errorNotification: !1
}).then(function(e) {
n.createSampleURL = c.createFromTemplateURL(e, n.projectName);
});
}
<<<<<<< HEAD
g();
})), n.startBuild = o.startBuild, n.$on("$destroy", function() {
i.unwatchAll(l);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
h();
})), n.startBuild = r.startBuild, n.$on("$destroy", function() {
i.unwatchAll(m);
>>>>>>> Update pipelines controller to use getPreferredVersion
});
}));
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
e.projectName = n.project, e.buildConfigName = n.buildconfig, e.buildConfig = null, e.labelSuggestions = {}, e.alerts = {}, e.breadcrumbs = [], e.forms = {}, e.expand = {
imageEnv: !1
}, n.isPipeline ? e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + n.project + "/browse/pipelines"
}) : e.breadcrumbs.push({
title: "Builds",
link: "project/" + n.project + "/browse/builds"
}), e.breadcrumbs.push({
title: n.buildconfig
}), e.buildConfigsVersion = a.getPreferredVersion("buildconfigs"), e.buildsVersion = a.getPreferredVersion("builds"), e.buildConfigsInstantiateVersion = a.getPreferredVersion("buildconfigs/instantiate"), e.emptyMessage = "Loading...", e.aceLoaded = function(e) {
var t = e.getSession();
t.setOption("tabSize", 2), t.setOption("useSoftTabs", !0), e.$blockScrolling = 1 / 0;
};
var p = t("buildConfigForBuild"), f = t("buildStrategy"), g = t("orderByDisplayName"), v = t("getErrorDetails"), h = [], y = [], b = [];
e.valueFromObjects = [];
var S = function(t) {
e.updatedBuildConfig = angular.copy(t), e.envVars = f(e.updatedBuildConfig).env || [];
};
e.compareTriggers = function(e, t) {
return _.isNumber(e.value) ? -1 : "ConfigChange" === e.value ? -1 : "ConfigChange" === t.value ? 1 : "ImageChange" === e.value ? -1 : "ImageChange" === t.value ? 1 : e.value.localeCompare(t.value);
}, e.saveEnvVars = function() {
l.hideNotification("save-bc-env-error"), e.envVars = _.filter(e.envVars, "name"), f(e.updatedBuildConfig).env = m.compactEntries(angular.copy(e.envVars)), i.update(e.buildConfigsVersion, n.buildconfig, e.updatedBuildConfig, e.projectContext).then(function() {
l.addNotification({
type: "success",
message: "Environment variables for build config " + e.buildConfigName + " were successfully updated."
}), e.forms.bcEnvVars.$setPristine();
}, function(n) {
l.addNotification({
id: "save-bc-env-error",
type: "error",
message: "An error occurred updating environment variables for build config " + e.buildConfigName + ".",
details: t("getErrorDetails")(n)
});
});
}, e.clearEnvVarUpdates = function() {
S(e.buildConfig), e.forms.bcEnvVars.$setPristine();
};
<<<<<<< HEAD
var h, v = function(n, s) {
e.loaded = !0, e.buildConfig = n, e.buildConfigPaused = r.isPaused(e.buildConfig), e.buildConfig.spec.source.images && (e.imageSources = e.buildConfig.spec.source.images, e.imageSourcesPaths = [], e.imageSources.forEach(function(n) {
e.imageSourcesPaths.push(t("destinationSourcePair")(n.paths));
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var i = _.get(o(c), "from", {}), j = i.kind + "/" + i.name + "/" + (i.namespace || a.projectName);
r !== j && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], i.kind) ? (r = j, g.get(d.kindToResource(i.kind), i.name, {
namespace:i.namespace || a.projectName
>>>>>>> Use toast notifications for build config env editor
}, {
errorNotification: !1
}).then(function(t) {
e.BCEnvVarsFromImage = i.getEnvironment(t);
}, function() {
<<<<<<< HEAD
e.BCEnvVarsFromImage = [];
})) : e.BCEnvVarsFromImage = []), C(n), "DELETED" === a && (e.alerts.deleted = {
type: "warning",
message: "This build configuration has been deleted."
}, e.buildConfigDeleted = !0), !e.forms.bcEnvVars || e.forms.bcEnvVars.$pristine ? C(n) : e.alerts.background_update = {
=======
var c = _.get(g(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
=======
var c = _.get(f(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
>>>>>>> Patternfly vertical navigation and project bar
v !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (v = l, i.get(a.kindToResource(c.kind), c.name, {
=======
var c = _.get(m(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
h !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (h = l, i.get(a.kindToResource(c.kind), c.name, {
>>>>>>> Bug 1495491 - Show events tab on build config page
=======
var c = _.get(p(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
h !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (h = l, i.get(a.kindToResource(c.kind), c.name, {
>>>>>>> Support EnvFrom in the Env Editors
=======
var C, w = function(n, s) {
e.loaded = !0, e.buildConfig = n, e.buildConfigPaused = r.isPaused(e.buildConfig), e.buildConfig.spec.source.images && (e.imageSources = e.buildConfig.spec.source.images, e.imageSourcesPaths = [], e.imageSources.forEach(function(n) {
e.imageSourcesPaths.push(t("destinationSourcePair")(n.paths));
}));
var c = _.get(f(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
C !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (C = l, i.get(a.kindToResource(c.kind), c.name, {
>>>>>>> Enable valueFrom values for build config env vars
namespace: c.namespace || e.projectName
}, {
errorNotification: !1
}).then(function(t) {
<<<<<<< HEAD
e.BCEnvVarsFromImage = o.getEnvironment(t);
}, function() {
e.BCEnvVarsFromImage = [];
})) : e.BCEnvVarsFromImage = []), S(n), "DELETED" === s && (e.alerts.deleted = {
type: "warning",
message: "This build configuration has been deleted."
<<<<<<< HEAD
<<<<<<< HEAD
}, e.buildConfigDeleted = !0), !e.forms.bcEnvVars || e.forms.bcEnvVars.$pristine ? h(n) : e.alerts.background_update = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, e.buildConfigDeleted = !0), !e.forms.bcEnvVars || e.forms.bcEnvVars.$pristine ? g(n) : e.alerts.background_update = {
>>>>>>> Bug 1495491 - Show events tab on build config page
=======
}, e.buildConfigDeleted = !0), !e.forms.bcEnvVars || e.forms.bcEnvVars.$pristine ? S(n) : e.alerts.background_update = {
>>>>>>> Enable valueFrom values for build config env vars
type: "warning",
message: "This build configuration has been updated in the background. Saving your changes may create a conflict or cause loss of data.",
links: [ {
label: "Reload Environment Variables",
onClick: function() {
return e.clearEnvVarUpdates(), !0;
<<<<<<< HEAD
}
} ]
}, e.paused = o.isPaused(e.buildConfig);
=======
e.projectTemplates = t.by("metadata.name");
}));
}))) : l.toErrorPage("Catalog category " + a.category + "/" + a.subcategory + " not found.");
} else l.toErrorPage("Catalog category " + a.category + " not found.");
} ]), angular.module("openshiftConsole").controller("CreateFromImageController", [ "$scope", "$filter", "$parse", "$q", "$routeParams", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "HPAService", "ImagesService", "LimitRangesService", "Logger", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "SOURCE_URL_PATTERN", "SecretsService", "TaskList", "failureObjectNameFilter", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w) {
var P = t("displayName"), j = t("humanize");
e.projectName = a.project, e.sourceURLPattern = y;
var k = a.imageStream;
if (k) if (a.imageTag) {
e.displayName = a.displayName, e.advancedOptions = "true" === a.advanced;
var I = {
name: "app",
value: ""
}, R = t("orderByDisplayName"), E = t("getErrorDetails"), T = {}, N = function() {
g.hideNotification("create-builder-list-config-maps-error"), g.hideNotification("create-builder-list-secrets-error"), _.each(T, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || g.hideNotification(e.id);
});
>>>>>>> Add Browse Catalog to Project context view.
};
<<<<<<< HEAD
d.get(n.project).then(_.spread(function(r, i) {
function d() {
c.getLabelSelector().isEmpty() || !$.isEmptyObject(e.builds) || $.isEmptyObject(e.unfilteredBuilds) ? delete e.alerts.builds : e.alerts.builds = {
type: "warning",
details: "The active filters are hiding all builds."
=======
e.$on("$destroy", N);
var D = i.getPreferredVersion("configmaps"), A = i.getPreferredVersion("limitranges"), $ = i.getPreferredVersion("imagestreams"), B = i.getPreferredVersion("imagestreamtags"), L = i.getPreferredVersion("secrets"), V = i.getPreferredVersion("resourcequotas"), O = i.getPreferredVersion("appliedclusterresourcequotas");
v.get(a.project).then(_.spread(function(t, n) {
e.project = t, a.sourceURI && (e.sourceURIinParams = !0), e.hasClusterResourceOverrides = d.hasClusterResourceOverrides(t);
var i = function() {
<<<<<<< HEAD
e.hideCPU || (e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], t)), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], t);
>>>>>>> Update membership to use new rbac endpoints
=======
e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], t), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], t);
>>>>>>> Use new clusterResourceOverridesEnabled flag
};
<<<<<<< HEAD
}
<<<<<<< HEAD
e.project = r, e.projectContext = i, s.get(e.buildConfigsVersion, n.buildconfig, i, {
=======
e.project = a, p = o, i.get("buildconfigs", n.buildconfig, o, {
>>>>>>> Updates for Service Instance & Bindings
errorNotification: !1
}).then(function(t) {
P(t), y.push(s.watchObject(e.buildConfigsVersion, n.buildconfig, i, P));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This build configuration can not be found, it may have been deleted." : "The build configuration details could not be loaded.",
details: 404 === n.status ? "Any remaining build history for this build will be shown." : t("getErrorDetails")(n)
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), s.list("configmaps", i, null, {
=======
c.list(U, n).then(function(e) {
v = e.by("metadata.name"), m.log("quotas", v);
}), c.list(O, n).then(function(e) {
=======
c.list(V, n).then(function(e) {
v = e.by("metadata.name"), m.log("quotas", v);
}), c.list(U, n).then(function(e) {
>>>>>>> Update membership to use new rbac endpoints
=======
c.list(A, n).then(function(t) {
e.limitRanges = t.by("metadata.name"), _.isEmpty(e.limitRanges) || e.$watch("container", i, !0);
});
var v, y, C = function() {
e.scaling.autoscale && !e.hasClusterResourceOverrides ? e.showCPURequestWarning = !l.hasCPURequest([ e.container ], e.limitRanges, t) : e.showCPURequestWarning = !1;
};
c.list(V, n).then(function(e) {
v = e.by("metadata.name"), m.log("quotas", v);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), c.list(V, n).then(function(e) {
>>>>>>> Set Home Page Preference
=======
}), c.list(U, n).then(function(e) {
>>>>>>> Update directives/processTemplate to use getPreferredVersion
=======
}), c.list(U, n).then(function(e) {
>>>>>>> Fix potential API mismatch in BuildsService
=======
}), c.list(O, n).then(function(e) {
>>>>>>> Use new clusterResourceOverridesEnabled flag
y = e.by("metadata.name"), m.log("cluster quotas", y);
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
I.value && I.value !== t || (I.value = e);
}), function(r) {
r.name = a.name, r.imageName = k, r.imageTag = a.imageTag, r.namespace = a.namespace, r.buildConfig = {
buildOnSourceChange: !0,
buildOnImageChange: !0,
buildOnConfigChange: !0,
secrets: {
gitSecret: [ {
name: ""
} ]
},
sourceUrl: a.sourceURI,
gitRef: a.sourceRef,
contextDir: a.contextDir
}, r.buildConfigEnvVars = [], r.deploymentConfig = {
deployOnNewImage: !0,
deployOnConfigChange: !0
}, r.DCEnvVarsFromImage, r.DCEnvVarsFromUser = [], r.routing = {
include: !0,
portOptions: []
}, r.labelArray = [ I ], r.annotations = {}, r.scaling = {
replicas: 1,
autoscale: !1,
autoscaleOptions: [ {
label: "Manual",
value: !1
}, {
label: "Automatic",
value: !0
} ]
}, r.container = {
resources: {}
}, r.cpuRequestCalculated = d.isRequestCalculated("cpu", t), r.cpuLimitCalculated = d.isLimitCalculated("cpu", t), r.memoryRequestCalculated = d.isRequestCalculated("memory", t), r.fillSampleRepo = function() {
var e;
(r.image || r.image.metadata || r.image.metadata.annotations) && (e = r.image.metadata.annotations, r.buildConfig.sourceUrl = e.sampleRepo || "", r.buildConfig.gitRef = e.sampleRef || "", r.buildConfig.contextDir = e.sampleContextDir || "", (e.sampleRef || e.sampleContextDir) && (r.advancedSourceOptions = !0));
}, r.usingSampleRepo = function() {
return r.buildConfig.sourceUrl === _.get(r, "image.metadata.annotations.sampleRepo");
}, p.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
var o = [], i = [];
e.valueFromObjects = [], c.list(D, n, null, {
>>>>>>> Add Browse Catalog to Project context view.
errorNotification: !1
}).then(function(t) {
b = v(t.by("metadata.name")), e.valueFromObjects = b.concat(S);
}, function(e) {
403 !== e.code && u.addNotification({
id: "build-config-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
details: h(e)
=======
details: T(e)
>>>>>>> Configurable inactivity timeout in console
=======
details: E(e)
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
details: T(e)
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
details: E(e)
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
});
}), a.canI(e.secretsVersion, "list", n.project) && s.list("secrets", i, null, {
errorNotification: !1
}).then(function(t) {
S = v(t.by("metadata.name")), e.webhookSecrets = m.groupSecretsByType(t).webhook, e.valueFromObjects = b.concat(S);
}, function(e) {
403 !== e.code && u.addNotification({
id: "build-config-list-secrets-error",
type: "error",
message: "Could not load secrets.",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
details: h(e)
=======
details: T(e)
>>>>>>> Configurable inactivity timeout in console
=======
details: E(e)
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
details: T(e)
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
details: E(e)
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
});
}), y.push(s.watch(e.buildsVersion, i, function(t, r, a) {
if (e.emptyMessage = "No builds to show", r) {
if (g(a) === n.buildconfig) {
var i = a.metadata.name;
switch (r) {
=======
a.BCEnvVarsFromImage = [];
})) :a.BCEnvVarsFromImage = []), q(c), "DELETED" === h && (a.alerts.deleted = {
type:"warning",
message:"This build configuration has been deleted."
}, a.buildConfigDeleted = !0), !a.forms.bcEnvVars || a.forms.bcEnvVars.$pristine ? q(c) :a.alerts.background_update = {
type:"warning",
message:"This build configuration has been updated in the background. Saving your changes may create a conflict or cause loss of data.",
links:[ {
label:"Reload Environment Variables",
onClick:function() {
return a.clearEnvVarUpdates(), !0;
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
} ]
}, e.paused = a.isPaused(e.buildConfig);
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
k.get(c.project).then(_.spread(function(d, f) {
function j() {
h.getLabelSelector().isEmpty() || !$.isEmptyObject(a.builds) || $.isEmptyObject(a.unfilteredBuilds) ? delete a.alerts.builds :a.alerts.builds = {
type:"warning",
details:"The active filters are hiding all builds."
=======
}), r.routing.targetPort = r.routing.portOptions[0].port);
}, function() {
f.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
});
}, function() {
f.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
});
}(e);
<<<<<<< HEAD
var V, F = function() {
=======
var U, F = function() {
>>>>>>> Use new clusterResourceOverridesEnabled flag
var t = {
started: "Creating application " + e.name + " in project " + e.projectDisplayName(),
success: "Created application " + e.name + " in project " + e.projectDisplayName(),
failure: "Failed to create " + e.name + " in project " + e.projectDisplayName()
}, o = {};
S.clear(), S.add(t, o, a.project, function() {
var t = r.defer();
<<<<<<< HEAD
return c.batch(V, n).then(function(n) {
=======
return c.batch(U, n).then(function(n) {
>>>>>>> Use new clusterResourceOverridesEnabled flag
var r = [], a = !1;
_.isEmpty(n.failure) ? r.push({
type: "success",
message: "All resources for application " + e.name + " were created successfully."
}) : (a = !0, n.failure.forEach(function(e) {
r.push({
type: "error",
message: "Cannot create " + j(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), n.success.forEach(function(e) {
r.push({
type: "success",
message: "Created " + j(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})), t.resolve({
alerts: r,
hasErrors: a
});
}), t.promise;
}), f.toNextSteps(e.name, e.projectName, {
usingSampleRepo: e.usingSampleRepo()
});
}, x = function(e) {
o.open({
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
title: "Confirm Creation",
details: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
>>>>>>> Add Browse Catalog to Project context view.
};
}
<<<<<<< HEAD
a.project = d, m = f, g.get("buildconfigs", c.buildconfig, f, {
errorNotification:!1
}).then(function(a) {
s(a), p.push(g.watchObject("buildconfigs", c.buildconfig, f, s));
}, function(c) {
a.loaded = !0, a.alerts.load = {
type:"error",
message:404 === c.status ? "This build configuration can not be found, it may have been deleted." :"The build configuration details could not be loaded.",
details:404 === c.status ? "Any remaining build history for this build will be shown." :b("getErrorDetails")(c)
};
}), p.push(g.watch("builds", f, function(b, d, f) {
if (a.emptyMessage = "No builds to show", d) {
var g = n(f);
if (g === c.buildconfig) {
var i = f.metadata.name;
switch (d) {
>>>>>>> Use toast notifications for build config env editor
case "ADDED":
case "MODIFIED":
e.unfilteredBuilds[i] = a;
=======
u.get(n.project).then(_.spread(function(a, o) {
=======
u.get(n.project).then(_.spread(function(r, o) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function u() {
s.getLabelSelector().isEmpty() || !$.isEmptyObject(e.builds) || $.isEmptyObject(e.unfilteredBuilds) ? delete e.alerts.builds : e.alerts.builds = {
type: "warning",
details: "The active filters are hiding all builds."
=======
}
}).result.then(F);
}, M = function(t) {
N(), T = t.quotaAlerts || [], e.nameTaken || _.some(T, {
type: "error"
}) ? (e.disableInputs = !1, _.each(T, function(e) {
e.id = _.uniqueId("create-builder-alert-"), g.addNotification(e);
})) : _.isEmpty(T) ? F() : (x(T), e.disableInputs = !1);
};
e.projectDisplayName = function() {
return P(this.project) || this.projectName;
}, e.createApp = function() {
e.disableInputs = !0, N(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser), e.labels = w.mapEntries(w.compactEntries(e.labelArray));
var t = s.generate(e);
U = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), U.push(e));
});
var r = s.ifResourcesDontExist(U, e.projectName), a = h.getLatestQuotaAlerts(U, n), o = function(t) {
return e.nameTaken = t.nameTaken, a;
};
r.then(o, o).then(M, M);
>>>>>>> Configurable inactivity timeout in console
};
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e.project = a, m = o, i.get("buildconfigs", n.buildconfig, o, {
=======
e.project = a, p = o, i.get(e.buildConfigsVersion, n.buildconfig, o, {
>>>>>>> Update buildConfig controller to use getPreferredVersion
=======
e.project = a, e.projectContext = o, i.get(e.buildConfigsVersion, n.buildconfig, o, {
>>>>>>> Bug 1495491 - Show events tab on build config page
=======
e.project = r, e.projectContext = o, i.get(e.buildConfigsVersion, n.buildconfig, o, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(t) {
w(t), h.push(i.watchObject(e.buildConfigsVersion, n.buildconfig, o, w));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This build configuration can not be found, it may have been deleted." : "The build configuration details could not be loaded.",
details: 404 === n.status ? "Any remaining build history for this build will be shown." : t("getErrorDetails")(n)
};
}), i.list("configmaps", o, null, {
errorNotification: !1
}).then(function(t) {
y = g(t.by("metadata.name")), e.valueFromObjects = y.concat(b);
}, function(e) {
403 !== e.code && l.addNotification({
id: "build-config-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: v(e)
});
}), i.list("secrets", o, null, {
errorNotification: !1
}).then(function(t) {
b = g(t.by("metadata.name")), e.valueFromObjects = y.concat(b);
}, function(e) {
403 !== e.code && l.addNotification({
id: "build-config-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: v(e)
});
<<<<<<< HEAD
}), h.push(i.watch(e.buildsVersion, o, function(t, a, o) {
if (e.emptyMessage = "No builds to show", a) {
<<<<<<< HEAD
<<<<<<< HEAD
if (p(o) === n.buildconfig) {
<<<<<<< HEAD
=======
}), g.push(i.watch("builds", o, function(t, a, o) {
if (e.emptyMessage = "No builds to show", a) {
if (m(o) === n.buildconfig) {
>>>>>>> Updates for Service Instance & Bindings
=======
>>>>>>> Bug 1495491 - Show events tab on build config page
=======
if (m(o) === n.buildconfig) {
>>>>>>> Support EnvFrom in the Env Editors
=======
=======
}), h.push(i.watch(e.buildsVersion, o, function(t, r, o) {
if (e.emptyMessage = "No builds to show", r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (p(o) === n.buildconfig) {
>>>>>>> Enable valueFrom values for build config env vars
var i = o.metadata.name;
switch (r) {
case "ADDED":
case "MODIFIED":
e.unfilteredBuilds[i] = o;
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Updates for Service Instance & Bindings
break;

case "DELETED":
delete e.unfilteredBuilds[i];
}
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} else e.unfilteredBuilds = o.validatedBuildsForBuildConfig(n.buildconfig, t.by("metadata.name"));
e.builds = c.getLabelSelector().select(e.unfilteredBuilds), d(), c.addLabelSuggestionsFromResources(e.unfilteredBuilds, e.labelSuggestions), c.setLabelSuggestions(e.labelSuggestions), e.orderedBuilds = o.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds);
}, {
http: {
params: {
labelSelector: t("labelName")("buildConfig") + "=" + _.truncate(e.buildConfigName, {
=======
=======
>>>>>>> Updates for Service Instance & Bindings
} else e.unfilteredBuilds = r.validatedBuildsForBuildConfig(n.buildconfig, t.by("metadata.name"));
e.builds = s.getLabelSelector().select(e.unfilteredBuilds), u(), s.addLabelSuggestionsFromResources(e.unfilteredBuilds, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), e.orderedBuilds = r.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds);
=======
} else e.unfilteredBuilds = a.validatedBuildsForBuildConfig(n.buildconfig, t.by("metadata.name"));
e.builds = s.getLabelSelector().select(e.unfilteredBuilds), u(), s.addLabelSuggestionsFromResources(e.unfilteredBuilds, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), e.orderedBuilds = a.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, {
http: {
params: {
<<<<<<< HEAD
labelSelector: t("labelName")("buildConfig") + "=" + _.trunc(e.buildConfigName, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
labelSelector: t("labelName")("buildConfig") + "=" + _.truncate(e.buildConfigName, {
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
length: 63,
omission: ""
})
=======
function p() {
var e = v();
a.templateImages = _.map(j, function(t) {
return _.isEmpty(t.usesParameters) ? t : {
name: _.template(t.name, {
interpolate: P
})(e),
usesParameters: t.usesParameters
};
});
>>>>>>> Add Browse Catalog to Project context view.
}
}
<<<<<<< HEAD
<<<<<<< HEAD
})), c.onActiveFiltersChanged(function(t) {
e.$apply(function() {
e.builds = t.select(e.unfilteredBuilds), e.orderedBuilds = o.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds), d();
});
<<<<<<< HEAD
}), e.startBuild = function() {
o.startBuild(e.buildConfig);
}, e.showJenkinsfileExamples = function() {
l.showJenkinsfileExamples();
}, e.$on("$destroy", function() {
s.unwatchAll(y);
=======
}), a.startBuild = function() {
e.startBuild(a.buildConfig);
}, a.showJenkinsfileExamples = function() {
i.showJenkinsfileExamples();
}, a.$on("$destroy", function() {
g.unwatchAll(p);
=======
})), s.onActiveFiltersChanged(function(t) {
e.$apply(function() {
e.builds = t.select(e.unfilteredBuilds), e.orderedBuilds = a.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds), u();
});
}), e.startBuild = function() {
a.startBuild(e.buildConfig);
}, e.showJenkinsfileExamples = function() {
c.showJenkinsfileExamples();
}, e.$on("$destroy", function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
i.unwatchAll(f);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i.unwatchAll(g);
>>>>>>> Patternfly vertical navigation and project bar
=======
i.unwatchAll(f);
>>>>>>> Bug 1495491 - Show events tab on build config page
=======
i.unwatchAll(h);
>>>>>>> Enable valueFrom values for build config env vars
});
=======
function g(e) {
j = [];
var t = [], n = {};
angular.forEach(e.objects, function(e) {
if ("BuildConfig" === e.kind) {
var r = w(S(e), y);
r && j.push({
name: r,
usesParameters: m(r)
});
var a = w(C(e), y);
a && (n[a] = !0);
}
"DeploymentConfig" === e.kind && (t = t.concat(f(e)));
}), t.forEach(function(e) {
n[e] || j.push({
name: e,
usesParameters: m(e)
});
}), j = _.uniqBy(j, "name");
}
function v() {
var e = {};
return _.each(a.template.parameters, function(t) {
e[t.name] = t.value;
}), e;
}
var h = r.template, y = r.namespace || "", b = n("spec.template.spec.containers"), S = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), w = e("imageObjectRef");
if (h) {
r.templateParamsMap && (a.prefillParameters = function() {
try {
return JSON.parse(r.templateParamsMap);
} catch (e) {
l.addNotification({
id: "template-params-invalid-json",
type: "error",
message: "Could not prefill parameter values.",
details: "The `templateParamsMap` URL parameter is not valid JSON. " + e
});
}
}());
var P = /\${([a-zA-Z0-9\_]+)}/g, j = [];
u.get(r.project).then(_.spread(function(e) {
if (a.project = e, o.canI("processedtemplates", "create", r.project)) if (y) s.get("templates", h, {
namespace: y || a.project.metadata.name
}).then(function(e) {
a.template = e, g(e);
_.some(j, function(e) {
return !_.isEmpty(e.usesParameters);
}) ? (a.parameterDisplayNames = {}, _.each(e.parameters, function(e) {
a.parameterDisplayNames[e.name] = e.displayName || e.name;
}), a.$watch("template.parameters", _.debounce(function() {
a.$apply(p);
}, 50, {
maxWait: 250
}), !0)) : a.templateImages = j;
}, function() {
c.toErrorPage("Cannot create from template: the specified template could not be retrieved.");
}); else {
if (a.template = i.getTemplate(), _.isEmpty(a.template)) {
var n = URI("error").query({
error: "not_found",
error_description: "Template wasn't found in cache."
}).toString();
t.url(n);
}
i.clearTemplate();
} else c.toErrorPage("You do not have authority to process templates in project " + r.project + ".", "access_denied");
>>>>>>> Add Browse Catalog to Project context view.
}));
} ]), angular.module("openshiftConsole").controller("BuildController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "DataService", "ModalsService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c) {
e.projectName = n.project, e.build = null, e.buildConfig = null, e.buildConfigName = n.buildconfig, e.builds = {}, e.alerts = {}, e.showSecret = !1, e.renderOptions = {
hideFilterWidget: !0
}, e.breadcrumbs = [], n.isPipeline ? (e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + n.project + "/browse/pipelines"
}), n.buildconfig && e.breadcrumbs.push({
title: n.buildconfig,
link: "project/" + n.project + "/browse/pipelines/" + n.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + n.project + "/browse/builds"
}), n.buildconfig && e.breadcrumbs.push({
title: n.buildconfig,
link: "project/" + n.project + "/browse/builds/" + n.buildconfig
})), e.breadcrumbs.push({
title: n.build
}), e.buildsVersion = r.getPreferredVersion("builds"), e.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), e.podsVersion = r.getPreferredVersion("pods");
var l, u = t("annotation"), d = [], m = function(t) {
e.logCanRun = !_.includes([ "New", "Pending", "Error" ], t.status.phase);
}, p = function() {
e.buildConfig ? e.canBuild = a.canBuild(e.buildConfig) : e.canBuild = !1;
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
h.get(c.project).then(_.spread(function(g, h) {
a.project = g, a.projectContext = h, a.logOptions = {};
var n = function() {
i ? a.eventObjects = [ a.build, i ] :a.eventObjects = [ a.build ];
}, o = function(b, c) {
a.loaded = !0, a.build = b, l(b), n();
var d = j(b, "buildNumber");
d && (a.breadcrumbs[2].title = "#" + d), "DELETED" === c && (a.alerts.deleted = {
type:"warning",
message:"This build has been deleted."
>>>>>>> Use toast notifications for build config env editor
});
}));
} ]), angular.module("openshiftConsole").controller("BuildController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "DataService", "ModalsService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c) {
e.projectName = n.project, e.build = null, e.buildConfig = null, e.buildConfigName = n.buildconfig, e.builds = {}, e.alerts = {}, e.showSecret = !1, e.renderOptions = {
hideFilterWidget: !0
}, e.breadcrumbs = [], n.isPipeline ? (e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + n.project + "/browse/pipelines"
}), n.buildconfig && e.breadcrumbs.push({
title: n.buildconfig,
link: "project/" + n.project + "/browse/pipelines/" + n.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + n.project + "/browse/builds"
}), n.buildconfig && e.breadcrumbs.push({
title: n.buildconfig,
link: "project/" + n.project + "/browse/builds/" + n.buildconfig
})), e.breadcrumbs.push({
title: n.build
}), e.buildsVersion = r.getPreferredVersion("builds"), e.buildsCloneVersion = r.getPreferredVersion("builds/clone"), e.buildsLogVersion = r.getPreferredVersion("builds/log"), e.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.podsVersion = r.getPreferredVersion("pods");
var l, u = t("annotation"), d = [], m = function(t) {
e.logCanRun = !_.includes([ "New", "Pending", "Error" ], t.status.phase);
}, p = function() {
e.buildConfig ? e.canBuild = a.canBuild(e.buildConfig) : e.canBuild = !1;
};
c.get(n.project).then(_.spread(function(r, s) {
e.project = r, e.projectContext = s, e.logOptions = {};
var c = function() {
e.eventObjects = l ? [ e.build, l ] : [ e.build ];
}, g = function(t, n) {
e.loaded = !0, e.build = t, m(t), c();
var r = u(t, "buildNumber");
r && e.breadcrumbs[2] && (e.breadcrumbs[2].title = "#" + r), "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This build has been deleted."
});
var a;
l || (a = u(t, "buildPod")) && o.get(e.podsVersion, a, s, {
errorNotification: !1
}).then(function(e) {
l = e, c();
=======
s.get(n.project).then(_.spread(function(i, s) {
e.project = i, e.projectContext = s, e.logOptions = {};
var m = function() {
e.eventObjects = c ? [ e.build, c ] : [ e.build ];
=======
c.get(n.project).then(_.spread(function(a, s) {
e.project = a, e.projectContext = s, e.logOptions = {};
=======
c.get(n.project).then(_.spread(function(r, s) {
e.project = r, e.projectContext = s, e.logOptions = {};
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var c = function() {
e.eventObjects = l ? [ e.build, l ] : [ e.build ];
>>>>>>> Update build controller to use getPreferredVersion
}, f = function(t, n) {
e.loaded = !0, e.build = t, m(t), c();
<<<<<<< HEAD
var a = u(t, "buildNumber");
a && (e.breadcrumbs[2].title = "#" + a), "DELETED" === n && (e.alerts.deleted = {
=======
var r = u(t, "buildNumber");
r && e.breadcrumbs[2] && (e.breadcrumbs[2].title = "#" + r), "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "warning",
message: "This build has been deleted."
});
var a;
l || (a = u(t, "buildPod")) && o.get(e.podsVersion, a, s, {
errorNotification: !1
}).then(function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
c = e, p();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
c = e, m();
>>>>>>> Updates for Service Instance & Bindings
=======
l = e, c();
>>>>>>> Update build controller to use getPreferredVersion
});
}, g = function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "Build configuration " + e.buildConfigName + " has been deleted."
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, e.buildConfigDeleted = !0), e.buildConfig = t, e.buildConfigPaused = a.isPaused(e.buildConfig), p();
};
<<<<<<< HEAD
o.get(e.buildsVersion, n.build, s, {
errorNotification: !1
=======
} ]), angular.module("openshiftConsole").controller("LogoutController", [ "$scope", "$routeParams", "$log", "AuthService", "AUTH_CFG", function(e, t, n, r, a) {
if (n.debug("LogoutController"), r.isLoggedIn()) n.debug("LogoutController, logged in, initiating logout"), e.logoutMessage = "Logging out...", r.startLogout().finally(function() {
r.isLoggedIn() ? (n.debug("LogoutController, logout failed, still logged in"), e.logoutMessage = 'You could not be logged out. Return to the <a href="./">console</a>.') : a.logout_uri ? (n.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", a.logout_uri), window.location.href = a.logout_uri) : (n.debug("LogoutController, logout completed, reloading the page"), window.location.reload(!1));
}); else if (a.logout_uri) n.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", a.logout_uri), e.logoutMessage = "Logging out...", window.location.href = a.logout_uri; else {
n.debug("LogoutController, not logged in, logout complete");
var o = "You are logged out.";
"timeout" === t.cause && (o = "You have been logged out due to inactivity."), e.logoutMessage = o + ' Return to the <a href="./">console</a>.';
}
} ]), angular.module("openshiftConsole").controller("CreateController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "CatalogService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
e.projectName = a.project, e.categories = s.CATALOG_CATEGORIES, e.alerts = e.alerts || {}, d.get(a.project).then(_.spread(function(t, n) {
e.project = t, e.context = n, c.list("imagestreams", {
namespace: "openshift"
}).then(function(t) {
e.openshiftImageStreams = t.by("metadata.name");
}), c.list("templates", {
namespace: "openshift"
}, null, {
partialObjectMetadataList: !0
>>>>>>> Configurable inactivity timeout in console
}).then(function(t) {
<<<<<<< HEAD
g(t), d.push(o.watchObject(e.buildsVersion, n.build, s, g)), d.push(o.watchObject(e.buildConfigsVersion, n.buildconfig, s, f));
=======
}, e.buildConfigDeleted = !0), e.buildConfig = t, e.buildConfigPaused = a.isPaused(e.buildConfig), m();
=======
}, e.buildConfigDeleted = !0), e.buildConfig = t, e.buildConfigPaused = a.isPaused(e.buildConfig), p();
>>>>>>> Updates for Service Instance & Bindings
};
r.get("builds", n.build, s, {
errorNotification: !1
}).then(function(e) {
<<<<<<< HEAD
g(e), u.push(r.watchObject("builds", n.build, s, g)), u.push(r.watchObject("buildconfigs", n.buildconfig, s, f));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
f(e), u.push(r.watchObject("builds", n.build, s, f)), u.push(r.watchObject("buildconfigs", n.buildconfig, s, g));
>>>>>>> Patternfly vertical navigation and project bar
=======
}, e.buildConfigDeleted = !0), e.buildConfig = t, e.buildConfigPaused = r.isPaused(e.buildConfig), m();
=======
}, e.buildConfigDeleted = !0), e.buildConfig = t, e.buildConfigPaused = r.isPaused(e.buildConfig), p();
>>>>>>> Support EnvFrom in the Env Editors
=======
}, e.buildConfigDeleted = !0), e.buildConfig = t, e.buildConfigPaused = a.isPaused(e.buildConfig), p();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
o.get(e.buildsVersion, n.build, s, {
errorNotification: !1
}).then(function(t) {
f(t), d.push(o.watchObject(e.buildsVersion, n.build, s, f)), d.push(o.watchObject(e.buildConfigsVersion, n.buildconfig, s, g));
>>>>>>> Update build controller to use getPreferredVersion
}, function(n) {
e.loaded = !0, e.alerts.load = {
=======
e.projectTemplates = t.by("metadata.name");
}));
}));
} ]), angular.module("openshiftConsole").controller("CreateFromURLController", [ "$scope", "$routeParams", "$location", "$filter", "APIService", "AuthService", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
o.withUser(), e.alerts = {}, e.selected = {};
var u = function(t) {
e.alerts.invalidImageStream = {
type: "error",
message: 'The requested image stream "' + t + '" could not be loaded.'
};
}, d = function(t) {
e.alerts.invalidImageTag = {
type: "error",
message: 'The requested image stream tag "' + t + '" could not be loaded.'
};
}, m = function(t) {
e.alerts.invalidTemplate = {
type: "error",
message: 'The requested template "' + t + '" could not be loaded.'
};
}, p = function() {
try {
return t.templateParamsMap && JSON.parse(t.templateParamsMap) || {};
} catch (t) {
e.alerts.invalidTemplateParams = {
>>>>>>> Check if user can add to existing project during create from url
type: "error",
message: "The build details could not be loaded.",
details: t("getErrorDetails")(n)
};
<<<<<<< HEAD
}), e.toggleSecret = function() {
e.showSecret = !0;
}, e.cancelBuild = function() {
a.cancelBuild(e.build, e.buildConfigName);
}, e.cloneBuild = function() {
e.build && e.canBuild && a.cloneBuild(e.build, e.buildConfigName);
}, e.showJenkinsfileExamples = function() {
<<<<<<< HEAD
<<<<<<< HEAD
i.showJenkinsfileExamples();
}, e.$on("$destroy", function() {
o.unwatchAll(d);
});
}));
} ]), angular.module("openshiftConsole").controller("ImageController", [ "$filter", "$scope", "$routeParams", "APIService", "DataService", "ImageStreamsService", "imageLayers", "ProjectsService", function(e, t, n, r, a, o, i, s) {
function c(e, r) {
var a = o.tagsByName(e);
t.imageStream = e, t.tagsByName = a, t.tagName = n.tag;
var i = a[n.tag];
i ? (delete t.alerts.load, m(i, r)) : t.alerts.load = {
<<<<<<< HEAD
=======
o.showJenkinsfileExamples();
=======
i.showJenkinsfileExamples();
>>>>>>> Update build controller to use getPreferredVersion
}, e.$on("$destroy", function() {
o.unwatchAll(d);
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ImageController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", "ImageStreamsService", "imageLayers", function(e, t, n, a, r, o, i) {
function s(n, a) {
var r = o.tagsByName(n);
e.imageStream = n, e.tagsByName = r, e.tagName = t.tag;
var i = r[t.tag];
i ? (delete e.alerts.load, l(i, a)) : e.alerts.load = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").controller("ImageController", [ "$filter", "$scope", "$routeParams", "APIService", "DataService", "ImageStreamsService", "imageLayers", "ProjectsService", function(e, t, n, a, r, o, i, s) {
function c(e, a) {
var r = o.tagsByName(e);
t.imageStream = e, t.tagsByName = r, t.tagName = n.tag;
var i = r[n.tag];
<<<<<<< HEAD
i ? (delete t.alerts.load, p(i, a)) : t.alerts.load = {
>>>>>>> Update ImageController to use getPreferredVersion
=======
i ? (delete t.alerts.load, m(i, a)) : t.alerts.load = {
>>>>>>> Support EnvFrom in the Env Editors
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}
}, f = a.getPreferredVersion("imagestreams"), g = a.getPreferredVersion("imagestreamtags"), v = a.getPreferredVersion("templates"), h = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, y = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], b = _.pickBy(t, function(e, t) {
return _.includes(y, t) && _.isString(e);
});
b.namespace = b.namespace || "openshift";
_.includes(h, b.namespace) ? b.imageStream && b.template ? e.alerts.invalidResource = {
type: "error",
message: "Image streams and templates cannot be combined."
} : b.imageStream || b.template ? b.name && !function(e) {
return _.size(e) < 25 && /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(e);
}(b.name) ? function(t) {
e.alerts.invalidImageStream = {
>>>>>>> Check if user can add to existing project during create from url
type: "error",
message: "The image tag was not found in the stream."
};
<<<<<<< HEAD
<<<<<<< HEAD
}
<<<<<<< HEAD
<<<<<<< HEAD
t.projectName = n.project, t.imageStream = null, t.image = null, t.layers = null, t.tagsByName = {}, t.alerts = {}, t.renderOptions = t.renderOptions || {}, t.renderOptions.hideFilterWidget = !0, t.breadcrumbs = [ {
title: "Image Streams",
link: "project/" + n.project + "/browse/images"
}, {
title: n.imagestream,
link: "project/" + n.project + "/browse/images/" + n.imagestream
}, {
title: ":" + n.tag
} ];
var l = r.getPreferredVersion("imagestreamtags"), u = r.getPreferredVersion("imagestreams"), d = [], m = _.debounce(function(r, o) {
var s = n.imagestream + ":" + n.tag;
a.get(l, s, o).then(function(e) {
t.loaded = !0, t.image = e.image, t.layers = i(t.image);
}, function(n) {
t.loaded = !0, t.alerts.load = {
=======
}(g.name) : (g.imageStream && i.get("imagestreams", g.imageStream, {
namespace: g.namespace
=======
}(b.name) : (b.imageStream && s.get(f, b.imageStream, {
namespace: b.namespace
>>>>>>> Update CreateFromUrl controller to use getPreferredVersion
}, {
errorNotification: !1
}).then(function(t) {
e.imageStream = t, s.get(g, t.metadata.name + ":" + b.imageTag, {
namespace: b.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.imageStreamTag = t, e.validationPassed = !0, e.resource = t, b.displayName = r("displayName")(t);
}, function() {
d(b.imageTag);
});
}, function() {
u(b.imageStream);
}), b.template && s.get(v, b.template, {
namespace: b.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.template = t, p() && (e.validationPassed = !0, e.resource = t);
}, function() {
m(b.template);
})) : e.alerts.resourceRequired = {
type: "error",
message: "An image stream or template is required."
} : function(t) {
e.alerts.invalidNamespace = {
>>>>>>> Check if user can add to existing project during create from url
type: "error",
message: "The image details could not be loaded.",
details: e("getErrorDetails")(n)
};
<<<<<<< HEAD
<<<<<<< HEAD
});
}, 200), p = function(e, n, r) {
c(e, n), "DELETED" === r && (t.alerts.deleted = {
=======
e.projectName = t.project, e.imageStream = null, e.image = null, e.layers = null, e.tagsByName = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
=======
t.projectName = n.project, t.imageStream = null, t.image = null, t.layers = null, t.tagsByName = {}, t.alerts = {}, t.renderOptions = t.renderOptions || {}, t.renderOptions.hideFilterWidget = !0, t.breadcrumbs = [ {
>>>>>>> Update ImageController to use getPreferredVersion
title: "Image Streams",
link: "project/" + n.project + "/browse/images"
}, {
title: n.imagestream,
link: "project/" + n.project + "/browse/images/" + n.imagestream
}, {
title: ":" + n.tag
} ];
var l = r.getPreferredVersion("imagestreamtags"), u = r.getPreferredVersion("imagestreams"), d = [], m = _.debounce(function(r, o) {
var s = n.imagestream + ":" + n.tag;
a.get(l, s, o).then(function(e) {
t.loaded = !0, t.image = e.image, t.layers = i(t.image);
}, function(n) {
t.loaded = !0, t.alerts.load = {
=======
}(g.namespace), angular.extend(e, {
createDetails: g,
=======
}(b.namespace), angular.extend(e, {
createDetails: b,
>>>>>>> Update CreateFromUrl controller to use getPreferredVersion
createWithProject: function(r) {
r = r || e.selected.project.metadata.name;
var a = t.imageStream ? c.createFromImageURL(e.imageStream, b.imageTag, r, b) : c.createFromTemplateURL(e.template, r, b);
n.url(a);
}
}), e.projects = {}, e.canCreateProject = void 0, l.list().then(function(t) {
e.loaded = !0, e.projects = r("orderByDisplayName")(t.by("metadata.name")), e.noProjects = _.isEmpty(e.projects);
}), l.canCreate().then(function() {
e.canCreateProject = !0;
}, function() {
e.canCreateProject = !1;
}), e.forms = {}, e.canIAddToProject = !0, e.canIAddToSelectedProject = function(t) {
var n = _.get(t, "metadata.name");
i.getProjectRules(n).then(function() {
e.canIAddToProject = i.canIAddToProject(n), e.forms && e.forms.selectProjectForm.selectProject.$setValidity("cannotAddToProject", e.canIAddToProject);
});
};
} ]), angular.module("openshiftConsole").controller("CreateProjectController", [ "$scope", "$location", "$window", "AuthService", "Constants", function(e, t, n, r, a) {
var o = !a.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
e.onProjectCreated = function(e) {
o ? n.history.back() : t.path("project/" + e + "/create");
}, r.withUser();
} ]), angular.module("openshiftConsole").controller("EditProjectController", [ "$scope", "$routeParams", "$filter", "$location", "DataService", "ProjectsService", "Navigate", function(e, t, n, r, a, o, i) {
e.alerts = {};
var s = n("annotation"), c = n("annotationName");
o.get(t.project).then(_.spread(function(a) {
var l = function(e) {
return {
description: s(e, "description"),
displayName: s(e, "displayName")
};
}, u = function(e, t) {
var n = angular.copy(e);
return n.metadata.annotations[c("description")] = t.description, n.metadata.annotations[c("displayName")] = t.displayName, n;
};
angular.extend(e, {
project: a,
editableFields: l(a),
show: {
editing: !1
},
actions: {
canSubmit: !1
},
canSubmit: function(t) {
e.actions.canSubmit = t;
},
update: function() {
e.disableInputs = !0, o.update(t.project, u(a, e.editableFields)).then(function() {
t.then ? r.path(t.then) : i.toProjectOverview(a.metadata.name);
}, function(t) {
e.disableInputs = !1, e.editableFields = l(a), e.alerts.update = {
>>>>>>> Check if user can add to existing project during create from url
type: "error",
message: "The image details could not be loaded.",
details: e("getErrorDetails")(n)
};
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, 200), u = function(t, n, a) {
s(t, n), "DELETED" === a && (e.alerts.deleted = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, 200), m = function(e, n, a) {
=======
}, 200), p = function(e, n, a) {
>>>>>>> Support EnvFrom in the Env Editors
c(e, n), "DELETED" === a && (t.alerts.deleted = {
>>>>>>> Update ImageController to use getPreferredVersion
=======
}, 200), p = function(e, n, r) {
c(e, n), "DELETED" === r && (t.alerts.deleted = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "warning",
message: "This image stream has been deleted."
});
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
s.get(n.project).then(_.spread(function(r, o) {
t.project = r, a.get(u, n.imagestream, o, {
errorNotification: !1
}).then(function(e) {
p(e, o), d.push(a.watchObject(u, n.imagestream, o, function(e, t) {
p(e, o, t);
}));
}, function(n) {
t.loaded = !0, t.alerts.load = {
type: "error",
message: "The image stream details could not be loaded.",
details: e("getErrorDetails")(n)
};
}), t.$on("$destroy", function() {
a.unwatchAll(d);
});
}));
} ]), angular.module("openshiftConsole").controller("ImagesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.imageStreams = {}, n.unfilteredImageStreams = {}, n.missingStatusTagsByImageStream = {}, n.builds = {}, n.labelSuggestions = {}, n.clearFilter = function() {
o.clear();
};
var c = r.getPreferredVersion("imagestreams"), l = [];
s.get(t.project).then(_.spread(function(e, t) {
function r() {
angular.forEach(n.unfilteredImageStreams, function(e, t) {
var r = n.missingStatusTagsByImageStream[t] = {};
if (e.spec && e.spec.tags) {
var a = {};
e.status && e.status.tags && angular.forEach(e.status.tags, function(e) {
a[e.tag] = !0;
}), angular.forEach(e.spec.tags, function(e) {
a[e.name] || (r[e.name] = e);
=======
a.get(t.project).then(_.spread(function(a, o) {
e.project = a, n.get("imagestreams", t.imagestream, o, {
=======
s.get(n.project).then(_.spread(function(a, o) {
t.project = a, r.get(u, n.imagestream, o, {
>>>>>>> Update ImageController to use getPreferredVersion
=======
s.get(n.project).then(_.spread(function(r, o) {
t.project = r, a.get(u, n.imagestream, o, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(e) {
p(e, o), d.push(a.watchObject(u, n.imagestream, o, function(e, t) {
p(e, o, t);
}));
}, function(n) {
t.loaded = !0, t.alerts.load = {
type: "error",
message: "The image stream details could not be loaded.",
details: e("getErrorDetails")(n)
};
}), t.$on("$destroy", function() {
a.unwatchAll(d);
});
}));
} ]), angular.module("openshiftConsole").controller("ImagesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.imageStreams = {}, n.unfilteredImageStreams = {}, n.missingStatusTagsByImageStream = {}, n.builds = {}, n.labelSuggestions = {}, n.clearFilter = function() {
o.clear();
};
var c = r.getPreferredVersion("imagestreams"), l = [];
s.get(t.project).then(_.spread(function(e, t) {
function r() {
angular.forEach(n.unfilteredImageStreams, function(e, t) {
var r = n.missingStatusTagsByImageStream[t] = {};
if (e.spec && e.spec.tags) {
var a = {};
e.status && e.status.tags && angular.forEach(e.status.tags, function(e) {
a[e.tag] = !0;
}), angular.forEach(e.spec.tags, function(e) {
<<<<<<< HEAD
r[e.name] || (a[e.name] = e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a[e.name] || (r[e.name] = e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
});
}
<<<<<<< HEAD
<<<<<<< HEAD
function s() {
n.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(n.imageStreams) && !_.isEmpty(n.unfilteredImageStreams);
}
n.project = e, l.push(a.watch(c, t, function(e) {
n.imageStreamsLoaded = !0, n.unfilteredImageStreams = e.by("metadata.name"), o.addLabelSuggestionsFromResources(n.unfilteredImageStreams, n.labelSuggestions), o.setLabelSuggestions(n.labelSuggestions), n.imageStreams = o.getLabelSelector().select(n.unfilteredImageStreams), r(), s(), i.log("image streams (subscribe)", n.imageStreams);
})), o.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.imageStreams = e.select(n.unfilteredImageStreams), s();
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ImageStreamController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ImageStreamsService", "Navigate", "gettext", "ProjectsService", function(e, t, n, r, a, o, i, s, c) {
n.projectName = t.project, n.imageStream = null, n.tags = [], n.tagShowOlder = {}, n.alerts = {}, n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0, n.breadcrumbs = [ {
=======
function c() {
o.getLabelSelector().isEmpty() || !$.isEmptyObject(t.imageStreams) || $.isEmptyObject(t.unfilteredImageStreams) ? delete t.alerts.imageStreams : t.alerts.imageStreams = {
=======
function s() {
<<<<<<< HEAD
o.getLabelSelector().isEmpty() || !$.isEmptyObject(n.imageStreams) || $.isEmptyObject(n.unfilteredImageStreams) ? delete n.alerts.imageStreams : n.alerts.imageStreams = {
>>>>>>> Update ImageController to use getPreferredVersion
type: "warning",
details: "The active filters are hiding all image streams."
};
=======
n.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(n.imageStreams) && !_.isEmpty(n.unfilteredImageStreams);
>>>>>>> Replacing empty tables with empty state message
}
n.project = e, l.push(a.watch(c, t, function(e) {
n.imageStreamsLoaded = !0, n.unfilteredImageStreams = e.by("metadata.name"), o.addLabelSuggestionsFromResources(n.unfilteredImageStreams, n.labelSuggestions), o.setLabelSuggestions(n.labelSuggestions), n.imageStreams = o.getLabelSelector().select(n.unfilteredImageStreams), r(), s(), i.log("image streams (subscribe)", n.imageStreams);
})), o.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.imageStreams = e.select(n.unfilteredImageStreams), s();
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ImageStreamController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", "ImageStreamsService", "Navigate", function(e, t, n, a, r, o, i) {
e.projectName = t.project, e.imageStream = null, e.tags = [], e.tagShowOlder = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").controller("ImageStreamController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ImageStreamsService", "Navigate", "ProjectsService", function(e, t, n, a, r, o, i, s) {
=======
} ]), angular.module("openshiftConsole").controller("ImageStreamController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ImageStreamsService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.imageStream = null, n.tags = [], n.tagShowOlder = {}, n.alerts = {}, n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0, n.breadcrumbs = [ {
>>>>>>> Update ImageController to use getPreferredVersion
title: "Image Streams",
link: "project/" + t.project + "/browse/images"
}, {
title: t.imagestream
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ], n.emptyMessage = s("Loading..."), n.imageStreamsVersion = r.getPreferredVersion("imagestreams"), n.imageStreamsVersion = r.getPreferredVersion("imagestreams");
var l = [];
c.get(t.project).then(_.spread(function(r, i) {
n.project = r, a.get(n.imageStreamsVersion, t.imagestream, i, {
errorNotification: !1
}).then(function(e) {
n.loaded = !0, n.imageStream = e, n.emptyMessage = s("No tags to show"), l.push(a.watchObject(n.imageStreamsVersion, t.imagestream, i, function(e, t) {
"DELETED" === t && (n.alerts.deleted = {
type: "warning",
message: "This image stream has been deleted."
}), n.imageStream = e, n.tags = _.toArray(o.tagsByName(n.imageStream));
}));
}, function(t) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The image stream details could not be loaded.",
details: e("getErrorDetails")(t)
=======
} ]), angular.module("openshiftConsole").controller("ImageStreamController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", "ImageStreamsService", "Navigate", function(a, b, c, d, e, f, g) {
a.projectName = b.project, a.imageStream = null, a.tags = [], a.tagShowOlder = {}, a.alerts = {}, a.renderOptions = a.renderOptions || {}, a.renderOptions.hideFilterWidget = !0, a.breadcrumbs = [ {
title:"Image Streams",
link:"project/" + b.project + "/browse/images"
}, {
title:b.imagestream
} ], a.emptyMessage = "Loading...";
var h = [];
d.get(b.project).then(_.spread(function(d, g) {
a.project = d, c.get("imagestreams", b.imagestream, g, {
errorNotification:!1
}).then(function(d) {
a.loaded = !0, a.imageStream = d, a.emptyMessage = "No tags to show", h.push(c.watchObject("imagestreams", b.imagestream, g, function(b, c) {
"DELETED" === c && (a.alerts.deleted = {
type:"warning",
message:"This image stream has been deleted."
}), a.imageStream = b, a.tags = _.toArray(f.tagsByName(a.imageStream));
=======
} ], e.emptyMessage = "Loading...";
var s = [];
a.get(t.project).then(_.spread(function(a, i) {
e.project = a, n.get("imagestreams", t.imagestream, i, {
=======
} ], n.emptyMessage = "Loading...", n.imageStreamsVersion = a.getPreferredVersion("imagestreams");
var c = [];
s.get(t.project).then(_.spread(function(a, i) {
n.project = a, r.get(n.imageStreamsVersion, t.imagestream, i, {
>>>>>>> Update ImageController to use getPreferredVersion
=======
} ], n.emptyMessage = "Loading...", n.imageStreamsVersion = r.getPreferredVersion("imagestreams");
var c = [];
s.get(t.project).then(_.spread(function(r, i) {
n.project = r, a.get(n.imageStreamsVersion, t.imagestream, i, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(e) {
n.loaded = !0, n.imageStream = e, n.emptyMessage = "No tags to show", c.push(a.watchObject(n.imageStreamsVersion, t.imagestream, i, function(e, t) {
"DELETED" === t && (n.alerts.deleted = {
type: "warning",
message: "This image stream has been deleted."
<<<<<<< HEAD
}), e.imageStream = t, e.tags = _.toArray(o.tagsByName(e.imageStream));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), n.imageStream = e, n.tags = _.toArray(o.tagsByName(n.imageStream));
>>>>>>> Update ImageController to use getPreferredVersion
}));
}, function(t) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The image stream details could not be loaded.",
details: e("getErrorDetails")(t)
};
}), n.$on("$destroy", function() {
a.unwatchAll(c);
});
})), n.imagestreamPath = function(e, t) {
if (!t.status) return "";
var n = i.resourceURL(e.metadata.name, "ImageStream", e.metadata.namespace);
return t && (n += "/" + t.name), n;
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("DeploymentsController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "LabelFilter", "Logger", "OwnerReferencesService", "ProjectsService", function(e, t, n, a, r, o, i, s, c) {
e.projectName = n.project, e.replicationControllers = {}, e.unfilteredDeploymentConfigs = {}, e.unfilteredDeployments = {}, e.replicationControllersByDC = {}, e.labelSuggestions = {}, e.alerts = e.alerts || {}, e.emptyMessage = "Loading...", e.expandedDeploymentConfigRow = {}, e.unfilteredReplicaSets = {}, e.unfilteredReplicationControllers = {};
<<<<<<< HEAD
<<<<<<< HEAD
var l, u, d = t("annotation"), p = function() {
l && u && (e.replicaSetsByDeploymentUID = s.groupByControllerUID(l), e.unfilteredReplicaSets = _.get(e, [ "replicaSetsByDeploymentUID", "" ], {}), o.addLabelSuggestionsFromResources(e.unfilteredReplicaSets, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), e.replicaSets = o.getLabelSelector().select(e.unfilteredReplicaSets), e.latestReplicaSetByDeploymentUID = {}, _.each(e.replicaSetsByDeploymentUID, function(t, n) {
n && (e.latestReplicaSetByDeploymentUID[n] = r.getActiveReplicaSet(t, u[n]));
=======
var u, d, m = t("annotation"), p = a.getPreferredVersion("deployments"), f = a.getPreferredVersion("deploymentconfigs"), g = a.getPreferredVersion("replicationcontrollers"), h = a.getPreferredVersion("replicasets"), v = function() {
=======
var u, d, m = t("annotation"), p = a.getPreferredVersion("deployments"), f = a.getPreferredVersion("deploymentconfigs"), g = a.getPreferredVersion("replicationcontrollers"), v = a.getPreferredVersion("replicasets"), h = function() {
>>>>>>> Add SVG icons
u && d && (e.replicaSetsByDeploymentUID = c.groupByControllerUID(u), e.unfilteredReplicaSets = _.get(e, [ "replicaSetsByDeploymentUID", "" ], {}), i.addLabelSuggestionsFromResources(e.unfilteredReplicaSets, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicaSets = i.getLabelSelector().select(e.unfilteredReplicaSets), e.latestReplicaSetByDeploymentUID = {}, _.each(e.replicaSetsByDeploymentUID, function(t, n) {
n && (e.latestReplicaSetByDeploymentUID[n] = o.getActiveReplicaSet(t, d[n]));
>>>>>>> Support EnvFrom in the Env Editors
}));
<<<<<<< HEAD
}, m = [];
c.get(n.project).then(_.spread(function(n, s) {
function c() {
o.getLabelSelector().isEmpty() ? delete e.alerts.deployments : _.isEmpty(e.unfilteredDeploymentConfigs) && _.isEmpty(e.unfilteredReplicationControllers) && _.isEmpty(e.unfilteredDeployments) && _.isEmpty(e.unfilteredReplicaSets) ? delete e.alerts.deployments : _.isEmpty(e.deploymentConfigs) && _.isEmpty(e.replicationControllersByDC[""]) && _.isEmpty(e.deployments) && _.isEmpty(e.replicaSets) ? e.alerts.deployments = {
type: "warning",
details: "The active filters are hiding all deployments."
} : delete e.alerts.deployments;
}
e.project = n, m.push(a.watch("replicationcontrollers", s, function(n, a, s) {
e.replicationControllers = n.by("metadata.name");
var l, u;
<<<<<<< HEAD
if (s && (l = d(s, "deploymentConfig"), u = s.metadata.name), e.replicationControllersByDC = r.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], o.addLabelSuggestionsFromResources(e.unfilteredReplicationControllers, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), e.replicationControllersByDC[""] = o.getLabelSelector().select(e.replicationControllersByDC[""])), c(), a) {
if ("ADDED" === a || "MODIFIED" === a && [ "New", "Pending", "Running" ].indexOf(t("deploymentStatus")(s)) > -1) e.deploymentConfigDeploymentsInProgress[l] = e.deploymentConfigDeploymentsInProgress[l] || {}, e.deploymentConfigDeploymentsInProgress[l][u] = s; else if ("MODIFIED" === a) {
var p = t("deploymentStatus")(s);
"Complete" !== p && "Failed" !== p || delete e.deploymentConfigDeploymentsInProgress[l][u];
=======
if (r && (l = m(r, "deploymentConfig"), u = r.metadata.name), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], i.addLabelSuggestionsFromResources(e.unfilteredReplicationControllers, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), c(), a) {
if ("ADDED" === a || "MODIFIED" === a && [ "New", "Pending", "Running" ].indexOf(t("deploymentStatus")(r)) > -1) e.deploymentConfigDeploymentsInProgress[l] = e.deploymentConfigDeploymentsInProgress[l] || {}, e.deploymentConfigDeploymentsInProgress[l][u] = r; else if ("MODIFIED" === a) {
var d = t("deploymentStatus")(r);
"Complete" !== d && "Failed" !== d || delete e.deploymentConfigDeploymentsInProgress[l][u];
>>>>>>> Support EnvFrom in the Env Editors
=======
} ]), angular.module("openshiftConsole").controller("DeploymentsController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "LabelFilter", "Logger", "OwnerReferencesService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
=======
} ]), angular.module("openshiftConsole").controller("DeploymentsController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "LabelFilter", "Logger", "OwnerReferencesService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function u() {
var t = _.isEmpty(e.unfilteredDeploymentConfigs) && _.isEmpty(e.unfilteredReplicationControllers) && _.isEmpty(e.unfilteredDeployments) && _.isEmpty(e.unfilteredReplicaSets), n = !i.getLabelSelector().isEmpty(), r = _.isEmpty(e.deploymentConfigs) && _.isEmpty(e.replicationControllersByDC[""]) && _.isEmpty(e.deployments) && _.isEmpty(e.replicaSets);
e.showEmptyState = t, e.filterWithZeroResults = n && r && !t;
}
e.projectName = n.project, e.replicationControllers = {}, e.unfilteredDeploymentConfigs = {}, e.unfilteredDeployments = {}, e.replicationControllersByDC = {}, e.labelSuggestions = {}, e.emptyMessage = "Loading...", e.expandedDeploymentConfigRow = {}, e.unfilteredReplicaSets = {}, e.unfilteredReplicationControllers = {}, e.showEmptyState = !0, e.clearFilter = function() {
i.clear();
};
var d, m, p = t("annotation"), f = r.getPreferredVersion("deployments"), g = r.getPreferredVersion("deploymentconfigs"), v = r.getPreferredVersion("replicationcontrollers"), h = r.getPreferredVersion("replicasets"), y = function() {
d && m && (e.replicaSetsByDeploymentUID = c.groupByControllerUID(d), e.unfilteredReplicaSets = _.get(e, [ "replicaSetsByDeploymentUID", "" ], {}), i.addLabelSuggestionsFromResources(e.unfilteredReplicaSets, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicaSets = i.getLabelSelector().select(e.unfilteredReplicaSets), e.latestReplicaSetByDeploymentUID = {}, _.each(e.replicaSetsByDeploymentUID, function(t, n) {
n && (e.latestReplicaSetByDeploymentUID[n] = o.getActiveReplicaSet(t, m[n]));
}), u());
}, b = [];
l.get(n.project).then(_.spread(function(n, r) {
e.project = n, b.push(a.watch(v, r, function(n, r, a) {
e.replicationControllers = n.by("metadata.name");
var c, l;
if (a && (c = p(a, "deploymentConfig"), l = a.metadata.name), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], i.addLabelSuggestionsFromResources(e.unfilteredReplicationControllers, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), u(), r) {
if ("ADDED" === r || "MODIFIED" === r && [ "New", "Pending", "Running" ].indexOf(t("deploymentStatus")(a)) > -1) e.deploymentConfigDeploymentsInProgress[c] = e.deploymentConfigDeploymentsInProgress[c] || {}, e.deploymentConfigDeploymentsInProgress[c][l] = a; else if ("MODIFIED" === r) {
var d = t("deploymentStatus")(a);
"Complete" !== d && "Failed" !== d || delete e.deploymentConfigDeploymentsInProgress[c][l];
>>>>>>> Replacing empty tables with empty state message
=======
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
if (t.kind && t.name) {
var f = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ], g = e("humanizeKind");
if (_.includes(f, t.kind)) {
var v = {
resource: a.kindToResource(t.kind),
group: t.group
};
n.projectName = t.project, n.kind = t.kind, n.name = t.name, n.RELATIVE_PATH_PATTERN = p, n.outOfClaims = !1, n.attach = {
persistentVolumeClaim: null,
volumeName: null,
mountPath: null,
allContainers: !0,
containers: {}
}, n.breadcrumbs = i.getBreadcrumbs({
name: t.name,
kind: t.kind,
namespace: t.project,
subpage: "Add Storage"
}), n.pvcVersion = a.getPreferredVersion("persistentvolumeclaims");
var h = a.getPreferredVersion("resourcequotas"), y = a.getPreferredVersion("appliedclusterresourcequotas");
d.get(t.project).then(_.spread(function(a, d) {
if (n.project = a, o.canI(v, "update", t.project)) {
var p = e("orderByDisplayName"), f = e("getErrorDetails"), b = e("generateName"), S = function(e, t) {
n.disableInputs = !0, u.addNotification({
id: "attach-pvc-error",
type: "error",
message: e,
details: t
});
}, C = function() {
u.hideNotification("attach-pvc-error");
};
n.$on("$destroy", C);
var w = function() {
r.history.back();
};
n.cancel = w;
var P = function(e) {
return n.attach.allContainers || n.attach.containers[e.name];
}, j = function() {
var e = _.get(n, "attach.resource.spec.template");
n.existingMountPaths = m.getMountPaths(e, P);
};
n.$watchGroup([ "attach.resource", "attach.allContainers" ], j), n.$watch("attach.containers", j, !0);
s.get(v, t.name, d).then(function(e) {
n.attach.resource = e, n.breadcrumbs = i.getBreadcrumbs({
object: e,
project: a,
subpage: "Add Storage"
});
var t = _.get(e, "spec.template");
n.existingVolumeNames = m.getVolumeNames(t);
}, function(e) {
S(t.name + " could not be loaded.", f(e));
}), s.list(n.pvcVersion, d).then(function(e) {
n.pvcs = p(e.by("metadata.name")), _.isEmpty(n.pvcs) || n.attach.persistentVolumeClaim || (n.attach.persistentVolumeClaim = _.head(n.pvcs));
}), s.list(h, {
namespace: n.projectName
}, function(e) {
n.quotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), s.list(y, {
namespace: n.projectName
}, function(e) {
n.clusterQuotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), n.attachPVC = function() {
if (n.disableInputs = !0, C(), n.attachPVCForm.$valid) {
n.attach.volumeName || (n.attach.volumeName = b("volume-"));
var e = n.attach.resource, r = _.get(e, "spec.template"), a = n.attach.persistentVolumeClaim, o = n.attach.volumeName, i = n.attach.mountPath, c = n.attach.subPath, l = n.attach.readOnly;
i && angular.forEach(r.spec.containers, function(e) {
if (P(e)) {
var t = m.createVolumeMount(o, i, c, l);
e.volumeMounts || (e.volumeMounts = []), e.volumeMounts.push(t);
>>>>>>> Add Browse Catalog to Project context view.
}
<<<<<<< HEAD
} else e.deploymentConfigDeploymentsInProgress = r.associateRunningDeploymentToDeploymentConfig(e.replicationControllersByDC);
s ? "DELETED" !== a && (s.causes = t("deploymentCauses")(s)) : angular.forEach(e.replicationControllers, function(e) {
=======
} else e.deploymentConfigDeploymentsInProgress = o.associateRunningDeploymentToDeploymentConfig(e.replicationControllersByDC);
a ? "DELETED" !== r && (a.causes = t("deploymentCauses")(a)) : angular.forEach(e.replicationControllers, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.causes = t("deploymentCauses")(e);
<<<<<<< HEAD
}), i.log("replicationControllers (subscribe)", e.replicationControllers);
})), m.push(a.watch({
group: "extensions",
resource: "replicasets"
}, s, function(t) {
l = t.by("metadata.name"), p(), i.log("replicasets (subscribe)", e.replicaSets);
})), m.push(a.watch("deploymentconfigs", s, function(t) {
e.unfilteredDeploymentConfigs = t.by("metadata.name"), o.addLabelSuggestionsFromResources(e.unfilteredDeploymentConfigs, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), e.deploymentConfigs = o.getLabelSelector().select(e.unfilteredDeploymentConfigs), e.emptyMessage = "No deployment configurations to show", e.replicationControllersByDC = r.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = o.getLabelSelector().select(e.replicationControllersByDC[""])), c(), i.log("deploymentconfigs (subscribe)", e.deploymentConfigs);
})), m.push(a.watch({
group: "apps",
resource: "deployments"
}, s, function(t) {
u = e.unfilteredDeployments = t.by("metadata.uid"), o.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), e.deployments = o.getLabelSelector().select(e.unfilteredDeployments), p(), i.log("deployments (subscribe)", e.unfilteredDeployments);
=======
}), s.log("replicationControllers (subscribe)", e.replicationControllers);
<<<<<<< HEAD
<<<<<<< HEAD
})), y.push(r.watch(v, a, function(t) {
u = t.by("metadata.name"), h(), s.log("replicasets (subscribe)", e.replicaSets);
})), y.push(r.watch(f, a, function(t) {
e.unfilteredDeploymentConfigs = t.by("metadata.name"), i.addLabelSuggestionsFromResources(e.unfilteredDeploymentConfigs, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deploymentConfigs = i.getLabelSelector().select(e.unfilteredDeploymentConfigs), e.emptyMessage = "No deployment configurations to show", e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), c(), s.log("deploymentconfigs (subscribe)", e.deploymentConfigs);
})), y.push(r.watch(p, a, function(t) {
<<<<<<< HEAD
d = e.unfilteredDeployments = t.by("metadata.uid"), i.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deployments = i.getLabelSelector().select(e.unfilteredDeployments), v(), s.log("deployments (subscribe)", e.unfilteredDeployments);
>>>>>>> Support EnvFrom in the Env Editors
=======
d = e.unfilteredDeployments = t.by("metadata.uid"), i.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deployments = i.getLabelSelector().select(e.unfilteredDeployments), h(), s.log("deployments (subscribe)", e.unfilteredDeployments);
>>>>>>> Add SVG icons
})), e.showEmptyMessage = function() {
return 0 === t("hashSize")(e.replicationControllersByDC) || !(1 !== t("hashSize")(e.replicationControllersByDC) || !e.replicationControllersByDC[""]);
}, o.onActiveFiltersChanged(function(t) {
e.$apply(function() {
e.deploymentConfigs = t.select(e.unfilteredDeploymentConfigs), e.replicationControllersByDC = r.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = o.getLabelSelector().select(e.replicationControllersByDC[""])), e.deployments = t.select(e.unfilteredDeployments), e.replicaSets = t.select(e.unfilteredReplicaSets), c();
=======
})), b.push(r.watch(h, a, function(t) {
=======
})), b.push(a.watch(h, r, function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
d = t.by("metadata.name"), y(), s.log("replicasets (subscribe)", e.replicaSets);
})), b.push(a.watch(g, r, function(t) {
e.deploymentConfigsLoaded = !0, e.unfilteredDeploymentConfigs = t.by("metadata.name"), i.addLabelSuggestionsFromResources(e.unfilteredDeploymentConfigs, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deploymentConfigs = i.getLabelSelector().select(e.unfilteredDeploymentConfigs), e.emptyMessage = "No deployment configurations to show", e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), u(), s.log("deploymentconfigs (subscribe)", e.deploymentConfigs);
})), b.push(a.watch(f, r, function(t) {
m = e.unfilteredDeployments = t.by("metadata.uid"), i.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deployments = i.getLabelSelector().select(e.unfilteredDeployments), y(), s.log("deployments (subscribe)", e.unfilteredDeployments);
})), e.showDeploymentConfigTable = function() {
var t = _.size(e.replicationControllersByDC);
return t > 1 || 1 === t && !e.replicationControllersByDC[""];
}, i.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.deploymentConfigs = t.select(e.unfilteredDeploymentConfigs), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), e.deployments = t.select(e.unfilteredDeployments), e.replicaSets = t.select(e.unfilteredReplicaSets), u();
});
}), e.$on("$destroy", function() {
<<<<<<< HEAD
r.unwatchAll(b);
>>>>>>> Replacing empty tables with empty state message
=======
a.unwatchAll(b);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
<<<<<<< HEAD
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "OwnerReferencesService", "Logger", "ProjectsService", "StorageService", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
var n = {};
a.projectName = c.project, a.name = c.deployment, a.forms = {}, a.alerts = {}, a.imagesByDockerReference = {}, a.breadcrumbs = [ {
title:"Deployments",
link:"project/" + c.project + "/browse/deployments"
}, {
title:c.deployment
<<<<<<< HEAD
} ], a.healthCheckURL = j.healthCheckURL(c.project, "Deployment", c.deployment, "apps");
var p = !1, q = function(b, c) {
if (!p) {
if (!a.forms.deploymentEnvVars || a.forms.deploymentEnvVars.$pristine) return void (a.updatedDeployment = f.copyAndNormalize(b));
if (f.isEnvironmentEqual(b, c)) return void (a.updatedDeployment = f.mergeEdits(a.updatedDeployment, b));
p = !0, a.alerts["env-conflict"] = {
type:"warning",
message:"The environment variables for the deployment have been updated in the background. Saving your changes may create a conflict or cause loss of data.",
links:[ {
label:"Reload Environment Variables",
onClick:function() {
return a.clearEnvVarUpdates(), !0;
}
} ]
};
}
}, r = b("orderByDisplayName"), s = b("getErrorDetails"), t = function(b, c) {
a.alerts["from-value-objects"] = {
type:"error",
message:b,
details:c
>>>>>>> Use `apps` API group for deployments
};
}), n.$on("$destroy", function() {
a.unwatchAll(l);
=======
} ], a.healthCheckURL = i.healthCheckURL(c.project, "Deployment", c.deployment, "apps");
var o = [];
l.get(c.project).then(_.spread(function(i, l) {
a.project = i, a.projectContext = l;
var p = {}, q = function() {
f.getHPAWarnings(a.deployment, a.autoscalers, p, i).then(function(b) {
a.hpaWarnings = b;
>>>>>>> Create reusable edit-environment-variables component
});
})), n.imagestreamPath = function(e, t) {
if (!t.status) return "";
var n = i.resourceURL(e.metadata.name, "ImageStream", e.metadata.namespace);
return t && (n += "/" + t.name), n;
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("DeploymentsController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "LabelFilter", "Logger", "OwnerReferencesService", "ProjectsService", "gettext", function(e, t, n, r, a, o, i, s, c, l, u) {
function d() {
var t = _.isEmpty(e.unfilteredDeploymentConfigs) && _.isEmpty(e.unfilteredReplicationControllers) && _.isEmpty(e.unfilteredDeployments) && _.isEmpty(e.unfilteredReplicaSets), n = !i.getLabelSelector().isEmpty(), r = _.isEmpty(e.deploymentConfigs) && _.isEmpty(e.replicationControllersByDC[""]) && _.isEmpty(e.deployments) && _.isEmpty(e.replicaSets);
e.showEmptyState = t, e.filterWithZeroResults = n && r && !t;
}
e.projectName = n.project, e.replicationControllers = {}, e.unfilteredDeploymentConfigs = {}, e.unfilteredDeployments = {}, e.replicationControllersByDC = {}, e.labelSuggestions = {}, e.emptyMessage = u("Loading..."), e.expandedDeploymentConfigRow = {}, e.unfilteredReplicaSets = {}, e.unfilteredReplicationControllers = {}, e.showEmptyState = !0, e.clearFilter = function() {
i.clear();
};
var m, p, g = t("annotation"), f = r.getPreferredVersion("deploymentconfigs"), v = r.getPreferredVersion("replicationcontrollers"), h = r.getPreferredVersion("replicasets"), y = function() {
m && p && (e.replicaSetsByDeploymentUID = c.groupByControllerUID(m), e.unfilteredReplicaSets = _.get(e, [ "replicaSetsByDeploymentUID", "" ], {}), i.addLabelSuggestionsFromResources(e.unfilteredReplicaSets, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicaSets = i.getLabelSelector().select(e.unfilteredReplicaSets), e.latestReplicaSetByDeploymentUID = {}, _.each(e.replicaSetsByDeploymentUID, function(t, n) {
n && (e.latestReplicaSetByDeploymentUID[n] = o.getActiveReplicaSet(t, p[n]));
}), d());
}, b = [];
l.get(n.project).then(_.spread(function(n, r) {
e.project = n, b.push(a.watch(v, r, function(n, r, a) {
e.replicationControllers = n.by("metadata.name");
var c, l;
if (a && (c = g(a, "deploymentConfig"), l = a.metadata.name), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], i.addLabelSuggestionsFromResources(e.unfilteredReplicationControllers, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), d(), r) {
if ("ADDED" === r || "MODIFIED" === r && [ "New", "Pending", "Running" ].indexOf(t("deploymentStatus")(a)) > -1) e.deploymentConfigDeploymentsInProgress[c] = e.deploymentConfigDeploymentsInProgress[c] || {}, e.deploymentConfigDeploymentsInProgress[c][l] = a; else if ("MODIFIED" === r) {
var u = t("deploymentStatus")(a);
"Complete" !== u && "Failed" !== u || delete e.deploymentConfigDeploymentsInProgress[c][l];
}
} else e.deploymentConfigDeploymentsInProgress = o.associateRunningDeploymentToDeploymentConfig(e.replicationControllersByDC);
a ? "DELETED" !== r && (a.causes = t("deploymentCauses")(a)) : angular.forEach(e.replicationControllers, function(e) {
e.causes = t("deploymentCauses")(e);
}), s.log("replicationControllers (subscribe)", e.replicationControllers);
})), b.push(a.watch(h, r, function(t) {
m = t.by("metadata.name"), y(), s.log("replicasets (subscribe)", e.replicaSets);
})), b.push(a.watch(f, r, function(t) {
e.deploymentConfigsLoaded = !0, e.unfilteredDeploymentConfigs = t.by("metadata.name"), i.addLabelSuggestionsFromResources(e.unfilteredDeploymentConfigs, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deploymentConfigs = i.getLabelSelector().select(e.unfilteredDeploymentConfigs), e.emptyMessage = u("No deployment configurations to show"), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), d(), s.log("deploymentconfigs (subscribe)", e.deploymentConfigs);
})), b.push(a.watch({
group: "apps",
resource: "deployments"
}, r, function(t) {
p = e.unfilteredDeployments = t.by("metadata.uid"), i.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deployments = i.getLabelSelector().select(e.unfilteredDeployments), y(), s.log("deployments (subscribe)", e.unfilteredDeployments);
})), e.showDeploymentConfigTable = function() {
var t = _.size(e.replicationControllersByDC);
return t > 1 || 1 === t && !e.replicationControllersByDC[""];
}, i.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.deploymentConfigs = t.select(e.unfilteredDeploymentConfigs), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), e.deployments = t.select(e.unfilteredDeployments), e.replicaSets = t.select(e.unfilteredReplicaSets), d();
=======
}), e.$on("$destroy", function() {
a.unwatchAll(m);
>>>>>>> Updates for Service Instance & Bindings
});
}), e.$on("$destroy", function() {
a.unwatchAll(b);
});
=======
d.get({
group:"apps",
resource:"deployments"
}, c.deployment, l, {
errorNotification:!1
}).then(function(b) {
a.loaded = !0, a.deployment = b, q(), o.push(d.watchObject({
group:"apps",
resource:"deployments"
}, c.deployment, l, function(b, c) {
"DELETED" === c && (a.alerts.deleted = {
type:"warning",
message:"This deployment has been deleted."
}), a.deployment = b, a.updatingPausedState = !1, q(), g.fetchReferencedImageStreamImages([ b.spec.template ], a.imagesByDockerReference, n, l);
})), o.push(d.watch({
group:"extensions",
resource:"replicasets"
<<<<<<< HEAD
}, m, function(b) {
var c = b.by("metadata.name");
c = k.filterForController(c, g), a.inProgressDeployment = _.chain(c).filter("status.replicas").size() > 1, a.replicaSetsForDeployment = e.sortByRevision(c);
>>>>>>> Use `apps` API group for deployments
}));
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v) {
var h = {};
=======
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", function(e, t, n, a, r, o, i, s, c, l, u, d, p, m) {
=======
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
>>>>>>> Support EnvFrom in the Env Editors
var f = {};
>>>>>>> Updates for Service Instance & Bindings
e.projectName = n.project, e.name = n.deployment, e.replicaSetsForDeployment = {}, e.unfilteredReplicaSetsForDeployment = {}, e.labelSuggestions = {}, e.emptyMessage = "Loading...", e.forms = {}, e.alerts = {}, e.imagesByDockerReference = {}, e.breadcrumbs = [ {
title: f("Deployments"),
link: "project/" + n.project + "/browse/deployments"
}, {
title: n.deployment
<<<<<<< HEAD
} ];
var y = r.getPreferredVersion("builds"), b = r.getPreferredVersion("replicasets"), S = r.getPreferredVersion("limitranges"), C = r.getPreferredVersion("imagestreams");
e.deploymentsVersion = r.getPreferredVersion("deployments"), e.eventsVersion = r.getPreferredVersion("events"), e.horizontalPodAutoscalersVersion = r.getPreferredVersion("horizontalpodautoscalers"), e.healthCheckURL = d.healthCheckURL(n.project, "Deployment", n.deployment, e.deploymentsVersion.group);
var w = [];
p.get(n.project).then(_.spread(function(r, d) {
function p() {
c.getLabelSelector().isEmpty() || !_.isEmpty(e.replicaSetsForDeployment) || _.isEmpty(e.unfilteredReplicaSetsForDeployment) ? delete e.alerts["filter-hiding-all"] : e.alerts["filter-hiding-all"] = {
=======
} ], e.healthCheckURL = u.healthCheckURL(n.project, "Deployment", n.deployment, "apps");
var g = [];
m.get(n.project).then(_.spread(function(u, m) {
function h() {
s.getLabelSelector().isEmpty() || !_.isEmpty(e.replicaSetsForDeployment) || _.isEmpty(e.unfilteredReplicaSetsForDeployment) ? delete e.alerts["filter-hiding-all"] : e.alerts["filter-hiding-all"] = {
>>>>>>> Updates for Service Instance & Bindings
type: "warning",
details: "The active filters are hiding all rollout history."
};
}
<<<<<<< HEAD
<<<<<<< HEAD
e.project = r, e.projectContext = d;
var P = {}, j = function() {
i.getHPAWarnings(e.deployment, e.autoscalers, P, r).then(function(t) {
e.hpaWarnings = t;
});
};
a.get(e.deploymentsVersion, n.deployment, d, {
errorNotification: !1
}).then(function(t) {
e.loaded = !0, e.deployment = t, j(), w.push(a.watchObject(e.deploymentsVersion, n.deployment, d, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This deployment has been deleted."
}), e.deployment = t, e.updatingPausedState = !1, j(), s.fetchReferencedImageStreamImages([ t.spec.template ], e.imagesByDockerReference, h, d);
})), w.push(a.watch(b, d, function(n) {
=======
e.project = u, e.projectContext = p;
=======
e.project = u, e.projectContext = m;
>>>>>>> Support EnvFrom in the Env Editors
var v = {}, y = function() {
o.getHPAWarnings(e.deployment, e.autoscalers, v, u).then(function(t) {
e.hpaWarnings = t;
});
};
a.get({
group: "apps",
resource: "deployments"
}, n.deployment, m, {
errorNotification: !1
}).then(function(t) {
e.loaded = !0, e.deployment = t, y(), g.push(a.watchObject({
group: "apps",
resource: "deployments"
}, n.deployment, m, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This deployment has been deleted."
}), e.deployment = t, e.updatingPausedState = !1, y(), i.fetchReferencedImageStreamImages([ t.spec.template ], e.imagesByDockerReference, f, m);
})), g.push(a.watch({
group: "extensions",
resource: "replicasets"
<<<<<<< HEAD
}, p, function(n) {
>>>>>>> Updates for Service Instance & Bindings
=======
}, m, function(n) {
>>>>>>> Support EnvFrom in the Env Editors
e.emptyMessage = "No deployments to show";
var r = n.by("metadata.name");
r = m.filterForController(r, t), e.inProgressDeployment = _.chain(r).filter("status.replicas").length > 1, e.unfilteredReplicaSetsForDeployment = o.sortByRevision(r), e.replicaSetsForDeployment = c.getLabelSelector().select(e.unfilteredReplicaSetsForDeployment), p(), c.addLabelSuggestionsFromResources(e.unfilteredReplicaSetsForDeployment, e.labelSuggestions), c.setLabelSuggestions(e.labelSuggestions);
}));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This deployment can not be found, it may have been deleted." : "The deployment details could not be loaded.",
details: t("getErrorDetails")(n)
};
<<<<<<< HEAD
<<<<<<< HEAD
}), a.list(S, d).then(function(e) {
P = e.by("metadata.name"), j();
}), w.push(a.watch(C, d, function(t) {
var n = t.by("metadata.name");
s.buildDockerRefMapForImageStreams(n, h), e.deployment && s.fetchReferencedImageStreamImages([ e.deployment.spec.template ], e.imagesByDockerReference, h, d), l.log("imagestreams (subscribe)", e.imageStreams);
})), w.push(a.watch(e.horizontalPodAutoscalersVersion, d, function(t) {
e.autoscalers = i.filterHPA(t.by("metadata.name"), "Deployment", n.deployment), j();
})), w.push(a.watch(y, d, function(t) {
e.builds = t.by("metadata.name"), l.log("builds (subscribe)", e.builds);
})), c.onActiveFiltersChanged(function(t) {
=======
}), a.list("limitranges", p).then(function(e) {
=======
}), a.list("limitranges", m).then(function(e) {
>>>>>>> Support EnvFrom in the Env Editors
v = e.by("metadata.name"), y();
}), g.push(a.watch("imagestreams", m, function(t) {
var n = t.by("metadata.name");
i.buildDockerRefMapForImageStreams(n, f), e.deployment && i.fetchReferencedImageStreamImages([ e.deployment.spec.template ], e.imagesByDockerReference, f, m), c.log("imagestreams (subscribe)", e.imageStreams);
})), g.push(a.watch({
group: "autoscaling",
resource: "horizontalpodautoscalers",
version: "v1"
}, m, function(t) {
e.autoscalers = o.filterHPA(t.by("metadata.name"), "Deployment", n.deployment), y();
})), g.push(a.watch("builds", m, function(t) {
e.builds = t.by("metadata.name"), c.log("builds (subscribe)", e.builds);
})), s.onActiveFiltersChanged(function(t) {
>>>>>>> Updates for Service Instance & Bindings
e.$evalAsync(function() {
e.replicaSetsForDeployment = t.select(e.unfilteredReplicaSetsForDeployment), p();
});
}), e.scale = function(n) {
o.scale(e.deployment, n).then(_.noop, function(n) {
e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: "An error occurred scaling the deployment.",
details: t("getErrorDetails")(n)
};
});
}, e.setPaused = function(n) {
<<<<<<< HEAD
<<<<<<< HEAD
e.updatingPausedState = !0, o.setPaused(e.deployment, n, d).then(_.noop, function(r) {
=======
e.updatingPausedState = !0, r.setPaused(e.deployment, n, p).then(_.noop, function(a) {
>>>>>>> Updates for Service Instance & Bindings
=======
e.updatingPausedState = !0, r.setPaused(e.deployment, n, m).then(_.noop, function(a) {
>>>>>>> Support EnvFrom in the Env Editors
e.updatingPausedState = !1, e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: v.getString(f("An error occurred")) + " " + (n ? v.getString(f("pausing")) : v.getString(f("resuming"))) + " " + v.getString(f("the deployment.")),
details: t("getErrorDetails")(r)
};
});
}, e.removeVolume = function(t) {
var n;
n = _.get(e, "deployment.spec.paused") ? v.getString(f("This will remove the volume from the deployment.")) : v.getString(f("This will remove the volume from the deployment and start a new rollout.")), t.persistentVolumeClaim ? n += " " + v.getString(f("It will not delete the persistent volume claim.")) : t.secret ? n += " " + v.getString(f("It will not delete the secret.")) : t.configMap && (n += " " + v.getString(f("It will not delete the config map.")));
u.confirm({
title: v.getString(f("Remove volume")) + " " + t.name + "?",
details: n,
okButtonText: v.getString(f("Remove")),
okButtonClass: "btn-danger",
cancelButtonText: v.getString(f("Cancel"))
}).then(function() {
<<<<<<< HEAD
<<<<<<< HEAD
g.removeVolume(e.deployment, t, d);
=======
m.removeVolume(e.deployment, t, p);
>>>>>>> Updates for Service Instance & Bindings
=======
p.removeVolume(e.deployment, t, m);
>>>>>>> Support EnvFrom in the Env Editors
});
}, e.$on("$destroy", function() {
a.unwatchAll(w);
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("DeploymentConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "NotificationsService", "Logger", "ProjectsService", "StorageService", "LabelFilter", "labelNameFilter", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v, h, y) {
var b = {};
=======
} ]), angular.module("openshiftConsole").controller("DeploymentConfigController", [ "$scope", "$filter", "$routeParams", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "NotificationsService", "Logger", "ProjectsService", "StorageService", "LabelFilter", "labelNameFilter", function(e, t, n, a, r, o, i, s, c, l, u, d, p, m, f, g) {
=======
} ]), angular.module("openshiftConsole").controller("DeploymentConfigController", [ "$scope", "$filter", "$routeParams", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "NotificationsService", "Logger", "ProjectsService", "StorageService", "LabelFilter", "labelNameFilter", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g) {
>>>>>>> Support EnvFrom in the Env Editors
var h = {};
>>>>>>> Updates for Service Instance & Bindings
e.projectName = n.project, e.deploymentConfigName = n.deploymentconfig, e.deploymentConfig = null, e.deployments = {}, e.unfilteredDeployments = {}, e.imagesByDockerReference = {}, e.builds = {}, e.labelSuggestions = {}, e.forms = {}, e.alerts = {}, e.breadcrumbs = a.getBreadcrumbs({
name: n.deploymentconfig,
kind: "DeploymentConfig",
namespace: n.project
<<<<<<< HEAD
}), e.emptyMessage = h("Loading..."), e.deploymentConfigsInstantiateVersion = r.getPreferredVersion("deploymentconfigs/instantiate"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.horizontalPodAutoscalersVersion = r.getPreferredVersion("horizontalpodautoscalers");
var S = r.getPreferredVersion("builds"), C = r.getPreferredVersion("imagestreams"), w = r.getPreferredVersion("limitranges"), P = r.getPreferredVersion("replicationcontrollers");
e.healthCheckURL = u.healthCheckURL(n.project, "DeploymentConfig", n.deploymentconfig, e.deploymentConfigsVersion.group);
var j = t("mostRecent"), k = t("orderObjectsByDate"), I = [];
p.get(n.project).then(_.spread(function(r, a) {
=======
}), e.emptyMessage = "Loading...", e.healthCheckURL = l.healthCheckURL(n.project, "DeploymentConfig", n.deploymentconfig);
var v = t("mostRecent"), y = t("orderObjectsByDate"), b = [];
<<<<<<< HEAD
p.get(n.project).then(_.spread(function(a, l) {
>>>>>>> Updates for Service Instance & Bindings
=======
m.get(n.project).then(_.spread(function(a, l) {
>>>>>>> Support EnvFrom in the Env Editors
function u() {
f.getLabelSelector().isEmpty() || !$.isEmptyObject(e.deployments) || $.isEmptyObject(e.unfilteredDeployments) ? delete e.alerts.deployments : e.alerts.deployments = {
type: "warning",
details: "The active filters are hiding all deployments."
};
}
<<<<<<< HEAD
e.project = r, e.projectContext = a;
var d = {}, p = function() {
s.getHPAWarnings(e.deploymentConfig, e.autoscalers, d, r).then(function(t) {
=======
e.project = a, e.projectContext = l;
<<<<<<< HEAD
var p = {}, C = function() {
i.getHPAWarnings(e.deploymentConfig, e.autoscalers, p, a).then(function(t) {
>>>>>>> Updates for Service Instance & Bindings
=======
var m = {}, C = function() {
i.getHPAWarnings(e.deploymentConfig, e.autoscalers, m, a).then(function(t) {
>>>>>>> Support EnvFrom in the Env Editors
e.hpaWarnings = t;
});
};
o.get(e.deploymentConfigsVersion, n.deploymentconfig, a, {
errorNotification: !1
}).then(function(r) {
e.loaded = !0, e.deploymentConfig = r, e.strategyParams = t("deploymentStrategyParams")(r), p(), I.push(o.watchObject(e.deploymentConfigsVersion, n.deploymentconfig, a, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This deployment configuration has been deleted."
}), e.deploymentConfig = t, e.updatingPausedState = !1, p(), c.fetchReferencedImageStreamImages([ t.spec.template ], e.imagesByDockerReference, b, a);
}));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This deployment configuration can not be found, it may have been deleted." : "The deployment configuration details could not be loaded.",
details: 404 === n.status ? "Any remaining deployment history for this deployment will be shown." : t("getErrorDetails")(n)
};
}), I.push(o.watch(P, a, function(r, a, o) {
var s = n.deploymentconfig;
<<<<<<< HEAD
if (e.emptyMessage = h("No deployments to show"), a) {
if (i.deploymentBelongsToConfig(o, n.deploymentconfig)) {
var c = o.metadata.name;
switch (a) {
=======
}, l, function(c) {
var d = c.by("metadata.name");
d = j.filterForController(d, b), a.inProgressDeployment = _.chain(d).filter("status.replicas").size() > 1, a.replicaSetsForDeployment = e.sortByRevision(d);
}));
}, function(c) {
a.loaded = !0, a.alerts.load = {
type:"error",
message:404 === c.status ? "This deployment can not be found, it may have been deleted." :"The deployment details could not be loaded.",
details:b("getErrorDetails")(c)
};
}), d.list("limitranges", l).then(function(a) {
p = a.by("metadata.name"), q();
}), o.push(d.watch("imagestreams", l, function(b) {
var c = b.by("metadata.name");
g.buildDockerRefMapForImageStreams(c, n), a.deployment && g.fetchReferencedImageStreamImages([ a.deployment.spec.template ], a.imagesByDockerReference, n, l), k.log("imagestreams (subscribe)", a.imageStreams);
})), o.push(d.watch({
group:"autoscaling",
resource:"horizontalpodautoscalers",
version:"v1"
}, l, function(b) {
a.autoscalers = f.filterHPA(b.by("metadata.name"), "Deployment", c.deployment), q();
})), o.push(d.watch("builds", l, function(b) {
a.builds = b.by("metadata.name"), k.log("builds (subscribe)", a.builds);
})), a.scale = function(c) {
var d = function(c) {
a.alerts = a.alerts || {}, a.alerts.scale = {
type:"error",
message:"An error occurred scaling the deployment.",
details:b("getErrorDetails")(c)
};
};
e.scale(a.deployment, c).then(_.noop, d);
}, a.setPaused = function(c) {
a.updatingPausedState = !0, e.setPaused(a.deployment, c, l).then(_.noop, function(d) {
a.updatingPausedState = !1, a.alerts = a.alerts || {}, a.alerts.scale = {
type:"error",
message:"An error occurred " + (c ? "pausing" :"resuming") + " the deployment.",
details:b("getErrorDetails")(d)
};
});
}, a.removeVolume = function(b) {
var c;
c = _.get(a, "deployment.spec.paused") ? "This will remove the volume from the deployment." :"This will remove the volume from the deployment and start a new rollout.", b.persistentVolumeClaim ? c += " It will not delete the persistent volume claim." :b.secret ? c += " It will not delete the secret." :b.configMap && (c += " It will not delete the config map.");
var d = h.confirm({
message:"Remove volume " + b.name + "?",
details:c,
okButtonText:"Remove",
okButtonClass:"btn-danger",
cancelButtonText:"Cancel"
}), e = function() {
m.removeVolume(a.deployment, b, l);
};
d.then(e);
}, a.$on("$destroy", function() {
d.unwatchAll(o);
=======
}), e.$on("$destroy", function() {
a.unwatchAll(p);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}));
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
var g = {};
e.projectName = n.project, e.name = n.deployment, e.replicaSetsForDeployment = {}, e.unfilteredReplicaSetsForDeployment = {}, e.labelSuggestions = {}, e.emptyMessage = "Loading...", e.forms = {}, e.alerts = {}, e.imagesByDockerReference = {}, e.breadcrumbs = [ {
title: "Deployments",
link: "project/" + n.project + "/browse/deployments"
}, {
title: n.deployment
} ], e.healthCheckURL = u.healthCheckURL(n.project, "Deployment", n.deployment, "apps");
var f = [];
=======
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
var f = {};
e.projectName = n.project, e.name = n.deployment, e.replicaSetsForDeployment = {}, e.unfilteredReplicaSetsForDeployment = {}, e.labelSuggestions = {}, e.emptyMessage = "Loading...", e.forms = {}, e.alerts = {}, e.imagesByDockerReference = {}, e.breadcrumbs = [ {
title: "Deployments",
link: "project/" + n.project + "/browse/deployments"
}, {
title: n.deployment
} ], e.healthCheckURL = u.healthCheckURL(n.project, "Deployment", n.deployment, "apps");
var g = [];
>>>>>>> Patternfly vertical navigation and project bar
m.get(n.project).then(_.spread(function(u, m) {
function h() {
s.getLabelSelector().isEmpty() || !_.isEmpty(e.replicaSetsForDeployment) || _.isEmpty(e.unfilteredReplicaSetsForDeployment) ? delete e.alerts["filter-hiding-all"] : e.alerts["filter-hiding-all"] = {
type: "warning",
details: "The active filters are hiding all rollout history."
};
}
e.project = u, e.projectContext = m;
var v = {}, y = function() {
o.getHPAWarnings(e.deployment, e.autoscalers, v, u).then(function(t) {
e.hpaWarnings = t;
});
};
a.get({
group: "apps",
resource: "deployments"
}, n.deployment, m, {
=======
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f) {
=======
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var g = {};
e.projectName = n.project, e.name = n.deployment, e.replicaSetsForDeployment = {}, e.unfilteredReplicaSetsForDeployment = {}, e.labelSuggestions = {}, e.emptyMessage = "Loading...", e.forms = {}, e.alerts = {}, e.imagesByDockerReference = {}, e.breadcrumbs = [ {
title: "Deployments",
link: "project/" + n.project + "/browse/deployments"
}, {
title: n.deployment
} ];
var v = r.getPreferredVersion("builds"), h = r.getPreferredVersion("replicasets"), y = r.getPreferredVersion("limitranges"), b = r.getPreferredVersion("imagestreams");
e.deploymentsVersion = r.getPreferredVersion("deployments"), e.eventsVersion = r.getPreferredVersion("events"), e.horizontalPodAutoscalersVersion = r.getPreferredVersion("horizontalpodautoscalers"), e.healthCheckURL = d.healthCheckURL(n.project, "Deployment", n.deployment, e.deploymentsVersion.group);
var S = [];
p.get(n.project).then(_.spread(function(r, d) {
function p() {
c.getLabelSelector().isEmpty() || !_.isEmpty(e.replicaSetsForDeployment) || _.isEmpty(e.unfilteredReplicaSetsForDeployment) ? delete e.alerts["filter-hiding-all"] : e.alerts["filter-hiding-all"] = {
type: "warning",
details: "The active filters are hiding all rollout history."
};
}
e.project = r, e.projectContext = d;
var C = {}, w = function() {
i.getHPAWarnings(e.deployment, e.autoscalers, C, r).then(function(t) {
e.hpaWarnings = t;
});
};
<<<<<<< HEAD
r.get(e.deploymentsVersion, n.deployment, d, {
>>>>>>> Update deployment controller to get getPreferredVersion
=======
a.get(e.deploymentsVersion, n.deployment, d, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(t) {
e.loaded = !0, e.deployment = t, w(), S.push(a.watchObject(e.deploymentsVersion, n.deployment, d, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This deployment has been deleted."
}), e.deployment = t, e.updatingPausedState = !1, w(), s.fetchReferencedImageStreamImages([ t.spec.template ], e.imagesByDockerReference, g, d);
})), S.push(a.watch(h, d, function(n) {
e.emptyMessage = "No deployments to show";
var r = n.by("metadata.name");
r = m.filterForController(r, t), e.inProgressDeployment = _.chain(r).filter("status.replicas").length > 1, e.unfilteredReplicaSetsForDeployment = o.sortByRevision(r), e.replicaSetsForDeployment = c.getLabelSelector().select(e.unfilteredReplicaSetsForDeployment), p(), c.addLabelSuggestionsFromResources(e.unfilteredReplicaSetsForDeployment, e.labelSuggestions), c.setLabelSuggestions(e.labelSuggestions);
}));
<<<<<<< HEAD
}, function(c) {
a.loaded = !0, a.alerts.load = {
type:"error",
message:404 === c.status ? "This deployment configuration can not be found, it may have been deleted." :"The deployment configuration details could not be loaded.",
details:404 === c.status ? "Any remaining deployment history for this deployment will be shown." :b("getErrorDetails")(c)
};
}), t.push(e.watch("replicationcontrollers", j, function(d, e, g) {
var h = c.deploymentconfig;
if (a.emptyMessage = "No deployments to show", e) {
if (f.deploymentBelongsToConfig(g, c.deploymentconfig)) {
var i = g.metadata.name;
switch (e) {
>>>>>>> Create reusable edit-environment-variables component
case "ADDED":
case "MODIFIED":
e.unfilteredDeployments[c] = o, t("deploymentIsInProgress")(o) ? (e.deploymentConfigDeploymentsInProgress[s] = e.deploymentConfigDeploymentsInProgress[s] || {}, e.deploymentConfigDeploymentsInProgress[s][c] = o) : e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c], o.causes = t("deploymentCauses")(o);
=======
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This deployment can not be found, it may have been deleted." : "The deployment details could not be loaded.",
details: t("getErrorDetails")(n)
};
<<<<<<< HEAD
}), a.list(y, d).then(function(e) {
C = e.by("metadata.name"), w();
}), S.push(a.watch(b, d, function(t) {
var n = t.by("metadata.name");
s.buildDockerRefMapForImageStreams(n, g), e.deployment && s.fetchReferencedImageStreamImages([ e.deployment.spec.template ], e.imagesByDockerReference, g, d), l.log("imagestreams (subscribe)", e.imageStreams);
})), S.push(a.watch(e.horizontalPodAutoscalersVersion, d, function(t) {
e.autoscalers = i.filterHPA(t.by("metadata.name"), "Deployment", n.deployment), w();
})), S.push(a.watch(v, d, function(t) {
e.builds = t.by("metadata.name"), l.log("builds (subscribe)", e.builds);
})), c.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.replicaSetsForDeployment = t.select(e.unfilteredReplicaSetsForDeployment), p();
});
}), e.scale = function(n) {
o.scale(e.deployment, n).then(_.noop, function(n) {
e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: "An error occurred scaling the deployment.",
details: t("getErrorDetails")(n)
=======
} ]), angular.module("openshiftConsole").controller("LogoutModalController", [ "$timeout", "$location", "$filter", "$scope", "$uibModalInstance", "Constants", function(e, t, n, r, a, o) {
r.endTimestamp = moment().add(30, "seconds").toString();
var i = e(function() {
r.logout();
}, 3e4);
r.logout = function() {
e.cancel(i), a.close("logout");
}, r.cancel = function() {
e.cancel(i), a.close("cancel");
}, r.$on("$destroy", function() {
e.cancel(i);
});
} ]), angular.module("openshiftConsole").controller("JenkinsfileExamplesModalController", [ "$scope", "$uibModalInstance", function(e, t) {
<<<<<<< HEAD
e.ok = function() {
t.close("ok");
>>>>>>> Configurable inactivity timeout in console
};
});
}, e.setPaused = function(n) {
e.updatingPausedState = !0, o.setPaused(e.deployment, n, d).then(_.noop, function(r) {
e.updatingPausedState = !1, e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: "An error occurred " + (n ? "pausing" : "resuming") + " the deployment.",
details: t("getErrorDetails")(r)
};
});
}, e.removeVolume = function(t) {
var n;
n = _.get(e, "deployment.spec.paused") ? "This will remove the volume from the deployment." : "This will remove the volume from the deployment and start a new rollout.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
u.confirm({
message: "Remove volume " + t.name + "?",
details: n,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
}).then(function() {
f.removeVolume(e.deployment, t, d);
});
}, e.$on("$destroy", function() {
a.unwatchAll(S);
});
}));
} ]), angular.module("openshiftConsole").controller("DeploymentConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "NotificationsService", "Logger", "ProjectsService", "StorageService", "LabelFilter", "labelNameFilter", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v) {
var h = {};
e.projectName = n.project, e.deploymentConfigName = n.deploymentconfig, e.deploymentConfig = null, e.deployments = {}, e.unfilteredDeployments = {}, e.imagesByDockerReference = {}, e.builds = {}, e.labelSuggestions = {}, e.forms = {}, e.alerts = {}, e.breadcrumbs = a.getBreadcrumbs({
name: n.deploymentconfig,
kind: "DeploymentConfig",
namespace: n.project
}), e.emptyMessage = "Loading...", e.deploymentConfigsInstantiateVersion = r.getPreferredVersion("deploymentconfigs/instantiate"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.horizontalPodAutoscalersVersion = r.getPreferredVersion("horizontalpodautoscalers");
var y = r.getPreferredVersion("builds"), b = r.getPreferredVersion("imagestreams"), S = r.getPreferredVersion("limitranges"), C = r.getPreferredVersion("replicationcontrollers");
e.healthCheckURL = u.healthCheckURL(n.project, "DeploymentConfig", n.deploymentconfig, e.deploymentConfigsVersion.group);
var w = t("mostRecent"), P = t("orderObjectsByDate"), k = [];
p.get(n.project).then(_.spread(function(r, a) {
function u() {
g.getLabelSelector().isEmpty() || !$.isEmptyObject(e.deployments) || $.isEmptyObject(e.unfilteredDeployments) ? delete e.alerts.deployments : e.alerts.deployments = {
type: "warning",
details: "The active filters are hiding all deployments."
=======
e.close = function() {
t.close("close");
};
} ]), angular.module("openshiftConsole").controller("AboutComputeUnitsModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.close = function() {
t.close("close");
>>>>>>> Update modals to align with PatternFly standard
};
<<<<<<< HEAD
=======
} ]), angular.module("openshiftConsole").controller("SetHomePageModalController", [ "$scope", "$uibModalInstance", "HomePagePreferenceService", "ProjectsService", function(e, t, n, r) {
e.homePagePreference = n.getHomePagePreference(), e.availableProjects = [], e.selectedProject = null, e.onProjectSelected = function(t) {
e.selectedProject = t;
}, e.onOpen = function() {
e.homePagePreference = "project-overview";
}, e.preselectedProjectName = n.getHomePageProjectName(), r.list().then(function(t) {
e.availableProjects = _.toArray(t.by("metadata.name")), e.availableProjects = _.reject(e.availableProjects, "metadata.deletionTimestamp"), 1 === e.availableProjects.length ? e.selectedProject = e.availableProjects[0] : e.preselectedProjectName && (e.selectedProject = _.find(e.availableProjects, {
metadata: {
name: e.preselectedProjectName
}
}));
}), e.setHomePage = function() {
var r = {
type: e.homePagePreference
};
"project-overview" === e.homePagePreference && e.selectedProject && (r.project = e.selectedProject.metadata.name), n.setHomePagePreference(r), t.close("setHomePage");
}, e.cancel = function() {
t.dismiss("cancel");
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("AboutController", [ "$scope", "AuthService", "Constants", function(e, t, n) {
t.withUser(), e.version = {
master: {
openshift: n.VERSION.openshift,
kubernetes: n.VERSION.kubernetes
<<<<<<< HEAD
>>>>>>> Set Home Page Preference
}
e.project = r, e.projectContext = a;
var d = {}, p = function() {
s.getHPAWarnings(e.deploymentConfig, e.autoscalers, d, r).then(function(t) {
e.hpaWarnings = t;
});
=======
},
console: n.VERSION.console
>>>>>>> Add console version to about page
};
o.get(e.deploymentConfigsVersion, n.deploymentconfig, a, {
errorNotification: !1
}).then(function(r) {
e.loaded = !0, e.deploymentConfig = r, e.strategyParams = t("deploymentStrategyParams")(r), p(), k.push(o.watchObject(e.deploymentConfigsVersion, n.deploymentconfig, a, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This deployment configuration has been deleted."
}), e.deploymentConfig = t, e.updatingPausedState = !1, p(), c.fetchReferencedImageStreamImages([ t.spec.template ], e.imagesByDockerReference, h, a);
}));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This deployment configuration can not be found, it may have been deleted." : "The deployment configuration details could not be loaded.",
details: 404 === n.status ? "Any remaining deployment history for this deployment will be shown." : t("getErrorDetails")(n)
};
}), k.push(o.watch(C, a, function(r, a, o) {
var s = n.deploymentconfig;
<<<<<<< HEAD
=======
>>>>>>> Support EnvFrom in the Env Editors
if (e.emptyMessage = "No deployments to show", r) {
=======
if (e.emptyMessage = "No deployments to show", a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (i.deploymentBelongsToConfig(o, n.deploymentconfig)) {
var c = o.metadata.name;
switch (a) {
case "ADDED":
case "MODIFIED":
<<<<<<< HEAD
e.unfilteredDeployments[c] = i, t("deploymentIsInProgress")(i) ? (e.deploymentConfigDeploymentsInProgress[s] = e.deploymentConfigDeploymentsInProgress[s] || {}, e.deploymentConfigDeploymentsInProgress[s][c] = i) : e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c], i.causes = t("deploymentCauses")(i);
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Support EnvFrom in the Env Editors
=======
e.unfilteredDeployments[c] = o, t("deploymentIsInProgress")(o) ? (e.deploymentConfigDeploymentsInProgress[s] = e.deploymentConfigDeploymentsInProgress[s] || {}, e.deploymentConfigDeploymentsInProgress[s][c] = o) : e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c], o.causes = t("deploymentCauses")(o);
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
break;

case "DELETED":
delete e.unfilteredDeployments[c], e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c];
}
}
} else {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var l = i.associateDeploymentsToDeploymentConfig(r.by("metadata.name"));
e.unfilteredDeployments = l[n.deploymentconfig] || {}, angular.forEach(e.unfilteredDeployments, function(e) {
e.causes = t("deploymentCauses")(e);
}), e.deploymentConfigDeploymentsInProgress = i.associateRunningDeploymentToDeploymentConfig(l);
}
<<<<<<< HEAD
e.deployments = f.getLabelSelector().select(e.unfilteredDeployments), e.orderedDeployments = k(e.deployments, !0), e.deploymentInProgress = !!_.size(e.deploymentConfigDeploymentsInProgress[s]), e.mostRecent = j(e.unfilteredDeployments), u(), f.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), f.setLabelSuggestions(e.labelSuggestions);
=======
} ]), angular.module("openshiftConsole").controller("AboutController", [ "$scope", "$q", "AuthService", "Constants", "DataService", function(e, t, n, r, a) {
n.withUser(), e.version = {
master: {},
console: r.VERSION.console || "unknown"
};
var o = e.version.master, i = [];
i.push(a.getKubernetesMasterVersion().then(function(e) {
o.kubernetes = e.data.gitVersion;
})), i.push(a.getOpenShiftMasterVersion().then(function(e) {
o.openshift = e.data.gitVersion;
})), t.all(i).finally(function() {
o.kubernetes = o.kubernetes || r.VERSION.kubernetes || "unknown", o.openshift = o.openshift || r.VERSION.openshift || "unknown";
});
} ]), angular.module("openshiftConsole").controller("CommandLineController", [ "$scope", "DataService", "AuthService", "Constants", function(e, t, n, r) {
n.withUser(), e.cliDownloadURL = r.CLI, e.cliDownloadURLPresent = e.cliDownloadURL && !_.isEmpty(e.cliDownloadURL), e.loginBaseURL = t.openshiftAPIBaseUrl(), r.DISABLE_COPY_LOGIN_COMMAND || (e.sessionToken = n.UserStore().getToken());
} ]), angular.module("openshiftConsole").controller("CreatePersistentVolumeClaimController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d) {
n.projectName = t.project, n.accessModes = "ReadWriteOnce", n.claim = {}, n.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.projectName + "/browse/storage"
>>>>>>> Bug 1539566 - Request server version on about page load
}, {
http: {
params: {
labelSelector: v("deploymentConfig") + "=" + e.deploymentConfigName
}
}
})), o.list(w, a).then(function(e) {
d = e.by("metadata.name"), p();
}), I.push(o.watch(C, a, function(t) {
var n = t.by("metadata.name");
c.buildDockerRefMapForImageStreams(n, b), e.deploymentConfig && c.fetchReferencedImageStreamImages([ e.deploymentConfig.spec.template ], e.imagesByDockerReference, b, a), m.log("imagestreams (subscribe)", e.imageStreams);
})), I.push(o.watch(S, a, function(t) {
e.builds = t.by("metadata.name"), m.log("builds (subscribe)", e.builds);
})), I.push(o.watch(e.horizontalPodAutoscalersVersion, a, function(t) {
e.autoscalers = s.filterHPA(t.by("metadata.name"), "DeploymentConfig", n.deploymentconfig), p();
})), f.onActiveFiltersChanged(function(t) {
e.$apply(function() {
e.deployments = t.select(e.unfilteredDeployments), e.orderedDeployments = k(e.deployments, !0), u();
=======
=======
>>>>>>> Support EnvFrom in the Env Editors
var l = o.associateDeploymentsToDeploymentConfig(a.by("metadata.name"));
=======
var l = i.associateDeploymentsToDeploymentConfig(a.by("metadata.name"));
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
=======
var l = i.associateDeploymentsToDeploymentConfig(r.by("metadata.name"));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.unfilteredDeployments = l[n.deploymentconfig] || {}, angular.forEach(e.unfilteredDeployments, function(e) {
e.causes = t("deploymentCauses")(e);
}), e.deploymentConfigDeploymentsInProgress = i.associateRunningDeploymentToDeploymentConfig(l);
}
e.deployments = g.getLabelSelector().select(e.unfilteredDeployments), e.orderedDeployments = P(e.deployments, !0), e.deploymentInProgress = !!_.size(e.deploymentConfigDeploymentsInProgress[s]), e.mostRecent = w(e.unfilteredDeployments), u(), g.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), g.setLabelSuggestions(e.labelSuggestions);
}, {
http: {
params: {
labelSelector: v("deploymentConfig") + "=" + e.deploymentConfigName
}
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})), r.list("limitranges", l).then(function(e) {
<<<<<<< HEAD
p = e.by("metadata.name"), C();
=======
m = e.by("metadata.name"), C();
>>>>>>> Support EnvFrom in the Env Editors
}), b.push(r.watch("imagestreams", l, function(t) {
=======
})), o.list(C, r).then(function(e) {
d = e.by("metadata.name"), p();
}), j.push(o.watch(b, r, function(t) {
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
=======
})), o.list(S, r).then(function(e) {
d = e.by("metadata.name"), p();
<<<<<<< HEAD
<<<<<<< HEAD
}), P.push(o.watch(b, r, function(t) {
>>>>>>> Service instance details configuration and edit
=======
}), j.push(o.watch(b, r, function(t) {
>>>>>>> Add product icons for service catalog
=======
}), P.push(o.watch(b, r, function(t) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
})), o.list(C, r).then(function(e) {
=======
})), o.list(S, r).then(function(e) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
})), o.list(S, r).then(function(e) {
>>>>>>> Adding label filter to ste secrets page
d = e.by("metadata.name"), p();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), j.push(o.watch(b, r, function(t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), P.push(o.watch(b, r, function(t) {
>>>>>>> Update template service broker flag name
=======
}), k.push(o.watch(b, r, function(t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}), P.push(o.watch(b, r, function(t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}), k.push(o.watch(b, r, function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
})), o.list(S, a).then(function(e) {
d = e.by("metadata.name"), p();
}), k.push(o.watch(b, a, function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var n = t.by("metadata.name");
c.buildDockerRefMapForImageStreams(n, h), e.deploymentConfig && c.fetchReferencedImageStreamImages([ e.deploymentConfig.spec.template ], e.imagesByDockerReference, h, a), m.log("imagestreams (subscribe)", e.imageStreams);
})), k.push(o.watch(y, a, function(t) {
e.builds = t.by("metadata.name"), m.log("builds (subscribe)", e.builds);
})), k.push(o.watch(e.horizontalPodAutoscalersVersion, a, function(t) {
e.autoscalers = s.filterHPA(t.by("metadata.name"), "DeploymentConfig", n.deploymentconfig), p();
})), g.onActiveFiltersChanged(function(t) {
e.$apply(function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e.deployments = t.select(e.unfilteredDeployments), e.orderedDeployments = y(e.deployments, !0), u();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.deployments = t.select(e.unfilteredDeployments), e.orderedDeployments = k(e.deployments, !0), u();
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
=======
e.deployments = t.select(e.unfilteredDeployments), e.orderedDeployments = P(e.deployments, !0), u();
>>>>>>> Fix for adding non-builder templates to a project
=======
e.deployments = t.select(e.unfilteredDeployments), e.orderedDeployments = k(e.deployments, !0), u();
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
e.deployments = t.select(e.unfilteredDeployments), e.orderedDeployments = P(e.deployments, !0), u();
>>>>>>> Update pod controller to use getPreferredVersion
});
}), e.canDeploy = function() {
return !!e.deploymentConfig && (!e.deploymentConfig.metadata.deletionTimestamp && (!e.deploymentInProgress && !e.deploymentConfig.spec.paused));
}, e.startLatestDeployment = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e.canDeploy() && i.startLatestDeployment(e.deploymentConfig, a);
}, e.scale = function(n) {
i.scale(e.deploymentConfig, n).then(_.noop, function(n) {
=======
e.canDeploy() && o.startLatestDeployment(e.deploymentConfig, l);
}, e.scale = function(n) {
o.scale(e.deploymentConfig, n).then(_.noop, function(n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.canDeploy() && i.startLatestDeployment(e.deploymentConfig, r);
=======
e.canDeploy() && i.startLatestDeployment(e.deploymentConfig, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, e.scale = function(n) {
i.scale(e.deploymentConfig, n).then(_.noop, function(n) {
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
e.alerts["scale-error"] = {
type: "error",
message: "An error occurred scaling the deployment config.",
details: t("getErrorDetails")(n)
<<<<<<< HEAD
=======
a.deployments = o.getLabelSelector().select(a.unfilteredDeployments), a.orderedDeployments = s(a.deployments, !0), a.deploymentInProgress = !!_.size(a.deploymentConfigDeploymentsInProgress[h]), a.mostRecent = r(a.unfilteredDeployments), k(), o.addLabelSuggestionsFromResources(a.unfilteredDeployments, a.labelSuggestions), o.setLabelSuggestions(a.labelSuggestions);
}, {
http:{
params:{
labelSelector:p("deploymentConfig") + "=" + a.deploymentConfigName
}
}
})), e.list("limitranges", j).then(function(a) {
m = a.by("metadata.name"), u();
}), t.push(e.watch("imagestreams", j, function(b) {
var c = b.by("metadata.name");
h.buildDockerRefMapForImageStreams(c, q), a.deploymentConfig && h.fetchReferencedImageStreamImages([ a.deploymentConfig.spec.template ], a.imagesByDockerReference, q, j), l.log("imagestreams (subscribe)", a.imageStreams);
})), t.push(e.watch("builds", j, function(b) {
a.builds = b.by("metadata.name"), l.log("builds (subscribe)", a.builds);
})), t.push(e.watch({
group:"autoscaling",
resource:"horizontalpodautoscalers",
version:"v1"
}, j, function(b) {
a.autoscalers = g.filterHPA(b.by("metadata.name"), "DeploymentConfig", c.deploymentconfig), u();
})), o.onActiveFiltersChanged(function(b) {
a.$apply(function() {
a.deployments = b.select(a.unfilteredDeployments), a.orderedDeployments = s(a.deployments, !0), k();
});
}), a.canDeploy = function() {
return !!a.deploymentConfig && (!a.deploymentConfig.metadata.deletionTimestamp && (!a.deploymentInProgress && !a.deploymentConfig.spec.paused));
}, a.startLatestDeployment = function() {
a.canDeploy() && f.startLatestDeployment(a.deploymentConfig, j);
}, a.scale = function(c) {
var d = function(c) {
a.alerts["scale-error"] = {
type:"error",
message:"An error occurred scaling the deployment config.",
details:b("getErrorDetails")(c)
};
};
f.scale(a.deploymentConfig, c).then(_.noop, d);
}, a.setPaused = function(c) {
a.updatingPausedState = !0, f.setPaused(a.deploymentConfig, c, j).then(_.noop, function(d) {
a.updatingPausedState = !1, a.alerts["pause-error"] = {
type:"error",
message:"An error occurred " + (c ? "pausing" :"resuming") + " the deployment config.",
details:b("getErrorDetails")(d)
>>>>>>> Create reusable edit-environment-variables component
};
});
}, e.setPaused = function(n) {
<<<<<<< HEAD
<<<<<<< HEAD
e.updatingPausedState = !0, i.setPaused(e.deploymentConfig, n, a).then(_.noop, function(r) {
=======
e.updatingPausedState = !0, i.setPaused(e.deploymentConfig, n, r).then(_.noop, function(a) {
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
=======
e.updatingPausedState = !0, i.setPaused(e.deploymentConfig, n, a).then(_.noop, function(r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.updatingPausedState = !1, e.alerts["pause-error"] = {
type: "error",
message: "An error occurred " + (n ? "pausing" : "resuming") + " the deployment config.",
details: t("getErrorDetails")(r)
<<<<<<< HEAD
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
});
<<<<<<< HEAD
}, e.setPaused = function(n) {
e.updatingPausedState = !0, o.setPaused(e.deploymentConfig, n, l).then(_.noop, function(a) {
e.updatingPausedState = !1, e.alerts["pause-error"] = {
type: "error",
message: "An error occurred " + (n ? "pausing" : "resuming") + " the deployment config.",
details: t("getErrorDetails")(a)
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var R = function() {
=======
var P = function() {
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
=======
var j = function() {
>>>>>>> Service instance details configuration and edit
=======
var P = function() {
>>>>>>> Add product icons for service catalog
=======
var j = function() {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var P = function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
};
<<<<<<< HEAD
var j = function() {
>>>>>>> Update template service broker flag name
if (_.get(e, "deploymentConfig.spec.paused")) return !1;
var t = _.get(e, "deploymentConfig.spec.triggers", []);
return _.some(t, {
type: "ConfigChange"
});
=======
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "APIService", "DataService", "NotificationsService", "ApplicationGenerator", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a, o, i) {
var s = n.getPreferredVersion("serviceaccounts"), c = n.getPreferredVersion("secrets");
return {
restrict: "E",
scope: {
type: "=",
serviceAccountToLink: "=?",
namespace: "=",
onCreate: "&",
onCancel: "&"
},
templateUrl: "views/directives/create-secret.html",
link: function(l) {
l.nameValidation = i, l.secretReferenceValidation = {
pattern: /^[a-zA-Z0-9\-_]+$/,
minLength: 8,
description: "Secret reference key must consist of lower-case, upper-case letters, numbers, dash, and underscore."
}, l.secretAuthTypeMap = {
image: {
label: "Image Secret",
authTypes: [ {
id: "kubernetes.io/dockercfg",
label: "Image Registry Credentials"
}, {
id: "kubernetes.io/dockerconfigjson",
label: "Configuration File"
} ]
},
source: {
label: "Source Secret",
authTypes: [ {
id: "kubernetes.io/basic-auth",
label: "Basic Authentication"
}, {
id: "kubernetes.io/ssh-auth",
label: "SSH Key"
} ]
},
webhook: {
label: "Webhook Secret",
authTypes: [ {
id: "Opaque",
label: "Webhook Secret"
} ]
}
}, l.secretTypes = _.keys(l.secretAuthTypeMap), l.type ? l.newSecret = {
type: l.type,
authType: l.secretAuthTypeMap[l.type].authTypes[0].id,
data: {},
linkSecret: !_.isEmpty(l.serviceAccountToLink),
pickedServiceAccountToLink: l.serviceAccountToLink || ""
} : l.newSecret = {
type: "source",
authType: "kubernetes.io/basic-auth",
data: {},
linkSecret: !1,
pickedServiceAccountToLink: ""
}, l.add = {
gitconfig: !1,
cacert: !1
}, t.canI("serviceaccounts", "list") && t.canI("serviceaccounts", "update") && r.list(s, l, function(e) {
l.serviceAccounts = e.by("metadata.name"), l.serviceAccountsNames = _.keys(l.serviceAccounts);
});
var u = function(e, t) {
var n = {
apiVersion: "v1",
kind: "Secret",
metadata: {
name: l.newSecret.data.secretName
},
type: t,
<<<<<<< HEAD
data: {}
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
};
e.removeVolume = function(t) {
var n;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
n = R() ? y.getString(h("This will remove the volume from the deployment config and trigger a new deployment.")) : y.getString(h("This will remove the volume from the deployment config.")), t.persistentVolumeClaim ? n += " " + y.getString(h("It will not delete the persistent volume claim.")) : t.secret ? n += " " + y.getString(h("It will not delete the secret.")) : t.configMap && (n += " " + y.getString(h("It will not delete the config map.")));
l.confirm({
title: y.getString(h("Remove volume")) + " " + t.name + "?",
=======
n = P() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
=======
n = j() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
>>>>>>> Service instance details configuration and edit
=======
n = P() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
>>>>>>> Add product icons for service catalog
=======
n = j() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
>>>>>>> Handle displaying parameters when secrets are not available.
=======
n = P() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
n = j() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
>>>>>>> Update template service broker flag name
l.confirm({
message: "Remove volume " + t.name + "?",
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
details: n,
okButtonText: y.getString(h("Remove")),
okButtonClass: "btn-danger",
cancelButtonText: y.getString(h("Cancel"))
}).then(function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
g.removeVolume(e.deploymentConfig, t, a);
=======
p.removeVolume(e.deploymentConfig, t, l);
>>>>>>> Support EnvFrom in the Env Editors
});
}, e.$on("$destroy", function() {
o.unwatchAll(I);
=======
f.removeVolume(e.deploymentConfig, t, r);
=======
f.removeVolume(e.deploymentConfig, t, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}, e.$on("$destroy", function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
o.unwatchAll(j);
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
=======
o.unwatchAll(P);
>>>>>>> Service instance details configuration and edit
=======
o.unwatchAll(j);
>>>>>>> Add product icons for service catalog
=======
o.unwatchAll(P);
>>>>>>> Handle displaying parameters when secrets are not available.
=======
o.unwatchAll(j);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
o.unwatchAll(P);
>>>>>>> Update template service broker flag name
=======
o.unwatchAll(k);
>>>>>>> Fix for adding non-builder templates to a project
=======
o.unwatchAll(P);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
o.unwatchAll(k);
>>>>>>> Update pod controller to use getPreferredVersion
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "keyValueEditorUtils", "kind", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "gettext", "gettextCatalog", "StorageService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v, h, y, b, S, C) {
var w = !1, P = t("annotation"), j = t("humanizeKind")(d), k = t("hasDeployment"), I = r.getPreferredVersion("builds"), R = r.getPreferredVersion("imagestreams"), T = r.getPreferredVersion("horizontalpodautoscalers"), E = r.getPreferredVersion("limitranges"), N = r.getPreferredVersion("pods"), D = r.getPreferredVersion("replicasets"), A = r.getPreferredVersion("replicationcontrollers"), $ = r.getPreferredVersion("resourcequotas"), B = r.getPreferredVersion("appliedclusterresourcequotas");
switch (d) {
=======
=======
>>>>>>> Support EnvFrom in the Env Editors
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "StorageService", "keyValueEditorUtils", "kind", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, h, v, y) {
=======
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "StorageService", "keyValueEditorUtils", "kind", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add SVG icons
var b = !1, C = t("annotation"), S = t("humanizeKind")(y), w = t("hasDeployment");
=======
var b = !1, S = t("annotation"), C = t("humanizeKind")(y), w = t("hasDeployment");
>>>>>>> Service instance details configuration and edit
=======
var b = !1, C = t("annotation"), S = t("humanizeKind")(y), w = t("hasDeployment");
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var b = !1, S = t("annotation"), C = t("humanizeKind")(y), w = t("hasDeployment");
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var b = !1, S = t("annotation"), C = t("humanizeKind")(y), w = t("hasDeployment");
>>>>>>> Adding label filter to ste secrets page
switch (y) {
>>>>>>> Patternfly vertical navigation and project bar
=======
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "keyValueEditorUtils", "kind", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "StorageService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b) {
=======
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "keyValueEditorUtils", "kind", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "StorageService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var S = !1, C = t("annotation"), w = t("humanizeKind")(d), P = t("hasDeployment");
switch (d) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
case "ReplicaSet":
<<<<<<< HEAD
e.resource = D, e.healthCheckURL = f.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions");
break;

case "ReplicationController":
e.resource = A, e.healthCheckURL = f.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
=======
e.resource = {
group: "extensions",
resource: "replicasets"
}, e.healthCheckURL = g.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions");
=======
stringData: {}
};
switch (t) {
case "kubernetes.io/basic-auth":
e.passwordToken ? n.stringData.password = e.passwordToken : n.type = "Opaque", e.username && (n.stringData.username = e.username), e.gitconfig && (n.stringData[".gitconfig"] = e.gitconfig), e.cacert && (n.stringData["ca.crt"] = e.cacert);
break;

case "kubernetes.io/ssh-auth":
n.stringData["ssh-privatekey"] = e.privateKey, e.gitconfig && (n.stringData[".gitconfig"] = e.gitconfig);
break;

case "kubernetes.io/dockerconfigjson":
var r = ".dockerconfigjson";
JSON.parse(e.dockerConfig).auths || (n.type = "kubernetes.io/dockercfg", r = ".dockercfg"), n.stringData[r] = e.dockerConfig;
>>>>>>> Secret creation should be using stringData
break;

<<<<<<< HEAD
case "ReplicationController":
<<<<<<< HEAD
e.resource = "replicationcontrollers", e.healthCheckURL = m.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
<<<<<<< HEAD
>>>>>>> Support EnvFrom in the Env Editors
}
<<<<<<< HEAD
<<<<<<< HEAD
var L = {};
e.projectName = n.project, e.kind = d, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {}, e.deploymentsVersion = r.getPreferredVersion("deployments"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.deploymentConfigsLogVersion = "deploymentconfigs/log";
var x = [];
p.isAvailable().then(function(t) {
e.metricsAvailable = t;
=======
case "kubernetes.io/dockercfg":
var a = window.btoa(e.dockerUsername + ":" + e.dockerPassword), o = {};
o[e.dockerServer] = {
username: e.dockerUsername,
password: e.dockerPassword,
email: e.dockerMail,
auth: a
}, n.stringData[".dockercfg"] = JSON.stringify(o);
break;

case "Opaque":
e.webhookSecretKey && (n.stringData.WebHookSecretKey = e.webhookSecretKey);
}
return n;
}, d = function() {
a.hideNotification("create-secret-error");
}, m = function(t) {
var o = angular.copy(l.serviceAccounts[l.newSecret.pickedServiceAccountToLink]), i = n.objectToResourceGroupVersion(o);
switch (l.newSecret.type) {
case "source":
o.secrets.push({
name: t.metadata.name
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
});
<<<<<<< HEAD
var V = t("deploymentStatus"), O = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], V(t));
}, U = t("isIE")();
y.get(n.project).then(_.spread(function(r, u) {
e.project = r, e.projectContext = u;
var p = {}, y = function() {
if (e.hpaForRS = c.filterHPA(p, d, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = c.filterHPA(p, "DeploymentConfig", e.deploymentConfigName);
=======
var P = t("deploymentStatus"), R = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], P(t));
<<<<<<< HEAD
}, T = t("isIE")() || t("isEdge")();
=======
=======
var k = {};
=======
var P = {};
>>>>>>> Fix for adding non-builder templates to a project
=======
}
<<<<<<< HEAD
var k = {};
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
var P = {};
>>>>>>> Update pod controller to use getPreferredVersion
e.projectName = n.project, e.kind = y, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {};
var k = [];
u.isAvailable().then(function(t) {
e.metricsAvailable = t;
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var j = t("deploymentStatus"), R = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], j(t));
>>>>>>> Service instance details configuration and edit
=======
var P = t("deploymentStatus"), R = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], P(t));
>>>>>>> Add product icons for service catalog
=======
var j = t("deploymentStatus"), R = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], j(t));
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var P = t("deploymentStatus"), R = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], P(t));
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var j = t("deploymentStatus"), R = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], j(t));
>>>>>>> Update template service broker flag name
}, I = t("isIE")();
>>>>>>> Allow unlimited websockets on Edge - also fix leaking websockets on monitoring page
g.get(n.project).then(_.spread(function(u, g) {
e.project = u, e.projectContext = g;
<<<<<<< HEAD
<<<<<<< HEAD
var v = {}, I = function() {
=======
var v = {}, E = function() {
>>>>>>> Support EnvFrom in the Env Editors
if (e.hpaForRS = s.filterHPA(v, y, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = s.filterHPA(v, "DeploymentConfig", e.deploymentConfigName);
>>>>>>> Patternfly vertical navigation and project bar
e.autoscalers = e.hpaForRS.concat(t);
} else if (e.deployment && e.isActive) {
var r = c.filterHPA(p, "Deployment", e.deployment.metadata.name);
e.autoscalers = e.hpaForRS.concat(r);
=======
var h = {}, E = function() {
if (e.hpaForRS = s.filterHPA(h, y, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = s.filterHPA(h, "DeploymentConfig", e.deploymentConfigName);
=======
e.resource = "replicationcontrollers", e.healthCheckURL = g.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
}
<<<<<<< HEAD
var k = {};
e.projectName = n.project, e.kind = d, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {};
var j = r.getPreferredVersion("builds"), I = r.getPreferredVersion("imagestreams"), R = r.getPreferredVersion("horizontalpodautoscalers"), E = r.getPreferredVersion("limitranges"), T = r.getPreferredVersion("pods"), N = r.getPreferredVersion("replicasets"), D = r.getPreferredVersion("resourcequotas"), A = r.getPreferredVersion("appliedclusterresourcequotas");
e.deploymentsVersion = r.getPreferredVersion("deployments"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.deploymentConfigsLogVersion = "deploymentconfigs/log";
var $ = [];
p.isAvailable().then(function(t) {
e.metricsAvailable = t;
});
var B = t("deploymentStatus"), L = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], B(t));
}, U = t("isIE")();
y.get(n.project).then(_.spread(function(r, u) {
e.project = r, e.projectContext = u;
var p = {}, y = function() {
if (e.hpaForRS = c.filterHPA(p, d, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = c.filterHPA(p, "DeploymentConfig", e.deploymentConfigName);
>>>>>>> Update replicaSets controller to use getPreferredVersion
e.autoscalers = e.hpaForRS.concat(t);
} else if (e.deployment && e.isActive) {
<<<<<<< HEAD
var a = c.filterHPA(p, "Deployment", e.deployment.metadata.name);
e.autoscalers = e.hpaForRS.concat(a);
>>>>>>> Add SVG icons
=======
var r = c.filterHPA(p, "Deployment", e.deployment.metadata.name);
e.autoscalers = e.hpaForRS.concat(r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else e.autoscalers = e.hpaForRS;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, b = function() {
x.push(i.watch(e.resource, u, function(t) {
var n, r = [];
=======
}, I = function() {
=======
}, E = function() {
>>>>>>> Enable new landing page experience by default
=======
}, N = function() {
>>>>>>> Quota Notifications
=======
}, T = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Support EnvFrom in the Env Editors
j.push(o.watch(e.resource, g, function(t) {
=======
P.push(o.watch(e.resource, g, function(t) {
>>>>>>> Service instance details configuration and edit
=======
j.push(o.watch(e.resource, g, function(t) {
>>>>>>> Add product icons for service catalog
=======
P.push(o.watch(e.resource, g, function(t) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, N = function() {
j.push(o.watch(e.resource, g, function(t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, T = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
P.push(o.watch(e.resource, g, function(t) {
>>>>>>> Update template service broker flag name
=======
k.push(o.watch(e.resource, g, function(t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
P.push(o.watch(e.resource, g, function(t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
k.push(o.watch(e.resource, g, function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
}, O = function() {
$.push(i.watch(e.resource, u, function(t) {
<<<<<<< HEAD
>>>>>>> Update replicaSets controller to use getPreferredVersion
var n, a = [];
>>>>>>> Adjust events to show in the drawer
angular.forEach(t.by("metadata.name"), function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
(P(t, "deploymentConfig") || "") === e.deploymentConfigName && r.push(t);
}), n = s.getActiveDeployment(r), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, y();
=======
(C(t, "deploymentConfig") || "") === e.deploymentConfigName && a.push(t);
<<<<<<< HEAD
<<<<<<< HEAD
=======
(S(t, "deploymentConfig") || "") === e.deploymentConfigName && a.push(t);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
}), n = i.getActiveDeployment(a), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, E();
>>>>>>> Add the ability to add a secret to an application
=======
}), n = i.getActiveDeployment(a), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, I();
>>>>>>> Enable new landing page experience by default
}));
<<<<<<< HEAD
<<<<<<< HEAD
}, S = function() {
c.getHPAWarnings(e.replicaSet, e.autoscalers, e.limitRanges, r).then(function(t) {
=======
}, N = function() {
<<<<<<< HEAD
=======
}, E = function() {
>>>>>>> Quota Notifications
=======
=======
(S(t, "deploymentConfig") || "") === e.deploymentConfigName && a.push(t);
>>>>>>> Service instance details configuration and edit
}), n = i.getActiveDeployment(a), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, E();
}));
}, N = function() {
>>>>>>> Support EnvFrom in the Env Editors
=======
(C(t, "deploymentConfig") || "") === e.deploymentConfigName && a.push(t);
=======
(S(t, "deploymentConfig") || "") === e.deploymentConfigName && a.push(t);
>>>>>>> Adding label filter to ste secrets page
}), n = i.getActiveDeployment(a), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, E();
}));
<<<<<<< HEAD
}, T = function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, N = function() {
>>>>>>> Update template service broker flag name
s.getHPAWarnings(e.replicaSet, e.autoscalers, e.limitRanges, u).then(function(t) {
>>>>>>> Adjust events to show in the drawer
e.hpaWarnings = t;
=======
r.update(i, l.newSecret.pickedServiceAccountToLink, o, l).then(function(e) {
a.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created and linked with service account " + e.metadata.name + "."
}), l.onCreate({
newSecret: t
});
}, function(n) {
a.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created."
}), l.serviceAccountToLink || a.addNotification({
id: "secret-sa-link-error",
type: "error",
message: "An error occurred while linking the secret with service account " + l.newSecret.pickedServiceAccountToLink + ".",
details: e("getErrorDetails")(n)
}), l.onCreate({
newSecret: t
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
});
<<<<<<< HEAD
<<<<<<< HEAD
}, A = function(r) {
var a = P(r, "deploymentConfig");
if (a) {
w = !0, e.deploymentConfigName = a;
var o = P(r, "deploymentVersion");
o && (e.logOptions.version = o), e.healthCheckURL = f.healthCheckURL(n.project, "DeploymentConfig", a), i.get(e.deploymentConfigsVersion, a, u, {
=======
}, D = function(a) {
<<<<<<< HEAD
var r = C(a, "deploymentConfig");
=======
s.getHPAWarnings(e.replicaSet, e.autoscalers, e.limitRanges, u).then(function(t) {
e.hpaWarnings = t;
});
<<<<<<< HEAD
}, D = function(a) {
var r = S(a, "deploymentConfig");
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var r = S(a, "deploymentConfig");
>>>>>>> Adding label filter to ste secrets page
if (r) {
b = !0, e.deploymentConfigName = r;
var i = S(a, "deploymentVersion");
i && (e.logOptions.version = i), e.healthCheckURL = m.healthCheckURL(n.project, "DeploymentConfig", r), o.get("deploymentconfigs", r, g, {
<<<<<<< HEAD
>>>>>>> Patternfly vertical navigation and project bar
=======
>>>>>>> Support EnvFrom in the Env Editors
=======
(C(t, "deploymentConfig") || "") === e.deploymentConfigName && a.push(t);
}), n = s.getActiveDeployment(a), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, y();
}));
}, V = function() {
c.getHPAWarnings(e.replicaSet, e.autoscalers, e.limitRanges, a).then(function(t) {
e.hpaWarnings = t;
});
}, F = function(a) {
var r = C(a, "deploymentConfig");
if (r) {
S = !0, e.deploymentConfigName = r;
var o = C(a, "deploymentVersion");
o && (e.logOptions.version = o), e.healthCheckURL = g.healthCheckURL(n.project, "DeploymentConfig", r), i.get(e.deploymentConfigsVersion, r, u, {
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
var n, r = [];
angular.forEach(t.by("metadata.name"), function(t) {
(C(t, "deploymentConfig") || "") === e.deploymentConfigName && r.push(t);
}), n = s.getActiveDeployment(r), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, y();
=======
}, p = _.debounce(function() {
try {
JSON.parse(l.newSecret.data.dockerConfig), l.invalidConfigFormat = !1;
} catch (e) {
l.invalidConfigFormat = !0;
}
}, 300, {
leading: !0
});
l.aceChanged = p, l.nameChanged = function() {
l.nameTaken = !1;
}, l.generateWebhookSecretKey = function() {
l.newSecret.data.webhookSecretKey = o._generateSecret();
}, l.create = function() {
d();
var n = u(l.newSecret.data, l.newSecret.authType);
r.create(c, null, n, l).then(function(e) {
l.newSecret.linkSecret && l.serviceAccountsNames.contains(l.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? m(e) : (a.addNotification({
type: "success",
message: "Secret " + n.metadata.name + " was created."
}), l.onCreate({
newSecret: e
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
}));
}, V = function() {
c.getHPAWarnings(e.replicaSet, e.autoscalers, e.limitRanges, r).then(function(t) {
e.hpaWarnings = t;
});
}, F = function(r) {
var a = C(r, "deploymentConfig");
if (a) {
S = !0, e.deploymentConfigName = a;
var o = C(r, "deploymentVersion");
o && (e.logOptions.version = o), e.healthCheckURL = g.healthCheckURL(n.project, "DeploymentConfig", a), i.get(e.deploymentConfigsVersion, a, u, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(t) {
e.deploymentConfig = t;
}, function(n) {
404 !== n.status ? e.alerts.load = {
type: "error",
<<<<<<< HEAD
message: "The deployment configuration details could not be loaded.",
details: t("getErrorDetails")(n)
} : e.deploymentConfigMissing = !0;
});
=======
message: "An error occurred while creating the secret.",
details: e("getErrorDetails")(t)
}) : l.nameTaken = !0;
});
}, l.cancel = function() {
d(), l.onCancel();
};
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
}
<<<<<<< HEAD
}, F = function() {
=======
}, x = function() {
>>>>>>> Update replicaSets controller to use getPreferredVersion
e.isActive = s.isActiveReplicaSet(e.replicaSet, e.deployment);
}, M = function(t) {
return _.some(t, function(t) {
if (_.get(t, "status.replicas") && _.get(t, "metadata.uid") !== _.get(e.replicaSet, "metadata.uid")) {
<<<<<<< HEAD
<<<<<<< HEAD
var n = v.getControllerReferences(t);
=======
var n = p.getControllerReferences(t);
>>>>>>> Support EnvFrom in the Env Editors
=======
var n = v.getControllerReferences(t);
>>>>>>> Update replicaSets controller to use getPreferredVersion
return _.some(n, {
uid: e.deployment.metadata.uid
});
}
});
<<<<<<< HEAD
<<<<<<< HEAD
}, q = !1, z = function() {
var t = v.getControllerReferences(e.replicaSet), r = _.find(t, {
=======
}, B = !1, L = function() {
var t = p.getControllerReferences(e.replicaSet), a = _.find(t, {
>>>>>>> Support EnvFrom in the Env Editors
kind: "Deployment"
});
<<<<<<< HEAD
r && i.get(e.deploymentsVersion, r.name, u).then(function(t) {
e.deployment = t, e.healthCheckURL = f.healthCheckURL(n.project, "Deployment", t.metadata.name, "apps"), x.push(i.watchObject(e.deploymentsVersion, t.metadata.name, u, function(t, r) {
if ("DELETED" === r) return e.alerts["deployment-deleted"] = {
=======
a && o.get({
group: "apps",
resource: "deployments"
}, a.name, g).then(function(t) {
e.deployment = t, e.healthCheckURL = m.healthCheckURL(n.project, "Deployment", t.metadata.name, "apps"), k.push(o.watchObject({
group: "apps",
resource: "deployments"
}, t.metadata.name, g, function(t, a) {
=======
}, q = !1, z = function() {
var t = v.getControllerReferences(e.replicaSet), r = _.find(t, {
kind: "Deployment"
});
<<<<<<< HEAD
<<<<<<< HEAD
a && i.get(e.deploymentsVersion, a.name, u).then(function(t) {
e.deployment = t, e.healthCheckURL = g.healthCheckURL(n.project, "Deployment", t.metadata.name, "apps"), $.push(i.watchObject(e.deploymentsVersion, t.metadata.name, u, function(t, a) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
if ("DELETED" === a) return e.alerts["deployment-deleted"] = {
>>>>>>> Patternfly vertical navigation and project bar
=======
r && i.get(e.deploymentsVersion, r.name, u).then(function(t) {
e.deployment = t, e.healthCheckURL = g.healthCheckURL(n.project, "Deployment", t.metadata.name, "apps"), $.push(i.watchObject(e.deploymentsVersion, t.metadata.name, u, function(t, r) {
if ("DELETED" === r) return e.alerts["deployment-deleted"] = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "warning",
message: "The deployment controlling this replica set has been deleted."
<<<<<<< HEAD
<<<<<<< HEAD
}, e.healthCheckURL = f.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions"), e.deploymentMissing = !0, void delete e.deployment;
e.deployment = t, e.breadcrumbs = o.getBreadcrumbs({
=======
}, e.healthCheckURL = m.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions"), e.deploymentMissing = !0, void delete e.deployment;
e.deployment = t, e.breadcrumbs = r.getBreadcrumbs({
>>>>>>> Support EnvFrom in the Env Editors
=======
}, e.healthCheckURL = g.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions"), e.deploymentMissing = !0, void delete e.deployment;
e.deployment = t, e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update replicaSets controller to use getPreferredVersion
object: e.replicaSet,
displayName: "#" + s.getRevision(e.replicaSet),
parent: {
title: e.deployment.metadata.name,
<<<<<<< HEAD
<<<<<<< HEAD
link: f.resourceURL(e.deployment)
},
humanizedKind: "Deployments"
<<<<<<< HEAD
<<<<<<< HEAD
}), F(), y();
})), x.push(i.watch(D, u, function(e) {
=======
link: m.resourceURL(e.deployment)
=======
};
}
};
} ]), angular.module("openshiftConsole").directive("editConfigMap", [ "DNS1123_SUBDOMAIN_VALIDATION", function(e) {
return {
require: "^form",
restrict: "E",
scope: {
configMap: "=model",
showNameInput: "="
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
},
humanizedKind: "Deployments"
}), A(), E();
})), k.push(o.watch({
group: "extensions",
resource: "replicasets"
}, g, function(e) {
>>>>>>> Support EnvFrom in the Env Editors
var t = e.by("metadata.name");
q = M(t);
=======
}, P = !1, Q = function() {
var b = o.getControllerReferences(a.replicaSet), d = _.find(b, {
=======
var v = function() {
if (_.get(a, "deploymentConfig.spec.paused")) return !1;
var b = _.get(a, "deploymentConfig.spec.triggers", []);
return _.some(b, {
type:"ConfigChange"
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
};
<<<<<<< HEAD
<<<<<<< HEAD
var S = function() {
if (_.get(e, "deploymentConfig.spec.paused")) return !1;
var t = _.get(e, "deploymentConfig.spec.triggers", []);
return _.some(t, {
type: "ConfigChange"
});
};
e.removeVolume = function(t) {
var n;
n = S() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
c.confirm({
message: "Remove volume " + t.name + "?",
details: n,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
}).then(function() {
p.removeVolume(e.deploymentConfig, t, l);
});
}, e.$on("$destroy", function() {
r.unwatchAll(b);
});
}));
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "StorageService", "keyValueEditorUtils", "kind", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, g, f, h, v, y) {
var b = !1, C = t("annotation"), S = t("humanizeKind")(y), w = t("hasDeployment");
switch (y) {
case "ReplicaSet":
e.resource = {
=======
}), $(), E();
=======
}), $(), I();
>>>>>>> Enable new landing page experience by default
})), j.push(o.watch({
>>>>>>> Add the ability to add a secret to an application
group: "extensions",
resource: "replicasets"
<<<<<<< HEAD
}, e.healthCheckURL = m.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions");
break;

case "ReplicationController":
e.resource = "replicationcontrollers", e.healthCheckURL = m.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
}
<<<<<<< HEAD
}, G = function() {
a.isActive = g.isActiveReplicaSet(a.replicaSet, a.deployment);
}, H = function(b) {
return _.some(b, function(b) {
if (_.get(b, "status.replicas") && _.get(b, "metadata.uid") !== _.get(a.replicaSet, "metadata.uid")) {
var c = n.getControllerReferences(b);
return _.some(c, {
uid:a.deployment.metadata.uid
});
}
});
}, I = !1, J = function() {
var b = n.getControllerReferences(a.replicaSet), d = _.find(b, {
>>>>>>> Create reusable edit-environment-variables component
kind:"Deployment"
});
d && f.get({
group:"apps",
resource:"deployments"
}, d.name, p).then(function(b) {
a.deployment = b, a.healthCheckURL = m.healthCheckURL(c.project, "Deployment", b.metadata.name, "apps"), y.push(f.watchObject({
group:"apps",
resource:"deployments"
}, b.metadata.name, p, function(b, d) {
return "DELETED" === d ? (a.alerts["deployment-deleted"] = {
type:"warning",
message:"The deployment controlling this replica set has been deleted."
}, a.healthCheckURL = m.healthCheckURL(c.project, "ReplicaSet", c.replicaSet, "extensions"), a.deploymentMissing = !0, void delete a.deployment) :(a.deployment = b, a.breadcrumbs = e.getBreadcrumbs({
object:a.replicaSet,
displayName:"#" + g.getRevision(a.replicaSet),
parent:{
title:a.deployment.metadata.name,
link:m.resourceURL(a.deployment)
},
humanizedKind:"Deployments"
}), G(), void C());
})), y.push(f.watch({
group:"extensions",
resource:"replicasets"
}, p, function(a) {
var b = a.by("metadata.name");
<<<<<<< HEAD
P = O(b);
>>>>>>> Use `apps` API group for deployments
=======
}, g, function(e) {
var t = e.by("metadata.name");
B = A(t);
>>>>>>> Patternfly vertical navigation and project bar
}));
});
<<<<<<< HEAD
}, H = function() {
if (!_.isEmpty(L)) {
var t = _.get(e, "replicaSet.spec.template");
<<<<<<< HEAD
t && l.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, L, u);
}
};
i.get(e.resource, n.replicaSet, u, {
=======
t && c.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, k, g);
=======
}, U = function() {
if (!_.isEmpty(P)) {
var t = _.get(e, "replicaSet.spec.template");
<<<<<<< HEAD
<<<<<<< HEAD
t && c.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, P, g);
>>>>>>> Fix for adding non-builder templates to a project
=======
t && c.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, k, g);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
t && c.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, P, g);
>>>>>>> Update pod controller to use getPreferredVersion
}
};
o.get(e.resource, n.replicaSet, g, {
>>>>>>> Patternfly vertical navigation and project bar
errorNotification: !1
}).then(function(t) {
switch (e.loaded = !0, e.replicaSet = t, O(t), d) {
case "ReplicationController":
A(t);
=======
link: g.resourceURL(e.deployment)
},
humanizedKind: "Deployments"
}), x(), y();
})), $.push(i.watch(N, u, function(e) {
var t = e.by("metadata.name");
q = M(t);
}));
});
}, H = function() {
if (!_.isEmpty(k)) {
var t = _.get(e, "replicaSet.spec.template");
t && l.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, k, u);
}
};
<<<<<<< HEAD
i.get(e.resource, n.replicaSet, u, {
errorNotification: !1
}).then(function(t) {
switch (e.loaded = !0, e.replicaSet = t, L(t), d) {
case "ReplicationController":
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
V(t);
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
F(t);
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
F(t);
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
F(t);
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
F(t);
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
F(t);
>>>>>>> Update createFromImage controller to use getPreferredVersion
break;

case "ReplicaSet":
z();
=======
r.openDeleteModal = function() {
r.disableDelete || e.open({
templateUrl: "views/modals/delete-resource.html",
controller: "DeleteModalController",
scope: r
}).result.then(function() {
var e = r.kind, t = r.resourceName, a = r.typeDisplayName || n("humanizeKind")(e), s = _.capitalize(a) + " '" + (r.displayName ? r.displayName : t) + "'", u = "Project" === r.kind ? {} : {
namespace: r.projectName
}, d = {};
r.options.deleteImmediately && (d.gracePeriodSeconds = 0, d.propagationPolicy = null), "servicecatalog.k8s.io" === r.group && (d.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: r.group
}, t, u, d).then(function() {
c.addNotification({
type: "success",
message: s + " was marked for deletion."
}), r.success && r.success(), r.options.deleteHPAs && _.each(r.hpaList, p), f();
}).catch(function(e) {
m({
name: t,
data: {
type: "error",
message: _.capitalize(s) + "' could not be deleted.",
details: n("getErrorDetails")(e)
>>>>>>> Update modals to align with PatternFly standard
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
S(), e.breadcrumbs = o.getBreadcrumbs({
=======
E(), e.breadcrumbs = r.getBreadcrumbs({
>>>>>>> Quota Notifications
object: t
<<<<<<< HEAD
}), x.push(i.watchObject(e.resource, n.replicaSet, u, function(t, n) {
=======
N(), e.breadcrumbs = r.getBreadcrumbs({
object: t
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), P.push(o.watchObject(e.resource, n.replicaSet, g, function(t, n) {
>>>>>>> Update template service broker flag name
=======
}), k.push(o.watchObject(e.resource, n.replicaSet, g, function(t, n) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}), P.push(o.watchObject(e.resource, n.replicaSet, g, function(t, n) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}), k.push(o.watchObject(e.resource, n.replicaSet, g, function(t, n) {
>>>>>>> Update pod controller to use getPreferredVersion
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: "This " + j + " has been deleted."
}), e.replicaSet = t, O(t), S(), H(), e.deployment && F();
})), e.deploymentConfigName && b(), x.push(i.watch(N, u, function(t) {
=======
message: "This " + S + " has been deleted."
<<<<<<< HEAD
<<<<<<< HEAD
}), e.replicaSet = t, R(t), N(), U(), e.deployment && $();
})), e.deploymentConfigName && E(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Enable new landing page experience by default
=======
}), e.replicaSet = t, R(t), E(), U(), e.deployment && A();
})), e.deploymentConfigName && N(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Quota Notifications
=======
=======
message: "This " + C + " has been deleted."
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
message: "This " + C + " has been deleted."
>>>>>>> Adding label filter to ste secrets page
}), e.replicaSet = t, R(t), N(), U(), e.deployment && A();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})), e.deploymentConfigName && T(), P.push(o.watch("pods", g, function(t) {
>>>>>>> Update template service broker flag name
=======
})), e.deploymentConfigName && T(), k.push(o.watch("pods", g, function(t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
})), e.deploymentConfigName && T(), P.push(o.watch("pods", g, function(t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
})), e.deploymentConfigName && T(), k.push(o.watch("pods", g, function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
F(), e.breadcrumbs = o.getBreadcrumbs({
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update createFromImage controller to use getPreferredVersion
object: t
}), $.push(i.watchObject(e.resource, n.replicaSet, u, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This " + w + " has been deleted."
}), e.replicaSet = t, L(t), V(), H(), e.deployment && x();
})), e.deploymentConfigName && O(), $.push(i.watch(T, u, function(t) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
var n = t.by("metadata.name");
e.podsForDeployment = h.filterForOwner(n, e.replicaSet);
}));
<<<<<<< HEAD
}, function(r) {
e.loaded = !0, e.alerts.load = {
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: "The " + j + " details could not be loaded.",
details: t("getErrorDetails")(r)
}, e.breadcrumbs = o.getBreadcrumbs({
=======
=======
>>>>>>> Adding label filter to ste secrets page
message: "The " + C + " details could not be loaded.",
details: t("getErrorDetails")(a)
}, e.breadcrumbs = r.getBreadcrumbs({
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
message: "The " + w + " details could not be loaded.",
details: t("getErrorDetails")(r)
}, e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update replicaSets controller to use getPreferredVersion
name: n.replicaSet,
kind: d,
namespace: n.project
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), x.push(i.watch(e.resource, u, function(n, r, a) {
e.replicaSets = n.by("metadata.name"), "ReplicationController" === d && (e.deploymentsByDeploymentConfig = s.associateDeploymentsToDeploymentConfig(e.replicaSets));
var o, i;
a && (o = P(a, "deploymentConfig"), i = a.metadata.name), e.deploymentConfigDeploymentsInProgress = e.deploymentConfigDeploymentsInProgress || {}, r ? "ADDED" === r || "MODIFIED" === r && t("deploymentIsInProgress")(a) ? (e.deploymentConfigDeploymentsInProgress[o] = e.deploymentConfigDeploymentsInProgress[o] || {}, e.deploymentConfigDeploymentsInProgress[o][i] = a) : "MODIFIED" === r && e.deploymentConfigDeploymentsInProgress[o] && delete e.deploymentConfigDeploymentsInProgress[o][i] : e.deploymentConfigDeploymentsInProgress = s.associateRunningDeploymentToDeploymentConfig(e.deploymentsByDeploymentConfig), a ? "DELETED" !== r && (a.causes = t("deploymentCauses")(a)) : angular.forEach(e.replicaSets, function(e) {
e.causes = t("deploymentCauses")(e);
});
})), x.push(i.watch(R, u, function(e) {
=======
}), P.push(o.watch(e.resource, g, function(n, a, r) {
=======
}), k.push(o.watch(e.resource, g, function(n, a, r) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}), P.push(o.watch(e.resource, g, function(n, a, r) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}), k.push(o.watch(e.resource, g, function(n, a, r) {
>>>>>>> Update pod controller to use getPreferredVersion
e.replicaSets = n.by("metadata.name"), "ReplicationController" === y && (e.deploymentsByDeploymentConfig = i.associateDeploymentsToDeploymentConfig(e.replicaSets));
var o, s;
r && (o = S(r, "deploymentConfig"), s = r.metadata.name), e.deploymentConfigDeploymentsInProgress = e.deploymentConfigDeploymentsInProgress || {}, a ? "ADDED" === a || "MODIFIED" === a && t("deploymentIsInProgress")(r) ? (e.deploymentConfigDeploymentsInProgress[o] = e.deploymentConfigDeploymentsInProgress[o] || {}, e.deploymentConfigDeploymentsInProgress[o][s] = r) : "MODIFIED" === a && e.deploymentConfigDeploymentsInProgress[o] && delete e.deploymentConfigDeploymentsInProgress[o][s] : e.deploymentConfigDeploymentsInProgress = i.associateRunningDeploymentToDeploymentConfig(e.deploymentsByDeploymentConfig), r ? "DELETED" !== a && (r.causes = t("deploymentCauses")(r)) : angular.forEach(e.replicaSets, function(e) {
e.causes = t("deploymentCauses")(e);
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})), P.push(o.watch("imagestreams", g, function(e) {
>>>>>>> Update template service broker flag name
var t = e.by("metadata.name");
<<<<<<< HEAD
l.buildDockerRefMapForImageStreams(t, L), H(), m.log("imagestreams (subscribe)", t);
})), x.push(i.watch(I, u, function(t) {
e.builds = t.by("metadata.name"), m.log("builds (subscribe)", e.builds);
})), x.push(i.watch(T, u, function(e) {
p = e.by("metadata.name"), y(), S();
}, {
poll: U,
=======
c.buildDockerRefMapForImageStreams(t, k), U(), l.log("imagestreams (subscribe)", t);
})), P.push(o.watch("builds", g, function(t) {
=======
})), k.push(o.watch("imagestreams", g, function(e) {
var t = e.by("metadata.name");
c.buildDockerRefMapForImageStreams(t, P), U(), l.log("imagestreams (subscribe)", t);
})), k.push(o.watch("builds", g, function(t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
})), P.push(o.watch("imagestreams", g, function(e) {
var t = e.by("metadata.name");
c.buildDockerRefMapForImageStreams(t, k), U(), l.log("imagestreams (subscribe)", t);
})), P.push(o.watch("builds", g, function(t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
})), k.push(o.watch("imagestreams", g, function(e) {
var t = e.by("metadata.name");
c.buildDockerRefMapForImageStreams(t, P), U(), l.log("imagestreams (subscribe)", t);
})), k.push(o.watch("builds", g, function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
e.builds = t.by("metadata.name"), l.log("builds (subscribe)", e.builds);
})), k.push(o.watch({
group: "autoscaling",
resource: "horizontalpodautoscalers",
version: "v1"
}, g, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
v = e.by("metadata.name"), I(), N();
=======
v = e.by("metadata.name"), T(), E();
>>>>>>> Quota Notifications
=======
h = e.by("metadata.name"), E(), N();
>>>>>>> Update template service broker flag name
}, {
poll: T,
>>>>>>> Add the ability to add a secret to an application
pollInterval: 6e4
<<<<<<< HEAD
})), i.list(E, u).then(function(t) {
e.limitRanges = t.by("metadata.name"), S();
=======
})), o.list("limitranges", g).then(function(t) {
<<<<<<< HEAD
e.limitRanges = t.by("metadata.name"), E();
>>>>>>> Quota Notifications
});
x.push(i.watch($, u, function(t) {
=======
e.limitRanges = t.by("metadata.name"), N();
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
P.push(o.watch("resourcequotas", g, function(t) {
>>>>>>> Update template service broker flag name
=======
k.push(o.watch("resourcequotas", g, function(t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
P.push(o.watch("resourcequotas", g, function(t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
k.push(o.watch("resourcequotas", g, function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
}), $.push(i.watch(e.resource, u, function(n, a, r) {
=======
}), $.push(i.watch(e.resource, u, function(n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.replicaSets = n.by("metadata.name"), "ReplicationController" === d && (e.deploymentsByDeploymentConfig = s.associateDeploymentsToDeploymentConfig(e.replicaSets));
var o, i;
a && (o = C(a, "deploymentConfig"), i = a.metadata.name), e.deploymentConfigDeploymentsInProgress = e.deploymentConfigDeploymentsInProgress || {}, r ? "ADDED" === r || "MODIFIED" === r && t("deploymentIsInProgress")(a) ? (e.deploymentConfigDeploymentsInProgress[o] = e.deploymentConfigDeploymentsInProgress[o] || {}, e.deploymentConfigDeploymentsInProgress[o][i] = a) : "MODIFIED" === r && e.deploymentConfigDeploymentsInProgress[o] && delete e.deploymentConfigDeploymentsInProgress[o][i] : e.deploymentConfigDeploymentsInProgress = s.associateRunningDeploymentToDeploymentConfig(e.deploymentsByDeploymentConfig), a ? "DELETED" !== r && (a.causes = t("deploymentCauses")(a)) : angular.forEach(e.replicaSets, function(e) {
e.causes = t("deploymentCauses")(e);
});
})), $.push(i.watch(I, u, function(e) {
var t = e.by("metadata.name");
l.buildDockerRefMapForImageStreams(t, k), H(), m.log("imagestreams (subscribe)", t);
})), $.push(i.watch(j, u, function(t) {
e.builds = t.by("metadata.name"), m.log("builds (subscribe)", e.builds);
})), $.push(i.watch(R, u, function(e) {
p = e.by("metadata.name"), y(), V();
}, {
poll: U,
pollInterval: 6e4
})), i.list(E, u).then(function(t) {
e.limitRanges = t.by("metadata.name"), V();
=======
}
function C() {
var t;
_.isEmpty(p.createResources) ? (t = _.head(p.updateResources), i.update(a.kindToResource(t.kind), t.metadata.name, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = k(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully updated."
});
<<<<<<< HEAD
=======
})), i.push(e.$on("event.resource.clear-highlight", function(e, n) {
var r = _.get(n, "kind"), a = _.get(n, "metadata.name");
r && a && _.each(t.events, function(e) {
e.involvedObject.kind === r && e.involvedObject.name === a && (t.highlightedEvents[r + "/" + a] = !1);
});
})), t.$on("$destroy", function() {
n.unwatchAll(o), _.each(i, function(e) {
e();
}), i = null;
});
} ]
};
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "APIService", "DataService", "Logger", function(e, t, n, r) {
var a = t.getPreferredVersion("events");
return {
restrict: "E",
scope: {
projectContext: "=",
sidebarCollapsed: "="
},
templateUrl: "views/directives/events-badge.html",
controller: [ "$scope", function(t) {
var o = [], i = e("orderObjectsByDate");
o.push(n.watch(a, t.projectContext, function(e) {
var n = e.by("metadata.name");
t.events = i(n, !0), t.warningCount = _.size(_.filter(n, {
type: "Warning"
})), t.normalCount = _.size(_.filter(n, {
type: "Normal"
})), r.log("events (subscribe)", t.events);
})), t.expandSidebar = function() {
t.sidebarCollapsed = !1;
}, t.$on("$destroy", function() {
n.unwatchAll(o);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("fromFile", [ "$filter", "$location", "$q", "$uibModal", "APIService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "QuotaService", "SecurityCheckService", "TaskList", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
return {
restrict: "E",
scope: {
project: "=",
isDialog: "="
},
templateUrl: "views/directives/from-file.html",
controller: [ "$scope", function(p) {
function f(e) {
return !!e.kind || (p.error = {
message: "Resource is missing kind field."
}, !1);
}
function g(e) {
return !!p.isList || (e.metadata ? e.metadata.name ? !e.metadata.namespace || e.metadata.namespace === p.input.selectedProject.metadata.name || (p.error = {
message: e.kind + " " + e.metadata.name + " can't be created in project " + e.metadata.namespace + ". Can't create resource in different projects."
}, !1) : (p.error = {
message: "Resource name is missing in metadata field."
}, !1) : (p.error = {
message: "Resource is missing metadata field."
}, !1));
}
function v() {
r.open({
templateUrl: "views/modals/process-or-save-template.html",
controller: "ProcessOrSaveTemplateModalController",
scope: p
}).result.then(function() {
p.templateOptions.add ? y() : (o.setTemplate(p.resourceList[0]), b());
});
}
function h() {
r.open({
templateUrl: "views/modals/confirm-replace.html",
controller: "ConfirmReplaceModalController",
scope: p
}).result.then(function() {
l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N);
});
}
function y() {
var e = p.createResources.length, t = p.updateResources.length;
if (p.resourceKind.endsWith("List")) {
var r = [];
t > 0 && r.push(P()), e > 0 && r.push(w()), n.all(r).then(b);
} else C();
}
function b() {
var e, n;
T(), "Template" === p.resourceKind && p.templateOptions.process && !p.errorOccurred ? p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
template: p.resource
}) : (n = p.templateOptions.add || p.updateResources.length > 0 ? p.input.selectedProject.metadata.name : "", e = s.createFromTemplateURL(p.resource, p.input.selectedProject.metadata.name, {
namespace: n
}), t.url(e)) : p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
resource: p.resource,
isList: p.isList
}) : (e = s.projectOverviewURL(p.input.selectedProject.metadata.name), t.url(e));
}
function S(e) {
var t = a.objectToResourceGroupVersion(e);
return t ? a.apiInfo(t) ? i.get(t, e.metadata.name, {
namespace: p.input.selectedProject.metadata.name
}, {
errorNotification: !1
}).then(function(t) {
var n = angular.copy(e), r = angular.copy(t.metadata);
r.annotations = e.metadata.annotations, r.labels = e.metadata.labels, n.metadata = r, p.updateResources.push(n);
}, function() {
p.createResources.push(e);
}) : (p.errorOccurred = !0, void (p.error = {
message: a.unsupportedObjectKindOrVersion(e)
})) : (p.errorOccurred = !0, void (p.error = {
message: a.invalidObjectKindOrVersion(e)
}));
}
function C() {
var t;
_.isEmpty(p.createResources) ? (t = _.head(p.updateResources), i.update(a.kindToResource(t.kind), t.metadata.name, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = k(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully updated."
});
>>>>>>> Disable close by clicking background of process template modal
}
b();
}, function(n) {
c.addNotification({
id: "from-file-error",
type: "error",
message: "Unable to update the " + k(t.kind) + " '" + t.metadata.name + "'.",
details: e("getErrorDetails")(n)
});
})) : (t = _.head(p.createResources), i.create(a.kindToResource(t.kind), null, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = k(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully created."
});
}
b();
}, function(n) {
c.addNotification({
id: "from-file-error",
type: "error",
message: "Unable to create the " + k(t.kind) + " '" + t.metadata.name + "'.",
details: e("getErrorDetails")(n)
>>>>>>> Add Browse Catalog to Project context view.
});
$.push(i.watch(D, u, function(t) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
e.quotas = t.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})), x.push(i.watch(B, u, function(t) {
=======
})), P.push(o.watch("appliedclusterresourcequotas", g, function(t) {
>>>>>>> Update template service broker flag name
=======
})), k.push(o.watch("appliedclusterresourcequotas", g, function(t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
})), P.push(o.watch("appliedclusterresourcequotas", g, function(t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
})), k.push(o.watch("appliedclusterresourcequotas", g, function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
})), $.push(i.watch(A, u, function(t) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
e.clusterQuotas = t.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
}));
var G = t("deploymentIsLatest");
e.showRollbackAction = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return "Complete" === V(e.replicaSet) && !G(e.replicaSet, e.deploymentConfig) && !e.replicaSet.metadata.deletionTimestamp && a.canI("deploymentconfigrollbacks", "create");
=======
return "Complete" === j(e.replicaSet) && !O(e.replicaSet, e.deploymentConfig) && !e.replicaSet.metadata.deletionTimestamp && a.canI("deploymentconfigrollbacks", "create");
>>>>>>> Update template service broker flag name
}, e.retryFailedDeployment = function(t) {
s.retryFailedDeployment(t, u, e);
}, e.rollbackToDeployment = function(t, n, r, a) {
s.rollbackToDeployment(t, n, r, a, u, e);
}, e.cancelRunningDeployment = function(e) {
s.cancelRunningDeployment(e, u);
}, e.scale = function(n) {
var r = e.deployment || e.deploymentConfig || e.replicaSet;
s.scale(r, n).then(_.noop, function(n) {
=======
return "Complete" === B(e.replicaSet) && !G(e.replicaSet, e.deploymentConfig) && !e.replicaSet.metadata.deletionTimestamp && r.canI("deploymentconfigrollbacks", "create");
=======
return "Complete" === B(e.replicaSet) && !G(e.replicaSet, e.deploymentConfig) && !e.replicaSet.metadata.deletionTimestamp && a.canI("deploymentconfigrollbacks", "create");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, e.retryFailedDeployment = function(t) {
s.retryFailedDeployment(t, u, e);
}, e.rollbackToDeployment = function(t, n, r, a) {
s.rollbackToDeployment(t, n, r, a, u, e);
}, e.cancelRunningDeployment = function(e) {
s.cancelRunningDeployment(e, u);
}, e.scale = function(n) {
<<<<<<< HEAD
var a = e.deployment || e.deploymentConfig || e.replicaSet;
s.scale(a, n).then(_.noop, function(n) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
var r = e.deployment || e.deploymentConfig || e.replicaSet;
s.scale(r, n).then(_.noop, function(n) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
<<<<<<< HEAD
message: "An error occurred scaling.",
details: t("getErrorDetails")(n)
};
});
};
var K = t("hasDeploymentConfig");
e.isScalable = function() {
<<<<<<< HEAD
return !!_.isEmpty(e.autoscalers) && (!K(e.replicaSet) && !k(e.replicaSet) || (!(!e.deploymentConfigMissing && !e.deploymentMissing) || !(!e.deploymentConfig && !e.deployment) && (e.isActive && !q)));
}, e.removeVolume = function(n, r, a) {
var o = a.getString(r("This will remove the volume from the")) + "  " + t("humanizeKind")(e.replicaSet.kind) + ".";
n.persistentVolumeClaim ? o += " It will not delete the persistent volume claim." : n.secret ? o += " It will not delete the secret." : n.configMap && (o += " It will not delete the config map.");
g.confirm({
title: a.getString(r("Remove volume")) + " " + n.name + "?",
details: o,
okButtonText: a.getString(r("Remove")),
=======
return !!_.isEmpty(e.autoscalers) && (!K(e.replicaSet) && !P(e.replicaSet) || (!(!e.deploymentConfigMissing && !e.deploymentMissing) || !(!e.deploymentConfig && !e.deployment) && (e.isActive && !q)));
}, e.removeVolume = function(n) {
var r = "This will remove the volume from the " + t("humanizeKind")(e.replicaSet.kind) + ".";
n.persistentVolumeClaim ? r += " It will not delete the persistent volume claim." : n.secret ? r += " It will not delete the secret." : n.configMap && (r += " It will not delete the config map.");
f.confirm({
message: "Remove volume " + n.name + "?",
details: r,
okButtonText: "Remove",
>>>>>>> Update replicaSets controller to use getPreferredVersion
okButtonClass: "btn-danger",
cancelButtonText: a.getString(r("Cancel"))
}).then(function() {
<<<<<<< HEAD
<<<<<<< HEAD
C.removeVolume(e.replicaSet, n, u);
});
}, e.$on("$destroy", function() {
<<<<<<< HEAD
<<<<<<< HEAD
i.unwatchAll(x);
=======
I = H(b);
=======
=======
m.removeVolume(e.deploymentConfig, t, l);
=======
message: "Cannot create " + k(e.object.kind) + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Created " + k(e.kind) + ' "' + e.metadata.name + '" successfully. '
});
}); else {
var a;
a = p.isList ? "All items in list were created successfully." : k(p.resourceKind) + " " + p.resourceName + " was successfully created.", n.push({
type: "success",
message: a
>>>>>>> Add Browse Catalog to Project context view.
});
}, e.$on("$destroy", function() {
<<<<<<< HEAD
<<<<<<< HEAD
r.unwatchAll(b);
=======
o.unwatchAll(P);
>>>>>>> Update template service broker flag name
=======
o.unwatchAll(k);
>>>>>>> Fix for adding non-builder templates to a project
=======
o.unwatchAll(P);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
o.unwatchAll(k);
>>>>>>> Update pod controller to use getPreferredVersion
=======
b.removeVolume(e.replicaSet, n, u);
});
}, e.$on("$destroy", function() {
i.unwatchAll($);
>>>>>>> Update replicaSets controller to use getPreferredVersion
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "StorageService", "keyValueEditorUtils", "kind", function(e, t, n, a, r, o, i, s, c, l, u, d, p, m, f, g, h, v, y) {
var b = !1, C = t("annotation"), S = t("humanizeKind")(y), w = t("hasDeployment");
switch (y) {
case "ReplicaSet":
e.resource = {
group: "extensions",
resource: "replicasets"
}, e.healthCheckURL = p.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions");
break;

case "ReplicationController":
e.resource = "replicationcontrollers", e.healthCheckURL = p.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
}
<<<<<<< HEAD
>>>>>>> Updates for Service Instance & Bindings
var k = {};
e.projectName = n.project, e.kind = y, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {};
var j = [];
u.isAvailable().then(function(t) {
e.metricsAvailable = t;
=======
} ]), angular.module("openshiftConsole").controller("StatefulSetsController", [ "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", "LabelFilter", "PodsService", function(e, t, n, a, r, o, i) {
=======
} ]), angular.module("openshiftConsole").controller("StatefulSetsController", [ "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", "LabelFilter", "PodsService", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.projectName = t.project, e.labelSuggestions = {}, e.clearFilter = function() {
o.clear();
};
var s = n.getPreferredVersion("pods"), c = n.getPreferredVersion("statefulsets"), l = [];
a.get(t.project).then(_.spread(function(t, n) {
function a() {
e.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(e.statefulSets) && !_.isEmpty(e.unfilteredStatefulSets);
=======
function P() {
var e = {
started: "Updating resources in project " + A(p.input.selectedProject),
success: "Updated resources in project " + A(p.input.selectedProject),
failure: "Failed to update some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.updateResources, {
namespace: p.input.selectedProject.metadata.name
}, "update").then(function(t) {
var n = [], r = !1;
if (t.failure.length > 0) r = !0, p.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot update " + k(e.object.kind) + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Updated " + k(e.kind) + ' "' + e.metadata.name + '" successfully. '
});
}); else {
var a;
a = p.isList ? "All items in list were updated successfully." : k(p.resourceKind) + " " + p.resourceName + " was successfully updated.", n.push({
type: "success",
message: a
});
>>>>>>> Add Browse Catalog to Project context view.
}
e.project = t, l.push(r.watch(c, n, function(t) {
angular.extend(e, {
loaded: !0,
unfilteredStatefulSets: t.by("metadata.name")
}), e.statefulSets = o.getLabelSelector().select(e.unfilteredStatefulSets), o.addLabelSuggestionsFromResources(e.unfilteredStatefulSets, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), a();
})), l.push(r.watch(s, n, function(t) {
e.pods = t.by("metadata.name"), e.podsByOwnerUID = i.groupByOwnerUID(e.pods);
})), o.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.statefulSets = t.select(e.unfilteredStatefulSets), a();
});
}), e.$on("$destroy", function() {
<<<<<<< HEAD
a.unwatchAll(l);
>>>>>>> Update stateful sets controllers to use getPreferredVersion
});
var P = t("deploymentStatus"), R = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], P(t));
<<<<<<< HEAD
}, E = t("isIE")() || t("isEdge")();
f.get(n.project).then(_.spread(function(u, f) {
e.project = u, e.projectContext = f;
=======
}, I = t("isIE")() || t("isEdge")();
g.get(n.project).then(_.spread(function(u, g) {
e.project = u, e.projectContext = g;
>>>>>>> Updates for Service Instance & Bindings
var v = {}, T = function() {
if (e.hpaForRS = s.filterHPA(v, y, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = s.filterHPA(v, "DeploymentConfig", e.deploymentConfigName);
e.autoscalers = e.hpaForRS.concat(t);
} else if (e.deployment && e.isActive) {
var a = s.filterHPA(v, "Deployment", e.deployment.metadata.name);
e.autoscalers = e.hpaForRS.concat(a);
} else e.autoscalers = e.hpaForRS;
}, I = function() {
j.push(o.watch(e.resource, f, function(t) {
var n, a = [];
angular.forEach(t.by("metadata.name"), function(t) {
(C(t, "deploymentConfig") || "") === e.deploymentConfigName && a.push(t);
}), n = i.getActiveDeployment(a), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, T();
}));
<<<<<<< HEAD
}, N = function() {
s.getHPAWarnings(e.replicaSet, e.autoscalers, e.limitRanges, u).then(function(t) {
e.hpaWarnings = t;
});
}, D = function(a) {
var r = C(a, "deploymentConfig");
if (r) {
b = !0, e.deploymentConfigName = r;
var i = C(a, "deploymentVersion");
<<<<<<< HEAD
i && (e.logOptions.version = i), e.healthCheckURL = m.healthCheckURL(n.project, "DeploymentConfig", r), o.get("deploymentconfigs", r, f, {
=======
i && (e.logOptions.version = i), e.healthCheckURL = p.healthCheckURL(n.project, "DeploymentConfig", r), o.get("deploymentconfigs", r, g, {
>>>>>>> Updates for Service Instance & Bindings
errorNotification: !1
}).then(function(t) {
e.deploymentConfig = t;
=======
} ]), angular.module("openshiftConsole").controller("StatefulSetController", [ "$filter", "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "MetricsService", "ProjectsService", "PodsService", function(e, t, n, a, r, o, i, s, c) {
t.projectName = n.project, t.statefulSetName = n.statefulset, t.forms = {}, t.alerts = {}, t.breadcrumbs = r.getBreadcrumbs({
=======
r.unwatchAll(l);
});
}));
} ]), angular.module("openshiftConsole").controller("StatefulSetController", [ "$filter", "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "MetricsService", "ProjectsService", "PodsService", function(e, t, n, r, a, o, i, s, c) {
t.projectName = n.project, t.statefulSetName = n.statefulset, t.forms = {}, t.alerts = {}, t.breadcrumbs = a.getBreadcrumbs({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
name: t.statefulSetName,
kind: "StatefulSet",
namespace: n.project
});
var l = r.getPreferredVersion("pods"), u = r.getPreferredVersion("resourcequotas"), d = r.getPreferredVersion("appliedclusterresourcequotas");
t.statefulSetsVersion = r.getPreferredVersion("statefulsets");
var m, p = [];
i.isAvailable().then(function(e) {
t.metricsAvailable = e;
}), s.get(n.project).then(_.spread(function(n, r) {
m = r, o.get(t.statefulSetsVersion, t.statefulSetName, r, {
errorNotification: !1
}).then(function(e) {
angular.extend(t, {
project: n,
projectContext: r,
statefulSet: e,
loaded: !0,
isScalable: function() {
return !1;
},
scale: function() {}
}), p.push(o.watchObject(t.statefulSetsVersion, t.statefulSetName, r, function(e) {
t.statefulSet = e;
})), p.push(o.watch(l, r, function(n) {
var r = n.by("metadata.name");
t.podsForStatefulSet = c.filterForOwner(r, e);
}));
p.push(o.watch(u, r, function(e) {
t.quotas = e.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
})), p.push(o.watch(d, r, function(e) {
t.clusterQuotas = e.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
}));
>>>>>>> Update stateful sets controllers to use getPreferredVersion
}, function(n) {
404 !== n.status ? e.alerts.load = {
type: "error",
message: "The deployment configuration details could not be loaded.",
details: t("getErrorDetails")(n)
} : e.deploymentConfigMissing = !0;
});
<<<<<<< HEAD
}
}, A = function() {
e.isActive = i.isActiveReplicaSet(e.replicaSet, e.deployment);
}, $ = function(t) {
return _.some(t, function(t) {
if (_.get(t, "status.replicas") && _.get(t, "metadata.uid") !== _.get(e.replicaSet, "metadata.uid")) {
var n = m.getControllerReferences(t);
return _.some(n, {
uid: e.deployment.metadata.uid
=======
})), t.$on("$destroy", function() {
o.unwatchAll(p);
>>>>>>> Update stateful sets controllers to use getPreferredVersion
});
<<<<<<< HEAD
}
<<<<<<< HEAD
=======
} ]), angular.module("openshiftConsole").controller("ServicesController", [ "$routeParams", "$scope", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", function(e, t, n, r, a, o, i) {
t.projectName = e.project, t.services = {}, t.unfilteredServices = {}, t.routesByService = {}, t.routes = {}, t.labelSuggestions = {}, t.clearFilter = function() {
o.clear();
=======
var j;
p.noProjectsCantCreate = !1;
var k = e("humanizeKind"), I = e("getErrorDetails");
d.clear(), p.$on("no-projects-cannot-create", function() {
p.noProjectsCantCreate = !0;
}), p.input = {
selectedProject: p.project
}, p.$watch("input.selectedProject.metadata.name", function() {
p.projectNameTaken = !1;
}), p.aceLoaded = function(e) {
(j = e.getSession()).setOption("tabSize", 2), j.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
};
var R = function(e) {
r.open({
<<<<<<< HEAD
animation: !0,
=======
>>>>>>> Update modals to align with PatternFly standard
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
title: "Confirm Creation",
details: "We checked your application for potential problems. Please confirm you still want to create this application.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
>>>>>>> Add Browse Catalog to Project context view.
};
var s = [];
r.get(e.project).then(_.spread(function(e, r) {
function a() {
t.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(t.services) && !_.isEmpty(t.unfilteredServices);
}
<<<<<<< HEAD
t.project = e, s.push(n.watch("services", r, function(e) {
t.servicesLoaded = !0, t.unfilteredServices = e.by("metadata.name"), o.addLabelSuggestionsFromResources(t.unfilteredServices, t.labelSuggestions), o.setLabelSuggestions(t.labelSuggestions), t.services = o.getLabelSelector().select(t.unfilteredServices), a(), i.log("services (subscribe)", t.unfilteredServices);
})), o.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.services = e.select(t.unfilteredServices), a();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}
}).result.then(y);
}, E = {}, T = function() {
c.hideNotification("from-file-error"), _.each(E, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
});
}, N = function(e) {
T(), E = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
E = E.concat(t), _.filter(E, {
type: "error"
}).length ? (_.each(E, function(e) {
e.id = _.uniqueId("from-file-alert-"), c.addNotification(e);
}), p.disableInputs = !1) : E.length ? (R(E), p.disableInputs = !1) : y();
}, D = function() {
if (_.has(p.input.selectedProject, "metadata.uid")) return n.when(p.input.selectedProject);
var t = p.input.selectedProject.metadata.name, r = p.input.selectedProject.metadata.annotations["new-display-name"], a = e("description")(p.input.selectedProject);
return m.create(t, r, a);
};
p.create = function() {
if (delete p.error, f(p.resource) && (p.resourceKind = p.resource.kind, p.resourceKind.endsWith("List") ? p.isList = !0 : p.isList = !1, g(p.resource))) {
p.isList ? (p.resourceList = p.resource.items, p.resourceName = "") : (p.resourceList = [ p.resource ], p.resourceName = p.resource.metadata.name, "Template" === p.resourceKind && (p.templateOptions = {
process: !0,
add: !1
})), p.updateResources = [], p.createResources = [];
var e = [];
p.errorOccurred = !1, _.forEach(p.resourceList, function(t) {
if (!g(t)) return p.errorOccurred = !0, !1;
e.push(S(t));
}), D().then(function(t) {
p.input.selectedProject = t, n.all(e).then(function() {
p.errorOccurred || (1 === p.createResources.length && "Template" === p.resourceList[0].kind ? v() : _.isEmpty(p.updateResources) ? l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N) : (p.updateTemplate = 1 === p.updateResources.length && "Template" === p.updateResources[0].kind, p.updateTemplate ? v() : h()));
>>>>>>> Use new clusterResourceOverridesEnabled flag
});
}, B = !1, L = function() {
var t = m.getControllerReferences(e.replicaSet), a = _.find(t, {
kind: "Deployment"
});
a && o.get({
group: "apps",
resource: "deployments"
<<<<<<< HEAD
}, a.name, f).then(function(t) {
e.deployment = t, e.healthCheckURL = m.healthCheckURL(n.project, "Deployment", t.metadata.name, "apps"), j.push(o.watchObject({
=======
}, a.name, g).then(function(t) {
e.deployment = t, e.healthCheckURL = p.healthCheckURL(n.project, "Deployment", t.metadata.name, "apps"), j.push(o.watchObject({
>>>>>>> Updates for Service Instance & Bindings
group: "apps",
resource: "deployments"
}, t.metadata.name, f, function(t, a) {
if ("DELETED" === a) return e.alerts["deployment-deleted"] = {
type: "warning",
message: "The deployment controlling this replica set has been deleted."
}, e.healthCheckURL = p.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions"), e.deploymentMissing = !0, void delete e.deployment;
e.deployment = t, e.breadcrumbs = r.getBreadcrumbs({
object: e.replicaSet,
displayName: "#" + i.getRevision(e.replicaSet),
parent: {
title: e.deployment.metadata.name,
link: p.resourceURL(e.deployment)
},
humanizedKind: "Deployments"
}), A(), T();
})), j.push(o.watch({
group: "extensions",
resource: "replicasets"
}, f, function(e) {
var t = e.by("metadata.name");
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
A = B(t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
B = A(t);
>>>>>>> Improve YAML editor validation and feedback
=======
A = B(t);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
B = A(t);
>>>>>>> Add bindings list to resource pages
=======
B = $(t);
>>>>>>> Let administrators disable "Copy Login Command"
}));
<<<<<<< HEAD
});
}, U = function() {
if (!_.isEmpty(k)) {
var t = _.get(e, "replicaSet.spec.template");
t && c.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, k, f);
}
<<<<<<< HEAD
=======
}, p.cancel = function() {
T(), s.toProjectOverview(p.input.selectedProject.metadata.name);
};
var A = e("displayName");
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", T);
} ]
>>>>>>> Use new clusterResourceOverridesEnabled flag
};
<<<<<<< HEAD
o.get(e.resource, n.replicaSet, f, {
=======
o.get(e.resource, n.replicaSet, g, {
>>>>>>> Add product icons for service catalog
errorNotification: !1
}).then(function(t) {
switch (e.loaded = !0, e.replicaSet = t, R(t), y) {
case "ReplicationController":
D(t);
break;

case "ReplicaSet":
L();
=======
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", function(e, t, n, r, a) {
e.projectName = t.project, e.service = null, e.services = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Services",
link: "project/" + t.project + "/browse/services"
}, {
title: t.service
} ], e.podFailureReasons = {
Pending: "This pod will not receive traffic until all of its containers have been created."
};
var o = {}, i = [], s = function() {
e.service && (e.portsByRoute = {}, _.each(e.service.spec.ports, function(t) {
var n = !1;
t.nodePort && (e.showNodePorts = !0), _.each(e.routesForService, function(r) {
r.spec.port && r.spec.port.targetPort !== t.name && r.spec.port.targetPort !== t.targetPort || (e.portsByRoute[r.metadata.name] = e.portsByRoute[r.metadata.name] || [], e.portsByRoute[r.metadata.name].push(t), n = !0);
}), n || (e.portsByRoute[""] = e.portsByRoute[""] || [], e.portsByRoute[""].push(t));
}));
}, c = function() {
if (e.podsForService = {}, e.service) {
var t = new LabelSelector(e.service.spec.selector);
e.podsForService = t.select(o);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").directive("oscFileInput", [ "Logger", function(e) {
return {
restrict: "E",
scope: {
model: "=",
required: "<",
disabled: "<ngDisabled",
readonly: "<ngReadonly",
showTextArea: "<",
hideClear: "<?",
helpText: "@?",
dropZoneId: "@?",
onFileAdded: "<?"
},
templateUrl: "views/directives/osc-file-input.html",
link: function(t, n) {
function r(n) {
var r = new FileReader();
r.onloadend = function() {
t.$apply(function() {
t.fileName = n.name, t.model = r.result;
var e = t.onFileAdded;
_.isFunction(e) && e(r.result), r.error || (t.uploadError = !1);
});
}, r.onerror = function(n) {
t.uploadError = !0, e.error("Could not read file", n);
}, r.readAsText(n);
}
function a() {
n.find(".drag-and-drop-zone").removeClass("show-drag-and-drop-zone highlight-drag-and-drop-zone");
>>>>>>> Bug 1537438: Import YAML/JSON lost Browse button when file folder does not have executive right in sandbox
}
N(), e.breadcrumbs = r.getBreadcrumbs({
object: t
<<<<<<< HEAD
}), j.push(o.watchObject(e.resource, n.replicaSet, f, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
<<<<<<< HEAD
message: "This " + S + " has been deleted."
}), e.replicaSet = t, R(t), N(), U(), e.deployment && $();
})), e.deploymentConfigName && I(), j.push(o.watch("pods", f, function(t) {
=======
}), j.push(o.watchObject(e.resource, n.replicaSet, g, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This " + S + " has been deleted."
<<<<<<< HEAD
}), e.replicaSet = t, R(t), N(), U(), e.deployment && $();
})), e.deploymentConfigName && I(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Patternfly vertical navigation and project bar
=======
}), e.replicaSet = t, R(t), N(), U(), e.deployment && A();
})), e.deploymentConfigName && E(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Let administrators disable "Copy Login Command"
=======
o.get(e.resource, n.replicaSet, g, {
=======
message: "This service has been deleted."
});
};
r.get(t.project).then(_.spread(function(r, u) {
e.project = r, e.projectContext = u, n.get("services", t.service, u, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(t) {
switch (e.loaded = !0, e.replicaSet = t, R(t), y) {
case "ReplicationController":
D(t);
break;

case "ReplicaSet":
L();
}
T(), e.breadcrumbs = r.getBreadcrumbs({
object: t
<<<<<<< HEAD
}), P.push(o.watchObject(e.resource, n.replicaSet, g, function(t, n) {
<<<<<<< HEAD
=======
}), j.push(o.watchObject(e.resource, n.replicaSet, g, function(t, n) {
>>>>>>> Add product icons for service catalog
=======
>>>>>>> Handle displaying parameters when secrets are not available.
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This " + C + " has been deleted."
}), e.replicaSet = t, R(t), N(), U(), e.deployment && A();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})), e.deploymentConfigName && T(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Support EnvFrom in the Env Editors
=======
})), e.deploymentConfigName && T(), P.push(o.watch("pods", g, function(t) {
>>>>>>> Service instance details configuration and edit
=======
})), e.deploymentConfigName && T(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Add product icons for service catalog
=======
})), e.deploymentConfigName && T(), P.push(o.watch("pods", g, function(t) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}), j.push(o.watchObject(e.resource, n.replicaSet, g, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This " + S + " has been deleted."
}), e.replicaSet = t, R(t), T(), U(), e.deployment && A();
})), e.deploymentConfigName && N(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
var n = t.by("metadata.name");
e.podsForDeployment = f.filterForOwner(n, e.replicaSet);
}));
}, function(a) {
e.loaded = !0, e.alerts.load = {
type: "error",
<<<<<<< HEAD
message: "The " + S + " details could not be loaded.",
details: t("getErrorDetails")(a)
}, e.breadcrumbs = r.getBreadcrumbs({
name: n.replicaSet,
kind: y,
namespace: n.project
=======
message: "The service details could not be loaded.",
details: a("getErrorDetails")(t)
};
}), i.push(n.watch("services", u, function(t) {
e.services = t.by("metadata.name");
})), i.push(n.watch("pods", u, function(e) {
o = e.by("metadata.name"), c();
})), i.push(n.watch("endpoints", u, function(n) {
e.podsWithEndpoints = {};
var r = n.by("metadata.name")[t.service];
r && _.each(r.subsets, function(t) {
_.each(t.addresses, function(t) {
"Pod" === _.get(t, "targetRef.kind") && (e.podsWithEndpoints[t.targetRef.name] = !0);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), j.push(o.watch(e.resource, g, function(n, a, r) {
e.replicaSets = n.by("metadata.name"), "ReplicationController" === y && (e.deploymentsByDeploymentConfig = i.associateDeploymentsToDeploymentConfig(e.replicaSets));
var o, s;
r && (o = C(r, "deploymentConfig"), s = r.metadata.name), e.deploymentConfigDeploymentsInProgress = e.deploymentConfigDeploymentsInProgress || {}, a ? "ADDED" === a || "MODIFIED" === a && t("deploymentIsInProgress")(r) ? (e.deploymentConfigDeploymentsInProgress[o] = e.deploymentConfigDeploymentsInProgress[o] || {}, e.deploymentConfigDeploymentsInProgress[o][s] = r) : "MODIFIED" === a && e.deploymentConfigDeploymentsInProgress[o] && delete e.deploymentConfigDeploymentsInProgress[o][s] : e.deploymentConfigDeploymentsInProgress = i.associateRunningDeploymentToDeploymentConfig(e.deploymentsByDeploymentConfig), r ? "DELETED" !== a && (r.causes = t("deploymentCauses")(r)) : angular.forEach(e.replicaSets, function(e) {
e.causes = t("deploymentCauses")(e);
});
})), j.push(o.watch("imagestreams", g, function(e) {
var t = e.by("metadata.name");
c.buildDockerRefMapForImageStreams(t, k), U(), l.log("imagestreams (subscribe)", t);
})), j.push(o.watch("builds", g, function(t) {
e.builds = t.by("metadata.name"), l.log("builds (subscribe)", e.builds);
})), j.push(o.watch({
group: "autoscaling",
resource: "horizontalpodautoscalers",
version: "v1"
}, g, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
v = e.by("metadata.name"), T(), N();
=======
v = e.by("metadata.name"), E(), N();
>>>>>>> Support EnvFrom in the Env Editors
=======
h = e.by("metadata.name"), E(), N();
>>>>>>> Add SVG icons
=======
h = e.by("metadata.name"), E(), T();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
}, {
<<<<<<< HEAD
poll: E,
=======
poll: I,
>>>>>>> Updates for Service Instance & Bindings
pollInterval: 6e4
})), o.list("limitranges", g).then(function(t) {
e.limitRanges = t.by("metadata.name"), T();
});
<<<<<<< HEAD
j.push(o.watch("resourcequotas", g, function(t) {
e.quotas = t.by("metadata.name");
=======
},
template: '<a ng-if="isLink" ng-href="{{gitLink}}" ng-transclude target="_blank"></a><span ng-if="!isLink" ng-transclude></span>'
};
} ]), angular.module("openshiftConsole").directive("oscImageSummary", function() {
return {
restrict: "E",
scope: {
resource: "=",
name: "=",
tag: "="
},
templateUrl: "views/directives/osc-image-summary.html"
};
}), angular.module("openshiftConsole").directive("oscRouting", [ "$filter", "Constants", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
return {
require: "^form",
restrict: "E",
scope: {
route: "=model",
services: "=",
showNameInput: "=",
routingDisabled: "=",
existingRoute: "="
},
templateUrl: "views/directives/osc-routing.html",
link: function(r, a, o, i) {
r.form = i, r.controls = {}, r.options = {
secureRoute: !1,
alternateServices: !1
};
var s = {
group: "route.openshift.io",
resource: "routes/custom-host"
};
r.canICreateCustomHosts = e("canI")(s, "create"), r.canIUpdateCustomHosts = e("canI")(s, "update");
var c = function() {
return r.existingRoute ? r.canIUpdateCustomHosts : r.canICreateCustomHosts;
};
r.isHostnameReadOnly = function() {
return !c();
}, r.disableWildcards = t.DISABLE_WILDCARD_ROUTES || r.existingRoute && "Subdomain" !== r.route.wildcardPolicy, r.areCertificateInputsReadOnly = function() {
return !r.canICreateCustomHosts;
}, r.areCertificateInputsDisabled = function() {
var e = _.get(r, "route.tls.termination");
return !e || "passthrough" === e;
}, r.isDestinationCACertInputDisabled = function() {
return "reencrypt" !== _.get(r, "route.tls.termination");
}, r.insecureTrafficOptions = [ {
value: "",
label: "None"
>>>>>>> Bug 1540783 - Keep hostname updates in route editor
}, {
poll: !0,
pollInterval: 6e4
})), j.push(o.watch("appliedclusterresourcequotas", g, function(t) {
e.clusterQuotas = t.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
}));
<<<<<<< HEAD
var M = b("deploymentIsLatest");
a.showRollbackAction = function() {
return "Complete" === z(a.replicaSet) && !M(a.replicaSet, a.deploymentConfig) && !a.replicaSet.metadata.deletionTimestamp && d.canI("deploymentconfigrollbacks", "create");
}, a.retryFailedDeployment = function(b) {
g.retryFailedDeployment(b, p, a);
}, a.rollbackToDeployment = function(b, c, d, e) {
g.rollbackToDeployment(b, c, d, e, p, a);
}, a.cancelRunningDeployment = function(a) {
g.cancelRunningDeployment(a, p);
}, a.scale = function(c) {
var d = function(c) {
a.alerts = a.alerts || {}, a.alerts.scale = {
type:"error",
message:"An error occurred scaling.",
details:b("getErrorDetails")(c)
};
}, e = a.deployment || a.deploymentConfig || a.replicaSet;
g.scale(e, c).then(_.noop, d);
};
var N = b("hasDeploymentConfig");
a.isScalable = function() {
return !!_.isEmpty(a.autoscalers) && (!N(a.replicaSet) && !w(a.replicaSet) || (!(!a.deploymentConfigMissing && !a.deploymentMissing) || !(!a.deploymentConfig && !a.deployment) && (a.isActive && !I)));
}, a.removeVolume = function(c) {
var d = "This will remove the volume from the " + b("humanizeKind")(a.replicaSet.kind) + ".";
c.persistentVolumeClaim ? d += " It will not delete the persistent volume claim." :c.secret ? d += " It will not delete the secret." :c.configMap && (d += " It will not delete the config map.");
var e = l.confirm({
message:"Remove volume " + c.name + "?",
details:d,
okButtonText:"Remove",
okButtonClass:"btn-danger",
cancelButtonText:"Cancel"
}), f = function() {
q.removeVolume(a.replicaSet, c, p);
};
e.then(f);
}, a.$on("$destroy", function() {
f.unwatchAll(y);
>>>>>>> Create reusable edit-environment-variables component
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("StatefulSetsController", [ "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", "LabelFilter", "PodsService", function(e, t, n, r, a, o, i) {
e.projectName = t.project, e.labelSuggestions = {}, e.clearFilter = function() {
o.clear();
};
var s = n.getPreferredVersion("pods"), c = n.getPreferredVersion("statefulsets"), l = [];
a.get(t.project).then(_.spread(function(t, n) {
function a() {
e.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(e.statefulSets) && !_.isEmpty(e.unfilteredStatefulSets);
}
e.project = t, l.push(r.watch(c, n, function(t) {
angular.extend(e, {
loaded: !0,
unfilteredStatefulSets: t.by("metadata.name")
}), e.statefulSets = o.getLabelSelector().select(e.unfilteredStatefulSets), o.addLabelSuggestionsFromResources(e.unfilteredStatefulSets, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), a();
})), l.push(r.watch(s, n, function(t) {
e.pods = t.by("metadata.name"), e.podsByOwnerUID = i.groupByOwnerUID(e.pods);
})), o.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.statefulSets = t.select(e.unfilteredStatefulSets), a();
});
}), e.$on("$destroy", function() {
<<<<<<< HEAD
r.unwatchAll(l);
=======
i.unwatchAll(u);
=======
} ]), angular.module("openshiftConsole").controller("ServiceInstancesController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
=======
} ]), angular.module("openshiftConsole").controller("ServiceInstancesController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.bindingsByInstanceRef = {}, e.labelSuggestions = {}, e.projectName = n.project, e.serviceClasses = {}, e.serviceInstances = {}, e.unfilteredServiceInstances = {}, e.clearFilter = function() {
s.clear();
};
var u = r.getPreferredVersion("servicebindings"), d = r.getPreferredVersion("clusterserviceclasses");
e.serviceInstancesVersion = r.getPreferredVersion("serviceinstances");
var m = [], p = function() {
e.serviceInstances = s.getLabelSelector().select(e.unfilteredServiceInstances);
}, f = function() {
e.unfilteredServiceInstances = a.sortServiceInstances(e.unfilteredServiceInstances, e.serviceClasses);
};
e.getServiceClass = function(t) {
var n = _.get(t, "spec.clusterServiceClassRef.name");
return _.get(e, [ "serviceClasses", n ]);
}, l.get(n.project).then(_.spread(function(t, n) {
function r() {
e.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(e.serviceInstances) && !_.isEmpty(e.unfilteredServiceInstances);
}
e.project = t, e.projectContext = n, m.push(i.watch(u, n, function(t) {
var n = t.by("metadata.name");
e.bindingsByInstanceRef = _.groupBy(n, "spec.instanceRef.name");
})), m.push(i.watch(e.serviceInstancesVersion, n, function(t) {
e.serviceInstancesLoaded = !0, e.unfilteredServiceInstances = t.by("metadata.name"), f(), p(), r(), s.addLabelSuggestionsFromResources(e.unfilteredServiceInstances, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), c.log("provisioned services (subscribe)", e.unfilteredServiceInstances);
})), i.list(d, {}, function(t) {
e.serviceClasses = t.by("metadata.name"), f(), p();
}), s.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.serviceInstances = t.select(e.unfilteredServiceInstances), r();
});
}), e.$on("$destroy", function() {
i.unwatchAll(m);
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
});
}));
} ]), angular.module("openshiftConsole").controller("ServiceInstanceController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "AuthorizationService", "Catalog", "DataService", "Logger", "ProjectsService", "SecretsService", "ServiceInstancesService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
e.alerts = {}, e.projectName = n.project, e.serviceInstance = null, e.serviceClass = null, e.serviceClasses = null, e.editDialogShown = !1, e.breadcrumbs = [ {
title: "Provisioned Services",
link: "project/" + n.project + "/browse/service-instances"
} ], e.deprovision = function() {
e.serviceInstance.metadata.deletionTimestamp || d.deprovision(e.serviceInstance, e.bindings);
}, e.showEditDialog = function() {
e.editDialogShown = !0;
}, e.showParameterValues = !1, e.toggleShowParameterValues = function() {
e.showParameterValues = !e.showParameterValues;
}, e.closeEditDialog = function() {
e.editDialogShown = !1;
};
var m = r.getPreferredVersion("servicebindings");
e.eventsVersion = r.getPreferredVersion("events"), e.serviceInstancesVersion = r.getPreferredVersion("serviceinstances");
var p, f, g = [], v = [], h = t("serviceInstanceDisplayName"), y = t("isServiceInstanceFailed"), b = function() {
e.breadcrumbs.push({
title: e.displayName
});
}, S = function() {
if (e.serviceInstance && e.parameterSchema) {
s.unwatchAll(v), v = [], e.allowParametersReveal = o.canI("secrets", "get", e.projectName), e.parameterData = {}, e.opaqueParameterKeys = [];
var t = e.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(e.parameterSchema, "properties")), function(n) {
e.parameterData[n] = t;
});
var n = _.get(e.serviceInstance, "status.externalProperties.parameters", {});
_.each(_.keys(n), function(t) {
"<redacted>" === n[t] ? e.parameterData[t] = "*****" : (e.parameterData[t] = n[t], e.opaqueParameterKeys.push(t));
}), e.allowParametersReveal && _.each(_.get(e.serviceInstance, "spec.parametersFrom"), function(t) {
v.push(s.watchObject("secrets", _.get(t, "secretKeyRef.name"), e.projectContext, function(n) {
try {
var r = JSON.parse(u.decodeSecretData(n.data)[t.secretKeyRef.key]);
_.extend(e.parameterData, r);
} catch (e) {
c.warn("Unable to load parameters from secret " + _.get(t, "secretKeyRef.name"), e);
}
}));
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
<<<<<<< HEAD
=======
}
}, C = function() {
if (e.plan && e.serviceClass && e.serviceInstance) {
var t = _.get(e.plan, "spec.instanceUpdateParameterSchema"), n = _.size(_.get(t, "properties")) > 0 || _.get(e.serviceClass, "spec.planUpdatable") && _.size(e.servicePlans) > 1;
<<<<<<< HEAD
e.editAvailable = n && h(e.serviceInstance) && !_.get(e.serviceInstance, "metadata.deletionTimestamp");
=======
e.editAvailable = n && !y(e.serviceInstance) && !_.get(e.serviceInstance, "status.asyncOpInProgress") && !_.get(e.serviceInstance, "metadata.deletionTimestamp");
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
}
}, w = function() {
e.parameterFormDefinition = angular.copy(_.get(e.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), e.parameterSchema = _.get(e.plan, "spec.instanceCreateParameterSchema"), S();
}, P = function() {
var t = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.plan = _.find(e.servicePlans, {
metadata: {
name: t
}
}), w(), C();
}, k = function() {
e.serviceClass && !f && (e.servicePlans ? P() : f = i.getServicePlansForServiceClass(e.serviceClass).then(function(t) {
var n = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.servicePlans = _.reject(t.by("metadata.name"), function(e) {
return _.get(e, "status.removedFromBrokerCatalog") && e.metadata.name !== n;
}), P(), f = null;
}));
}, j = function() {
e.serviceInstance && !p && (e.serviceClass ? k() : p = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = h(e.serviceInstance, e.serviceClass), b(), p = null, k();
}));
}, I = function(t, n) {
e.loaded = !0, e.serviceInstance = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This provisioned service has been deleted."
}), j(), S(), C();
};
l.get(n.project).then(_.spread(function(r, o) {
e.project = r, e.projectContext = o, s.get(e.serviceInstancesVersion, n.instance, o, {
errorNotification: !1
}).then(function(t) {
I(t), g.push(s.watchObject(e.serviceInstancesVersion, n.instance, o, I)), g.push(s.watch(m, o, function(n) {
<<<<<<< HEAD
var a = n.by("metadata.name");
e.bindings = r.getBindingsForResource(a, t);
>>>>>>> Fix for adding non-builder templates to a project
=======
var r = n.by("metadata.name");
e.bindings = a.getBindingsForResource(r, t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("StatefulSetController", [ "$filter", "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "MetricsService", "ProjectsService", "PodsService", function(e, t, n, r, a, o, i, s, c) {
=======
var O = t("deploymentIsLatest");
e.showRollbackAction = function() {
return "Complete" === P(e.replicaSet) && !O(e.replicaSet, e.deploymentConfig) && !e.replicaSet.metadata.deletionTimestamp && a.canI("deploymentconfigrollbacks", "create");
}, e.retryFailedDeployment = function(t) {
i.retryFailedDeployment(t, g, e);
}, e.rollbackToDeployment = function(t, n, a, r) {
i.rollbackToDeployment(t, n, a, r, g, e);
}, e.cancelRunningDeployment = function(e) {
i.cancelRunningDeployment(e, g);
}, e.scale = function(n) {
var a = e.deployment || e.deploymentConfig || e.replicaSet;
i.scale(a, n).then(_.noop, function(n) {
e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: "An error occurred scaling.",
details: t("getErrorDetails")(n)
};
});
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var F = t("hasDeploymentConfig");
e.isScalable = function() {
return !!_.isEmpty(e.autoscalers) && (!F(e.replicaSet) && !w(e.replicaSet) || (!(!e.deploymentConfigMissing && !e.deploymentMissing) || !(!e.deploymentConfig && !e.deployment) && (e.isActive && !B)));
}, e.removeVolume = function(n) {
var a = "This will remove the volume from the " + t("humanizeKind")(e.replicaSet.kind) + ".";
n.persistentVolumeClaim ? a += " It will not delete the persistent volume claim." : n.secret ? a += " It will not delete the secret." : n.configMap && (a += " It will not delete the config map.");
d.confirm({
message: "Remove volume " + n.name + "?",
details: a,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
}).then(function() {
v.removeVolume(e.replicaSet, n, g);
});
<<<<<<< HEAD
}, e.$on("$destroy", function() {
o.unwatchAll(j);
=======
} ]), angular.module("openshiftConsole").controller("SecretsController", [ "$routeParams", "$scope", "DataService", "ProjectsService", function(e, t, n, a) {
t.projectName = e.project, t.secretsByType = {};
var r = [];
a.get(e.project).then(_.spread(function(e, a) {
t.project = e, t.context = a, r.push(n.watch("secrets", a, function(e) {
t.secrets = _.sortBy(e.by("metadata.name"), [ "type", "metadata.name" ]), t.secretsLoaded = !0;
})), t.$on("$destroy", function() {
n.unwatchAll(r);
>>>>>>> Add watcher to secrets page
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("StatefulSetsController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "LabelFilter", "PodsService", function(e, t, n, a, r, o) {
e.projectName = t.project, e.labelSuggestions = {}, e.clearFilter = function() {
=======
=======
})), e.$on("$destroy", function() {
s.unwatchAll(f), s.unwatchAll(g);
=======
})), e.$on("$destroy", function() {
s.unwatchAll(g), s.unwatchAll(v);
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
});
} ]), angular.module("openshiftConsole").controller("SecretsController", [ "$routeParams", "$scope", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, a, r) {
=======
})), e.$on("$destroy", function() {
s.unwatchAll(f), s.unwatchAll(g);
});
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("SecretsController", [ "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, a, r, o) {
>>>>>>> Update secret, secrets controllers to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").controller("SecretsController", [ "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
t.projectName = e.project, t.labelSuggestions = {}, t.clearFilter = function() {
a.clear();
}, t.secretsVersion = n.getPreferredVersion("secrets");
var i = [];
o.get(e.project).then(_.spread(function(e, n) {
function o() {
t.filterWithZeroResults = !a.getLabelSelector().isEmpty() && _.isEmpty(t.secrets) && !_.isEmpty(t.unfilteredSecrets);
}
t.project = e, t.context = n, i.push(r.watch(t.secretsVersion, n, function(e) {
t.unfilteredSecrets = _.sortBy(e.by("metadata.name"), [ "type", "metadata.name" ]), t.secretsLoaded = !0, a.addLabelSuggestionsFromResources(t.unfilteredSecrets, t.labelSuggestions), a.setLabelSuggestions(t.labelSuggestions), t.secrets = a.getLabelSelector().select(t.unfilteredSecrets), o();
})), a.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.secrets = e.select(t.unfilteredSecrets), o();
});
}), t.$on("$destroy", function() {
r.unwatchAll(i);
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Adding label filter to ste secrets page
} ]), angular.module("openshiftConsole").controller("SecretController", [ "$routeParams", "$filter", "$scope", "DataService", "ProjectsService", "SecretsService", function(e, t, n, a, r, o) {
=======
} ]), angular.module("openshiftConsole").controller("SecretController", [ "$routeParams", "$filter", "$scope", "APIService", "DataService", "ProjectsService", "SecretsService", function(e, t, n, a, r, o, i) {
>>>>>>> Update secret, secrets controllers to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").controller("SecretController", [ "$routeParams", "$filter", "$scope", "APIService", "DataService", "ProjectsService", "SecretsService", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = e.project, n.secretName = e.secret, n.view = {
showSecret: !1
}, n.alerts = n.alerts || {}, n.breadcrumbs = [ {
title: "Secrets",
link: "project/" + e.project + "/browse/secrets"
}, {
title: n.secretName
} ], n.secretsVersion = r.getPreferredVersion("secrets");
var s = [], c = function(e, t) {
n.secret = e, "DELETED" !== t ? n.decodedSecretData = i.decodeSecretData(n.secret.data) : n.alerts.deleted = {
type: "warning",
message: "This secret has been deleted."
};
};
n.addToApplicationVisible = !1, n.addToApplication = function() {
n.secret.data && (n.addToApplicationVisible = !0);
}, n.closeAddToApplication = function() {
n.addToApplicationVisible = !1;
}, o.get(e.project).then(_.spread(function(e, r) {
n.project = e, n.context = r, a.get(n.secretsVersion, n.secretName, r, {
errorNotification: !1
}).then(function(e) {
n.loaded = !0, c(e), s.push(a.watchObject(n.secretsVersion, n.secretName, r, c));
}, function(e) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The secret details could not be loaded.",
details: t("getErrorDetails")(e)
};
}), n.$on("$destroy", function() {
a.unwatchAll(s);
});
}));
} ]), angular.module("openshiftConsole").controller("CreateSecretController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
r.alerts = {}, r.projectName = n.project, r.breadcrumbs = [ {
title: "Secrets",
link: "project/" + r.projectName + "/browse/secrets"
}, {
title: "Create Secret"
} ], l.get(n.project).then(_.spread(function(e, o) {
r.project = e, r.context = o, i.canI("secrets", "create", n.project) ? r.navigateBack = function() {
n.then ? t.url(n.then) : a.history.back();
} : c.toErrorPage("You do not have authority to create secrets in project " + n.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapsController", [ "$scope", "$routeParams", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o) {
e.projectName = t.project, e.loaded = !1, e.labelSuggestions = {}, e.configMapsVersion = n.getPreferredVersion("configmaps"), e.clearFilter = function() {
<<<<<<< HEAD
>>>>>>> Bug 1509142 - Should not display the 'Reveal Secret' link when secrets without 'data' field
r.clear();
};
var i = [];
a.get(t.project).then(_.spread(function(t, a) {
function s() {
e.filterWithZeroResults = !r.getLabelSelector().isEmpty() && _.isEmpty(e.statefulSets) && !_.isEmpty(e.unfilteredStatefulSets);
}
e.project = t, i.push(n.watch({
resource: "statefulsets",
group: "apps",
version: "v1beta1"
}, a, function(t) {
angular.extend(e, {
loaded: !0,
unfilteredStatefulSets: t.by("metadata.name")
}), e.statefulSets = r.getLabelSelector().select(e.unfilteredStatefulSets), r.addLabelSuggestionsFromResources(e.unfilteredStatefulSets, e.labelSuggestions), r.setLabelSuggestions(e.labelSuggestions), s();
})), i.push(n.watch("pods", a, function(t) {
e.pods = t.by("metadata.name"), e.podsByOwnerUID = o.groupByOwnerUID(e.pods);
})), r.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.statefulSets = t.select(e.unfilteredStatefulSets), s();
});
}), e.$on("$destroy", function() {
n.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("StatefulSetController", [ "$filter", "$scope", "$routeParams", "BreadcrumbsService", "DataService", "MetricsService", "ProjectsService", "PodsService", function(e, t, n, a, r, o, i, s) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
t.projectName = n.project, t.statefulSetName = n.statefulset, t.forms = {}, t.alerts = {}, t.breadcrumbs = a.getBreadcrumbs({
name: t.statefulSetName,
kind: "StatefulSet",
namespace: n.project
=======
a.clear();
};
var i, s = [], c = function() {
e.filterWithZeroResults = !a.getLabelSelector().isEmpty() && _.isEmpty(e.configMaps) && !_.isEmpty(i);
}, l = function() {
a.addLabelSuggestionsFromResources(i, e.labelSuggestions), a.setLabelSuggestions(e.labelSuggestions);
}, u = function() {
var t = a.getLabelSelector().select(i);
e.configMaps = _.sortBy(t, "metadata.name"), c();
};
o.get(t.project).then(_.spread(function(t, n) {
e.project = t, s.push(r.watch(e.configMapsVersion, n, function(t) {
i = t.by("metadata.name"), l(), u(), e.loaded = !0;
})), a.onActiveFiltersChanged(function() {
e.$evalAsync(u);
}), e.$on("$destroy", function() {
r.unwatchAll(s);
});
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapController", [ "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "ProjectsService", function(e, t, n, r, a, o) {
e.projectName = t.project, e.alerts = e.alerts || {}, e.loaded = !1, e.labelSuggestions = {}, e.breadcrumbs = r.getBreadcrumbs({
name: t.configMap,
kind: "ConfigMap",
namespace: t.project
}), e.configMapsVersion = n.getPreferredVersion("configmaps");
var i = [], s = function(t, n) {
e.loaded = !0, e.configMap = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This config map has been deleted."
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
var l = r.getPreferredVersion("pods"), u = r.getPreferredVersion("resourcequotas"), d = r.getPreferredVersion("appliedclusterresourcequotas");
t.statefulSetsVersion = r.getPreferredVersion("statefulsets");
var m, p = [];
i.isAvailable().then(function(e) {
t.metricsAvailable = e;
}), s.get(n.project).then(_.spread(function(n, r) {
m = r, o.get(t.statefulSetsVersion, t.statefulSetName, r, {
=======
var c, l = [], u = t.resourceGroupVersion = {
resource: "statefulsets",
group: "apps",
version: "v1beta1"
};
<<<<<<< HEAD
o.isAvailable().then(function(e) {
t.metricsAvailable = e;
}), i.get(n.project).then(_.spread(function(n, a) {
c = a, r.get(u, t.statefulSetName, a, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
errorNotification: !1
}).then(function(e) {
angular.extend(t, {
project: n,
<<<<<<< HEAD
projectContext: r,
statefulSet: e,
loaded: !0,
isScalable: function() {
return !1;
},
scale: function() {}
}), p.push(o.watchObject(t.statefulSetsVersion, t.statefulSetName, r, function(e) {
t.statefulSet = e;
})), p.push(o.watch(l, r, function(n) {
var r = n.by("metadata.name");
t.podsForStatefulSet = c.filterForOwner(r, e);
}));
p.push(o.watch(u, r, function(e) {
t.quotas = e.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
})), p.push(o.watch(d, r, function(e) {
t.clusterQuotas = e.by("metadata.name");
=======
} ]), angular.module("openshiftConsole").controller("StatefulSetController", [ "$filter", "$scope", "$routeParams", "BreadcrumbsService", "DataService", "MetricsService", "ProjectsService", "PodsService", function(a, b, c, d, e, f, g, h) {
b.projectName = c.project, b.statefulSetName = c.statefulset, b.forms = {}, b.alerts = {}, b.breadcrumbs = d.getBreadcrumbs({
name:b.statefulSetName,
kind:"StatefulSet",
namespace:c.project
});
var i, j = [], k = b.resourceGroupVersion = {
resource:"statefulsets",
group:"apps",
version:"v1beta1"
};
f.isAvailable().then(function(a) {
b.metricsAvailable = a;
}), g.get(c.project).then(_.spread(function(c, d) {
i = d, e.get(k, b.statefulSetName, d, {
errorNotification:!1
}).then(function(a) {
angular.extend(b, {
project:c,
projectContext:d,
statefulSet:a,
loaded:!0,
isScalable:function() {
=======
projectContext: a,
statefulSet: e,
loaded: !0,
isScalable: function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return !1;
},
scale: function() {}
}), l.push(r.watchObject(u, t.statefulSetName, a, function(e) {
t.statefulSet = e;
})), l.push(r.watch("pods", a, function(n) {
var a = n.by("metadata.name");
t.podsForStatefulSet = s.filterForOwner(a, e);
}));
l.push(r.watch("resourcequotas", a, function(e) {
t.quotas = e.by("metadata.name");
}, {
<<<<<<< HEAD
poll:!0,
pollInterval:f
})), j.push(e.watch("appliedclusterresourcequotas", d, function(a) {
b.clusterQuotas = a.by("metadata.name");
>>>>>>> Create reusable edit-environment-variables component
=======
poll: !0,
pollInterval: 6e4
})), l.push(r.watch("appliedclusterresourcequotas", a, function(e) {
t.clusterQuotas = e.by("metadata.name");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, {
poll: !0,
pollInterval: 6e4
}));
}, function(n) {
t.loaded = !0, t.alerts.load = {
=======
e.addToApplicationVisible = !1, e.addToApplication = function() {
e.addToApplicationVisible = !0;
}, e.closeAddToApplication = function() {
e.addToApplicationVisible = !1;
}, o.get(t.project).then(_.spread(function(n, r) {
e.project = n, a.get(e.configMapsVersion, t.configMap, r, {
errorNotification: !1
}).then(function(e) {
s(e), i.push(a.watchObject("configmaps", t.configMap, r, s));
}, function(t) {
e.loaded = !0, e.error = t;
}), e.$on("$destroy", function() {
a.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("CreateConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
n.projectName = t.project, n.breadcrumbs = [ {
title: "Config Maps",
link: "project/" + n.projectName + "/browse/config-maps"
}, {
title: "Create Config Map"
} ];
var u = function() {
c.hideNotification("create-config-map-error");
};
n.$on("$destroy", u);
var d = function() {
r.history.back();
};
n.cancel = d, l.get(t.project).then(_.spread(function(r, l) {
n.project = r, o.canI("configmaps", "create", t.project) ? (n.configMap = {
apiVersion: "v1",
kind: "ConfigMap",
metadata: {
namespace: t.project
},
data: {}
}, n.createConfigMap = function() {
if (n.createConfigMapForm.$valid) {
u(), n.disableInputs = !0;
var t = a.objectToResourceGroupVersion(n.configMap);
i.create(t, null, n.configMap, l).then(function() {
c.addNotification({
type: "success",
message: "Config map " + n.configMap.metadata.name + " successfully created."
}), d();
}, function(t) {
n.disableInputs = !1, c.addNotification({
id: "create-config-map-error",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "error",
message: "The stateful set details could not be loaded.",
details: e("getErrorDetails")(n)
};
});
<<<<<<< HEAD
<<<<<<< HEAD
})), t.$on("$destroy", function() {
o.unwatchAll(p);
=======
})), b.$on("$destroy", function() {
e.unwatchAll(j);
>>>>>>> Create reusable edit-environment-variables component
});
} ]), angular.module("openshiftConsole").controller("ServicesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ProjectsService", "LabelFilter", "Logger", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.services = {}, n.unfilteredServices = {}, n.routesByService = {}, n.routes = {}, n.labelSuggestions = {}, n.clearFilter = function() {
i.clear();
=======
})), t.$on("$destroy", function() {
r.unwatchAll(l);
});
} ]), angular.module("openshiftConsole").controller("ServicesController", [ "$routeParams", "$scope", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", function(e, t, n, a, r, o, i) {
t.projectName = e.project, t.services = {}, t.unfilteredServices = {}, t.routesByService = {}, t.routes = {}, t.labelSuggestions = {}, t.clearFilter = function() {
o.clear();
};
var s = [];
a.get(e.project).then(_.spread(function(e, a) {
function r() {
<<<<<<< HEAD
o.getLabelSelector().isEmpty() || !$.isEmptyObject(t.services) || $.isEmptyObject(t.unfilteredServices) ? delete t.alerts.services : t.alerts.services = {
type: "warning",
details: "The active filters are hiding all services."
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
var c = r.getPreferredVersion("services"), l = [];
o.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && _.isEmpty(n.services) && !_.isEmpty(n.unfilteredServices);
}
<<<<<<< HEAD
n.project = e, l.push(a.watch(c, t, function(e) {
n.servicesLoaded = !0, n.unfilteredServices = e.by("metadata.name"), i.addLabelSuggestionsFromResources(n.unfilteredServices, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), n.services = i.getLabelSelector().select(n.unfilteredServices), r(), s.log("services (subscribe)", n.unfilteredServices);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.services = e.select(n.unfilteredServices), r();
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "APIService", "DataService", "Logger", "gettext", "gettextCatalog", "ProjectsService", "$filter", function(e, t, n, r, a, o, i, s, c) {
=======
t.project = e, s.push(n.watch("services", a, function(e) {
t.unfilteredServices = e.by("metadata.name"), o.addLabelSuggestionsFromResources(t.unfilteredServices, t.labelSuggestions), o.setLabelSuggestions(t.labelSuggestions), t.services = o.getLabelSelector().select(t.unfilteredServices), t.emptyMessage = "No services to show", r(), i.log("services (subscribe)", t.unfilteredServices);
=======
t.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(t.services) && !_.isEmpty(t.unfilteredServices);
}
t.project = e, s.push(n.watch("services", a, function(e) {
t.servicesLoaded = !0, t.unfilteredServices = e.by("metadata.name"), o.addLabelSuggestionsFromResources(t.unfilteredServices, t.labelSuggestions), o.setLabelSuggestions(t.labelSuggestions), t.services = o.getLabelSelector().select(t.unfilteredServices), r(), i.log("services (subscribe)", t.unfilteredServices);
>>>>>>> Replacing empty tables with empty state message
})), o.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.services = e.select(t.unfilteredServices), r();
});
}), t.$on("$destroy", function() {
n.unwatchAll(s);
=======
} ]), angular.module("openshiftConsole").controller("RoutesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, a, r, o, i) {
=======
} ]), angular.module("openshiftConsole").controller("RoutesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.unfilteredRoutes = {}, n.routes = {}, n.labelSuggestions = {}, n.clearFilter = function() {
o.clear();
};
var s = r.getPreferredVersion("services");
n.routesVersion = r.getPreferredVersion("routes");
var c = [];
i.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(n.routes) && !_.isEmpty(n.unfilteredRoutes);
}
n.project = e, c.push(a.watch(n.routesVersion, t, function(e) {
n.routesLoaded = !0, n.unfilteredRoutes = e.by("metadata.name"), o.addLabelSuggestionsFromResources(n.unfilteredRoutes, n.labelSuggestions), o.setLabelSuggestions(n.labelSuggestions), n.routes = o.getLabelSelector().select(n.unfilteredRoutes), r();
})), c.push(a.watch(s, t, function(e) {
n.services = e.by("metadata.name");
})), o.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.routes = e.select(n.unfilteredRoutes), r();
});
}), n.$on("$destroy", function() {
<<<<<<< HEAD
r.unwatchAll(c);
>>>>>>> Update routes controller to use getPreferredVersion
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", function(e, t, n, a, r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
e.projectName = t.project, e.service = null, e.services = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Services",
link: "project/" + t.project + "/browse/services"
}, {
title: t.service
} ], e.podFailureReasons = {
Pending: "This pod will not receive traffic until all of its containers have been created."
};
<<<<<<< HEAD
var l = n.getPreferredVersion("pods"), u = n.getPreferredVersion("endpoints");
e.eventsVersion = n.getPreferredVersion("events"), e.routesVersion = n.getPreferredVersion("routes"), e.servicesVersion = n.getPreferredVersion("services");
var d = {}, m = [], p = function() {
e.service && (e.portsByRoute = {}, _.each(e.service.spec.ports, function(t) {
var n = !1;
t.nodePort && (e.showNodePorts = !0), _.each(e.routesForService, function(r) {
r.spec.port && r.spec.port.targetPort !== t.name && r.spec.port.targetPort !== t.targetPort || (e.portsByRoute[r.metadata.name] = e.portsByRoute[r.metadata.name] || [], e.portsByRoute[r.metadata.name].push(t), n = !0);
}), n || (e.portsByRoute[""] = e.portsByRoute[""] || [], e.portsByRoute[""].push(t));
}));
}, g = function() {
if (e.podsForService = {}, e.service) {
var t = new LabelSelector(e.service.spec.selector);
e.podsForService = t.select(d);
}
}, f = function(t, n) {
e.loaded = !0, e.service = t, g(), p(), "DELETED" === n && (e.alerts.deleted = {
=======
} ]), angular.module("openshiftConsole").controller("RouteController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "APIService", "DataService", "ProjectsService", "RoutesService", function(e, t, n, a, r, o, i, s) {
=======
a.unwatchAll(c);
});
}));
} ]), angular.module("openshiftConsole").controller("RouteController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "APIService", "DataService", "ProjectsService", "RoutesService", function(e, t, n, r, a, o, i, s) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.projectName = n.project, e.route = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Routes",
link: "project/" + n.project + "/browse/routes"
}, {
title: n.route
} ];
<<<<<<< HEAD
var c = r.getPreferredVersion("services");
e.routesVersion = r.getPreferredVersion("routes");
=======
var c = a.getPreferredVersion("services");
e.routesVersion = a.getPreferredVersion("routes");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var l, u = [], d = function(t, n) {
e.loaded = !0, e.route = t, l = s.isCustomHost(t), "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Update route controller to use getPreferredVersion
type: "warning",
message: i.getString(o("This service has been deleted."))
});
<<<<<<< HEAD
};
s.get(t.project).then(_.spread(function(n, s) {
e.project = n, e.projectContext = s, r.get(e.servicesVersion, t.service, s, {
errorNotification: !1
}).then(function(n) {
f(n), m.push(r.watchObject(e.servicesVersion, t.service, s, f));
}, function(t) {
=======
}, m = function(t) {
return "router-host-" + _.get(e, "route.metadata.uid") + "-" + t.host + "-" + t.routerCanonicalHostname;
};
e.showRouterHostnameAlert = function(t, n) {
if (!l) return !1;
if (!t || !t.host || !t.routerCanonicalHostname) return !1;
if (!n || "True" !== n.status) return !1;
var a = m(t);
return !r.isAlertPermanentlyHidden(a, e.projectName);
}, i.get(n.project).then(_.spread(function(r, a) {
e.project = r, o.get(e.routesVersion, n.route, a, {
errorNotification: !1
}).then(function(t) {
d(t), u.push(o.watchObject(e.routesVersion, n.route, a, d));
}, function(n) {
>>>>>>> Update route controller to use getPreferredVersion
e.loaded = !0, e.alerts.load = {
type: "error",
message: i.getString(o("The service details could not be loaded.")),
details: c("getErrorDetails")(t)
};
<<<<<<< HEAD
<<<<<<< HEAD
}), m.push(r.watch(e.servicesVersion, s, function(t) {
e.services = t.by("metadata.name");
})), m.push(r.watch(l, s, function(e) {
d = e.by("metadata.name"), g();
})), m.push(r.watch(u, s, function(n) {
e.podsWithEndpoints = {};
var r = n.by("metadata.name")[t.service];
r && _.each(r.subsets, function(t) {
=======
var o = {}, i = [], s = function() {
e.service && (e.portsByRoute = {}, _.each(e.service.spec.ports, function(t) {
var n = !1;
t.nodePort && (e.showNodePorts = !0), _.each(e.routesForService, function(a) {
a.spec.port && a.spec.port.targetPort !== t.name && a.spec.port.targetPort !== t.targetPort || (e.portsByRoute[a.metadata.name] = e.portsByRoute[a.metadata.name] || [], e.portsByRoute[a.metadata.name].push(t), n = !0);
}), n || (e.portsByRoute[""] = e.portsByRoute[""] || [], e.portsByRoute[""].push(t));
=======
}), u.push(o.watch(c, r, function(t) {
=======
}), u.push(o.watch(c, a, function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.services = t.by("metadata.name");
})), e.$on("$destroy", function() {
o.unwatchAll(u);
});
>>>>>>> Update route controller to use getPreferredVersion
}));
<<<<<<< HEAD
}, c = function() {
if (e.podsForService = {}, e.service) {
var t = new LabelSelector(e.service.spec.selector);
e.podsForService = t.select(o);
}
}, l = function(t, n) {
e.loaded = !0, e.service = t, c(), s(), "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This service has been deleted."
});
};
a.get(t.project).then(_.spread(function(a, u) {
e.project = a, e.projectContext = u, n.get("services", t.service, u, {
errorNotification: !1
}).then(function(e) {
l(e), i.push(n.watchObject("services", t.service, u, l));
}, function(t) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The service details could not be loaded.",
details: r("getErrorDetails")(t)
};
}), i.push(n.watch("services", u, function(t) {
e.services = t.by("metadata.name");
})), i.push(n.watch("pods", u, function(e) {
o = e.by("metadata.name"), c();
})), i.push(n.watch("endpoints", u, function(n) {
e.podsWithEndpoints = {};
var a = n.by("metadata.name")[t.service];
a && _.each(a.subsets, function(t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
_.each(t.addresses, function(t) {
"Pod" === _.get(t, "targetRef.kind") && (e.podsWithEndpoints[t.targetRef.name] = !0);
});
});
<<<<<<< HEAD
})), m.push(r.watch(e.routesVersion, s, function(n) {
e.routesForService = {}, angular.forEach(n.by("metadata.name"), function(n) {
"Service" === n.spec.to.kind && n.spec.to.name === t.service && (e.routesForService[n.metadata.name] = n);
}), p(), a.log("routes (subscribe)", e.routesForService);
})), e.$on("$destroy", function() {
r.unwatchAll(m);
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ServiceInstancesController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
e.bindingsByInstanceRef = {}, e.labelSuggestions = {}, e.projectName = n.project, e.serviceClasses = {}, e.serviceInstances = {}, e.unfilteredServiceInstances = {}, e.clearFilter = function() {
s.clear();
};
var u = r.getPreferredVersion("servicebindings"), d = r.getPreferredVersion("clusterserviceclasses");
e.serviceInstancesVersion = r.getPreferredVersion("serviceinstances");
var m = [], p = function() {
e.serviceInstances = s.getLabelSelector().select(e.unfilteredServiceInstances);
}, g = function() {
e.unfilteredServiceInstances = a.sortServiceInstances(e.unfilteredServiceInstances, e.serviceClasses);
};
<<<<<<< HEAD
e.getServiceClass = function(t) {
var n = _.get(t, "spec.clusterServiceClassRef.name");
return _.get(e, [ "serviceClasses", n ]);
}, l.get(n.project).then(_.spread(function(t, n) {
function r() {
e.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(e.serviceInstances) && !_.isEmpty(e.unfilteredServiceInstances);
}
e.project = t, e.projectContext = n, m.push(i.watch(u, n, function(t) {
var n = t.by("metadata.name");
e.bindingsByInstanceRef = _.groupBy(n, "spec.instanceRef.name");
})), m.push(i.watch(e.serviceInstancesVersion, n, function(t) {
e.serviceInstancesLoaded = !0, e.unfilteredServiceInstances = t.by("metadata.name"), g(), p(), r(), s.addLabelSuggestionsFromResources(e.unfilteredServiceInstances, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), c.log("provisioned services (subscribe)", e.unfilteredServiceInstances);
})), i.list(d, {}, function(t) {
e.serviceClasses = t.by("metadata.name"), g(), p();
}), s.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.serviceInstances = t.select(e.unfilteredServiceInstances), r();
=======
l.navURL = function(e) {
return e ? t("isAbsoluteURL")(e) ? e : "project/" + l.projectName + e : "";
}, l.show = function(e) {
return !(e.isValid && !e.isValid()) && (!e.canI || (e.canI.addToProject ? l.canIAddToProject : o.canI({
resource: e.canI.resource,
group: e.canI.group
}, e.canI.verb, l.projectName)));
}, l.itemClicked = function(e) {
if (m(), e.href) return l.nav.showMobileNav = !1, void (l.sidebar.secondaryOpen = !1);
e.isHover = !0, e.mobileSecondary = l.isMobile, l.sidebar.showMobileSecondary = l.isMobile, l.sidebar.secondaryOpen = !0;
}, l.onMouseEnter = function(e) {
e.mouseLeaveTimeout && (n.cancel(e.mouseLeaveTimeout), e.mouseLeaveTimeout = null), e.mouseEnterTimeout = n(function() {
e.isHover = !0, e.mouseEnterTimeout = null, l.sidebar.secondaryOpen = !_.isEmpty(e.secondaryNavSections);
}, 200);
}, l.onMouseLeave = function(e) {
e.mouseEnterTimeout && (n.cancel(e.mouseEnterTimeout), e.mouseEnterTimeout = null), e.mouseLeaveTimeout = n(function() {
e.isHover = !1, e.mouseLeaveTimeout = null, l.sidebar.secondaryOpen = _.some(l.navItems, function(e) {
return e.isHover && !_.isEmpty(e.secondaryNavSections);
>>>>>>> Add Browse Catalog to Project context view.
});
}), e.$on("$destroy", function() {
i.unwatchAll(m);
=======
} ]), angular.module("openshiftConsole").controller("StorageController", [ "$filter", "$routeParams", "$scope", "APIService", "AlertMessageService", "DataService", "LabelFilter", "Logger", "ProjectsService", "QuotaService", function(e, t, n, a, r, o, i, s, c, l) {
=======
} ]), angular.module("openshiftConsole").controller("StorageController", [ "$filter", "$routeParams", "$scope", "APIService", "AlertMessageService", "DataService", "LabelFilter", "Logger", "ProjectsService", "QuotaService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.pvcs = {}, n.unfilteredPVCs = {}, n.labelSuggestions = {}, n.alerts = n.alerts || {}, n.outOfClaims = !1, n.clearFilter = function() {
i.clear();
};
var u = function() {
var e = a.isAlertPermanentlyHidden("storage-quota-limit-reached", n.projectName);
if (n.outOfClaims = l.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas), !e && n.outOfClaims) {
if (n.alerts.quotaExceeded) return;
n.alerts.quotaExceeded = {
type: "warning",
message: "Storage quota limit has been reached. You will not be able to create any new storage.",
links: [ {
href: "project/" + n.projectName + "/quota",
label: "View Quota"
}, {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return a.permanentlyHideAlert("storage-quota-limit-reached", n.projectName), !0;
}
} ]
};
<<<<<<< HEAD
} else delete n.alerts.quotaExceeded;
}, d = r.getPreferredVersion("resourcequotas"), m = r.getPreferredVersion("appliedclusterresourcequotas");
n.persistentVolumeClaimsVersion = r.getPreferredVersion("persistentvolumeclaims");
var p = [];
c.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && $.isEmptyObject(n.pvcs) && !$.isEmptyObject(n.unfilteredPVCs);
}
n.project = e, p.push(o.watch(n.persistentVolumeClaimsVersion, t, function(e) {
n.pvcsLoaded = !0, n.unfilteredPVCs = e.by("metadata.name"), i.addLabelSuggestionsFromResources(n.unfilteredPVCs, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), n.pvcs = i.getLabelSelector().select(n.unfilteredPVCs), r(), s.log("pvcs (subscribe)", n.unfilteredPVCs);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.pvcs = e.select(n.unfilteredPVCs), r();
});
}), n.$on("$destroy", function() {
o.unwatchAll(p);
}), o.list(d, {
namespace: n.projectName
}, function(e) {
n.quotas = e.by("metadata.name"), u();
}), o.list(m, {
namespace: n.projectName
}, function(e) {
n.clusterQuotas = e.by("metadata.name"), u();
>>>>>>> Update storage controller to use getPreferredVersion
});
}));
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("ServiceInstanceController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "AuthorizationService", "Catalog", "DataService", "Logger", "ProjectsService", "SecretsService", "gettext", "gettextCatalog", "ServiceInstancesService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
e.alerts = {}, e.projectName = n.project, e.serviceInstance = null, e.serviceClass = null, e.serviceClasses = null, e.editDialogShown = !1, e.breadcrumbs = [ {
title: "Provisioned Services",
link: "project/" + n.project + "/browse/service-instances"
} ], e.deprovision = function() {
e.serviceInstance.metadata.deletionTimestamp || p.deprovision(e.serviceInstance, e.bindings);
}, e.showEditDialog = function() {
e.editDialogShown = !0;
}, e.showParameterValues = !1, e.toggleShowParameterValues = function() {
e.showParameterValues = !e.showParameterValues;
}, e.closeEditDialog = function() {
e.editDialogShown = !1;
=======
} ]), angular.module("openshiftConsole").controller("OtherResourcesController", [ "$routeParams", "$location", "$scope", "AuthorizationService", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", "APIService", function(e, t, n, r, a, o, i, s, c, l) {
function u() {
n.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(n.resources) && !_.isEmpty(n.unfilteredResources);
}
function d() {
var e = n.kindSelector.selected;
if (e) {
var r = t.search();
r.kind = e.kind, r.group = e.group || "", t.replace().search(r), n.selectedResource = {
resource: l.kindToResource(e.kind),
group: e.group || ""
}, a.list({
group: e.group,
resource: l.kindToResource(e.kind)
}, n.context).then(function(t) {
n.unfilteredResources = t.by("metadata.name"), n.labelSuggestions = {}, s.addLabelSuggestionsFromResources(n.unfilteredResources, n.labelSuggestions), s.setLabelSuggestions(n.labelSuggestions), n.resources = s.getLabelSelector().select(n.unfilteredResources), n.resourceName = l.kindToResource(e.kind, !0), u();
});
}
=======
l.isMobile = p();
var f = _.throttle(function() {
var e = p();
e !== l.isMobile && l.$evalAsync(function() {
l.isMobile = e, e || (_.set(r, "nav.showMobileNav", !1), _.each(l.navItems, function(e) {
e.mobileSecondary = !1;
}));
});
}, 50);
$(window).on("resize.verticalnav", f), l.$on("$destroy", function() {
$(window).off(".verticalnav");
});
} ]
};
} ]).directive("oscHeader", [ "$filter", "$location", "$q", "$rootScope", "$routeParams", "$timeout", "APIService", "AuthorizationService", "Catalog", "CatalogService", "Constants", "DataService", "Navigate", "NotificationsService", "ProjectsService", "projectOverviewURLFilter", "RecentlyViewedServiceItems", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v) {
var h = {}, y = [], b = e("displayName"), S = e("uniqueDisplayName"), C = i.getPreferredVersion("templates");
return {
restrict: "EA",
templateUrl: "views/directives/header/header.html",
link: function(o, i) {
o.currentProject = h[a.project];
var p = function(e, t) {
var n;
_.set(r, "nav.collapsed", e), t && (n = e ? "true" : "false", localStorage.setItem("openshift/vertical-nav-collapsed", n));
};
!function() {
var e = "true" === localStorage.getItem("openshift/vertical-nav-collapsed");
p(e);
}();
var w = function() {
return _.get(r, "nav.collapsed", !1);
}, P = function(e) {
_.set(r, "nav.showMobileNav", e);
};
o.toggleNav = function() {
var e = w();
p(!e, !0);
}, o.toggleMobileNav = function() {
var e = _.get(r, "nav.showMobileNav");
P(!e);
}, o.closeMobileNav = function() {
P(!1);
}, o.closeOrderingPanel = function() {
o.orderingPanelVisible = !1;
}, o.showOrderingPanel = function(e) {
o.orderingPanelVisible = !0, o.orderKind = e;
}, o.onSearchToggle = function(e) {
_.set(r, "view.hasProjectSearch", e);
}, o.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var j = i.find(".selectpicker"), k = [], I = function() {
var t = o.currentProjectName;
if (t) {
var n = function(e, n) {
var r = $("<option>").attr("value", e.metadata.name).attr("selected", e.metadata.name === t);
return n ? r.text(b(e)) : r.text(S(e, y)), r;
};
_.size(h) <= 100 ? (y = e("orderByDisplayName")(h), k = _.map(y, function(e) {
return n(e, !1);
})) : k = [ n(h[t], !0) ], j.empty(), j.append(k), j.append($('<option data-divider="true"></option>')), j.append($('<option value="">View All Projects</option>')), j.selectpicker("refresh");
}
}, R = function() {
return f.list().then(function(e) {
h = e.by("metadata.name");
});
}, E = function() {
var e = a.project;
o.currentProjectName !== e && (o.currentProjectName = e, o.chromeless = "chromeless" === a.view, e && !o.chromeless ? (_.set(r, "view.hasProject", !0), o.canIAddToProject = !1, s.getProjectRules(e).then(function() {
o.currentProjectName === e && (o.canIAddToProject = s.canIAddToProject(e), o.canIAddToProject && l.getCatalogItems().then(function(e) {
o.catalogItems = e;
}));
}), R().then(function() {
o.currentProjectName && h && (h[o.currentProjectName] || (h[o.currentProjectName] = {
metadata: {
name: o.currentProjectName
}
}), o.currentProject = h[o.currentProjectName], I());
})) : _.set(r, "view.hasProject", !1));
}, T = function() {
o.orderingPanelVisible && v.addItem(_.get(o.selectedItem, "resource.metadata.uid"));
}, N = function(e) {
return "PartialObjectMetadata" === e.kind;
}, D = function(e) {
return N(e) ? d.get(C, e.metadata.name, {
namespace: e.metadata.namespace
}) : n.when(e);
};
o.$on("open-overlay-panel", function(e, t) {
o.currentProjectName && (o.servicePlansForItem = null, o.orderKind = _.get(t, "kind"), "Template" !== o.orderKind ? "ClusterServiceClass" !== o.orderKind ? (o.selectedItem = t, o.orderingPanelVisible = !0) : c.getServicePlansForServiceClass(_.get(t, "resource.metadata.name")).then(function(e) {
o.servicePlansForItem = _.reject(e.by("metadata.name"), {
status: {
removedFromBrokerCatalog: !0
}
}), o.selectedItem = t, o.orderingPanelVisible = !0;
}) : D(t.resource).then(function(e) {
o.selectedItem = e, o.orderingPanelVisible = !0, o.orderKind = "Template";
}));
});
var A = r.$on("filter-catalog-items", function(e, t) {
if (o.currentProjectName) {
var n = {
filter: t.searchText
};
m.toProjectCatalog(o.currentProjectName, n);
}
});
o.closeOrderingPanel = function() {
v.addItem(_.get(o.selectedItem, "resource.metadata.uid")), o.orderingPanelVisible = !1;
}, E(), o.$on("$routeChangeSuccess", E), j.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : g(e);
o.$apply(function() {
t.url(n);
});
}), o.$on("$destroy", function() {
A(), T();
});
>>>>>>> Add Browse Catalog to Project context view.
}
n.projectName = e.project, n.labelSuggestions = {}, n.kindSelector = {
disabled: !0
}, n.kinds = _.filter(l.availableKinds(), function(e) {
switch (e.kind) {
case "AppliedClusterResourceQuota":
case "Build":
case "BuildConfig":
case "ConfigMap":
case "Deployment":
case "DeploymentConfig":
case "Event":
case "ImageStream":
case "ImageStreamImage":
case "ImageStreamImport":
case "ImageStreamMapping":
case "ImageStreamTag":
case "LimitRange":
case "PersistentVolumeClaim":
case "Pod":
case "ReplicaSet":
case "ReplicationController":
case "ResourceQuota":
case "Route":
case "Secret":
case "Service":
case "ServiceInstance":
case "StatefulSet":
return !1;

default:
return !0;
}
}), n.clearFilter = function() {
s.clear();
};
var m = function(e) {
if (e) {
var t = l.kindToResourceGroupVersion(e), n = l.apiInfo(t);
return !n || !n.verbs || _.includes(n.verbs, "list");
}
};
n.getReturnURL = function() {
var t = _.get(n, "kindSelector.selected.kind");
return t ? URI.expand("project/{projectName}/browse/other?kind={kind}&group={group}", {
projectName: e.project,
kind: t,
group: _.get(n, "kindSelector.selected.group", "")
}).toString() : "";
};
var p;
n.isDuplicateKind = function(e) {
return p || (p = _.countBy(n.kinds, "kind")), p[e] > 1;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
var g = r.getPreferredVersion("servicebindings");
e.eventsVersion = r.getPreferredVersion("events"), e.serviceInstancesVersion = r.getPreferredVersion("serviceinstances");
var f, v = [], h = [], y = t("serviceInstanceDisplayName"), b = t("isServiceInstanceReady"), S = function() {
e.breadcrumbs.push({
title: e.displayName
});
<<<<<<< HEAD
}, C = function() {
if (e.serviceInstance && e.parameterSchema) {
s.unwatchAll(h), h = [], e.allowParametersReveal = o.canI("secrets", "get", e.projectName), e.parameterData = {}, e.opaqueParameterKeys = [];
var t = e.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(e.parameterSchema, "properties")), function(n) {
e.parameterData[n] = t;
=======
};
o.get(e.project).then(_.spread(function(t, a) {
n.kinds = _.filter(n.kinds, function(e) {
var t = {
resource: l.kindToResource(e.kind),
group: e.group || ""
};
return !!m(e) && (!!r.checkResource(t.resource) && r.canI(t, "list", n.projectName));
}), n.project = t, n.context = a, n.kindSelector.disabled = !1, e.kind && f(e.kind, e.group) && (_.set(n, "kindSelector.selected.kind", e.kind), _.set(n, "kindSelector.selected.group", e.group || ""));
})), n.loadKind = d, n.$watch("kindSelector.selected", function() {
s.clear(), d();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var n = _.get(e.serviceInstance, "status.externalProperties.parameters", {});
_.each(_.keys(n), function(t) {
"<redacted>" === n[t] ? e.parameterData[t] = "*****" : (e.parameterData[t] = n[t], e.opaqueParameterKeys.push(t));
}), e.allowParametersReveal && _.each(_.get(e.serviceInstance, "spec.parametersFrom"), function(t) {
h.push(s.watchObject("secrets", _.get(t, "secretKeyRef.name"), e.projectContext, function(n) {
try {
var r = JSON.parse(u.decodeSecretData(n.data)[t.secretKeyRef.key]);
_.extend(e.parameterData, r);
} catch (e) {
c.warn("Unable to load parameters from secret " + _.get(t, "secretKeyRef.name"), e);
}
}));
<<<<<<< HEAD
});
}
}, w = function() {
if (e.plan && e.serviceClass && e.serviceInstance) {
var t = _.get(e.plan, "spec.instanceUpdateParameterSchema"), n = _.size(_.get(t, "properties")) > 0 || _.get(e.serviceClass, "spec.planUpdatable") && _.size(e.servicePlans) > 1;
e.editAvailable = n && b(e.serviceInstance) && !_.get(e.serviceInstance, "metadata.deletionTimestamp");
}
<<<<<<< HEAD
}, P = function() {
e.parameterFormDefinition = angular.copy(_.get(e.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), e.parameterSchema = _.get(e.plan, "spec.instanceCreateParameterSchema"), C();
}, j = function() {
!e.serviceInstance || e.serviceClass || f || (f = p.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = y(e.serviceInstance, e.serviceClass), S(), f = null, i.getServicePlans().then(function(t) {
t = t.by("metadata.name");
var n = i.groupPlansByServiceClassName(t);
e.servicePlans = n[e.serviceClass.metadata.name];
var r = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.plan = t[r], P(), w();
});
<<<<<<< HEAD
}));
}, k = function(t, n) {
e.loaded = !0, e.serviceInstance = t, "DELETED" === n && (e.alerts.deleted = {
=======
} ]), angular.module("openshiftConsole").controller("PersistentVolumeClaimController", [ "$filter", "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", function(e, t, n, r, a, o) {
t.projectName = n.project, t.pvc = null, t.alerts = {}, t.renderOptions = t.renderOptions || {}, t.renderOptions.hideFilterWidget = !0, t.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.project + "/browse/storage"
}, {
title: n.pvc
} ], t.pvcVersion = r.getPreferredVersion("persistentvolumeclaims"), t.eventsVersion = r.getPreferredVersion("events");
var i = [], s = function(e, n) {
t.pvc = e, t.loaded = !0, "DELETED" === n && (t.alerts.deleted = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "warning",
message: "This provisioned service has been deleted."
}), j(), C(), w();
};
<<<<<<< HEAD
l.get(n.project).then(_.spread(function(r, o) {
e.project = r, e.projectContext = o, s.get(e.serviceInstancesVersion, n.instance, o, {
errorNotification: !1
}).then(function(t) {
k(t), v.push(s.watchObject(e.serviceInstancesVersion, n.instance, o, k)), v.push(s.watch(g, o, function(n) {
var r = n.by("metadata.name");
e.bindings = a.getBindingsForResource(r, t);
}));
=======
o.get(n.project).then(_.spread(function(r, o) {
t.project = r, t.projectContext = o, a.get(t.pvcVersion, n.pvc, o, {
errorNotification: !1
}).then(function(e) {
s(e), i.push(a.watchObject(t.pvcVersion, n.pvc, o, s));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The provisioned service details could not be loaded.",
details: t("getErrorDetails")(n)
};
<<<<<<< HEAD
=======
}), function() {
angular.module("openshiftConsole").component("oscWebhookTriggers", {
controller: [ "$filter", "$scope", "$timeout", "$uibModal", "APIService", function(e, t, n, r, a) {
var o = this;
o.isDeprecated = function(t) {
var n = e("getWebhookSecretData")(t);
return _.has(n, "secret") && !_.has(n, "secretReference.name");
}, o.addEmptyWebhookTrigger = function() {
o.webhookTriggers.push({
lastTriggerType: "",
data: {
type: ""
}
});
var e = o.webhookTriggers.length - 1;
n(function() {
t.$broadcast("focus-index-" + e);
});
};
var i = function(e) {
var t = _.get(e, "data.type");
if (t && !_.isNil(e.data[t.toLowerCase()])) {
var n = _.filter(o.webhookTriggers, function(t) {
return _.isEqual(t.data, e.data);
});
_.each(n, function(e, t) {
var n = 0 === t;
e.isDuplicate = !n;
});
}
}, s = function() {
_.isEmpty(o.webhookTriggers) ? o.addEmptyWebhookTrigger() : _.each(o.webhookTriggers, function(e) {
o.isDeprecated(e) && (e.secretInputType = "password"), e.isDuplicate || i(e);
});
};
o.$onInit = function() {
t.namespace = o.namespace, t.type = o.type, o.secretsVersion = a.getPreferredVersion("secrets"), o.webhookTypesOptions = [ {
type: "github",
label: "GitHub"
}, {
type: "gitlab",
label: "GitLab"
}, {
type: "bitbucket",
label: "Bitbucket"
}, {
type: "generic",
label: "Generic"
} ], s();
}, o.toggleSecretInputType = function(e) {
e.secretInputType = "password" === e.secretInputType ? "text" : "password";
}, o.removeWebhookTrigger = function(e, t) {
var n = _.clone(e);
if (1 === o.webhookTriggers.length) {
var r = _.first(o.webhookTriggers);
r.lastTriggerType = "", r.data = {
type: ""
};
} else o.webhookTriggers.splice(t, 1);
o.form.$setDirty(), i(n);
}, o.triggerTypeChange = function(e) {
var t = _.toLower(e.lastTriggerType), n = _.toLower(e.data.type);
e.data[n] = e.data[t], delete e.data[t], e.lastTriggerType = e.data.type, i(e);
}, o.triggerSecretChange = function(e) {
i(e);
}, o.openCreateWebhookSecretModal = function() {
r.open({
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
o.webhookSecrets.push(e);
>>>>>>> Webhook trigger editor should be more consistant with envVar editor
});
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: m.getString(d("The service details could not be loaded.")),
details: t("getErrorDetails")(n)
};
})), e.$on("$destroy", function() {
s.unwatchAll(v), s.unwatchAll(h);
=======
}), t.$on("$destroy", function() {
a.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("SetLimitsController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "LimitRangesService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
if (r.kind && r.name) {
var p = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(p, r.kind)) {
var f = e("humanizeKind"), g = f(r.kind, !0) + " " + r.name;
a.name = r.name, "ReplicationController" !== r.kind && "ReplicaSet" !== r.kind || (a.showPodWarning = !0), a.renderOptions = {
hideFilterWidget: !0
}, a.breadcrumbs = s.getBreadcrumbs({
name: r.name,
kind: r.kind,
namespace: r.project,
subpage: "Edit Resource Limits"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
} ]), angular.module("openshiftConsole").controller("SecretsController", [ "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o) {
t.projectName = e.project, t.labelSuggestions = {}, t.clearFilter = function() {
a.clear();
}, t.secretsVersion = n.getPreferredVersion("secrets");
var i = [];
o.get(e.project).then(_.spread(function(e, n) {
function o() {
t.filterWithZeroResults = !a.getLabelSelector().isEmpty() && _.isEmpty(t.secrets) && !_.isEmpty(t.unfilteredSecrets);
}
t.project = e, t.context = n, i.push(r.watch(t.secretsVersion, n, function(e) {
t.unfilteredSecrets = _.sortBy(e.by("metadata.name"), [ "type", "metadata.name" ]), t.secretsLoaded = !0, a.addLabelSuggestionsFromResources(t.unfilteredSecrets, t.labelSuggestions), a.setLabelSuggestions(t.labelSuggestions), t.secrets = a.getLabelSelector().select(t.unfilteredSecrets), o();
})), a.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.secrets = e.select(t.unfilteredSecrets), o();
});
}), t.$on("$destroy", function() {
r.unwatchAll(i);
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("SecretController", [ "$routeParams", "$filter", "$scope", "APIService", "DataService", "ProjectsService", "SecretsService", function(e, t, n, r, a, o, i) {
=======
} ]), angular.module("openshiftConsole").controller("SecretController", [ "$routeParams", "$filter", "$scope", "DataService", "ProjectsService", "SecretsService", function(e, t, n, a, r, o) {
>>>>>>> Add the ability to add a secret to an application
n.projectName = e.project, n.secretName = e.secret, n.view = {
showSecret: !1
}, n.alerts = n.alerts || {}, n.breadcrumbs = [ {
title: "Secrets",
link: "project/" + e.project + "/browse/secrets"
}, {
title: n.secretName
<<<<<<< HEAD
} ], n.secretsVersion = r.getPreferredVersion("secrets");
var s = [], c = function(e, t) {
n.secret = e, "DELETED" !== t ? n.decodedSecretData = i.decodeSecretData(n.secret.data) : n.alerts.deleted = {
=======
} ]), angular.module("openshiftConsole").controller("PersistentVolumeClaimController", [ "$filter", "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", function(e, t, n, a, r, o) {
t.projectName = n.project, t.pvc = null, t.alerts = {}, t.renderOptions = t.renderOptions || {}, t.renderOptions.hideFilterWidget = !0, t.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.project + "/browse/storage"
}, {
title: n.pvc
} ], t.pvcVersion = a.getPreferredVersion("persistentvolumeclaims"), t.eventsVersion = a.getPreferredVersion("events");
var i = [], s = function(e, n) {
t.pvc = e, t.loaded = !0, "DELETED" === n && (t.alerts.deleted = {
>>>>>>> Update PersistentVolumeClaim controller to use getPreferredVersion
type: "warning",
message: "This secret has been deleted."
};
<<<<<<< HEAD
};
n.addToApplicationVisible = !1, n.addToApplication = function() {
n.secret.data && (n.addToApplicationVisible = !0);
}, n.closeAddToApplication = function() {
n.addToApplicationVisible = !1;
}, o.get(e.project).then(_.spread(function(e, r) {
n.project = e, n.context = r, a.get(n.secretsVersion, n.secretName, r, {
errorNotification: !1
}).then(function(e) {
n.loaded = !0, c(e), s.push(a.watchObject(n.secretsVersion, n.secretName, r, c));
}, function(e) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The secret details could not be loaded.",
details: t("getErrorDetails")(e)
};
}), n.$on("$destroy", function() {
a.unwatchAll(s);
=======
o.get(n.project).then(_.spread(function(a, o) {
t.project = a, t.projectContext = o, r.get(t.pvcVersion, n.pvc, o, {
errorNotification: !1
}).then(function(e) {
s(e), i.push(r.watchObject(t.pvcVersion, n.pvc, o, s));
}, function(n) {
t.loaded = !0, t.alerts.load = {
type: "error",
message: "The persistent volume claim details could not be loaded.",
details: e("getErrorDetails")(n)
};
}), t.$on("$destroy", function() {
r.unwatchAll(i);
>>>>>>> Update PersistentVolumeClaim controller to use getPreferredVersion
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("CreateSecretController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
r.alerts = {}, r.projectName = n.project, r.breadcrumbs = [ {
title: "Secrets",
link: "project/" + r.projectName + "/browse/secrets"
}, {
title: "Create Secret"
} ], l.get(n.project).then(_.spread(function(e, o) {
r.project = e, r.context = o, i.canI("secrets", "create", n.project) ? r.navigateBack = function() {
n.then ? t.url(n.then) : a.history.back();
} : c.toErrorPage("You do not have authority to create secrets in project " + n.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapsController", [ "$scope", "$routeParams", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o) {
e.projectName = t.project, e.loaded = !1, e.labelSuggestions = {}, e.configMapsVersion = n.getPreferredVersion("configmaps"), e.clearFilter = function() {
a.clear();
};
<<<<<<< HEAD
var i, s = [], c = function() {
e.filterWithZeroResults = !a.getLabelSelector().isEmpty() && _.isEmpty(e.configMaps) && !_.isEmpty(i);
}, l = function() {
a.addLabelSuggestionsFromResources(i, e.labelSuggestions), a.setLabelSuggestions(e.labelSuggestions);
}, u = function() {
var t = a.getLabelSelector().select(i);
e.configMaps = _.sortBy(t, "metadata.name"), c();
=======
r.cancel = y, r.$on("$destroy", b);
=======
}, y = function() {
t.url(a.resourceURL);
}, b = function() {
d.hideNotification("set-compute-limits-error");
};
a.cancel = y, a.$on("$destroy", b);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var S = o.getPreferredVersion("limitranges");
m.get(r.project).then(_.spread(function(e, t) {
var n = {
<<<<<<< HEAD
resource: o.kindToResource(a.kind),
group: a.group
>>>>>>> Update setLimits controller to use getPreferrdVersion
};
o.get(t.project).then(_.spread(function(t, n) {
e.project = t, s.push(r.watch(e.configMapsVersion, n, function(t) {
i = t.by("metadata.name"), l(), u(), e.loaded = !0;
})), a.onActiveFiltersChanged(function() {
e.$evalAsync(u);
}), e.$on("$destroy", function() {
r.unwatchAll(s);
=======
resource: o.kindToResource(r.kind),
group: r.group
};
if (i.canI(n, "update", r.project)) {
c.get(n, a.name, t).then(function(r) {
var o = a.object = angular.copy(r);
a.breadcrumbs = s.getBreadcrumbs({
object: o,
project: e,
subpage: "Edit Resource Limits"
}), a.resourceURL = u.resourceURL(o), a.containers = _.get(o, "spec.template.spec.containers"), a.save = function() {
a.disableInputs = !0, b(), c.update(n, a.name, o, t).then(function() {
d.addNotification({
type: "success",
message: g + " was updated."
}), y();
}, function(e) {
a.disableInputs = !1, h(g + " could not be updated.", v(e));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapController", [ "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "ProjectsService", function(e, t, n, r, a, o) {
e.projectName = t.project, e.alerts = e.alerts || {}, e.loaded = !1, e.labelSuggestions = {}, e.breadcrumbs = r.getBreadcrumbs({
name: t.configMap,
kind: "ConfigMap",
namespace: t.project
}), e.configMapsVersion = n.getPreferredVersion("configmaps");
var i = [], s = function(t, n) {
e.loaded = !0, e.configMap = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This config map has been deleted."
});
<<<<<<< HEAD
=======
var m = function() {
a.hideCPU || (a.cpuProblems = l.validatePodLimits(a.limitRanges, "cpu", a.containers, e)), a.memoryProblems = l.validatePodLimits(a.limitRanges, "memory", a.containers, e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
e.addToApplicationVisible = !1, e.addToApplication = function() {
e.addToApplicationVisible = !0;
}, e.closeAddToApplication = function() {
e.addToApplicationVisible = !1;
}, o.get(t.project).then(_.spread(function(n, r) {
e.project = n, a.get(e.configMapsVersion, t.configMap, r, {
errorNotification: !1
<<<<<<< HEAD
}).then(function(e) {
s(e), i.push(a.watchObject("configmaps", t.configMap, r, s));
}, function(t) {
e.loaded = !0, e.error = t;
}), e.$on("$destroy", function() {
a.unwatchAll(i);
=======
}).then(function(t) {
e.buildConfig = t, f(), e.updatedBuildConfig = angular.copy(e.buildConfig), e.buildStrategy = h(e.updatedBuildConfig), e.strategyType = e.buildConfig.spec.strategy.type, e.envVars = e.buildStrategy.env || [], e.triggers = S(e.triggers, e.buildConfig.spec.triggers), e.sources = I(e.sources, e.buildConfig.spec.source), _.has(t, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile") && (e.jenkinsfileOptions.type = "inline"), s.list("secrets", r).then(function(t) {
var n = m.groupSecretsByType(t), a = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
c.list(S, t).then(function(e) {
<<<<<<< HEAD
r.limitRanges = e.by("metadata.name"), _.isEmpty(r.limitRanges) || r.$watch("containers", m, !0);
>>>>>>> Update setLimits controller to use getPreferrdVersion
});
<<<<<<< HEAD
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("CreateConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
n.projectName = t.project, n.breadcrumbs = [ {
title: "Config Maps",
link: "project/" + n.projectName + "/browse/config-maps"
}, {
title: "Create Config Map"
} ];
var u = function() {
c.hideNotification("create-config-map-error");
=======
e.secrets.secretsByType = _.each(a, function(e) {
e.unshift("");
}), P();
=======
} else u.toErrorPage("Health checks are not supported for kind " + a.kind + ".");
=======
a.limitRanges = e.by("metadata.name"), _.isEmpty(a.limitRanges) || a.$watch("containers", m, !0);
});
} else u.toErrorPage("You do not have authority to update " + f(r.kind) + " " + r.name + ".", "access_denied");
}));
} else u.toErrorPage("Health checks are not supported for kind " + r.kind + ".");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else u.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditBuildConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "SOURCE_URL_PATTERN", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
e.projectName = r.project, e.buildConfig = null, e.alerts = {}, e.sourceURLPattern = m, e.options = {}, e.jenkinsfileOptions = {
type: "path"
}, e.selectTypes = {
ImageStreamTag: "Image Stream Tag",
ImageStreamImage: "Image Stream Image",
DockerImage: "Docker Image Repository"
}, e.buildFromTypes = [ "ImageStreamTag", "ImageStreamImage", "DockerImage" ], e.pushToTypes = [ "ImageStreamTag", "DockerImage", "None" ], e.jenkinsfileTypes = [ {
id: "path",
title: "From Source Repository"
}, {
id: "inline",
title: "Inline"
} ], e.view = {
advancedOptions: !1,
hasHooks: !1
}, e.breadcrumbs = [], r.isPipeline ? (e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + r.project + "/browse/pipelines"
}), e.breadcrumbs.push({
title: r.buildconfig,
link: "project/" + r.project + "/browse/pipelines/" + r.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + r.project + "/browse/builds"
}), e.breadcrumbs.push({
title: r.buildconfig,
link: "project/" + r.project + "/browse/builds/" + r.buildconfig
})), e.breadcrumbs.push({
title: r.isPipeline ? "Edit Pipelines" : "Edit Builds"
}), e.imageOptions = {
from: {},
to: {},
fromSource: {}
}, e.sources = {
binary: !1,
dockerfile: !1,
git: !1,
images: !1,
contextDir: !1,
none: !0
}, e.triggers = {
githubWebhooks: [],
gitlabWebhooks: [],
bitbucketWebhooks: [],
genericWebhooks: [],
imageChangeTriggers: [],
builderImageChangeTrigger: {},
configChangeTrigger: {}
}, e.createTriggerSelect = {
selectedType: "",
options: [ {
type: "github",
label: "GitHub"
}, {
type: "gitlab",
label: "GitLab"
}, {
type: "bitbucket",
label: "Bitbucket"
}, {
type: "generic",
label: "Generic"
} ]
}, e.runPolicyTypes = [ "Serial", "Parallel", "SerialLatestOnly" ], e.buildHookTypes = [ {
id: "command",
label: "Command"
}, {
id: "script",
label: "Shell Script"
}, {
id: "args",
label: "Arguments to default image entry point"
}, {
id: "commandArgs",
label: "Command with arguments"
}, {
id: "scriptArgs",
label: "Shell script with arguments"
} ], e.buildHookSelection = {
type: {}
}, e.getArgumentsDescription = function() {
switch (_.get(e, "buildHookSelection.type.id", "")) {
case "args":
return "Enter the arguments that will be appended to the default image entry point.";

case "commandArgs":
return "Enter the arguments that will be appended to the command.";

case "scriptArgs":
return "Enter the arguments that will be appended to the script.";
}
return null;
};
var g = function() {
var t = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.args")), n = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.command")), r = !!_.get(e, "buildConfig.spec.postCommit.script");
e.view.hasHooks = t || n || r;
var a;
a = t && n ? "commandArgs" : t && r ? "scriptArgs" : t ? "args" : r ? "script" : "command", e.buildHookSelection.type = _.find(e.buildHookTypes, {
id: a
});
}, v = function() {
if (e.view.hasHooks) switch (e.buildHookSelection.type.id) {
case "script":
delete e.updatedBuildConfig.spec.postCommit.command, delete e.updatedBuildConfig.spec.postCommit.args;
break;

case "command":
delete e.updatedBuildConfig.spec.postCommit.script, delete e.updatedBuildConfig.spec.postCommit.args;
break;

case "args":
delete e.updatedBuildConfig.spec.postCommit.script, delete e.updatedBuildConfig.spec.postCommit.command;
break;

case "scriptArgs":
delete e.updatedBuildConfig.spec.postCommit.command;
break;

case "commandArgs":
delete e.updatedBuildConfig.spec.postCommit.script;
} else delete e.updatedBuildConfig.spec.postCommit.command, delete e.updatedBuildConfig.spec.postCommit.args, delete e.updatedBuildConfig.spec.postCommit.script;
};
e.secrets = {};
var h = o.getPreferredVersion("buildconfigs"), y = o.getPreferredVersion("secrets"), b = [], S = t("buildStrategy"), C = t("orderByDisplayName"), w = t("getErrorDetails"), P = [], k = [];
e.valueFromObjects = [];
var j = function() {
var t;
e.buildConfig ? (t = l.resourceURL(e.buildConfig), n.path(t)) : a.history.back();
};
e.cancel = j;
var I = function() {
u.hideNotification("edit-build-config-error"), u.hideNotification("edit-build-config-conflict"), u.hideNotification("edit-build-config-deleted");
};
e.$on("$destroy", I), d.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, s.canI("buildconfigs", "update", r.project) ? (c.get(h, r.buildconfig, a, {
errorNotification: !1
}).then(function(t) {
e.buildConfig = t, g(), e.updatedBuildConfig = angular.copy(e.buildConfig), e.buildStrategy = S(e.updatedBuildConfig), e.strategyType = e.buildConfig.spec.strategy.type, e.envVars = e.buildStrategy.env || [], e.triggers = R(e.triggers, e.buildConfig.spec.triggers), e.sources = B(e.sources, e.buildConfig.spec.source), _.has(t, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile") && (e.jenkinsfileOptions.type = "inline"), c.list(y, a).then(function(t) {
var n = p.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.secrets.secretsByType = _.each(r, function(e) {
e.unshift("");
<<<<<<< HEAD
}), I();
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
=======
}), D(), k = C(t.by("metadata.name")), e.valueFromObjects = P.concat(k);
>>>>>>> Enable valueFrom values for build config env vars
});
var n = function(e, n) {
e.type = n && n.kind ? n.kind : "None";
var r = {}, a = "", o = "";
r = "ImageStreamTag" === e.type ? {
namespace: n.namespace || t.metadata.namespace,
imageStream: n.name.split(":")[0],
tagObject: {
tag: n.name.split(":")[1]
}
} : {
namespace: "",
imageStream: "",
tagObject: {
tag: ""
}
<<<<<<< HEAD
}, r = "ImageStreamImage" === e.type ? (n.namespace || t.metadata.namespace) + "/" + n.name : "", o = "DockerImage" === e.type ? n.name : "", e.imageStreamTag = a, e.imageStreamImage = r, e.dockerImage = o;
>>>>>>> Fix for adding non-builder templates to a project
=======
}, a = "ImageStreamImage" === e.type ? (n.namespace || t.metadata.namespace) + "/" + n.name : "", o = "DockerImage" === e.type ? n.name : "", e.imageStreamTag = r, e.imageStreamImage = a, e.dockerImage = o;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
n.$on("$destroy", u);
var d = function() {
r.history.back();
};
<<<<<<< HEAD
n.cancel = d, l.get(t.project).then(_.spread(function(r, l) {
n.project = r, o.canI("configmaps", "create", t.project) ? (n.configMap = {
apiVersion: "v1",
kind: "ConfigMap",
metadata: {
namespace: t.project
},
data: {}
}, n.createConfigMap = function() {
if (n.createConfigMapForm.$valid) {
u(), n.disableInputs = !0;
var t = a.objectToResourceGroupVersion(n.configMap);
i.create(t, null, n.configMap, l).then(function() {
c.addNotification({
type: "success",
message: "Config map " + n.configMap.metadata.name + " successfully created."
}), d();
}, function(t) {
n.disableInputs = !1, c.addNotification({
id: "create-config-map-error",
type: "error",
message: "An error occurred creating the config map.",
details: e("getErrorDetails")(t)
});
});
}
}) : s.toErrorPage("You do not have authority to create config maps in project " + t.project + ".", "access_denied");
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("RoutesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o, i) {
n.projectName = t.project, n.unfilteredRoutes = {}, n.routes = {}, n.labelSuggestions = {}, n.clearFilter = function() {
o.clear();
=======
})), i.push(n.watch("routes", u, function(n) {
e.routesForService = {}, angular.forEach(n.by("metadata.name"), function(n) {
"Service" === n.spec.to.kind && n.spec.to.name === t.service && (e.routesForService[n.metadata.name] = n);
}), s(), Logger.log("routes (subscribe)", e.routesByService);
})), e.$on("$destroy", function() {
n.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("ServiceInstancesController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
e.bindingsByInstanceRef = {}, e.labelSuggestions = {}, e.projectName = n.project, e.serviceClasses = {}, e.serviceInstances = {}, e.unfilteredServiceInstances = {}, e.clearFilter = function() {
s.clear();
};
var u = [], d = function() {
e.serviceInstances = s.getLabelSelector().select(e.unfilteredServiceInstances);
}, m = function() {
e.unfilteredServiceInstances = r.sortServiceInstances(e.unfilteredServiceInstances, e.serviceClasses);
};
e.getServiceClass = function(t) {
var n = _.get(t, "spec.clusterServiceClassRef.name");
return _.get(e, [ "serviceClasses", n ]);
}, l.get(n.project).then(_.spread(function(t, n) {
function r() {
e.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(e.serviceInstances) && !_.isEmpty(e.unfilteredServiceInstances);
=======
var S = function(n, a) {
=======
})) : (e.imageSourceFromObjects = [], e.sourceImages.forEach(function(t) {
e.imageSourceFromObjects.push(t.from);
}))), e.options.forcePull = !!e.buildStrategy.forcePull, "Docker" === e.strategyType && (e.options.noCache = !!e.buildConfig.spec.strategy.dockerStrategy.noCache, e.buildFromTypes.push("None")), b.push(c.watchObject(h, r.buildconfig, a, function(t, n) {
"MODIFIED" === n && u.addNotification({
id: "edit-build-config-conflict",
type: "warning",
message: "This build configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."
}), "DELETED" === n && (u.addNotification({
id: "edit-build-config-deleted",
type: "warning",
message: "This build configuration has been deleted."
}), e.disableInputs = !0), e.buildConfig = t;
})), e.loaded = !0;
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The build configuration details could not be loaded.",
details: "Reason: " + t("getErrorDetails")(n)
};
}), c.list("configmaps", a, null, {
errorNotification: !1
}).then(function(t) {
P = C(t.by("metadata.name")), e.valueFromObjects = P.concat(k);
}, function(e) {
403 !== e.code && u.addNotification({
id: "edit-build-config-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: w(e)
});
})) : l.toErrorPage("You do not have authority to update build config " + r.buildconfig + ".", "access_denied");
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var P = function(n, a) {
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
=======
var I = function(n, a) {
>>>>>>> Enable valueFrom values for build config env vars
=======
var R = function(n, a) {
>>>>>>> Add search catalog in project context
function r(n, a) {
return t("imageObjectRef")(n, e.projectName) === t("imageObjectRef")(a, e.projectName);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var R = function(n, r) {
function a(n, r) {
return t("imageObjectRef")(n, e.projectName) === t("imageObjectRef")(r, e.projectName);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< HEAD
e.project = t, e.projectContext = n;
var o = a.getPreferredVersion("servicebindings");
u.push(i.watch(o, n, function(t) {
var n = t.by("metadata.name");
e.bindingsByInstanceRef = _.groupBy(n, "spec.instanceRef.name");
<<<<<<< HEAD
})), u.push(i.watch({
group: "servicecatalog.k8s.io",
resource: "serviceinstances"
}, n, function(t) {
e.emptyMessage = "No provisioned services to show", e.unfilteredServiceInstances = t.by("metadata.name"), m(), d(), a(), s.addLabelSuggestionsFromResources(e.unfilteredServiceInstances, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), c.log("provisioned services (subscribe)", e.unfilteredServiceInstances);
})), i.list({
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
<<<<<<< HEAD
}, n, function(t) {
e.serviceClasses = t.by("metadata.name"), p(), d();
=======
}, {}, function(t) {
=======
}));
var l = a.getPreferredVersion("serviceinstances");
u.push(i.watch(l, n, function(t) {
e.serviceInstancesLoaded = !0, e.unfilteredServiceInstances = t.by("metadata.name"), m(), d(), r(), s.addLabelSuggestionsFromResources(e.unfilteredServiceInstances, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), c.log("provisioned services (subscribe)", e.unfilteredServiceInstances);
}));
var p = a.getPreferredVersion("clusterserviceclasses");
i.list(p, {}, function(t) {
>>>>>>> Adopt service catalog API changes
e.serviceClasses = t.by("metadata.name"), m(), d();
>>>>>>> Support EnvFrom in the Env Editors
}), s.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.serviceInstances = t.select(e.unfilteredServiceInstances), r();
=======
var o = S(e.buildConfig).from;
return r.forEach(function(e) {
switch (e.type) {
case "Generic":
n.genericWebhooks.push({
disabled: !1,
data: e
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
});
}), e.$on("$destroy", function() {
i.unwatchAll(u);
});
}));
} ]), angular.module("openshiftConsole").controller("ServiceInstanceController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "AuthorizationService", "Catalog", "DataService", "Logger", "ProjectsService", "SecretsService", "ServiceInstancesService", function(e, t, n, a, r, o, i, s, c, l, u, d) {
e.alerts = {}, e.projectName = n.project, e.serviceInstance = null, e.serviceClass = null, e.serviceClasses = null, e.editDialogShown = !1, e.breadcrumbs = [ {
title: "Provisioned Services",
link: "project/" + n.project + "/browse/service-instances"
} ], e.deprovision = function() {
<<<<<<< HEAD
<<<<<<< HEAD
i.deprovision(e.serviceInstance);
=======
e.serviceInstance.metadata.deletionTimestamp || s.deprovision(e.serviceInstance, e.bindings);
>>>>>>> Fix issues with bindings widget for service instances
};
var c = [], l = t("serviceInstanceDisplayName"), u = a.getPreferredVersion("servicebindings");
e.serviceInstancesVersion = a.getPreferredVersion("serviceinstances");
<<<<<<< HEAD
var l = function() {
e.breadcrumbs.push({
title: e.displayName
});
}, u = function() {
e.serviceClass || i.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = c(e.serviceInstance, t), l();
});
<<<<<<< HEAD
}, d = function() {
i.isCurrentPlan(e.serviceInstance, e.plan) || i.fetchServicePlanForInstance(e.serviceInstance).then(function(t) {
e.plan = t;
});
}, m = function(t, n) {
e.loaded = !0, e.serviceInstance = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This provisioned service has been deleted."
}), u(), d();
=======
var d, m = function() {
=======
e.serviceInstance.metadata.deletionTimestamp || d.deprovision(e.serviceInstance, e.bindings);
}, e.showEditDialog = function() {
e.editDialogShown = !0;
}, e.showParameterValues = !1, e.toggleShowParameterValues = function() {
e.showParameterValues = !e.showParameterValues;
}, e.closeEditDialog = function() {
e.editDialogShown = !1;
=======
break;

case "ImageChange":
var t = e.imageChange.from;
t || (t = o);
var r = {
present: !0,
data: e
};
a(t, o) ? n.builderImageChangeTrigger = r : n.imageChangeTriggers.push(r);
break;

case "ConfigChange":
n.configChangeTrigger = {
present: !0,
data: e
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
var m, p = [], f = [], g = t("serviceInstanceDisplayName"), v = t("isServiceInstanceReady"), h = a.getPreferredVersion("servicebindings");
e.serviceInstancesVersion = a.getPreferredVersion("serviceinstances");
var y = function() {
>>>>>>> Service instance details configuration and edit
e.breadcrumbs.push({
title: e.displayName
});
}, b = function() {
if (e.serviceInstance && e.parameterSchema) {
s.unwatchAll(f), f = [], e.allowParametersReveal = o.canI("secrets", "get", e.projectName), e.parameterData = {}, e.opaqueParameterKeys = [];
var t = e.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(e.parameterSchema, "properties")), function(n) {
e.parameterData[n] = t;
});
var n = _.get(e.serviceInstance, "status.externalProperties.parameters", {});
_.each(_.keys(n), function(t) {
"<redacted>" === n[t] ? e.parameterData[t] = "*****" : (e.parameterData[t] = n[t], e.opaqueParameterKeys.push(t));
}), e.allowParametersReveal && _.each(_.get(e.serviceInstance, "spec.parametersFrom"), function(t) {
f.push(s.watchObject("secrets", _.get(t, "secretKeyRef.name"), e.projectContext, function(n) {
try {
var a = JSON.parse(u.decodeSecretData(n.data)[t.secretKeyRef.key]);
_.extend(e.parameterData, a);
} catch (e) {
c.warn("Unable to load parameters from secret " + _.get(t, "secretKeyRef.name"), e);
}
}));
});
}
}, C = function() {
if (e.plan && e.serviceClass && e.serviceInstance) {
var t = _.get(e.plan, "spec.instanceUpdateParameterSchema"), n = _.size(_.get(t, "properties")) > 0 || _.get(e.serviceClass, "spec.planUpdatable") && _.size(e.servicePlans) > 1;
e.editAvailable = n && v(e.serviceInstance) && !_.get(e.serviceInstance, "metadata.deletionTimestamp");
}
<<<<<<< HEAD
}, S = function() {
e.parameterFormDefinition = angular.copy(_.get(e.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), e.parameterSchema = _.get(e.plan, "spec.instanceCreateParameterSchema"), b();
}, w = function() {
!e.serviceInstance || e.serviceClass || m || (m = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = g(e.serviceInstance, e.serviceClass), y(), m = null, i.getServicePlans().then(function(t) {
t = t.by("metadata.name");
<<<<<<< HEAD
var n = i.groupPlansByServiceClassName(t);
e.servicePlans = n[e.serviceClass.metadata.name];
var a = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.plan = t[a], C(), S();
=======
var n = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.servicePlans = _.reject(t, function(e) {
return _.get(e, "status.removedFromBrokerCatalog") && e.metadata.name !== n;
}), e.plan = t[n], S(), C();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
});
}));
}, k = function(t, n) {
e.loaded = !0, e.serviceInstance = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This provisioned service has been deleted."
<<<<<<< HEAD
<<<<<<< HEAD
}), p(), f();
>>>>>>> Fix issues with bindings widget for service instances
=======
}), w(), b(), S();
>>>>>>> Service instance details configuration and edit
=======
}), w(), b(), C();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
};
<<<<<<< HEAD
l.get(n.project).then(_.spread(function(a, o) {
e.project = a, e.projectContext = o, s.get(e.serviceInstancesVersion, n.instance, o, {
errorNotification: !1
}).then(function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
m(t), s.push(r.watchObject(e.serviceInstancesVersion, n.instance, o, m));
=======
g(t), c.push(o.watchObject(e.serviceInstancesVersion, n.instance, i, g)), c.push(o.watch(u, i, function(n) {
=======
k(t), p.push(s.watchObject(e.serviceInstancesVersion, n.instance, o, k)), p.push(s.watch(h, o, function(n) {
>>>>>>> Service instance details configuration and edit
var a = n.by("metadata.name");
e.bindings = r.getBindingsForResource(a, t);
}));
>>>>>>> Fix issues with bindings widget for service instances
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The provisioned service details could not be loaded.",
details: t("getErrorDetails")(n)
=======
var C = function(e) {
return _.map(p.compactEntries(e), function(e) {
=======
}), n;
};
e.aceLoaded = function(e) {
var t = e.getSession();
t.setOption("tabSize", 2), t.setOption("useSoftTabs", !0), e.$blockScrolling = 1 / 0;
};
var E = function(e) {
return _.map(f.compactEntries(e), function(e) {
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
return {
sourcePath: e.name,
destinationDir: e.value
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), a.list({
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
}, o, function(t) {
e.serviceClasses = t.by("metadata.name"), c(), s();
=======
>>>>>>> Adopt service catalog API changes
}), e.$on("$destroy", function() {
o.unwatchAll(c);
=======
>>>>>>> Service instance details configuration and edit
});
<<<<<<< HEAD
<<<<<<< HEAD
=======
}, w = function(t) {
=======
}, j = function(t) {
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
=======
});
}, T = function(t) {
>>>>>>> Enable valueFrom values for build config env vars
var n = {};
switch (t.type) {
case "ImageStreamTag":
n = {
kind: t.type,
name: t.imageStreamTag.imageStream + ":" + t.imageStreamTag.tagObject.tag
}, t.imageStreamTag.namespace !== e.buildConfig.metadata.namespace && (n.namespace = t.imageStreamTag.namespace);
break;

case "DockerImage":
n = {
kind: t.type,
name: t.dockerImage
};
break;

case "ImageStreamImage":
var r = t.imageStreamImage.split("/");
(n = {
kind: t.type,
name: _.last(r)
}).namespace = 1 !== _.size(r) ? _.head(r) : e.buildConfig.metadata.namespace;
}
return n;
<<<<<<< HEAD
<<<<<<< HEAD
}, k = function() {
=======
}, R = function() {
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
=======
}, N = function() {
>>>>>>> Enable valueFrom values for build config env vars
var t = [].concat(e.triggers.githubWebhooks, e.triggers.gitlabWebhooks, e.triggers.bitbucketWebhooks, e.triggers.genericWebhooks, e.triggers.imageChangeTriggers, e.triggers.builderImageChangeTrigger, e.triggers.configChangeTrigger);
return t = _.filter(t, function(e) {
return _.has(e, "disabled") && !e.disabled || e.present;
}), t = _.map(t, "data");
<<<<<<< HEAD
<<<<<<< HEAD
}, P = function() {
=======
}, I = function() {
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
=======
}, D = function() {
>>>>>>> Enable valueFrom values for build config env vars
switch (e.secrets.picked = {
gitSecret: e.buildConfig.spec.source.sourceSecret ? [ e.buildConfig.spec.source.sourceSecret ] : [ {
name: ""
} ],
pullSecret: S(e.buildConfig).pullSecret ? [ S(e.buildConfig).pullSecret ] : [ {
name: ""
} ],
pushSecret: e.buildConfig.spec.output.pushSecret ? [ e.buildConfig.spec.output.pushSecret ] : [ {
name: ""
} ]
}, e.strategyType) {
case "Source":
case "Docker":
e.secrets.picked.sourceSecrets = e.buildConfig.spec.source.secrets || [ {
secret: {
name: ""
},
destinationDir: ""
} ];
break;

case "Custom":
e.secrets.picked.sourceSecrets = S(e.buildConfig).secrets || [ {
secretSource: {
name: ""
},
mountPath: ""
} ];
}
}, A = function(e, t, n) {
t.name ? e[n] = t : delete e[n];
}, $ = function(t, n) {
var r = "Custom" === e.strategyType ? "secretSource" : "secret", a = _.filter(n, function(e) {
return e[r].name;
});
_.isEmpty(a) ? delete t.secrets : t.secrets = a;
}, B = function(e, t) {
return "None" === t.type ? e : (e.none = !1, angular.forEach(t, function(t, n) {
e[n] = !0;
}), e);
};
e.addWebhookTrigger = function(t) {
if (t) {
var n = {
disabled: !1,
data: {
type: t
}
}, r = _.find(e.createTriggerSelect.options, function(e) {
return e.label === t;
}).type;
n.data[r] = {
secret: i._generateSecret()
}, e.triggers[r + "Webhooks"].push(n);
}
}, e.save = function() {
switch (e.disableInputs = !0, v(), S(e.updatedBuildConfig).forcePull = e.options.forcePull, e.strategyType) {
case "Docker":
S(e.updatedBuildConfig).noCache = e.options.noCache;
break;

case "JenkinsPipeline":
"path" === e.jenkinsfileOptions.type ? delete e.updatedBuildConfig.spec.strategy.jenkinsPipelineStrategy.jenkinsfile : delete e.updatedBuildConfig.spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath;
}
<<<<<<< HEAD
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = E(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = T(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete S(e.updatedBuildConfig).from : S(e.updatedBuildConfig).from = T(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = T(e.imageOptions.to), S(e.updatedBuildConfig).env = f.compactEntries(e.envVars), A(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), A(S(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), A(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
case "Source":
case "Docker":
$(e.updatedBuildConfig.spec.source, e.secrets.picked.sourceSecrets);
break;

case "Custom":
$(S(e.updatedBuildConfig), e.secrets.picked.sourceSecrets);
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e.updatedBuildConfig.spec.triggers = k(), b(), s.update("buildconfigs", e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
l.addNotification({
type: "success",
message: "Build config " + e.updatedBuildConfig.metadata.name + " was successfully updated."
}), y();
>>>>>>> Fix for adding non-builder templates to a project
}, function(n) {
e.loaded = !0, e.alerts.load = {
=======
e.updatedBuildConfig.spec.triggers = R(), w(), c.update(h, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
=======
e.updatedBuildConfig.spec.triggers = N(), R(), c.update(h, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
>>>>>>> Enable valueFrom values for build config env vars
=======
e.updatedBuildConfig.spec.triggers = N(), I(), c.update(h, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
>>>>>>> Add search catalog in project context
u.addNotification({
type: "success",
message: "Build config " + e.updatedBuildConfig.metadata.name + " was successfully updated."
}), j();
}, function(n) {
e.disableInputs = !1, u.addNotification({
id: "edit-build-config-error",
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
type: "error",
message: "The service details could not be loaded.",
details: t("getErrorDetails")(n)
};
})), e.$on("$destroy", function() {
s.unwatchAll(p), s.unwatchAll(f);
=======
function S() {
A || (V = 0, _.each(m.metrics, function(e) {
g(e), f(e);
}));
}
function C(e) {
if (!A) if (V++, m.noData) m.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(V < 2)) {
var t = "metrics-failed-" + m.uniqueID;
m.alerts[t] = {
type: "error",
message: "An error occurred updating metrics for pod " + _.get(m, "pod.metadata.name", "<unknown>") + ".",
links: [ {
href: "",
label: "Retry",
onClick: function() {
delete m.alerts[t], V = 1, k();
}
} ]
};
}
}
function w() {
return !(m.metricsError || V > 1) && (m.pod && _.get(m, "options.selectedContainer"));
}
function P(e, t, n) {
t.total = p(t.id), t.total && (m.hasLimits = !0);
var r = _.get(n, "usage.value");
isNaN(r) && (r = 0), e.convert && (r = e.convert(r)), t.used = d3.round(r, e.usagePrecision), t.total && (t.available = d3.round(t.total - r, e.usagePrecision)), e.totalUsed += t.used;
}
function j(e, t) {
m.noData = !1;
var n = _.initial(t.data);
e.data ? e.data = _.chain(e.data).takeRight(D).concat(n).value() : e.data = n;
}
function k() {
if (w()) {
var e = v(), t = [];
angular.forEach(m.metrics, function(n) {
var r = [];
n.totalUsed = 0, angular.forEach(n.datasets, function(a) {
var o = b(n, a, e);
if (o) {
var i = l.get(o);
r.push(i), p(a.id) && t.push(l.getCurrentUsage(o).then(function(e) {
P(n, a, e);
}));
}
}), t = t.concat(r), a.all(r).then(function(e) {
A || angular.forEach(e, function(e) {
e && j(_.find(n.datasets, {
id: e.metricID
}), e);
>>>>>>> Update membership to use new rbac endpoints
});
} ]), angular.module("openshiftConsole").controller("SecretsController", [ "$routeParams", "$scope", "DataService", "ProjectsService", function(e, t, n, a) {
t.projectName = e.project, t.secretsByType = {}, a.get(e.project).then(_.spread(function(e, a) {
t.project = e, t.context = a, n.list("secrets", a).then(function(e) {
t.secrets = _.sortBy(e.by("metadata.name"), [ "type", "metadata.name" ]), t.loaded = !0;
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("SecretController", [ "$routeParams", "$filter", "$scope", "DataService", "ProjectsService", "SecretsService", function(e, t, n, a, r, o) {
n.projectName = e.project, n.secretName = e.secret, n.view = {
showSecret: !1
}, n.alerts = n.alerts || {}, n.breadcrumbs = [ {
title: "Secrets",
link: "project/" + e.project + "/browse/secrets"
}, {
title: n.secretName
} ], r.get(e.project).then(_.spread(function(e, t) {
=======
} ], n.addToApplicationVisible = !1, n.addToApplication = function() {
n.addToApplicationVisible = !0;
}, n.closeAddToApplication = function() {
n.addToApplicationVisible = !1;
}, r.get(e.project).then(_.spread(function(e, t) {
>>>>>>> Add the ability to add a secret to an application
n.project = e, n.context = t, a.get("secrets", n.secretName, t, {
errorNotification: !1
}).then(function(e) {
n.secret = e, n.decodedSecretData = o.decodeSecretData(n.secret.data), n.loaded = !0;
}, function(e) {
n.loaded = !0, n.error = e;
=======
}, e.$on("$destroy", function() {
c.unwatchAll(b);
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("CreateSecretController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
a.alerts = {}, a.projectName = n.project, a.breadcrumbs = [ {
title: a.projectName,
link: "project/" + a.projectName
}, {
=======
} ]), angular.module("openshiftConsole").controller("CreateSecretController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
a.alerts = {}, a.projectName = n.project, a.breadcrumbs = [ {
>>>>>>> Patternfly vertical navigation and project bar
title: "Secrets",
link: "project/" + a.projectName + "/browse/secrets"
}, {
title: "Create Secret"
<<<<<<< HEAD
} ], l.get(n.project).then(_.spread(function(o, s) {
a.project = o, a.context = s, a.breadcrumbs[0].title = e("displayName")(o), i.canI("secrets", "create", n.project) ? a.navigateBack = function() {
=======
} ], l.get(n.project).then(_.spread(function(e, o) {
a.project = e, a.context = o, i.canI("secrets", "create", n.project) ? a.navigateBack = function() {
>>>>>>> Patternfly vertical navigation and project bar
n.then ? t.url(n.then) : r.history.back();
} : c.toErrorPage("You do not have authority to create secrets in project " + n.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapsController", [ "$scope", "$routeParams", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, a, r, o) {
e.projectName = t.project, e.loaded = !1, e.labelSuggestions = {}, e.configMapsVersion = n.getPreferredVersion("configmaps"), e.clearFilter = function() {
r.clear();
};
<<<<<<< HEAD
var i, s = [], c = function() {
e.filterWithZeroResults = !r.getLabelSelector().isEmpty() && _.isEmpty(e.configMaps) && !_.isEmpty(i);
}, l = function() {
r.addLabelSuggestionsFromResources(i, e.labelSuggestions), r.setLabelSuggestions(e.labelSuggestions);
}, u = function() {
var t = r.getLabelSelector().select(i);
e.configMaps = _.sortBy(t, "metadata.name"), c();
};
o.get(t.project).then(_.spread(function(t, n) {
e.project = t, s.push(a.watch(e.configMapsVersion, n, function(t) {
i = t.by("metadata.name"), l(), u(), e.loaded = !0;
})), r.onActiveFiltersChanged(function() {
e.$evalAsync(u);
}), e.$on("$destroy", function() {
a.unwatchAll(s);
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapController", [ "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "ProjectsService", function(e, t, n, a, r, o) {
e.projectName = t.project, e.alerts = e.alerts || {}, e.loaded = !1, e.labelSuggestions = {}, e.breadcrumbs = a.getBreadcrumbs({
=======
} ]), angular.module("openshiftConsole").controller("EditConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "DataService", "BreadcrumbsService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
=======
} ]), angular.module("openshiftConsole").controller("EditConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "DataService", "BreadcrumbsService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var u = [];
n.forms = {}, n.projectName = t.project, n.breadcrumbs = i.getBreadcrumbs({
>>>>>>> Update edit/config-map controller to use getPreferredVersion
name: t.configMap,
kind: "ConfigMap",
namespace: t.project
}), e.configMapsVersion = n.getPreferredVersion("configmaps");
var i = [], s = function(t, n) {
e.loaded = !0, e.configMap = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This config map has been deleted."
=======
}, L = function(e) {
var t = e.chartPrefix + m.uniqueID + "-sparkline", n = c.getDefaultSparklineConfig(t, e.units);
return 1 === e.datasets.length && _.set(n, "legend.show", !1), n;
}, V = 0;
(window.OPENSHIFT_CONSTANTS.DISABLE_CUSTOM_METRICS ? a.when({}) : l.getCustomMetrics(m.pod).then(function(e) {
angular.forEach(e, function(e) {
var t = e.description || e.name, n = e.unit || "", r = "custom/" + e.id.replace(/.*\/custom\//, "");
m.metrics.push({
label: t,
units: n,
chartPrefix: "custom-" + _.uniqueId("custom-metric-"),
chartType: "spline",
datasets: [ {
id: r,
label: t,
type: e.type,
data: []
} ]
});
});
})).finally(function() {
m.$watch("options", function() {
_.each(m.metrics, function(e) {
_.each(e.datasets, function(e) {
delete e.data;
});
}), delete m.metricsError, k();
}, !0), I = t(k, c.getDefaultUpdateInterval(), !1);
});
var U = o.$on("metrics.charts.resize", function() {
c.redraw(R), c.redraw(E);
});
m.$on("$destroy", function() {
I && (t.cancel(I), I = null), U && (U(), U = null), angular.forEach(R, function(e) {
e.destroy();
}), R = null, angular.forEach(E, function(e) {
e.destroy();
}), E = null, A = !0;
>>>>>>> Update membership to use new rbac endpoints
});
<<<<<<< HEAD
};
e.addToApplicationVisible = !1, e.addToApplication = function() {
e.addToApplicationVisible = !0;
}, e.closeAddToApplication = function() {
e.addToApplicationVisible = !1;
}, o.get(t.project).then(_.spread(function(n, a) {
e.project = n, r.get(e.configMapsVersion, t.configMap, a, {
errorNotification: !1
}).then(function(e) {
s(e), i.push(r.watchObject("configmaps", t.configMap, a, s));
}, function(t) {
e.loaded = !0, e.error = t;
}), e.$on("$destroy", function() {
r.unwatchAll(i);
=======
var d = function(e) {
return _.get(e, "metadata.resourceVersion");
}, m = function() {
c.hideNotification("edit-config-map-error");
}, p = function() {
r.history.back();
};
n.cancel = p;
var f = a.getPreferredVersion("configmaps");
l.get(t.project).then(_.spread(function(r, a) {
o.get(f, t.configMap, a, {
errorNotification: !1
}).then(function(e) {
n.loaded = !0, n.breadcrumbs = i.getBreadcrumbs({
name: t.configMap,
object: e,
project: r,
subpage: "Edit Config Map"
}), n.configMap = e, u.push(o.watchObject(f, t.configMap, a, function(e, t) {
n.resourceChanged = d(e) !== d(n.configMap), n.resourceDeleted = "DELETED" === t;
}));
}, function(n) {
s.toErrorPage("Could not load config map " + t.configMap + ". " + e("getErrorDetails")(n));
}), n.updateConfigMap = function() {
n.forms.editConfigMapForm.$valid && (m(), n.disableInputs = !0, o.update(f, n.configMap.metadata.name, n.configMap, a).then(function() {
c.addNotification({
type: "success",
message: "Config map " + n.configMap.metadata.name + " successfully updated."
}), p();
}, function(t) {
n.disableInputs = !1, c.addNotification({
id: "edit-config-map-error",
type: "error",
message: "An error occurred updating the config map.",
details: e("getErrorDetails")(t)
});
}));
}, n.$on("$destroy", function() {
o.unwatchAll(u), m();
>>>>>>> Update edit/config-map controller to use getPreferredVersion
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("CreateConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
n.projectName = t.project, n.breadcrumbs = [ {
title: "Config Maps",
link: "project/" + n.projectName + "/browse/config-maps"
}, {
title: "Create Config Map"
} ];
var u = r.getPreferredVersion("configmaps"), d = function() {
c.hideNotification("create-config-map-error");
};
n.$on("$destroy", d);
var p = function() {
a.history.back();
};
n.cancel = p, l.get(t.project).then(_.spread(function(a, r) {
n.project = a, o.canI("configmaps", "create", t.project) ? (n.configMap = {
apiVersion: "v1",
kind: "ConfigMap",
metadata: {
namespace: t.project
},
data: {}
}, n.createConfigMap = function() {
n.createConfigMapForm.$valid && (d(), n.disableInputs = !0, i.create(u, null, n.configMap, r).then(function() {
c.addNotification({
type: "success",
message: "Config map " + n.configMap.metadata.name + " successfully created."
}), p();
}, function(t) {
n.disableInputs = !1, c.addNotification({
id: "create-config-map-error",
type: "error",
message: "An error occurred creating the config map.",
details: e("getErrorDetails")(t)
});
}));
<<<<<<< HEAD
}) : s.toErrorPage("You do not have authority to create config maps in project " + t.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("RoutesController", [ "$routeParams", "$scope", "DataService", "$filter", "LabelFilter", "ProjectsService", function(e, t, n, a, r, o) {
t.projectName = e.project, t.unfilteredRoutes = {}, t.routes = {}, t.labelSuggestions = {}, t.clearFilter = function() {
r.clear();
};
<<<<<<< HEAD
var i = [];
o.get(e.project).then(_.spread(function(e, a) {
function o() {
<<<<<<< HEAD
r.getLabelSelector().isEmpty() || !$.isEmptyObject(t.routes) || $.isEmptyObject(t.unfilteredRoutes) ? delete t.alerts.routes : t.alerts.routes = {
type: "warning",
details: "The active filters are hiding all routes."
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, y = [], b = [], S = [];
e.valueFromObjects = [];
var C = function(e) {
=======
} ]), angular.module("openshiftConsole").controller("EditDeploymentConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$uibModal", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "EnvironmentService", "Navigate", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g) {
e.projectName = a.project, e.deploymentConfig = null, e.alerts = {}, e.view = {
=======
} ]), angular.module("openshiftConsole").controller("EditDeploymentConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$uibModal", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "EnvironmentService", "Navigate", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g) {
e.projectName = r.project, e.deploymentConfig = null, e.alerts = {}, e.view = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
advancedStrategyOptions: !1,
advancedImageOptions: !1
}, e.triggers = {}, e.breadcrumbs = c.getBreadcrumbs({
name: r.name,
kind: r.kind,
namespace: r.project,
subpage: "Edit Deployment Config"
}), e.deploymentConfigStrategyTypes = [ "Recreate", "Rolling", "Custom" ];
var v = t("orderByDisplayName"), h = t("getErrorDetails"), y = function(t, n) {
e.alerts["from-value-objects"] = {
type: "error",
message: t,
details: n
};
}, b = i.getPreferredVersion("deploymentconfigs"), S = i.getPreferredVersion("configmaps"), C = i.getPreferredVersion("secrets"), w = [], P = [], k = [];
e.valueFromObjects = [];
var j = function(e) {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
switch (e) {
case "Recreate":
return "recreateParams";

case "Rolling":
return "rollingParams";

case "Custom":
return "customParams";

default:
return void Logger.error("Unknown deployment strategy type: " + e);
}
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
};
<<<<<<< HEAD
<<<<<<< HEAD
var s = r.getPreferredVersion("services");
n.routesVersion = r.getPreferredVersion("routes");
var c = [];
i.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(n.routes) && !_.isEmpty(n.unfilteredRoutes);
=======
t.filterWithZeroResults = !r.getLabelSelector().isEmpty() && _.isEmpty(t.routes) && !_.isEmpty(t.unfilteredRoutes);
>>>>>>> Replacing empty tables with empty state message
}
<<<<<<< HEAD
n.project = e, c.push(a.watch(n.routesVersion, t, function(e) {
n.routesLoaded = !0, n.unfilteredRoutes = e.by("metadata.name"), o.addLabelSuggestionsFromResources(n.unfilteredRoutes, n.labelSuggestions), o.setLabelSuggestions(n.labelSuggestions), n.routes = o.getLabelSelector().select(n.unfilteredRoutes), r();
})), c.push(a.watch(s, t, function(e) {
n.services = e.by("metadata.name");
})), o.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.routes = e.select(n.unfilteredRoutes), r();
=======
p.get(a.project).then(_.spread(function(n, r) {
e.project = n, e.context = r, s.canI("deploymentconfigs", "update", a.project) ? l.get(b, a.deploymentconfig, r, {
=======
p.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, s.canI("deploymentconfigs", "update", r.project) ? l.get(b, r.deploymentconfig, a, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(t) {
e.deploymentConfig = t, e.breadcrumbs = c.getBreadcrumbs({
object: t,
project: n,
subpage: "Edit"
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
});
<<<<<<< HEAD
}), n.$on("$destroy", function() {
a.unwatchAll(c);
=======
e.updatedDeploymentConfig = angular.copy(e.deploymentConfig), e.containerNames = _.map(e.deploymentConfig.spec.template.spec.containers, "name"), e.containerConfigByName = function(t, n) {
var r = {}, a = _.filter(n, {
type: "ImageChange"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("RouteController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "APIService", "DataService", "ProjectsService", "RoutesService", function(e, t, n, r, a, o, i, s) {
=======
t.project = e, i.push(n.watch("routes", a, function(e) {
t.routesLoaded = !0, t.unfilteredRoutes = e.by("metadata.name"), r.addLabelSuggestionsFromResources(t.unfilteredRoutes, t.labelSuggestions), r.setLabelSuggestions(t.labelSuggestions), t.routes = r.getLabelSelector().select(t.unfilteredRoutes), o();
})), i.push(n.watch("services", a, function(e) {
t.services = e.by("metadata.name");
})), r.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.routes = e.select(t.unfilteredRoutes), o();
=======
return _.each(t, function(t) {
var n = _.find(a, function(e) {
return _.includes(e.imageChangeParams.containerNames, t.name);
}), o = {};
if (t.env = t.env || [], r[t.name] = {
env: t.env,
image: t.image,
hasDeploymentTrigger: !_.isEmpty(n)
}, n) {
var i = n.imageChangeParams.from, s = i.name.split(":");
o = {
data: n,
istag: {
namespace: i.namespace || e.projectName,
imageStream: s[0],
tagObject: {
tag: s[1]
}
},
automatic: _.get(n, "imageChangeParams.automatic", !1)
};
} else o = {
istag: {
namespace: "",
imageStream: ""
},
automatic: !0
};
_.set(r, [ t.name, "triggerData" ], o);
}), r;
}(e.updatedDeploymentConfig.spec.template.spec.containers, e.updatedDeploymentConfig.spec.triggers), e.secrets = {
pullSecrets: angular.copy(e.deploymentConfig.spec.template.spec.imagePullSecrets) || [ {
name: ""
} ]
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = j(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
type: "ConfigChange"
}), "Custom" !== e.strategyData.type || _.has(e.strategyData, "customParams.environment") || (e.strategyData.customParams.environment = []), l.list(S, a, null, {
errorNotification: !1
}).then(function(t) {
P = v(t.by("metadata.name")), e.availableConfigMaps = P, e.valueFromObjects = P.concat(k);
}, function(e) {
403 !== e.status && y("Could not load config maps", h(e));
}), l.list(C, a, null, {
errorNotification: !1
}).then(function(t) {
k = v(t.by("metadata.name")), e.availableSecrets = k, e.valueFromObjects = P.concat(k);
var n = f.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
>>>>>>> Fix problems with env valueFrom for DC hooks
});
<<<<<<< HEAD
}), t.$on("$destroy", function() {
n.unwatchAll(i);
=======
e.secretsByType = _.each(r, function(e) {
e.unshift("");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("RouteController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "DataService", "ProjectsService", "RoutesService", function(e, t, n, a, r, o, i) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
e.projectName = n.project, e.route = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Routes",
link: "project/" + n.project + "/browse/routes"
}, {
title: n.route
} ];
<<<<<<< HEAD
var c = a.getPreferredVersion("services");
e.routesVersion = a.getPreferredVersion("routes");
var l, u = [], d = function(t, n) {
e.loaded = !0, e.route = t, l = s.isCustomHost(t), "DELETED" === n && (e.alerts.deleted = {
=======
}, function(e) {
403 !== e.status && y("Could not load secrets", h(e));
}), w.push(l.watchObject(b, r.deploymentconfig, a, function(t, n) {
"MODIFIED" === n && (e.alerts["updated/deleted"] = {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
type: "warning",
message: "This route has been deleted."
});
}, m = function(t) {
return "router-host-" + _.get(e, "route.metadata.uid") + "-" + t.host + "-" + t.routerCanonicalHostname;
};
<<<<<<< HEAD
e.showRouterHostnameAlert = function(t, n) {
if (!l) return !1;
if (!t || !t.host || !t.routerCanonicalHostname) return !1;
if (!n || "True" !== n.status) return !1;
var a = m(t);
return !r.isAlertPermanentlyHidden(a, e.projectName);
}, i.get(n.project).then(_.spread(function(r, a) {
e.project = r, o.get(e.routesVersion, n.route, a, {
errorNotification: !1
}).then(function(t) {
d(t), u.push(o.watchObject(e.routesVersion, n.route, a, d));
=======
var s, c = [], l = function(t, n) {
e.loaded = !0, e.route = t, s = i.isCustomHost(t), "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This route has been deleted."
});
}, u = function(t) {
return "router-host-" + _.get(e, "route.metadata.uid") + "-" + t.host + "-" + t.routerCanonicalHostname;
};
e.showRouterHostnameAlert = function(t, n) {
if (!s) return !1;
if (!t || !t.host || !t.routerCanonicalHostname) return !1;
if (!n || "True" !== n.status) return !1;
var r = u(t);
return !a.isAlertPermanentlyHidden(r, e.projectName);
}, o.get(n.project).then(_.spread(function(a, o) {
e.project = a, r.get("routes", n.route, o, {
errorNotification: !1
}).then(function(e) {
l(e), c.push(r.watchObject("routes", n.route, o, l));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The route details could not be loaded.",
details: t("getErrorDetails")(n)
};
<<<<<<< HEAD
<<<<<<< HEAD
}), u.push(o.watch(c, a, function(t) {
e.services = t.by("metadata.name");
})), e.$on("$destroy", function() {
o.unwatchAll(u);
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("StorageController", [ "$filter", "$routeParams", "$scope", "APIService", "AlertMessageService", "DataService", "LabelFilter", "Logger", "gettextCatalog", "gettext", "ProjectsService", "QuotaService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
n.projectName = t.project, n.pvcs = {}, n.unfilteredPVCs = {}, n.labelSuggestions = {}, n.alerts = n.alerts || {}, n.outOfClaims = !1, n.clearFilter = function() {
i.clear();
=======
var w = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, k = function(t) {
=======
}) : d.toErrorPage("You do not have authority to update deployment config " + a.deploymentconfig + ".", "access_denied");
}));
var R = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, I = function(t) {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
_.has(e.strategyData, t) || r.open({
=======
}) : d.toErrorPage("You do not have authority to update deployment config " + r.deploymentconfig + ".", "access_denied");
}));
var I = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, R = function(t) {
_.has(e.strategyData, t) || a.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e.alerts,
message: "Some of your existing " + e.originalStrategy.toLowerCase() + " strategy parameters can be used for the " + e.strategyData.type.toLowerCase() + " strategy. Keep parameters?",
details: "The timeout parameter and any pre or post lifecycle hooks will be copied from " + e.originalStrategy.toLowerCase() + " strategy to " + e.strategyData.type.toLowerCase() + " strategy. After saving the changes, " + e.originalStrategy.toLowerCase() + " strategy parameters will be removed.",
okButtonText: "Yes",
okButtonClass: "btn-primary",
cancelButtonText: "No"
>>>>>>> Fix for adding non-builder templates to a project
};
var m = function() {
var e = a.isAlertPermanentlyHidden("storage-quota-limit-reached", n.projectName);
if (n.outOfClaims = d.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas), !e && n.outOfClaims) {
if (n.alerts.quotaExceeded) return;
n.alerts.quotaExceeded = {
type: "warning",
message: c.getString(l("Storage quota limit has been reached. You will not be able to create any new storage.")),
links: [ {
href: "project/" + n.projectName + "/quota",
label: c.getString(l("View Quota"))
}, {
href: "",
label: c.getString(l("Don't Show Me Again")),
onClick: function() {
<<<<<<< HEAD
return a.permanentlyHideAlert("storage-quota-limit-reached", n.projectName), !0;
=======
delete m.alerts[t], U = 1, k();
>>>>>>> Add Browse Catalog to Project context view.
}
} ]
};
} else delete n.alerts.quotaExceeded;
}, p = r.getPreferredVersion("resourcequotas"), g = r.getPreferredVersion("appliedclusterresourcequotas");
n.persistentVolumeClaimsVersion = r.getPreferredVersion("persistentvolumeclaims");
var f = [];
u.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && $.isEmptyObject(n.pvcs) && !$.isEmptyObject(n.unfilteredPVCs);
}
<<<<<<< HEAD
<<<<<<< HEAD
n.project = e, f.push(o.watch(n.persistentVolumeClaimsVersion, t, function(e) {
n.pvcsLoaded = !0, n.unfilteredPVCs = e.by("metadata.name"), i.addLabelSuggestionsFromResources(n.unfilteredPVCs, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), n.pvcs = i.getLabelSelector().select(n.unfilteredPVCs), r(), s.log("pvcs (subscribe)", n.unfilteredPVCs);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.pvcs = e.select(n.unfilteredPVCs), r();
=======
}
function w() {
return !(m.metricsError || U > 1) && (m.pod && _.get(m, "options.selectedContainer"));
}
function P(e, t, n) {
t.total = p(t.id), t.total && (m.hasLimits = !0);
var r = _.get(n, "usage.value");
isNaN(r) && (r = 0), e.convert && (r = e.convert(r)), t.used = d3.round(r, e.usagePrecision), t.total && (t.available = d3.round(t.total - r, e.usagePrecision)), e.totalUsed += t.used;
}
function j(e, t) {
m.noData = !1;
var n = _.initial(t.data);
e.data ? e.data = _.chain(e.data).takeRight(D).concat(n).value() : e.data = n;
}
function k() {
if (w()) {
var e = v(), t = [];
angular.forEach(m.metrics, function(n) {
var r = [];
n.totalUsed = 0, angular.forEach(n.datasets, function(a) {
var o = b(n, a, e);
if (o) {
var i = l.get(o);
r.push(i), p(a.id) && t.push(l.getCurrentUsage(o).then(function(e) {
P(n, a, e);
}));
}
}), t = t.concat(r), a.all(r).then(function(e) {
A || angular.forEach(e, function(e) {
e && j(_.find(n.datasets, {
id: e.metricID
}), e);
>>>>>>> Add Browse Catalog to Project context view.
});
}), n.$on("$destroy", function() {
o.unwatchAll(f);
}), o.list(p, {
namespace: n.projectName
}, function(e) {
n.quotas = e.by("metadata.name"), m();
}), o.list(g, {
namespace: n.projectName
}, function(e) {
n.clusterQuotas = e.by("metadata.name"), m();
});
}));
} ]), angular.module("openshiftConsole").controller("OtherResourcesController", [ "$routeParams", "$location", "$scope", "AuthorizationService", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", "APIService", function(e, t, n, r, a, o, i, s, c, l) {
function u() {
n.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(n.resources) && !_.isEmpty(n.unfilteredResources);
=======
}), c.push(r.watch("services", o, function(t) {
e.services = t.by("metadata.name");
})), e.$on("$destroy", function() {
r.unwatchAll(c);
=======
}).result.then(function() {
e.strategyData[t] = angular.copy(e.strategyData[j(e.originalStrategy)]);
}, function() {
e.strategyData[t] = {};
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
}));
} ]), angular.module("openshiftConsole").controller("StorageController", [ "$routeParams", "$scope", "AlertMessageService", "DataService", "ProjectsService", "QuotaService", "$filter", "LabelFilter", "Logger", function(e, t, n, a, r, o, i, s, c) {
t.projectName = e.project, t.pvcs = {}, t.unfilteredPVCs = {}, t.labelSuggestions = {}, t.alerts = t.alerts || {}, t.outOfClaims = !1, t.clearFilter = function() {
s.clear();
};
<<<<<<< HEAD
<<<<<<< HEAD
var l = function() {
var e = n.isAlertPermanentlyHidden("storage-quota-limit-reached", t.projectName);
if (t.outOfClaims = o.isAnyStorageQuotaExceeded(t.quotas, t.clusterQuotas), !e && t.outOfClaims) {
if (t.alerts.quotaExceeded) return;
t.alerts.quotaExceeded = {
type: "warning",
message: "Storage quota limit has been reached. You will not be able to create any new storage.",
links: [ {
href: "project/" + t.projectName + "/quota",
label: "View Quota"
}, {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return n.permanentlyHideAlert("storage-quota-limit-reached", t.projectName), !0;
}
} ]
=======
e.strategyChanged = function() {
var t = S(e.strategyData.type);
=======
e.strategyChanged = function() {
<<<<<<< HEAD
var t = C(e.strategyData.type);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
w() ? k(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
=======
var t = j(e.strategyData.type);
R() ? I(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
image: "",
command: [],
environment: []
}), e.strategyParamsPropertyName = t;
};
<<<<<<< HEAD
<<<<<<< HEAD
var P = function(e, t, n, a) {
=======
var E = function(e, t, n, a) {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
var r = {
=======
var E = function(e, t, n, r) {
var a = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
kind: "ImageStreamTag",
namespace: t.namespace,
name: t.imageStream + ":" + t.tagObject.tag
>>>>>>> Fix for adding non-builder templates to a project
};
<<<<<<< HEAD
} else delete t.alerts.quotaExceeded;
}, u = [];
r.get(e.project).then(_.spread(function(e, n) {
function r() {
t.filterWithZeroResults = !s.getLabelSelector().isEmpty() && $.isEmptyObject(t.pvcs) && !$.isEmptyObject(t.unfilteredPVCs);
=======
return n ? (n.imageChangeParams.from = a, n.imageChangeParams.automatic = r) : n = {
type: "ImageChange",
imageChangeParams: {
automatic: r,
containerNames: [ e ],
from: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< HEAD
t.project = e, u.push(a.watch("persistentvolumeclaims", n, function(e) {
t.pvcsLoaded = !0, t.unfilteredPVCs = e.by("metadata.name"), s.addLabelSuggestionsFromResources(t.unfilteredPVCs, t.labelSuggestions), s.setLabelSuggestions(t.labelSuggestions), t.pvcs = s.getLabelSelector().select(t.unfilteredPVCs), r(), c.log("pvcs (subscribe)", t.unfilteredPVCs);
})), s.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.pvcs = e.select(t.unfilteredPVCs), r();
=======
}, n;
}, T = function() {
var t = _.reject(e.updatedDeploymentConfig.spec.triggers, function(e) {
return "ImageChange" === e.type || "ConfigChange" === e.type;
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
});
<<<<<<< HEAD
}), t.$on("$destroy", function() {
a.unwatchAll(u);
}), a.list("resourcequotas", {
namespace: t.projectName
}, function(e) {
t.quotas = e.by("metadata.name"), l();
}), a.list("appliedclusterresourcequotas", {
namespace: t.projectName
}, function(e) {
t.clusterQuotas = e.by("metadata.name"), l();
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("OtherResourcesController", [ "$routeParams", "$location", "$scope", "AuthorizationService", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", "APIService", function(e, t, n, a, r, o, i, s, c, l) {
function u() {
<<<<<<< HEAD
s.getLabelSelector().isEmpty() || !$.isEmptyObject(n.resources) || $.isEmptyObject(n.unfilteredResources) ? delete n.alerts.resources : n.alerts.resources = {
type: "warning",
details: "The active filters are hiding all " + l.kindToResource(n.kindSelector.selected.kind, !0) + "."
=======
return _.each(e.containerConfigByName, function(n, a) {
<<<<<<< HEAD
n.hasDeploymentTrigger ? t.push(P(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
=======
n.hasDeploymentTrigger ? t.push(E(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
name: a
=======
return _.each(e.containerConfigByName, function(n, r) {
n.hasDeploymentTrigger ? t.push(E(r, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).image = n.image;
}), e.triggers.hasConfigTrigger && t.push({
type: "ConfigChange"
}), t;
<<<<<<< HEAD
}, R = function() {
d.hideNotification("edit-deployment-config-error");
>>>>>>> Fix for adding non-builder templates to a project
=======
}, N = function() {
m.hideNotification("edit-deployment-config-error");
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
};
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(n.resources) && !_.isEmpty(n.unfilteredResources);
>>>>>>> Replacing empty tables with empty state message
=======
e.save = function() {
if (e.disableInputs = !0, _.each(e.containerConfigByName, function(t, n) {
_.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: n
}).env = g.compactEntries(t.env);
<<<<<<< HEAD
}), R() && delete e.strategyData[j(e.originalStrategy)], "Rolling" === e.strategyData.type) {
var a = e.strategyData[e.strategyParamsPropertyName].maxSurge, r = Number(a);
"" === a ? e.strategyData[e.strategyParamsPropertyName].maxSurge = null : _.isFinite(r) && (e.strategyData[e.strategyParamsPropertyName].maxSurge = r);
=======
}), I() && delete e.strategyData[j(e.originalStrategy)], "Rolling" === e.strategyData.type) {
var r = e.strategyData[e.strategyParamsPropertyName].maxSurge, a = Number(r);
"" === r ? e.strategyData[e.strategyParamsPropertyName].maxSurge = null : _.isFinite(a) && (e.strategyData[e.strategyParamsPropertyName].maxSurge = a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = e.strategyData[e.strategyParamsPropertyName].maxUnavailable, i = Number(o);
"" === o ? e.strategyData[e.strategyParamsPropertyName].maxUnavailable = null : _.isFinite(i) && (e.strategyData[e.strategyParamsPropertyName].maxUnavailable = i);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
}
<<<<<<< HEAD
function d() {
var e = n.kindSelector.selected;
if (e) {
<<<<<<< HEAD
var r = t.search();
r.kind = e.kind, r.group = e.group || "", t.replace().search(r), n.selectedResource = {
resource: l.kindToResource(e.kind),
group: e.group || ""
}, a.list({
group: e.group,
resource: l.kindToResource(e.kind)
}, n.context).then(function(t) {
n.unfilteredResources = t.by("metadata.name"), n.labelSuggestions = {}, s.addLabelSuggestionsFromResources(n.unfilteredResources, n.labelSuggestions), s.setLabelSuggestions(n.labelSuggestions), n.resources = s.getLabelSelector().select(n.unfilteredResources), n.resourceName = l.kindToResource(e.kind, !0), u();
=======
"Custom" !== e.strategyData.type && _.each([ "pre", "mid", "post" ], function(t) {
_.has(e.strategyData, [ e.strategyParamsPropertyName, t, "execNewPod", "env" ]) && (e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env = g.compactEntries(e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env));
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = g.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = T(), N(), l.update(b, e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
m.addNotification({
type: "success",
message: "Deployment config " + e.updatedDeploymentConfig.metadata.name + " was successfully updated."
});
<<<<<<< HEAD
var t = d.resourceURL(e.updatedDeploymentConfig);
n.url(t);
}, function(n) {
e.disableInputs = !1, m.addNotification({
id: "edit-deployment-config-error",
type: "error",
message: "An error occurred updating deployment config " + e.updatedDeploymentConfig.metadata.name + ".",
details: t("getErrorDetails")(n)
=======
}), delete m.metricsError, k();
}, !0), I = t(k, c.getDefaultUpdateInterval(), !1);
>>>>>>> Add Browse Catalog to Project context view.
});
});
}, e.cancel = function() {
o.history.back();
}, e.$on("$destroy", function() {
l.unwatchAll(w), N();
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
});
<<<<<<< HEAD
}
<<<<<<< HEAD
=======
};
} ]), angular.module("openshiftConsole").directive("deploymentMetrics", [ "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", function(e, t, n, r, a, o, i, s, c, l) {
return {
restrict: "E",
scope: {
pods: "=",
containers: "=",
profile: "@",
alerts: "=?"
},
templateUrl: function(e, t) {
return "compact" === t.profile ? "views/directives/metrics-compact.html" : "views/directives/deployment-metrics.html";
},
link: function(t) {
function n(e) {
return null === e.value || void 0 === e.value;
}
function r(e) {
var t, r = {}, a = [ "Date" ], o = [ t = w ? e.compactDatasetLabel || e.label : "Average Usage" ], i = [ a, o ], s = function(e) {
var t = "" + e.start;
return r[t] || (r[t] = {
total: 0,
count: 0
}), r[t];
};
return _.each(I[e.descriptor], function(e) {
_.each(e, function(e) {
var t = s(e);
(!j || j < e.end) && (j = e.end), n(e) || (t.total += e.value, t.count = t.count + 1);
});
}), _.each(r, function(t, n) {
var r;
r = t.count ? t.total / t.count : null, a.push(Number(n)), o.push(e.convert ? e.convert(r) : r);
}), o.length > 1 && (e.lastValue = _.last(o) || 0), i;
}
function o(e, a) {
var o = [], i = {
type: "spline"
};
return t.showAverage ? (_.each(e[a.descriptor], function(e, t) {
h(a.descriptor, t, e);
}), i.type = "area-spline", w && a.compactType && (i.type = a.compactType), i.x = "Date", i.columns = r(a), i) : (_.each(e[a.descriptor], function(e, t) {
h(a.descriptor, t, e);
var r = t + "-dates";
_.set(i, [ "xs", t ], r);
var s = [ r ], c = [ t ];
o.push(s), o.push(c), _.each(I[a.descriptor][t], function(e) {
if (s.push(e.start), (!j || j < e.end) && (j = e.end), n(e)) c.push(e.value); else {
var t = a.convert ? a.convert(e.value) : e.value;
c.push(t);
>>>>>>> Add Browse Catalog to Project context view.
}
n.projectName = e.project, n.labelSuggestions = {}, n.kindSelector = {
disabled: !0
}, n.kinds = _.filter(l.availableKinds(), function(e) {
switch (e.kind) {
case "AppliedClusterResourceQuota":
=======
var a = t.search();
a.kind = e.kind, a.group = e.group || "", t.replace().search(a), n.selectedResource = {
resource: l.kindToResource(e.kind),
group: e.group || ""
}, r.list({
group: e.group,
resource: l.kindToResource(e.kind)
}, n.context).then(function(t) {
n.unfilteredResources = t.by("metadata.name"), n.labelSuggestions = {}, s.addLabelSuggestionsFromResources(n.unfilteredResources, n.labelSuggestions), s.setLabelSuggestions(n.labelSuggestions), n.resources = s.getLabelSelector().select(n.unfilteredResources), n.resourceName = l.kindToResource(e.kind, !0), u();
});
<<<<<<< HEAD
=======
}), i.columns = _.sortBy(o, function(e) {
return e[0];
}), i);
}
function u(e) {
P || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var r, a = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), S[i] ? (S[i].load(a), t.showAverage ? S[i].legend.hide() : S[i].legend.show()) : ((r = D(n)).data = a, S[i] = c3.generate(r));
}));
}
function d() {
return w ? "-15mn" : "-" + t.options.timeRange.value + "mn";
}
function m() {
return 60 * t.options.timeRange.value * 1e3;
}
function p() {
return w ? "1mn" : Math.floor(m() / C) + "ms";
}
function f() {
var e = _.find(t.pods, "metadata.namespace");
if (e) {
var n = {
pods: t.pods,
namespace: e.metadata.namespace,
bucketDuration: p()
};
return w || (n.containerName = t.options.selectedContainer.name), n.start = j || d(), n;
>>>>>>> Add Browse Catalog to Project context view.
}
}
n.projectName = e.project, n.labelSuggestions = {}, n.kindSelector = {
disabled: !0
}, n.kinds = _.filter(l.availableKinds(), function(e) {
switch (e.kind) {
<<<<<<< HEAD
case "ReplicationController":
case "Deployment":
case "DeploymentConfig":
case "BuildConfig":
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
case "AppliedClusterResourceQuota":
>>>>>>> Don't show "Service Instance" in Other Resources list
case "Build":
case "BuildConfig":
case "ConfigMap":
case "Deployment":
case "DeploymentConfig":
case "Event":
case "ImageStream":
case "ImageStreamImage":
case "ImageStreamImport":
case "ImageStreamMapping":
case "ImageStreamTag":
case "LimitRange":
case "PersistentVolumeClaim":
case "Pod":
case "ReplicaSet":
case "ReplicationController":
case "ResourceQuota":
case "Route":
case "Secret":
case "Service":
case "ServiceInstance":
case "StatefulSet":
return !1;

default:
return !0;
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), n.clearFilter = function() {
s.clear();
=======
} ]), angular.module("openshiftConsole").controller("EditAutoscalerController", [ "$scope", "$filter", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "HPAService", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
if (n.kind && n.name) {
var f = [ "Deployment", "DeploymentConfig", "HorizontalPodAutoscaler", "ReplicaSet", "ReplicationController" ];
if (_.includes(f, n.kind)) {
e.kind = n.kind, e.name = n.name, "HorizontalPodAutoscaler" === n.kind ? e.disableInputs = !0 : (e.targetKind = n.kind, e.targetName = n.name), e.autoscaling = {
name: e.name
}, e.labels = [], l.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
var g = t("getErrorDetails"), v = function() {
r.history.back();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
var m = function(e) {
=======
});
<<<<<<< HEAD
var p = function(e) {
>>>>>>> Updates for Service Instance & Bindings
=======
=======
}), n.clearFilter = function() {
s.clear();
=======
}
}
function v() {
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && N < 2;
}
function h(e, n, r) {
t.noData = !1;
var a = _.initial(r), o = _.get(I, [ e, n ]);
if (o) {
var i = _.takeRight(o.concat(a), C);
_.set(I, [ e, n ], i);
} else _.set(I, [ e, n ], a);
}
function y() {
if (!R && v()) {
k = Date.now();
var e = f();
c.getPodMetrics(e).then(u, g).finally(function() {
t.loaded = !0;
});
}
}
var b, S = {}, C = 30, w = "compact" === t.profile, P = !1;
t.uniqueID = s.uniqueID();
var j, k, I = {}, R = w, E = function(e) {
return e >= 1024;
>>>>>>> Add Browse Catalog to Project context view.
};
<<<<<<< HEAD
>>>>>>> Replacing empty tables with empty state message
var m = function(e) {
>>>>>>> Support EnvFrom in the Env Editors
if (e) {
var t = l.kindToResourceGroupVersion(e), n = l.apiInfo(t);
return !n || !n.verbs || _.includes(n.verbs, "list");
}
};
n.getReturnURL = function() {
var t = _.get(n, "kindSelector.selected.kind");
return t ? URI.expand("project/{projectName}/browse/other?kind={kind}&group={group}", {
projectName: e.project,
kind: t,
group: _.get(n, "kindSelector.selected.group", "")
}).toString() : "";
};
<<<<<<< HEAD
var p;
n.isDuplicateKind = function(e) {
return p || (p = _.countBy(n.kinds, "kind")), p[e] > 1;
=======
t.$watch("options", function() {
I = {}, j = null, delete t.metricsError, y();
}, !0), b = e(y, s.getDefaultUpdateInterval(), !1), t.updateInView = function(e) {
R = !e, e && (!k || Date.now() > k + s.getDefaultUpdateInterval()) && y();
>>>>>>> Add Browse Catalog to Project context view.
};
var f = function(e, t) {
return _.some(n.kinds, function(n) {
return n.kind === e && (!n.group && !t || n.group === t);
});
};
o.get(e.project).then(_.spread(function(t, a) {
n.kinds = _.filter(n.kinds, function(e) {
var t = {
resource: l.kindToResource(e.kind),
group: e.group || ""
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return !!m(e) && (!!r.checkResource(t.resource) && r.canI(t, "list", n.projectName));
}), n.project = t, n.context = a, n.kindSelector.disabled = !1, e.kind && g(e.kind, e.group) && (_.set(n, "kindSelector.selected.kind", e.kind), _.set(n, "kindSelector.selected.group", e.group || ""));
})), n.loadKind = d, n.$watch("kindSelector.selected", function() {
s.clear(), d();
=======
=======
return !!m(e) && (!!a.checkResource(t.resource) && a.canI(t, "list", n.projectName));
=======
return !!p(e) && (!!a.checkResource(t.resource) && a.canI(t, "list", n.projectName));
>>>>>>> Updates for Service Instance & Bindings
=======
return !!m(e) && (!!a.checkResource(t.resource) && a.canI(t, "list", n.projectName));
>>>>>>> Support EnvFrom in the Env Editors
}), n.project = t, n.context = r, n.kindSelector.disabled = !1, e.kind && f(e.kind, e.group) && (_.set(n, "kindSelector.selected.kind", e.kind), _.set(n, "kindSelector.selected.group", e.group || ""));
})), n.loadKind = d, n.$watch("kindSelector.selected", function() {
s.clear(), d();
=======
e.$on("$destroy", h);
var y = a.getPreferredVersion("horizontalpodautoscalers"), b = a.getPreferredVersion("limitranges");
m.get(n.project).then(_.spread(function(t, r) {
e.project = t;
var l = "HorizontalPodAutoscaler" === n.kind ? "update" : "create";
if (o.canI({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, l, n.project)) {
var m = function() {
e.disableInputs = !0, h();
var t = {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: e.autoscaling.name,
labels: p.mapEntries(p.compactEntries(e.labels))
},
<<<<<<< HEAD
spec: {
scaleTargetRef: {
kind: n.kind,
name: n.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: e.autoscaling.minReplicas,
maxReplicas: e.autoscaling.maxReplicas,
targetCPUUtilizationPercentage: e.autoscaling.targetCPU || e.autoscaling.defaultTargetCPU || null
}
=======
controller: [ "$scope", function(t) {
var l, u, p, g = document.documentElement;
t.logViewerID = _.uniqueId("log-viewer"), t.empty = !0;
var v, h;
"ReplicationController" === t.object.kind ? (v = "deploymentconfigs/log", h = r("annotation")(t.object, "deploymentConfig")) : (v = i.kindToResource(t.object.kind) + "/log", h = t.object.metadata.name);
var y, b = function() {
t.$apply(function() {
var e = l.getBoundingClientRect();
t.fixedHeight ? t.showScrollLinks = e && e.height > t.fixedHeight : t.showScrollLinks = e && (e.top < 0 || e.bottom > g.clientHeight);
});
}, S = !1, C = function() {
S ? S = !1 : t.$evalAsync(function() {
t.autoScrollActive = !1;
});
}, w = function() {
u ? $(u).on("scroll", C) : m.on("scroll", C);
}, P = function() {
t.fixedHeight || p.affix({
target: window,
offset: {
top: t.followAffixTop || 0
}
});
}, j = function() {
return $("#" + t.logViewerID + " .log-view-output");
}, k = function(e) {
var n = j(), r = n.offset().top;
if (!(r < 0)) {
var a = $(".ellipsis-pulser").outerHeight(!0), o = t.fixedHeight ? t.fixedHeight : Math.floor($(window).height() - r - a);
t.chromeless || t.fixedHeight || (o -= 40), e ? n.animate({
"min-height": o + "px"
}, "fast") : n.css("min-height", o + "px"), t.fixedHeight && n.css("max-height", o);
}
}, I = function() {
if (!y) {
var e = function() {
clearInterval(y), y = null, t.$evalAsync(function() {
t.sized = !0;
});
}, n = 0;
y = setInterval(function() {
n > 10 ? e() : (n++, j().is(":visible") && (k(), e()));
}, 100);
}
}, R = _.debounce(function() {
k(!0), b(), C();
}, 100);
m.on("resize", R);
var E, T = function() {
S = !0, d.scrollBottom(u);
}, N = document.createDocumentFragment(), D = _.debounce(function() {
l.appendChild(N), N = document.createDocumentFragment(), t.autoScrollActive && T(), t.showScrollLinks || b();
}, 100, {
maxWait: 300
}), A = function(e) {
var t = a.defer();
return E ? (E.onClose(function() {
t.resolve();
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
}, B = function() {
A().then(function() {
t.$evalAsync(function() {
if (t.run) {
angular.extend(t, {
loading: !0,
autoScrollActive: !0,
largeLog: !1,
limitReached: !1,
showScrollLinks: !1,
state: ""
});
var e = angular.extend({
follow: !0,
tailLines: 5e3,
limitBytes: 10485760
}, t.options), n = 0, r = function(e) {
n++, N.appendChild(f(n, e)), D();
>>>>>>> Add Browse Catalog to Project context view.
};
s.create(y, null, t, r).then(function(e) {
d.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully created."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: g(t)
});
});
}, f = function(t) {
e.disableInputs = !0, (t = angular.copy(t)).metadata.labels = p.mapEntries(p.compactEntries(e.labels)), t.spec.minReplicas = e.autoscaling.minReplicas, t.spec.maxReplicas = e.autoscaling.maxReplicas, t.spec.targetCPUUtilizationPercentage = e.autoscaling.targetCPU || e.autoscaling.defaultTargetCPU || null, s.update(y, t.metadata.name, t, r).then(function(e) {
d.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully updated."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: g(t)
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var g = i("humanizeKind");
n.matchKind = function(e, t) {
return -1 !== g(e).toLowerCase().indexOf(t.toLowerCase());
}, s.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.resources = e.select(n.unfilteredResources), u();
});
<<<<<<< HEAD
});
} ]), angular.module("openshiftConsole").controller("PersistentVolumeClaimController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", function(e, t, n, a, r) {
e.projectName = t.project, e.pvc = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Persistent Volume Claims",
link: "project/" + t.project + "/browse/storage"
}, {
title: t.pvc
} ];
var o = [], i = function(t, n) {
e.pvc = t, e.loaded = !0, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This persistent volume claim has been deleted."
>>>>>>> Patternfly vertical navigation and project bar
});
var m = function(e) {
if (e) {
var t = l.kindToResourceGroupVersion(e), n = l.apiInfo(t);
return !n || !n.verbs || _.includes(n.verbs, "list");
}
};
n.getReturnURL = function() {
var t = _.get(n, "kindSelector.selected.kind");
return t ? URI.expand("project/{projectName}/browse/other?kind={kind}&group={group}", {
projectName: e.project,
kind: t,
group: _.get(n, "kindSelector.selected.group", "")
}).toString() : "";
};
var p;
n.isDuplicateKind = function(e) {
return p || (p = _.countBy(n.kinds, "kind")), p[e] > 1;
};
var g = function(e, t) {
return _.some(n.kinds, function(n) {
return n.kind === e && (!n.group && !t || n.group === t);
=======
}, S = {};
S = "HorizontalPodAutoscaler" === n.kind ? {
resource: "horizontalpodautoscalers",
group: "autoscaling",
version: "v1"
} : {
resource: a.kindToResource(n.kind),
group: n.group
}, s.get(S, n.name, r).then(function(a) {
if (e.labels = _.map(_.get(a, "metadata.labels", {}), function(e, t) {
return {
name: t,
value: e
};
}), "HorizontalPodAutoscaler" === n.kind) e.targetKind = _.get(a, "spec.scaleTargetRef.kind"), e.targetName = _.get(a, "spec.scaleTargetRef.name"), _.assign(e.autoscaling, {
minReplicas: _.get(a, "spec.minReplicas"),
maxReplicas: _.get(a, "spec.maxReplicas"),
targetCPU: _.get(a, "spec.targetCPUUtilizationPercentage")
}), e.disableInputs = !1, e.save = function() {
f(a);
}, e.breadcrumbs = i.getBreadcrumbs({
name: e.targetName,
kind: e.targetKind,
namespace: n.project,
project: t,
subpage: "Autoscale"
}); else {
e.breadcrumbs = i.getBreadcrumbs({
object: a,
project: t,
subpage: "Autoscale"
}), e.save = m;
var o = {}, l = function() {
var n = _.get(a, "spec.template.spec.containers", []);
e.showCPURequestWarning = !c.hasCPURequest(n, o, t);
};
s.list(b, r).then(function(e) {
o = e.by("metadata.name"), l();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
};
o.get(e.project).then(_.spread(function(t, r) {
n.kinds = _.filter(n.kinds, function(e) {
var t = {
resource: l.kindToResource(e.kind),
group: e.group || ""
};
return !!m(e) && (!!a.checkResource(t.resource) && a.canI(t, "list", n.projectName));
}), n.project = t, n.context = r, n.kindSelector.disabled = !1, e.kind && g(e.kind, e.group) && (_.set(n, "kindSelector.selected.kind", e.kind), _.set(n, "kindSelector.selected.group", e.group || ""));
})), n.loadKind = d, n.$watch("kindSelector.selected", function() {
n.alerts = {}, d();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
var f = i("humanizeKind");
n.matchKind = function(e, t) {
return -1 !== f(e).toLowerCase().indexOf(t.toLowerCase());
}, s.onActiveFiltersChanged(function(e) {
<<<<<<< HEAD
n.$evalAsync(function() {
n.resources = e.select(n.unfilteredResources), u();
});
});
} ]), angular.module("openshiftConsole").controller("PersistentVolumeClaimController", [ "$filter", "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", function(e, t, n, r, a, o) {
t.projectName = n.project, t.pvc = null, t.alerts = {}, t.renderOptions = t.renderOptions || {}, t.renderOptions.hideFilterWidget = !0, t.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.project + "/browse/storage"
}, {
title: n.pvc
} ], t.pvcVersion = r.getPreferredVersion("persistentvolumeclaims"), t.eventsVersion = r.getPreferredVersion("events");
var i = [], s = function(e, n) {
t.pvc = e, t.loaded = !0, "DELETED" === n && (t.alerts.deleted = {
=======
n.$apply(function() {
n.resources = e.select(n.unfilteredResources), u();
});
});
} ]), angular.module("openshiftConsole").controller("PersistentVolumeClaimController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", function(e, t, n, a, r) {
e.projectName = t.project, e.pvc = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Persistent Volume Claims",
link: "project/" + t.project + "/browse/storage"
}, {
title: t.pvc
} ];
var o = [], i = function(t, n) {
e.pvc = t, e.loaded = !0, "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "warning",
message: "This persistent volume claim has been deleted."
});
};
<<<<<<< HEAD
o.get(n.project).then(_.spread(function(r, o) {
t.project = r, t.projectContext = o, a.get(t.pvcVersion, n.pvc, o, {
errorNotification: !1
}).then(function(e) {
s(e), i.push(a.watchObject(t.pvcVersion, n.pvc, o, s));
}, function(n) {
t.loaded = !0, t.alerts.load = {
type: "error",
message: "The persistent volume claim details could not be loaded.",
details: e("getErrorDetails")(n)
};
}), t.$on("$destroy", function() {
a.unwatchAll(i);
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("SetLimitsController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "LimitRangesService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
if (r.kind && r.name) {
var p = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(p, r.kind)) {
var g = e("humanizeKind"), f = g(r.kind, !0) + " " + r.name;
a.name = r.name, "ReplicationController" !== r.kind && "ReplicaSet" !== r.kind || (a.showPodWarning = !0), a.renderOptions = {
hideFilterWidget: !0
}, a.breadcrumbs = s.getBreadcrumbs({
name: r.name,
kind: r.kind,
namespace: r.project,
subpage: "Edit Resource Limits"
});
var v = e("getErrorDetails"), h = function(e, t) {
=======
a.get(t.project).then(_.spread(function(a, s) {
e.project = a, e.projectContext = s, n.get("persistentvolumeclaims", t.pvc, s, {
errorNotification: !1
}).then(function(e) {
i(e), o.push(n.watchObject("persistentvolumeclaims", t.pvc, s, i));
}, function(t) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The persistent volume claim details could not be loaded.",
details: r("getErrorDetails")(t)
};
}), e.$on("$destroy", function() {
n.unwatchAll(o);
});
}));
} ]), angular.module("openshiftConsole").controller("SetLimitsController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "LimitRangesService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
if (a.kind && a.name) {
var p = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(p, a.kind)) {
var f = e("humanizeKind"), g = f(a.kind, !0) + " " + a.name;
r.name = a.name, "ReplicationController" !== a.kind && "ReplicaSet" !== a.kind || (r.showPodWarning = !0), r.renderOptions = {
hideFilterWidget: !0
}, r.breadcrumbs = s.getBreadcrumbs({
name: a.name,
kind: a.kind,
namespace: a.project,
subpage: "Edit Resource Limits"
});
<<<<<<< HEAD
var h = e("getErrorDetails"), v = function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var v = e("getErrorDetails"), h = function(e, t) {
>>>>>>> Add SVG icons
d.addNotification({
id: "set-compute-limits-error",
=======
} else u.toErrorPage("Autoscaling not supported for kind " + n.kind + ".");
} else u.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditHealthChecksController", [ "$filter", "$location", "$routeParams", "$scope", "AuthorizationService", "BreadcrumbsService", "APIService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
if (n.kind && n.name) {
var d = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(d, n.kind)) {
r.name = n.name, r.resourceURL = c.resourceURL(r.name, n.kind, n.project), r.breadcrumbs = o.getBreadcrumbs({
name: n.name,
kind: n.kind,
namespace: n.project,
subpage: "Edit Health Checks"
}), r.previousProbes = {};
var m = e("getErrorDetails"), p = e("upperFirst"), f = function(e, t) {
l.addNotification({
id: "add-health-check-error",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "error",
message: e,
details: t
<<<<<<< HEAD
});
<<<<<<< HEAD
}, y = function() {
t.url(a.resourceURL);
}, b = function() {
d.hideNotification("set-compute-limits-error");
};
a.cancel = y, a.$on("$destroy", b);
var S = o.getPreferredVersion("limitranges");
m.get(r.project).then(_.spread(function(e, t) {
a.hideCPU = l.hasClusterResourceOverrides(e);
var n = {
resource: o.kindToResource(r.kind),
group: r.group
};
if (i.canI(n, "update", r.project)) {
c.get(n, a.name, t).then(function(r) {
var o = a.object = angular.copy(r);
a.breadcrumbs = s.getBreadcrumbs({
object: o,
project: e,
subpage: "Edit Resource Limits"
}), a.resourceURL = u.resourceURL(o), a.containers = _.get(o, "spec.template.spec.containers"), a.save = function() {
a.disableInputs = !0, b(), c.update(n, a.name, o, t).then(function() {
d.addNotification({
=======
}, g = function() {
t.url(r.resourceURL);
};
r.cancel = g;
var v = function() {
l.hideNotification("add-health-check-error");
};
r.$on("$destroy", v), u.get(n.project).then(_.spread(function(t, u) {
var d = e("humanizeKind")(n.kind) + ' "' + r.name + '"', h = {
resource: i.kindToResource(n.kind),
group: n.group
};
a.canI(h, "update", n.project) ? s.get(h, r.name, u).then(function(e) {
var a = r.object = angular.copy(e);
r.breadcrumbs = o.getBreadcrumbs({
object: a,
project: t,
subpage: "Edit Health Checks"
}), r.containers = _.get(a, "spec.template.spec.containers"), r.addProbe = function(e, t) {
e[t] = _.get(r.previousProbes, [ e.name, t ], {}), r.form.$setDirty();
}, r.removeProbe = function(e, t) {
_.set(r.previousProbes, [ e.name, t ], e[t]), delete e[t], r.form.$setDirty();
}, r.save = function() {
r.disableInputs = !0, v(), s.update(i.kindToResource(n.kind), r.name, a, u).then(function() {
l.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "success",
message: f + " was updated."
}), y();
}, function(e) {
<<<<<<< HEAD
a.disableInputs = !1, h(f + " could not be updated.", v(e));
});
};
}, function(e) {
h(f + " could not be loaded.", v(e));
=======
});
}, y = function() {
t.url(r.resourceURL);
}, b = function() {
d.hideNotification("set-compute-limits-error");
};
r.cancel = y, r.$on("$destroy", b), m.get(a.project).then(_.spread(function(e, t) {
var n = {
resource: o.kindToResource(a.kind),
group: a.group
};
if (i.canI(n, "update", a.project)) {
c.get(n, r.name, t).then(function(a) {
var o = r.object = angular.copy(a);
r.breadcrumbs = s.getBreadcrumbs({
object: o,
project: e,
subpage: "Edit Resource Limits"
}), r.resourceURL = u.resourceURL(o), r.containers = _.get(o, "spec.template.spec.containers"), r.save = function() {
r.disableInputs = !0, b(), c.update(n, r.name, o, t).then(function() {
d.addNotification({
type: "success",
message: g + " was updated."
}), y();
}, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
r.disableInputs = !1, v(f + " could not be updated.", h(e));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r.disableInputs = !1, v(g + " could not be updated.", h(e));
>>>>>>> Patternfly vertical navigation and project bar
=======
r.disableInputs = !1, h(g + " could not be updated.", v(e));
>>>>>>> Add SVG icons
});
var m = function() {
a.hideCPU || (a.cpuProblems = l.validatePodLimits(a.limitRanges, "cpu", a.containers, e)), a.memoryProblems = l.validatePodLimits(a.limitRanges, "memory", a.containers, e);
};
<<<<<<< HEAD
c.list(S, t).then(function(e) {
a.limitRanges = e.by("metadata.name"), _.isEmpty(a.limitRanges) || a.$watch("containers", m, !0);
});
} else u.toErrorPage("You do not have authority to update " + g(r.kind) + " " + r.name + ".", "access_denied");
}));
} else u.toErrorPage("Health checks are not supported for kind " + r.kind + ".");
} else u.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditBuildConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "SOURCE_URL_PATTERN", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
e.projectName = r.project, e.buildConfig = null, e.alerts = {}, e.sourceURLPattern = d, e.options = {}, e.jenkinsfileOptions = {
=======
}, function(e) {
h(g + " could not be loaded.", v(e));
});
var m = function() {
r.hideCPU || (r.cpuProblems = l.validatePodLimits(r.limitRanges, "cpu", r.containers, e)), r.memoryProblems = l.validatePodLimits(r.limitRanges, "memory", r.containers, e);
};
c.list("limitranges", t).then(function(e) {
r.limitRanges = e.by("metadata.name"), _.isEmpty(r.limitRanges) || r.$watch("containers", m, !0);
=======
r.disableInputs = !1, f(p(d) + " could not be updated.", m(e));
});
};
}, function(e) {
f(p(d) + " could not be loaded.", m(e));
}) : c.toErrorPage("You do not have authority to update " + d + ".", "access_denied");
}));
} else c.toErrorPage("Health checks are not supported for kind " + n.kind + ".");
} else c.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditRouteController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "RoutesService", function(e, t, n, r, a, o, i, s, c, l, u) {
r.renderOptions = {
hideFilterWidget: !0
}, r.projectName = n.project, r.routeName = n.route, r.loading = !0, r.routeURL = s.resourceURL(r.routeName, "Route", r.projectName), r.breadcrumbs = [ {
title: "Routes",
link: "project/" + r.projectName + "/browse/routes"
}, {
title: r.routeName,
link: r.routeURL
}, {
title: "Edit"
} ];
var d = function() {
c.hideNotification("edit-route-error");
};
r.$on("$destroy", d);
var m = function() {
t.path(r.routeURL);
};
r.cancel = m;
var p = a.getPreferredVersion("routes"), f = a.getPreferredVersion("services");
l.get(n.project).then(_.spread(function(t, a) {
if (r.project = t, o.canI("routes", "update", n.project)) {
var l, g = e("orderByDisplayName"), v = function() {
s.toErrorPage('Editing routes with non-service targets is unsupported. You can edit the route with the "Edit YAML" action instead.');
};
i.get(p, r.routeName, a).then(function(e) {
if ("Service" === e.spec.to.kind) {
l = angular.copy(e);
var t = _.get(l, "spec.host");
"Subdomain" === _.get(l, "spec.wildcardPolicy") && (t = "*." + u.getSubdomain(l)), r.routing = {
host: t,
wildcardPolicy: _.get(l, "spec.wildcardPolicy"),
path: _.get(l, "spec.path"),
targetPort: _.get(l, "spec.port.targetPort"),
tls: angular.copy(_.get(l, "spec.tls"))
}, i.list(f, a).then(function(e) {
r.loading = !1;
var t = e.by("metadata.name");
r.routing.to = l.spec.to, r.routing.alternateServices = [], _.each(_.get(l, "spec.alternateBackends"), function(e) {
if ("Service" !== e.kind) return v(), !1;
r.routing.alternateServices.push(e);
}), r.services = g(t);
});
} else v();
}, function() {
s.toErrorPage("Could not load route " + r.routeName + ".");
});
var h = function() {
var e = angular.copy(l), t = _.get(r, "routing.to.name");
_.set(e, "spec.to.name", t);
var n = _.get(r, "routing.to.weight");
isNaN(n) || _.set(e, "spec.to.weight", n), e.spec.path = r.routing.path;
var a = r.routing.targetPort;
a ? _.set(e, "spec.port.targetPort", a) : delete e.spec.port, _.get(r, "routing.tls.termination") ? (e.spec.tls = r.routing.tls, "passthrough" === e.spec.tls.termination && (delete e.spec.path, delete e.spec.tls.certificate, delete e.spec.tls.key, delete e.spec.tls.caCertificate), "reencrypt" !== e.spec.tls.termination && delete e.spec.tls.destinationCACertificate) : delete e.spec.tls;
var o = _.get(r, "routing.alternateServices", []);
return _.isEmpty(o) ? delete e.spec.alternateBackends : e.spec.alternateBackends = _.map(o, function(e) {
return {
kind: "Service",
name: e.name,
weight: e.weight
};
}), e;
};
r.updateRoute = function() {
if (r.form.$valid) {
d(), r.disableInputs = !0;
var t = h();
i.update(p, r.routeName, t, a).then(function() {
c.addNotification({
type: "success",
message: "Route " + r.routeName + " was successfully updated."
}), m();
}, function(t) {
r.disableInputs = !1, c.addNotification({
type: "error",
id: "edit-route-error",
message: "An error occurred updating route " + r.routeName + ".",
details: e("getErrorDetails")(t)
});
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
} else u.toErrorPage("You do not have authority to update " + f(a.kind) + " " + a.name + ".", "access_denied");
}));
<<<<<<< HEAD
<<<<<<< HEAD
} else u.toErrorPage("Health checks are not supported for kind " + a.kind + ".");
} else u.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditBuildConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "SOURCE_URL_PATTERN", "SecretsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
e.projectName = a.project, e.buildConfig = null, e.alerts = {}, e.sourceURLPattern = d, e.options = {}, e.jenkinsfileOptions = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "path"
}, e.selectTypes = {
ImageStreamTag: "Image Stream Tag",
ImageStreamImage: "Image Stream Image",
DockerImage: "Docker Image Repository"
}, e.buildFromTypes = [ "ImageStreamTag", "ImageStreamImage", "DockerImage" ], e.pushToTypes = [ "ImageStreamTag", "DockerImage", "None" ], e.jenkinsfileTypes = [ {
id: "path",
title: "From Source Repository"
}, {
id: "inline",
title: "Inline"
} ], e.view = {
advancedOptions: !1,
hasHooks: !1
<<<<<<< HEAD
<<<<<<< HEAD
}, e.breadcrumbs = [], r.isPipeline ? (e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + r.project + "/browse/pipelines"
}), e.breadcrumbs.push({
<<<<<<< HEAD
title: r.buildconfig,
link: "project/" + r.project + "/browse/pipelines/" + r.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + r.project + "/browse/builds"
}), e.breadcrumbs.push({
title: r.buildconfig,
link: "project/" + r.project + "/browse/builds/" + r.buildconfig
})), e.breadcrumbs.push({
title: r.isPipeline ? "Edit Pipelines" : "Edit Builds"
=======
}, e.breadcrumbs = [ {
title: a.project,
link: "project/" + a.project
} ], a.isPipeline ? (e.breadcrumbs.push({
=======
}, e.breadcrumbs = [], a.isPipeline ? (e.breadcrumbs.push({
>>>>>>> Patternfly vertical navigation and project bar
title: "Pipelines",
link: "project/" + a.project + "/browse/pipelines"
}), e.breadcrumbs.push({
title: a.buildconfig,
link: "project/" + a.project + "/browse/pipelines/" + a.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + a.project + "/browse/builds"
}), e.breadcrumbs.push({
title: a.buildconfig,
link: "project/" + a.project + "/browse/builds/" + a.buildconfig
})), e.breadcrumbs.push({
title: a.isPipeline ? "Edit Pipelines" : "Edit Builds"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}), e.imageOptions = {
from: {},
to: {},
fromSource: {}
}, e.sources = {
binary: !1,
dockerfile: !1,
git: !1,
images: !1,
contextDir: !1,
none: !0
}, e.triggers = {
<<<<<<< HEAD
webhookTriggers: [],
imageChangeTriggers: [],
builderImageChangeTrigger: {},
configChangeTrigger: {}
=======
githubWebhooks: [],
gitlabWebhooks: [],
bitbucketWebhooks: [],
genericWebhooks: [],
imageChangeTriggers: [],
builderImageChangeTrigger: {},
configChangeTrigger: {}
}, e.createTriggerSelect = {
selectedType: "",
options: [ {
type: "github",
label: "GitHub"
=======
title: e.category.label
}), u.get(r.project).then(_.spread(function(t, n) {
=======
=======
} ]), angular.module("openshiftConsole").controller("EditYAMLController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
if (r.kind && r.name) {
var m = t("humanizeKind");
e.alerts = {}, e.name = r.name, e.resourceURL = l.resourceURL(e.name, r.kind, r.project), e.breadcrumbs = [ {
title: r.name,
link: r.returnURL
}, {
title: "Edit YAML"
} ];
var p = function() {
e.modified = !1, r.returnURL ? n.url(r.returnURL) : a.history.back();
}, f = [];
d.get(r.project).then(_.spread(function(n, a) {
var s = {
resource: o.kindToResource(r.kind),
group: r.group
};
i.canI(s, "update", r.project) ? (c.get(s, e.name, a, {
errorNotification: !1
}).then(function(n) {
var i = n;
_.set(e, "updated.resource", angular.copy(n)), e.$watch("updated.resource", function(t, n) {
t !== n && (e.modified = !0);
});
var l = function(e) {
return _.get(e, "metadata.resourceVersion");
};
e.save = function() {
var n = e.updated.resource;
if (e.modified = !1, n.kind === i.kind) {
var a = o.objectToResourceGroupVersion(i), s = o.objectToResourceGroupVersion(n);
s ? s.group === a.group ? o.apiInfo(s) ? (e.updatingNow = !0, c.update(a, i.metadata.name, n, {
namespace: i.metadata.namespace
}).then(function(t) {
var a = _.get(n, "metadata.resourceVersion");
if (_.get(t, "metadata.resourceVersion") === a) return e.alerts["no-changes-applied"] = {
type: "warning",
message: "No changes were applied to " + m(r.kind) + " " + r.name + ".",
details: "Make sure any new fields you may have added are supported API fields."
}, void (e.updatingNow = !1);
u.addNotification({
type: "success",
message: m(r.kind, !0) + " " + r.name + " was successfully updated."
}), p();
}, function(n) {
e.updatingNow = !1, e.error = {
message: t("getErrorDetails")(n)
};
})) : e.error = {
message: o.unsupportedObjectKindOrVersion(n)
} : e.error = {
message: "Cannot change resource group (original: " + (a.group || "<none>") + ", modified: " + (s.group || "<none>") + ")."
} : e.error = {
message: o.invalidObjectKindOrVersion(n)
};
} else e.error = {
message: "Cannot change resource kind (original: " + i.kind + ", modified: " + (n.kind || "<unspecified>") + ")."
};
}, e.cancel = function() {
p();
}, f.push(c.watchObject(s, e.name, a, function(t, n) {
e.resourceChanged = l(t) !== l(i), e.resourceDeleted = "DELETED" === n;
}, {
errorNotification: !1
}));
}, function(e) {
l.toErrorPage("Could not load " + m(r.kind) + " '" + r.name + "'. " + t("getErrorDetails")(e));
}), e.$on("$destroy", function() {
c.unwatchAll(f);
})) : l.toErrorPage("You do not have authority to update " + m(r.kind) + " " + r.name + ".", "access_denied");
}));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("BrowseCategoryController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "Constants", "DataService", "LabelFilter", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
e.projectName = a.project;
var d = function(t, n) {
var r;
return _.some(t, function(t) {
if (r = _.find(t.items, {
id: n
})) {
e.category = r;
var a = _.get(r, "subcategories", []);
return e.subcategories = [ {
id: "",
label: ""
} ].concat(a), !0;
}
return !1;
}), r;
}, m = i.CATALOG_CATEGORIES, p = "none" === a.category ? "" : a.category;
if (e.category = d(m, p), e.category) {
var f;
<<<<<<< HEAD
!r.subcategory || (e.category, p = "none" === r.subcategory ? "" : r.subcategory, f = _.get(e.category, "subcategories", []), e.category = d(f, p), e.category) ? (e.alerts = e.alerts || {}, u.get(r.project).then(_.spread(function(t, n) {
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
=======
!a.subcategory || (e.category, p = "none" === a.subcategory ? "" : a.subcategory, f = _.get(e.category, "subcategories", []), e.category = d(f, p), e.category) ? (e.alerts = e.alerts || {}, u.get(a.project).then(_.spread(function(t, n) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.project = t, e.context = n, s.list("imagestreams", {
namespace: "openshift"
}).then(function(t) {
e.openshiftImageStreams = t.by("metadata.name");
}), s.list("templates", {
namespace: "openshift"
}, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.openshiftTemplates = t.by("metadata.name");
}), "openshift" === a.project ? (e.projectImageStreams = [], e.projectTemplates = []) : (s.list("imagestreams", n).then(function(t) {
e.projectImageStreams = t.by("metadata.name");
}), s.list("templates", n, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.projectTemplates = t.by("metadata.name");
}));
<<<<<<< HEAD
}))) : l.toErrorPage("Catalog category " + r.category + "/" + r.subcategory + " not found.");
} else l.toErrorPage("Catalog category " + r.category + " not found.");
} ]), angular.module("openshiftConsole").controller("CreateFromImageController", [ "$scope", "$filter", "$parse", "$q", "$routeParams", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "HPAService", "ImagesService", "LimitRangesService", "Logger", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "SOURCE_URL_PATTERN", "SecretsService", "TaskList", "failureObjectNameFilter", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w) {
var k = t("displayName"), P = t("humanize");
e.projectName = r.project, e.sourceURLPattern = y;
var j = r.imageStream;
if (j) if (r.imageTag) {
<<<<<<< HEAD
var R = r.displayName || j;
e.displayName = r.displayName, e.advancedOptions = "true" === r.advanced, e.breadcrumbs = [ {
title: "Add to Project",
link: "project/" + e.projectName + "/create"
>>>>>>> Bug 1505281 - Improve import YAML results message
}, {
type: "gitlab",
label: "GitLab"
}, {
type: "bitbucket",
label: "Bitbucket"
}, {
type: "generic",
label: "Generic"
} ]
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, e.runPolicyTypes = [ "Serial", "Parallel", "SerialLatestOnly" ], e.buildHookTypes = [ {
id: "command",
label: "Command"
}, {
id: "script",
label: "Shell Script"
}, {
id: "args",
label: "Arguments to default image entry point"
}, {
id: "commandArgs",
label: "Command with arguments"
}, {
id: "scriptArgs",
label: "Shell script with arguments"
} ], e.buildHookSelection = {
type: {}
}, e.getArgumentsDescription = function() {
switch (_.get(e, "buildHookSelection.type.id", "")) {
case "args":
return "Enter the arguments that will be appended to the default image entry point.";

case "commandArgs":
return "Enter the arguments that will be appended to the command.";

case "scriptArgs":
return "Enter the arguments that will be appended to the script.";
}
return null;
};
<<<<<<< HEAD
var g = function() {
<<<<<<< HEAD
var t = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.args")), n = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.command")), r = !!_.get(e, "buildConfig.spec.postCommit.script");
e.view.hasHooks = t || n || r;
var a;
a = t && n ? "commandArgs" : t && r ? "scriptArgs" : t ? "args" : r ? "script" : "command", e.buildHookSelection.type = _.find(e.buildHookTypes, {
id: a
=======
=======
var f = function() {
>>>>>>> Patternfly vertical navigation and project bar
var t = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.args")), n = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.command")), a = !!_.get(e, "buildConfig.spec.postCommit.script");
e.view.hasHooks = t || n || a;
var r;
r = t && n ? "commandArgs" : t && a ? "scriptArgs" : t ? "args" : a ? "script" : "command", e.buildHookSelection.type = _.find(e.buildHookTypes, {
id: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.displayName = r.displayName, e.advancedOptions = "true" === r.advanced;
var R = {
=======
}))) : l.toErrorPage("Catalog category " + a.category + "/" + a.subcategory + " not found.");
} else l.toErrorPage("Catalog category " + a.category + " not found.");
} ]), angular.module("openshiftConsole").controller("CreateFromImageController", [ "$scope", "$filter", "$parse", "$q", "$routeParams", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "HPAService", "ImagesService", "LimitRangesService", "Logger", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "SOURCE_URL_PATTERN", "SecretsService", "TaskList", "failureObjectNameFilter", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w) {
var P = t("displayName"), k = t("humanize");
e.projectName = a.project, e.sourceURLPattern = y;
var j = a.imageStream;
if (j) if (a.imageTag) {
e.displayName = a.displayName, e.advancedOptions = "true" === a.advanced;
var I = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
name: "app",
value: ""
}, I = t("orderByDisplayName"), E = t("getErrorDetails"), T = {}, N = function() {
g.hideNotification("create-builder-list-config-maps-error"), g.hideNotification("create-builder-list-secrets-error"), _.each(T, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || g.hideNotification(e.id);
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
});
<<<<<<< HEAD
}, g = function() {
if (e.view.hasHooks) switch (e.buildHookSelection.type.id) {
case "script":
delete e.updatedBuildConfig.spec.postCommit.command, delete e.updatedBuildConfig.spec.postCommit.args;
break;

case "command":
delete e.updatedBuildConfig.spec.postCommit.script, delete e.updatedBuildConfig.spec.postCommit.args;
break;

case "args":
delete e.updatedBuildConfig.spec.postCommit.script, delete e.updatedBuildConfig.spec.postCommit.command;
break;

case "scriptArgs":
delete e.updatedBuildConfig.spec.postCommit.command;
break;

case "commandArgs":
delete e.updatedBuildConfig.spec.postCommit.script;
} else delete e.updatedBuildConfig.spec.postCommit.command, delete e.updatedBuildConfig.spec.postCommit.args, delete e.updatedBuildConfig.spec.postCommit.script;
};
<<<<<<< HEAD
<<<<<<< HEAD
e.secrets = {};
<<<<<<< HEAD
<<<<<<< HEAD
var v = o.getPreferredVersion("buildconfigs"), h = o.getPreferredVersion("secrets"), y = [], b = t("buildStrategy"), S = t("orderByDisplayName"), C = t("getErrorDetails"), w = [], P = [];
e.valueFromObjects = [];
var j = function() {
var t;
e.buildConfig ? (t = c.resourceURL(e.buildConfig), n.path(t)) : a.history.back();
=======
=======
};
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
e.$on("$destroy", N), v.get(r.project).then(_.spread(function(t, n) {
e.project = t, r.sourceURI && (e.sourceURIinParams = !0);
var i = function() {
e.hideCPU || (e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], t)), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], t);
<<<<<<< HEAD
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
};
e.cancel = j;
var k = function() {
l.hideNotification("edit-build-config-error"), l.hideNotification("edit-build-config-conflict"), l.hideNotification("edit-build-config-deleted");
};
<<<<<<< HEAD
e.$on("$destroy", k), u.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, i.canI("buildconfigs", "update", r.project) ? (s.get(v, r.buildconfig, a, {
errorNotification: !1
}).then(function(t) {
e.buildConfig = t, g(), e.updatedBuildConfig = angular.copy(e.buildConfig), e.buildStrategy = b(e.updatedBuildConfig), e.strategyType = e.buildConfig.spec.strategy.type, e.envVars = e.buildStrategy.env || [], e.triggers = I(e.triggers, e.buildConfig.spec.triggers), e.sources = B(e.sources, e.buildConfig.spec.source), _.has(t, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile") && (e.jenkinsfileOptions.type = "inline"), i.canI(h, "list", r.project) && s.list(h, a).then(function(t) {
var n = m.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
=======
=======
};
c.list("limitranges", n).then(function(t) {
=======
e.$on("$destroy", N);
var D = i.getPreferredVersion("configmaps"), A = i.getPreferredVersion("limitranges"), $ = i.getPreferredVersion("imagestreams"), B = i.getPreferredVersion("imagestreamtags"), L = i.getPreferredVersion("secrets"), U = i.getPreferredVersion("resourcequotas"), O = i.getPreferredVersion("appliedclusterresourcequotas");
v.get(a.project).then(_.spread(function(t, n) {
e.project = t, a.sourceURI && (e.sourceURIinParams = !0);
var i = function() {
e.hideCPU || (e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], t)), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], t);
};
c.list(A, n).then(function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.limitRanges = t.by("metadata.name"), _.isEmpty(e.limitRanges) || e.$watch("container", i, !0);
});
var v, y, C = function() {
e.scaling.autoscale ? e.showCPURequestWarning = !l.hasCPURequest([ e.container ], e.limitRanges, t) : e.showCPURequestWarning = !1;
};
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
c.list("resourcequotas", n).then(function(e) {
v = e.by("metadata.name"), m.log("quotas", v);
}), c.list("appliedclusterresourcequotas", n).then(function(e) {
y = e.by("metadata.name"), m.log("cluster quotas", y);
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
<<<<<<< HEAD
R.value && R.value !== t || (R.value = e);
}), function(a) {
a.name = r.name, a.imageName = j, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
=======
I.value && I.value !== t || (I.value = e);
}), function(r) {
r.name = a.name, r.imageName = j, r.imageTag = a.imageTag, r.namespace = a.namespace, r.buildConfig = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
buildOnSourceChange: !0,
buildOnImageChange: !0,
buildOnConfigChange: !0,
secrets: {
gitSecret: [ {
name: ""
} ]
},
sourceUrl: a.sourceURI,
gitRef: a.sourceRef,
contextDir: a.contextDir
}, r.buildConfigEnvVars = [], r.deploymentConfig = {
deployOnNewImage: !0,
deployOnConfigChange: !0
}, r.DCEnvVarsFromImage, r.DCEnvVarsFromUser = [], r.routing = {
include: !0,
portOptions: []
<<<<<<< HEAD
}, a.labelArray = [ R ], a.annotations = {}, a.scaling = {
=======
}, r.labelArray = [ I ], r.annotations = {}, r.scaling = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
replicas: 1,
autoscale: !1,
autoscaleOptions: [ {
label: "Manual",
value: !1
}, {
label: "Automatic",
value: !0
} ]
}, r.container = {
resources: {}
}, r.cpuRequestCalculated = d.isRequestCalculated("cpu", t), r.cpuLimitCalculated = d.isLimitCalculated("cpu", t), r.memoryRequestCalculated = d.isRequestCalculated("memory", t), r.fillSampleRepo = function() {
var e;
(r.image || r.image.metadata || r.image.metadata.annotations) && (e = r.image.metadata.annotations, r.buildConfig.sourceUrl = e.sampleRepo || "", r.buildConfig.gitRef = e.sampleRef || "", r.buildConfig.contextDir = e.sampleContextDir || "", (e.sampleRef || e.sampleContextDir) && (r.advancedSourceOptions = !0));
}, r.usingSampleRepo = function() {
return r.buildConfig.sourceUrl === _.get(r, "image.metadata.annotations.sampleRepo");
}, p.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
var o = [], i = [];
e.valueFromObjects = [], c.list("configmaps", n, null, {
errorNotification: !1
}).then(function(t) {
o = I(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
}, function(e) {
403 !== e.code && g.addNotification({
id: "create-builder-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: E(e)
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
});
e.webhookSecrets = m.groupSecretsByType(t).webhook, e.webhookSecrets.unshift(""), e.secrets.secretsByType = _.each(r, function(e) {
e.unshift("");
}), D(), P = S(t.by("metadata.name")), e.valueFromObjects = w.concat(P);
});
var n = function(e, n) {
e.type = n && n.kind ? n.kind : "None";
var r = {}, a = "", o = "";
r = "ImageStreamTag" === e.type ? {
=======
var h = [], v = t("buildStrategy"), y = function() {
=======
var v = [], h = t("buildStrategy"), y = function() {
>>>>>>> Add SVG icons
var t;
e.buildConfig ? (t = c.resourceURL(e.buildConfig), n.path(t)) : r.history.back();
};
e.cancel = y;
var b = function() {
l.hideNotification("edit-build-config-error"), l.hideNotification("edit-build-config-conflict"), l.hideNotification("edit-build-config-deleted");
};
e.$on("$destroy", b), u.get(a.project).then(_.spread(function(n, r) {
e.project = n, e.context = r, i.canI("buildconfigs", "update", a.project) ? s.get("buildconfigs", a.buildconfig, r, {
errorNotification: !1
}).then(function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e.buildConfig = t, f(), e.updatedBuildConfig = angular.copy(e.buildConfig), e.buildStrategy = h(e.updatedBuildConfig), e.strategyType = e.buildConfig.spec.strategy.type, e.envVars = e.buildStrategy.env || [], e.triggers = C(e.triggers, e.buildConfig.spec.triggers), e.sources = I(e.sources, e.buildConfig.spec.source), _.has(t, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile") && (e.jenkinsfileOptions.type = "inline"), s.list("secrets", r).then(function(t) {
=======
e.buildConfig = t, f(), e.updatedBuildConfig = angular.copy(e.buildConfig), e.buildStrategy = h(e.updatedBuildConfig), e.strategyType = e.buildConfig.spec.strategy.type, e.envVars = e.buildStrategy.env || [], e.triggers = S(e.triggers, e.buildConfig.spec.triggers), e.sources = I(e.sources, e.buildConfig.spec.source), _.has(t, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile") && (e.jenkinsfileOptions.type = "inline"), s.list("secrets", r).then(function(t) {
>>>>>>> Adding label filter to ste secrets page
var n = m.groupSecretsByType(t), a = _.mapValues(n, function(e) {
=======
i = I(t.by("metadata.name")), e.valueFromObjects = i.concat(o);
var n = b.groupSecretsByType(t), a = _.mapValues(n, function(e) {
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
return _.map(e, "metadata.name");
});
e.secrets.secretsByType = _.each(a, function(e) {
=======
i = R(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
var n = b.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.secretsByType = _.each(r, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.unshift("");
}), k();
});
<<<<<<< HEAD
var n = function(e, n) {
e.type = n && n.kind ? n.kind : "None";
var a = {}, r = "", o = "";
a = "ImageStreamTag" === e.type ? {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
namespace: n.namespace || t.metadata.namespace,
imageStream: n.name.split(":")[0],
tagObject: {
tag: n.name.split(":")[1]
}
} : {
namespace: "",
imageStream: "",
tagObject: {
tag: ""
}
<<<<<<< HEAD
}, a = "ImageStreamImage" === e.type ? (n.namespace || t.metadata.namespace) + "/" + n.name : "", o = "DockerImage" === e.type ? n.name : "", e.imageStreamTag = r, e.imageStreamImage = a, e.dockerImage = o;
=======
}, r = "ImageStreamImage" === e.type ? (n.namespace || t.metadata.namespace) + "/" + n.name : "", o = "DockerImage" === e.type ? n.name : "", e.imageStreamTag = a, e.imageStreamImage = r, e.dockerImage = o;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
n(e.imageOptions.from, e.buildStrategy.from), n(e.imageOptions.to, e.updatedBuildConfig.spec.output.to), e.sources.images && (e.sourceImages = e.buildConfig.spec.source.images, 1 === _.size(e.sourceImages) ? (e.imageSourceTypes = angular.copy(e.buildFromTypes), n(e.imageOptions.fromSource, e.sourceImages[0].from), e.imageSourcePaths = _.map(e.sourceImages[0].paths, function(e) {
=======
}, function(e) {
403 !== e.code && g.addNotification({
id: "create-builder-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: E(e)
});
<<<<<<< HEAD
}), c.get("imagestreams", a.imageName, {
namespace: a.namespace || r.project
}).then(function(e) {
a.imageStream = e;
var t = a.imageTag;
c.get("imagestreamtags", e.metadata.name + ":" + t, {
namespace: a.namespace
=======
}), c.get($, r.imageName, {
namespace: r.namespace || a.project
}).then(function(e) {
r.imageStream = e;
var t = r.imageTag;
c.get(B, e.metadata.name + ":" + t, {
namespace: r.namespace
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).then(function(e) {
r.image = e.image, r.DCEnvVarsFromImage = u.getEnvironment(e);
var t = s.parsePorts(e.image);
_.isEmpty(t) ? (r.routing.include = !1, r.routing.portOptions = []) : (r.routing.portOptions = _.map(t, function(e) {
var t = s.getServicePort(e);
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
return {
name: e.sourcePath,
value: e.destinationDir
};
<<<<<<< HEAD
})) : (e.imageSourceFromObjects = [], e.sourceImages.forEach(function(t) {
e.imageSourceFromObjects.push(t.from);
<<<<<<< HEAD
<<<<<<< HEAD
}))), e.options.forcePull = !!e.buildStrategy.forcePull, "Docker" === e.strategyType && (e.options.noCache = !!e.buildConfig.spec.strategy.dockerStrategy.noCache, e.buildFromTypes.push("None")), y.push(s.watchObject(v, r.buildconfig, a, function(t, n) {
=======
}))), e.options.forcePull = !!e.buildStrategy.forcePull, "Docker" === e.strategyType && (e.options.noCache = !!e.buildConfig.spec.strategy.dockerStrategy.noCache, e.buildFromTypes.push("None")), h.push(s.watchObject("buildconfigs", a.buildconfig, r, function(t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}))), e.options.forcePull = !!e.buildStrategy.forcePull, "Docker" === e.strategyType && (e.options.noCache = !!e.buildConfig.spec.strategy.dockerStrategy.noCache, e.buildFromTypes.push("None")), v.push(s.watchObject("buildconfigs", a.buildconfig, r, function(t, n) {
>>>>>>> Add SVG icons
"MODIFIED" === n && l.addNotification({
id: "edit-build-config-conflict",
type: "warning",
message: "This build configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."
}), "DELETED" === n && (l.addNotification({
id: "edit-build-config-deleted",
type: "warning",
message: "This build configuration has been deleted."
}), e.disableInputs = !0), e.buildConfig = t;
})), e.loaded = !0;
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
<<<<<<< HEAD
message: "The build configuration details could not be loaded.",
details: "Reason: " + t("getErrorDetails")(n)
};
<<<<<<< HEAD
<<<<<<< HEAD
}), s.list("configmaps", a, null, {
errorNotification: !1
}).then(function(t) {
w = S(t.by("metadata.name")), e.valueFromObjects = w.concat(P);
}, function(e) {
403 !== e.code && l.addNotification({
id: "edit-build-config-list-config-maps-error",
=======
}), a.routing.targetPort = a.routing.portOptions[0].port);
=======
}), r.routing.targetPort = r.routing.portOptions[0].port);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, function() {
f.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
});
}, function() {
f.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
});
}(e);
var D, A = function() {
var t = {
started: "Creating application " + e.name + " in project " + e.projectDisplayName(),
success: "Created application " + e.name + " in project " + e.projectDisplayName(),
failure: "Failed to create " + e.name + " in project " + e.projectDisplayName()
}, o = {};
<<<<<<< HEAD
S.clear(), S.add(t, o, r.project, function() {
var t = a.defer();
return c.batch(D, n).then(function(n) {
var a = [], r = !1;
_.isEmpty(n.failure) ? a.push({
type: "success",
message: "All resources for application " + e.name + " were created successfully."
}) : (r = !0, n.failure.forEach(function(e) {
a.push({
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
=======
S.clear(), S.add(t, o, a.project, function() {
var t = r.defer();
return c.batch(V, n).then(function(n) {
var r = [], a = !1;
_.isEmpty(n.failure) ? r.push({
type: "success",
message: "All resources for application " + e.name + " were created successfully."
}) : (a = !0, n.failure.forEach(function(e) {
r.push({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "error",
message: "Could not load config maps.",
details: C(e)
});
})) : c.toErrorPage("You do not have authority to update build config " + r.buildconfig + ".", "access_denied");
}));
var I = function(n, r) {
function a(n, r) {
return t("imageObjectRef")(n, e.projectName) === t("imageObjectRef")(r, e.projectName);
}
var o = b(e.buildConfig).from;
return r.forEach(function(e) {
switch (e.type) {
case "Generic":
case "GitHub":
case "GitLab":
case "Bitbucket":
n.webhookTriggers.push({
lastTriggerType: e.type,
=======
}) : c.toErrorPage("You do not have authority to update build config " + a.buildconfig + ".", "access_denied");
}));
var S = function(n, a) {
function r(n, a) {
return t("imageObjectRef")(n, e.projectName) === t("imageObjectRef")(a, e.projectName);
}
var o = h(e.buildConfig).from;
return a.forEach(function(e) {
switch (e.type) {
case "Generic":
n.genericWebhooks.push({
disabled: !1,
data: e
=======
message: "Cannot create " + P(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), n.success.forEach(function(e) {
r.push({
type: "success",
message: "Created " + P(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Bug 1505281 - Improve import YAML results message
});
<<<<<<< HEAD
break;

case "GitHub":
n.githubWebhooks.push({
disabled: !1,
data: e
});
<<<<<<< HEAD
break;

case "GitLab":
n.gitlabWebhooks.push({
disabled: !1,
data: e
=======
})), t.resolve({
alerts: r,
hasErrors: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
break;

case "Bitbucket":
n.bitbucketWebhooks.push({
disabled: !1,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
data: e
=======
}, B = function(e) {
=======
}), t.promise;
}), f.toNextSteps(e.name, e.projectName, {
usingSampleRepo: e.usingSampleRepo()
});
}, $ = function(e) {
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
o.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
message: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
}).result.then(A);
}, B = function(t) {
N(), T = t.quotaAlerts || [], e.nameTaken || _.some(T, {
type: "error"
}) ? (e.disableInputs = !1, _.each(T, function(e) {
e.id = _.uniqueId("create-builder-alert-"), g.addNotification(e);
})) : _.isEmpty(T) ? A() : ($(T), e.disableInputs = !1);
};
e.projectDisplayName = function() {
return k(this.project) || this.projectName;
}, e.createApp = function() {
e.disableInputs = !0, N(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser), e.labels = w.mapEntries(w.compactEntries(e.labelArray));
var t = s.generate(e);
<<<<<<< HEAD
A = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), A.push(e));
>>>>>>> Bug 1505281 - Improve import YAML results message
});
<<<<<<< HEAD
break;

case "ImageChange":
var t = e.imageChange.from;
t || (t = o);
<<<<<<< HEAD
var r = {
present: !0,
data: e
};
a(t, o) ? n.builderImageChangeTrigger = r : n.imageChangeTriggers.push(r);
=======
var a = {
present: !0,
data: e
=======
D = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), D.push(e));
});
var a = s.ifResourcesDontExist(D, e.projectName), r = h.getLatestQuotaAlerts(D, n), o = function(t) {
return e.nameTaken = t.nameTaken, r;
};
a.then(o, o).then(B, B);
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
=======
var r = s.ifResourcesDontExist(V, e.projectName), a = h.getLatestQuotaAlerts(V, n), o = function(t) {
return e.nameTaken = t.nameTaken, a;
};
r.then(o, o).then(M, M);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
r(t, o) ? n.builderImageChangeTrigger = a : n.imageChangeTriggers.push(a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
break;

case "ConfigChange":
n.configChangeTrigger = {
present: !0,
data: e
};
<<<<<<< HEAD
=======
} else f.toErrorPage("Cannot create from source: a base image tag was not specified"); else f.toErrorPage("Cannot create from source: a base image was not specified");
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$scope", "$http", "$routeParams", "DataService", "$q", "$location", "TaskList", "$parse", "Navigate", "Logger", "$filter", "imageObjectRefFilter", "failureObjectNameFilter", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
u("displayName");
var f = [];
e.alerts = [], e.loginBaseUrl = a.openshiftAPIBaseUrl(), e.buildConfigs = {}, e.projectName = n.project, e.fromSampleRepo = n.fromSample, e.name = n.name, p.get(n.project).then(_.spread(function(t, r) {
e.project = t, f.push(a.watch("buildconfigs", r, function(t) {
e.buildConfigs = t.by("metadata.name"), e.createdBuildConfig = e.buildConfigs[n.name], l.log("buildconfigs (subscribe)", e.buildConfigs);
})), e.$on("$destroy", function() {
a.unwatchAll(f);
});
}));
} ]), angular.module("openshiftConsole").controller("NewFromTemplateController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
function u(e, t) {
var n = _.get(e, "spec.triggers", []), a = _.find(n, function(e) {
=======
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, r, a, o, i) {
e("displayName");
var s = [];
n.alerts = [], n.loginBaseUrl = a.openshiftAPIBaseUrl(), n.buildConfigs = {}, n.projectName = t.project, n.fromSampleRepo = t.fromSample, n.name = t.name;
var c = r.getPreferredVersion("buildconfigs");
i.get(t.project).then(_.spread(function(e, r) {
n.project = e, s.push(a.watch(c, r, function(e) {
n.buildConfigs = e.by("metadata.name"), n.createdBuildConfig = n.buildConfigs[t.name], o.log("buildconfigs (subscribe)", n.buildConfigs);
})), n.$on("$destroy", function() {
a.unwatchAll(s);
});
}));
} ]), angular.module("openshiftConsole").controller("NewFromTemplateController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "AuthorizationService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
function d(e, t) {
var n = _.get(e, "spec.triggers", []), r = _.find(n, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if ("ImageChange" !== e.type) return !1;
var n = _.get(e, "imageChangeParams.containerNames", []);
return _.includes(n, t.name);
});
<<<<<<< HEAD
return _.get(a, "imageChangeParams.from.name");
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
=======
return _.get(r, "imageChangeParams.from.name");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}), _.isEmpty(n.builderImageChangeTrigger) && (n.builderImageChangeTrigger = {
present: !1,
data: {
imageChange: {},
type: "ImageChange"
}
<<<<<<< HEAD
<<<<<<< HEAD
}), _.isEmpty(n.configChangeTrigger) && (n.configChangeTrigger = {
present: !1,
data: {
type: "ConfigChange"
}
}), n;
};
e.aceLoaded = function(e) {
var t = e.getSession();
t.setOption("tabSize", 2), t.setOption("useSoftTabs", !0), e.$blockScrolling = 1 / 0;
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var R = function(e) {
=======
var S = function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return _.map(p.compactEntries(e), function(e) {
=======
return _.map(m.compactEntries(e), function(e) {
>>>>>>> Updates for Service Instance & Bindings
=======
=======
var C = function(e) {
>>>>>>> Service instance details configuration and edit
=======
var S = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var C = function(e) {
>>>>>>> Adding label filter to ste secrets page
return _.map(p.compactEntries(e), function(e) {
>>>>>>> Support EnvFrom in the Env Editors
return {
sourcePath: e.name,
destinationDir: e.value
=======
function m() {
var e = g();
r.templateImages = _.map(k, function(t) {
=======
function p() {
var e = v();
a.templateImages = _.map(k, function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return _.isEmpty(t.usesParameters) ? t : {
name: _.template(t.name, {
interpolate: w
})(e),
usesParameters: t.usesParameters
>>>>>>> Bug 1505281 - Improve import YAML results message
};
});
<<<<<<< HEAD
}, T = function(t) {
=======
}, w = function(t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var n = {};
switch (t.type) {
case "ImageStreamTag":
n = {
kind: t.type,
name: t.imageStreamTag.imageStream + ":" + t.imageStreamTag.tagObject.tag
}, t.imageStreamTag.namespace !== e.buildConfig.metadata.namespace && (n.namespace = t.imageStreamTag.namespace);
break;

case "DockerImage":
n = {
kind: t.type,
name: t.dockerImage
};
break;

case "ImageStreamImage":
<<<<<<< HEAD
var r = t.imageStreamImage.split("/");
(n = {
kind: t.type,
name: _.last(r)
}).namespace = 1 !== _.size(r) ? _.head(r) : e.buildConfig.metadata.namespace;
}
<<<<<<< HEAD
return n;
}, E = function(e) {
return _.filter(e, function(e) {
return !_.isEmpty(e.data.type) && !_.isEmpty(e.data[_.toLower(e.data.type)]);
});
}, N = function() {
var t = [].concat(e.triggers.imageChangeTriggers, e.triggers.builderImageChangeTrigger, e.triggers.configChangeTrigger);
return t = _.filter(t, function(e) {
return _.has(e, "disabled") && !e.disabled || e.present;
}), t = t.concat(E(e.triggers.webhookTriggers)), t = _.map(t, "data");
}, D = function() {
=======
var a = t.imageStreamImage.split("/");
(n = {
kind: t.type,
name: _.last(a)
}).namespace = 1 !== _.size(a) ? _.head(a) : e.buildConfig.metadata.namespace;
=======
function p(e) {
var t = [], n = y(e);
return n && angular.forEach(n, function(n) {
<<<<<<< HEAD
var a = n.image, r = u(e, n);
r && (a = r), a && t.push(a);
=======
var r = n.image, a = d(e, n);
a && (r = a), r && t.push(r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), t;
}
function f(e) {
k = [];
var t = [], n = {};
angular.forEach(e.objects, function(e) {
if ("BuildConfig" === e.kind) {
<<<<<<< HEAD
var a = C(b(e), h);
a && k.push({
name: a,
usesParameters: d(a)
});
var r = C(S(e), h);
r && (n[r] = !0);
=======
var r = w(S(e), y);
r && k.push({
name: r,
usesParameters: m(r)
});
var a = w(C(e), y);
a && (n[a] = !0);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
"DeploymentConfig" === e.kind && (t = t.concat(p(e)));
}), t.forEach(function(e) {
n[e] || k.push({
name: e,
usesParameters: d(e)
});
}), k = _.uniqBy(k, "name");
}
function g() {
var e = {};
return _.each(a.template.parameters, function(t) {
e[t.name] = t.value;
}), e;
>>>>>>> Bug 1505281 - Improve import YAML results message
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return n;
}, P = function() {
var t = [].concat(e.triggers.githubWebhooks, e.triggers.gitlabWebhooks, e.triggers.bitbucketWebhooks, e.triggers.genericWebhooks, e.triggers.imageChangeTriggers, e.triggers.builderImageChangeTrigger, e.triggers.configChangeTrigger);
return t = _.filter(t, function(e) {
return _.has(e, "disabled") && !e.disabled || e.present;
}), t = _.map(t, "data");
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, j = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, P = function() {
>>>>>>> Service instance details configuration and edit
=======
}, j = function() {
>>>>>>> Add product icons for service catalog
=======
}, P = function() {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, j = function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, P = function() {
>>>>>>> Update template service broker flag name
=======
}, k = function() {
>>>>>>> Update pod controller to use getPreferredVersion
switch (e.secrets.picked = {
gitSecret: e.buildConfig.spec.source.sourceSecret ? [ e.buildConfig.spec.source.sourceSecret ] : [ {
name: ""
} ],
<<<<<<< HEAD
<<<<<<< HEAD
pullSecret: b(e.buildConfig).pullSecret ? [ b(e.buildConfig).pullSecret ] : [ {
=======
pullSecret: v(e.buildConfig).pullSecret ? [ v(e.buildConfig).pullSecret ] : [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
pullSecret: h(e.buildConfig).pullSecret ? [ h(e.buildConfig).pullSecret ] : [ {
>>>>>>> Add SVG icons
name: ""
} ],
pushSecret: e.buildConfig.spec.output.pushSecret ? [ e.buildConfig.spec.output.pushSecret ] : [ {
name: ""
} ]
}, e.strategyType) {
case "Source":
case "Docker":
e.secrets.picked.sourceSecrets = e.buildConfig.spec.source.secrets || [ {
secret: {
name: ""
},
destinationDir: ""
} ];
break;

case "Custom":
<<<<<<< HEAD
<<<<<<< HEAD
e.secrets.picked.sourceSecrets = b(e.buildConfig).secrets || [ {
=======
e.secrets.picked.sourceSecrets = v(e.buildConfig).secrets || [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.secrets.picked.sourceSecrets = h(e.buildConfig).secrets || [ {
>>>>>>> Add SVG icons
secretSource: {
name: ""
},
mountPath: ""
} ];
<<<<<<< HEAD
=======
=======
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), S = e("imageObjectRef");
if (v) {
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
=======
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), S = n("spec.output.to"), C = e("imageObjectRef");
if (v) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
a.templateParamsMap && (r.prefillParameters = function() {
=======
var h = r.template, y = r.namespace || "", b = n("spec.template.spec.containers"), S = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), w = e("imageObjectRef");
if (h) {
r.templateParamsMap && (a.prefillParameters = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
try {
return JSON.parse(r.templateParamsMap);
} catch (e) {
c.addNotification({
id: "template-params-invalid-json",
type: "error",
message: "Could not prefill parameter values.",
details: "The `templateParamsMap` URL parameter is not valid JSON. " + e
});
}
}());
<<<<<<< HEAD
var w = /\${([a-zA-Z0-9\_]+)}/g, k = [];
l.get(a.project).then(_.spread(function(e) {
if (r.project = e, h) i.get("templates", v, {
namespace: h || r.project.metadata.name
}).then(function(e) {
r.template = e, f(e);
_.some(k, function(e) {
return !_.isEmpty(e.usesParameters);
}) ? (r.parameterDisplayNames = {}, _.each(e.parameters, function(e) {
r.parameterDisplayNames[e.name] = e.displayName || e.name;
}), r.$watch("template.parameters", _.debounce(function() {
r.$apply(m);
=======
var P = /\${([a-zA-Z0-9\_]+)}/g, k = [];
u.get(r.project).then(_.spread(function(e) {
if (a.project = e, o.canI("processedtemplates", "create", r.project)) if (y) s.get("templates", h, {
namespace: y || a.project.metadata.name
}).then(function(e) {
a.template = e, g(e);
_.some(k, function(e) {
return !_.isEmpty(e.usesParameters);
}) ? (a.parameterDisplayNames = {}, _.each(e.parameters, function(e) {
a.parameterDisplayNames[e.name] = e.displayName || e.name;
}), a.$watch("template.parameters", _.debounce(function() {
a.$apply(p);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, 50, {
maxWait: 250
}), !0)) : a.templateImages = k;
}, function() {
s.toErrorPage("Cannot create from template: the specified template could not be retrieved.");
}); else {
<<<<<<< HEAD
if (r.template = o.getTemplate(), _.isEmpty(r.template)) {
=======
if (a.template = i.getTemplate(), _.isEmpty(a.template)) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var n = URI("error").query({
error: "not_found",
error_description: "Template wasn't found in cache."
}).toString();
t.url(n);
}
<<<<<<< HEAD
o.clearTemplate();
>>>>>>> Bug 1505281 - Improve import YAML results message
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, A = function(e, t, n) {
t.name ? e[n] = t : delete e[n];
}, $ = function(t, n) {
var r = "Custom" === e.strategyType ? "secretSource" : "secret", a = _.filter(n, function(e) {
return e[r].name;
=======
i.clearTemplate();
} else c.toErrorPage("You do not have authority to process templates in project " + r.project + ".", "access_denied");
}));
} else c.toErrorPage("Cannot create from template: a template name was not specified.");
} ]), angular.module("openshiftConsole").controller("LabelsController", [ "$scope", function(e) {
e.expanded = !0, e.toggleExpanded = function() {
e.expanded = !e.expanded;
}, e.addLabel = function() {
e.labelKey && e.labelValue && (e.labels[e.labelKey] = e.labelValue, e.labelKey = "", e.labelValue = "", e.form.$setPristine(), e.form.$setUntouched());
}, e.deleteLabel = function(t) {
e.labels[t] && delete e.labels[t];
};
} ]), angular.module("openshiftConsole").controller("TasksController", [ "$scope", "TaskList", function(e, t) {
e.tasks = function() {
return t.taskList();
}, e.delete = function(e) {
t.deleteTask(e);
}, e.hasTaskWithError = function() {
var e = t.taskList();
return _.some(e, {
hasErrors: !0
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
_.isEmpty(a) ? delete t.secrets : t.secrets = a;
}, B = function(e, t) {
=======
}, R = function(e, t, n) {
=======
}, P = function(e, t, n) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
}, j = function(e, t, n) {
>>>>>>> Service instance details configuration and edit
=======
}, P = function(e, t, n) {
>>>>>>> Add product icons for service catalog
=======
}, j = function(e, t, n) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, P = function(e, t, n) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, j = function(e, t, n) {
>>>>>>> Update template service broker flag name
t.name ? e[n] = t : delete e[n];
}, R = function(t, n) {
var a = "Custom" === e.strategyType ? "secretSource" : "secret", r = _.filter(n, function(e) {
return e[a].name;
});
_.isEmpty(r) ? delete t.secrets : t.secrets = r;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, T = function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, E = function(e, t) {
>>>>>>> Add bindings list to resource pages
=======
}, T = function(e, t) {
>>>>>>> Add the ability to add a secret to an application
=======
}, I = function(e, t) {
>>>>>>> Updates for Service Instance & Bindings
return "None" === t.type ? e : (e.none = !1, angular.forEach(t, function(t, n) {
e[n] = !0;
}), e);
};
<<<<<<< HEAD
<<<<<<< HEAD
e.save = function() {
switch (e.disableInputs = !0, f(), b(e.updatedBuildConfig).forcePull = e.options.forcePull, e.strategyType) {
case "Docker":
b(e.updatedBuildConfig).noCache = e.options.noCache;
=======
e.addWebhookTrigger = function(t) {
if (t) {
var n = {
disabled: !1,
data: {
type: t
}
}, a = _.find(e.createTriggerSelect.options, function(e) {
return e.label === t;
}).type;
n.data[a] = {
secret: o._generateSecret()
}, e.triggers[a + "Webhooks"].push(n);
=======
} ]), angular.module("openshiftConsole").controller("EventsController", [ "$routeParams", "$scope", "ProjectsService", function(e, t, n) {
t.projectName = e.project, t.renderOptions = {
hideFilterWidget: !0
}, t.breadcrumbs = [ {
title: "Monitoring",
link: "project/" + e.project + "/monitoring"
}, {
title: "Events"
} ], n.get(e.project).then(_.spread(function(e, n) {
t.project = e, t.projectContext = n;
}));
} ]), angular.module("openshiftConsole").controller("OAuthController", [ "$scope", "$location", "$q", "APIService", "AuthService", "DataService", "Logger", "RedirectLoginService", function(e, t, n, r, a, o, i, s) {
var c = i.get("auth");
e.completeLogin = function() {}, e.cancelLogin = function() {
t.replace(), t.url("./");
};
var l = r.getPreferredVersion("users");
s.finish().then(function(n) {
var r = n.token, i = n.then, s = n.verified, u = n.ttl, d = {
errorNotification: !1,
http: {
auth: {
token: r,
triggerLogin: !1
}
}
};
c.log("OAuthController, got token, fetching user", d), o.get(l, "~", {}, d).then(function(n) {
if (c.log("OAuthController, got user", n), e.completeLogin = function() {
a.setUser(n, r, u);
var e = i || "./";
URI(e).is("absolute") && (c.log("OAuthController, invalid absolute redirect", e), e = "./"), c.log("OAuthController, redirecting", e), t.replace(), t.url(e);
}, s) e.completeLogin(); else {
e.confirmUser = n;
var o = a.UserStore().getUser();
o && o.metadata.name !== n.metadata.name && (e.overriddenUser = o);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}, e.save = function() {
switch (e.disableInputs = !0, g(), h(e.updatedBuildConfig).forcePull = e.options.forcePull, e.strategyType) {
case "Docker":
<<<<<<< HEAD
v(e.updatedBuildConfig).noCache = e.options.noCache;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
h(e.updatedBuildConfig).noCache = e.options.noCache;
>>>>>>> Add SVG icons
break;

case "JenkinsPipeline":
"path" === e.jenkinsfileOptions.type ? delete e.updatedBuildConfig.spec.strategy.jenkinsPipelineStrategy.jenkinsfile : delete e.updatedBuildConfig.spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath;
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = R(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = T(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete b(e.updatedBuildConfig).from : b(e.updatedBuildConfig).from = T(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = T(e.imageOptions.to), b(e.updatedBuildConfig).env = p.compactEntries(e.envVars), A(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), A(b(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), A(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
case "Source":
case "Docker":
$(e.updatedBuildConfig.spec.source, e.secrets.picked.sourceSecrets);
break;

case "Custom":
$(b(e.updatedBuildConfig), e.secrets.picked.sourceSecrets);
}
e.updatedBuildConfig.spec.triggers = N(), k(), s.update(v, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
l.addNotification({
type: "success",
message: "Build config " + e.updatedBuildConfig.metadata.name + " was successfully updated."
}), j();
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete v(e.updatedBuildConfig).from : v(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), v(e.updatedBuildConfig).env = p.compactEntries(e.envVars), R(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), R(v(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), R(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete v(e.updatedBuildConfig).from : v(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), v(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(v(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete v(e.updatedBuildConfig).from : v(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), v(e.updatedBuildConfig).env = m.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(v(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Updates for Service Instance & Bindings
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete v(e.updatedBuildConfig).from : v(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), v(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(v(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Support EnvFrom in the Env Editors
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Add SVG icons
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Service instance details configuration and edit
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Add product icons for service catalog
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Update template service broker flag name
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Adding label filter to ste secrets page
case "Source":
case "Docker":
R(e.updatedBuildConfig.spec.source, e.secrets.picked.sourceSecrets);
break;

case "Custom":
R(h(e.updatedBuildConfig), e.secrets.picked.sourceSecrets);
}
<<<<<<< HEAD
<<<<<<< HEAD
e.updatedBuildConfig.spec.triggers = k(), b(), s.update("buildconfigs", e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
=======
e.updatedBuildConfig.spec.triggers = P(), b(), s.update("buildconfigs", e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
>>>>>>> Update pod controller to use getPreferredVersion
l.addNotification({
type: "success",
message: "Build config " + e.updatedBuildConfig.metadata.name + " was successfully updated."
}), y();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, function(n) {
e.disableInputs = !1, l.addNotification({
id: "edit-build-config-error",
=======
n.error_description && (e.errorDetails = n.error_description), e.reloadConsole = function() {
t.location.href = "/";
};
} ]), angular.module("openshiftConsole").controller("LogoutController", [ "$scope", "$log", "AuthService", "AUTH_CFG", function(e, t, n, r) {
t.debug("LogoutController"), n.isLoggedIn() ? (t.debug("LogoutController, logged in, initiating logout"), e.logoutMessage = "Logging out...", n.startLogout().finally(function() {
n.isLoggedIn() ? (t.debug("LogoutController, logout failed, still logged in"), e.logoutMessage = 'You could not be logged out. Return to the <a href="./">console</a>.') : r.logout_uri ? (t.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", r.logout_uri), window.location.href = r.logout_uri) : (t.debug("LogoutController, logout completed, reloading the page"), window.location.reload(!1));
})) : r.logout_uri ? (t.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", r.logout_uri), e.logoutMessage = "Logging out...", window.location.href = r.logout_uri) : (t.debug("LogoutController, not logged in, logout complete"), e.logoutMessage = 'You are logged out. Return to the <a href="./">console</a>.');
} ]), angular.module("openshiftConsole").controller("CreateController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "CatalogService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
e.projectName = a.project, e.categories = s.CATALOG_CATEGORIES, e.alerts = e.alerts || {}, d.get(a.project).then(_.spread(function(t, n) {
e.project = t, e.context = n, c.list("imagestreams", {
namespace: "openshift"
}).then(function(t) {
e.openshiftImageStreams = t.by("metadata.name");
}), c.list("templates", {
namespace: "openshift"
}, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.openshiftTemplates = t.by("metadata.name");
}), "openshift" === a.project ? (e.projectImageStreams = [], e.projectTemplates = []) : (c.list("imagestreams", n).then(function(t) {
e.projectImageStreams = t.by("metadata.name");
}), c.list("templates", n, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.projectTemplates = t.by("metadata.name");
}));
}));
} ]), angular.module("openshiftConsole").controller("CreateFromURLController", [ "$scope", "$routeParams", "$location", "$filter", "AuthService", "DataService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s) {
a.withUser(), e.alerts = {}, e.selected = {};
var c = function(t) {
e.alerts.invalidImageStream = {
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
type: "error",
message: "An error occurred updating build config " + e.updatedBuildConfig.metadata.name + ".",
details: t("getErrorDetails")(n)
});
});
}, e.$on("$destroy", function() {
<<<<<<< HEAD
<<<<<<< HEAD
s.unwatchAll(y);
=======
s.unwatchAll(v);
>>>>>>> Add SVG icons
});
} ]), angular.module("openshiftConsole").controller("EditConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "DataService", "BreadcrumbsService", "Navigate", "NotificationsService", "ProjectsService", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d) {
var m = [];
n.forms = {}, n.projectName = t.project, n.breadcrumbs = i.getBreadcrumbs({
name: t.configMap,
kind: "ConfigMap",
namespace: t.project,
subpage: "Edit Config Map"
});
var p = function(e) {
return _.get(e, "metadata.resourceVersion");
<<<<<<< HEAD
}, g = function() {
c.hideNotification("edit-config-map-error");
}, f = function() {
r.history.back();
};
n.cancel = f;
var v = a.getPreferredVersion("configmaps");
l.get(t.project).then(_.spread(function(r, a) {
o.get(v, t.configMap, a, {
=======
}, d = function() {
s.hideNotification("edit-config-map-error");
}, m = function() {
a.history.back();
};
n.cancel = m, c.get(t.project).then(_.spread(function(a, c) {
r.get("configmaps", t.configMap, c, {
>>>>>>> Support EnvFrom in the Env Editors
errorNotification: !1
<<<<<<< HEAD
}).then(function(e) {
n.loaded = !0, n.breadcrumbs = i.getBreadcrumbs({
name: t.configMap,
object: e,
project: r,
subpage: d.getString(u("Edit Config Map"))
}), n.configMap = e, m.push(o.watchObject(v, t.configMap, a, function(e, t) {
n.resourceChanged = p(e) !== p(n.configMap), n.resourceDeleted = "DELETED" === t;
}));
}, function(n) {
s.toErrorPage("Could not load config map " + t.configMap + ". " + e("getErrorDetails")(n));
}), n.updateConfigMap = function() {
n.forms.editConfigMapForm.$valid && (g(), n.disableInputs = !0, o.update(v, n.configMap.metadata.name, n.configMap, a).then(function() {
c.addNotification({
=======
}).then(function(t) {
e.imageStream = t, o.get("imagestreamtags", t.metadata.name + ":" + f.imageTag, {
namespace: f.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.imageStreamTag = t, e.validationPassed = !0, e.resource = t, f.displayName = r("displayName")(t);
}, function() {
l(f.imageTag);
});
}, function() {
c(f.imageStream);
}), f.template && o.get("templates", f.template, {
namespace: f.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.template = t, d() && (e.validationPassed = !0, e.resource = t);
}, function() {
u(f.template);
})) : e.alerts.resourceRequired = {
type: "error",
message: "An image stream or template is required."
} : function(t) {
e.alerts.invalidNamespace = {
type: "error",
message: 'Resources from the namespace "' + t + '" are not permitted.'
};
}(f.namespace), angular.extend(e, {
createDetails: f,
createWithProject: function(r) {
r = r || e.selected.project.metadata.name;
var a = t.imageStream ? i.createFromImageURL(e.imageStream, f.imageTag, r, f) : i.createFromTemplateURL(e.template, r, f);
n.url(a);
}
}), e.projects = {}, e.canCreateProject = void 0, s.list().then(function(t) {
e.loaded = !0, e.projects = r("orderByDisplayName")(t.by("metadata.name")), e.noProjects = _.isEmpty(e.projects);
}), s.canCreate().then(function() {
e.canCreateProject = !0;
}, function() {
e.canCreateProject = !1;
});
} ]), angular.module("openshiftConsole").controller("CreateProjectController", [ "$scope", "$location", "$window", "AuthService", "Constants", function(e, t, n, r, a) {
var o = !a.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
e.onProjectCreated = function(e) {
o ? n.history.back() : t.path("project/" + e + "/create");
}, r.withUser();
} ]), angular.module("openshiftConsole").controller("EditProjectController", [ "$scope", "$routeParams", "$filter", "$location", "DataService", "ProjectsService", "Navigate", function(e, t, n, r, a, o, i) {
e.alerts = {};
var s = n("annotation"), c = n("annotationName");
o.get(t.project).then(_.spread(function(a) {
var l = function(e) {
return {
description: s(e, "description"),
displayName: s(e, "displayName")
};
}, u = function(e, t) {
var n = angular.copy(e);
return n.metadata.annotations[c("description")] = t.description, n.metadata.annotations[c("displayName")] = t.displayName, n;
};
angular.extend(e, {
project: a,
editableFields: l(a),
show: {
editing: !1
},
actions: {
canSubmit: !1
},
canSubmit: function(t) {
e.actions.canSubmit = t;
},
update: function() {
e.disableInputs = !0, o.update(t.project, u(a, e.editableFields)).then(function() {
t.then ? r.path(t.then) : i.toProjectOverview(a.metadata.name);
}, function(t) {
e.disableInputs = !1, e.editableFields = l(a), e.alerts.update = {
type: "error",
message: "An error occurred while updating the project",
details: n("getErrorDetails")(t)
};
});
}
});
}));
} ]), angular.module("openshiftConsole").controller("CreateRouteController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d) {
n.renderOptions = {
hideFilterWidget: !0
}, n.projectName = t.project, n.serviceName = t.service, n.labels = [], n.routing = {
name: n.serviceName || ""
}, n.breadcrumbs = [ {
title: "Routes",
link: "project/" + n.projectName + "/browse/routes"
}, {
title: "Create Route"
} ];
var m = a.getPreferredVersion("routes"), p = a.getPreferredVersion("services"), f = function() {
l.hideNotification("create-route-error");
};
n.$on("$destroy", f);
var g = function() {
r.history.back();
};
n.cancel = g, u.get(t.project).then(_.spread(function(r, u) {
if (n.project = r, i.canI(m, "create", t.project)) {
var v, h = e("orderByDisplayName");
n.routing.to = {
kind: "Service",
name: n.serviceName,
weight: 1
};
var y, b = function() {
var e = y, t = _.get(n, "routing.to.name");
y = _.get(v, [ t, "metadata", "labels" ], {});
var r = d.mapEntries(d.compactEntries(n.labels)), a = _.assign(r, y);
e && (a = _.omitBy(a, function(t, n) {
return e[n] && !y[n];
})), n.labels = _.map(a, function(e, t) {
return {
name: t,
value: e
};
});
};
s.list(p, u).then(function(e) {
v = e.by("metadata.name"), n.services = h(v), n.$watch("routing.to.name", b);
}), n.createRoute = function() {
if (n.createRouteForm.$valid) {
f(), n.disableInputs = !0;
var t = n.routing.to.name, r = d.mapEntries(d.compactEntries(n.labels)), i = o.createRoute(n.routing, t, r), c = _.get(n, "routing.alternateServices", []);
_.isEmpty(c) || (i.spec.to.weight = _.get(n, "routing.to.weight"), i.spec.alternateBackends = _.map(c, function(e) {
return {
kind: "Service",
name: e.name,
weight: e.weight
};
}));
var m = a.objectToResourceGroupVersion(i);
s.create(m, null, i, u).then(function() {
l.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "success",
message: "Config map " + n.configMap.metadata.name + " successfully updated."
<<<<<<< HEAD
}), f();
=======
}), m();
>>>>>>> Support EnvFrom in the Env Editors
}, function(t) {
n.disableInputs = !1, c.addNotification({
id: "edit-config-map-error",
type: "error",
message: "An error occurred updating the config map.",
details: e("getErrorDetails")(t)
});
}));
}, n.$on("$destroy", function() {
o.unwatchAll(m), g();
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("EditDeploymentConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$uibModal", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "EnvironmentService", "Navigate", "NotificationsService", "ProjectsService", "SecretsService", "gettext", "gettextCatalog", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v, h) {
e.projectName = r.project, e.deploymentConfig = null, e.alerts = {}, e.view = {
advancedStrategyOptions: !1,
advancedImageOptions: !1
}, e.triggers = {}, e.breadcrumbs = c.getBreadcrumbs({
name: r.name,
kind: r.kind,
namespace: r.project,
subpage: "Edit Deployment Config"
}), e.deploymentConfigStrategyTypes = [ "Recreate", "Rolling", "Custom" ];
<<<<<<< HEAD
var y = t("orderByDisplayName"), b = t("getErrorDetails"), S = function(t, n) {
=======
s.unwatchAll(h);
});
} ]), angular.module("openshiftConsole").controller("EditConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "DataService", "BreadcrumbsService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c) {
var l = [];
n.forms = {}, n.projectName = t.project, n.breadcrumbs = o.getBreadcrumbs({
name: t.configMap,
kind: "ConfigMap",
=======
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
if (t.kind && t.name) {
var f = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ], g = e("humanizeKind");
if (_.includes(f, t.kind)) {
var v = {
resource: a.kindToResource(t.kind),
group: t.group
};
n.projectName = t.project, n.kind = t.kind, n.name = t.name, n.RELATIVE_PATH_PATTERN = p, n.outOfClaims = !1, n.attach = {
persistentVolumeClaim: null,
volumeName: null,
mountPath: null,
allContainers: !0,
containers: {}
}, n.breadcrumbs = i.getBreadcrumbs({
name: t.name,
kind: t.kind,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
namespace: t.project,
<<<<<<< HEAD
subpage: "Edit Config Map"
});
var u = function(e) {
return _.get(e, "metadata.resourceVersion");
}, d = function() {
s.hideNotification("edit-config-map-error");
}, p = function() {
=======
subpage: "Add Storage"
}), n.pvcVersion = a.getPreferredVersion("persistentvolumeclaims");
var h = a.getPreferredVersion("resourcequotas"), y = a.getPreferredVersion("appliedclusterresourcequotas");
d.get(t.project).then(_.spread(function(a, d) {
if (n.project = a, o.canI(v, "update", t.project)) {
var p = e("orderByDisplayName"), f = e("getErrorDetails"), b = e("generateName"), S = function(e, t) {
n.disableInputs = !0, u.addNotification({
id: "attach-pvc-error",
type: "error",
message: e,
details: t
});
}, C = function() {
u.hideNotification("attach-pvc-error");
};
n.$on("$destroy", C);
var w = function() {
<<<<<<< HEAD
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
a.history.back();
=======
r.history.back();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
n.cancel = p, c.get(t.project).then(_.spread(function(a, c) {
r.get("configmaps", t.configMap, c, {
errorNotification: !1
}).then(function(e) {
n.loaded = !0, n.breadcrumbs = o.getBreadcrumbs({
name: t.configMap,
object: e,
project: a,
subpage: "Edit Config Map"
}), n.configMap = e, l.push(r.watchObject("configmaps", t.configMap, c, function(e, t) {
n.resourceChanged = u(e) !== u(n.configMap), n.resourceDeleted = "DELETED" === t;
}));
}, function(n) {
i.toErrorPage("Could not load config map " + t.configMap + ". " + e("getErrorDetails")(n));
}), n.updateConfigMap = function() {
n.forms.editConfigMapForm.$valid && (d(), n.disableInputs = !0, r.update("configmaps", n.configMap.metadata.name, n.configMap, c).then(function() {
s.addNotification({
=======
n.cancel = w;
var k = function(e) {
return n.attach.allContainers || n.attach.containers[e.name];
}, P = function() {
var e = _.get(n, "attach.resource.spec.template");
n.existingMountPaths = m.getMountPaths(e, k);
};
n.$watchGroup([ "attach.resource", "attach.allContainers" ], P), n.$watch("attach.containers", P, !0);
s.get(v, t.name, d).then(function(e) {
n.attach.resource = e, n.breadcrumbs = i.getBreadcrumbs({
object: e,
project: a,
subpage: "Add Storage"
});
var t = _.get(e, "spec.template");
n.existingVolumeNames = m.getVolumeNames(t);
}, function(e) {
S(t.name + " could not be loaded.", f(e));
}), s.list(n.pvcVersion, d).then(function(e) {
n.pvcs = p(e.by("metadata.name")), _.isEmpty(n.pvcs) || n.attach.persistentVolumeClaim || (n.attach.persistentVolumeClaim = _.head(n.pvcs));
}), s.list(h, {
namespace: n.projectName
}, function(e) {
n.quotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), s.list(y, {
namespace: n.projectName
}, function(e) {
n.clusterQuotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), n.attachPVC = function() {
if (n.disableInputs = !0, C(), n.attachPVCForm.$valid) {
n.attach.volumeName || (n.attach.volumeName = b("volume-"));
<<<<<<< HEAD
var e = n.attach.resource, a = _.get(e, "spec.template"), r = n.attach.persistentVolumeClaim, o = n.attach.volumeName, i = n.attach.mountPath, c = n.attach.subPath, l = n.attach.readOnly;
i && angular.forEach(a.spec.containers, function(e) {
if (k(e)) {
=======
var e = n.attach.resource, r = _.get(e, "spec.template"), a = n.attach.persistentVolumeClaim, o = n.attach.volumeName, i = n.attach.mountPath, c = n.attach.subPath, l = n.attach.readOnly;
i && angular.forEach(r.spec.containers, function(e) {
if (P(e)) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var t = m.createVolumeMount(o, i, c, l);
e.volumeMounts || (e.volumeMounts = []), e.volumeMounts.push(t);
}
});
var p = m.createVolume(o, a);
r.spec.volumes || (r.spec.volumes = []), r.spec.volumes.push(p), s.update(v, e.metadata.name, n.attach.resource, d).then(function() {
var e;
i || (e = "No mount path was provided. The volume reference was added to the configuration, but it will not be mounted into running pods."), u.addNotification({
>>>>>>> Bug 1505281 - Improve import YAML results message
type: "success",
<<<<<<< HEAD
<<<<<<< HEAD
message: "Config map " + n.configMap.metadata.name + " successfully updated."
}), p();
}, function(t) {
n.disableInputs = !1, s.addNotification({
id: "edit-config-map-error",
type: "error",
message: "An error occurred updating the config map.",
details: e("getErrorDetails")(t)
=======
message: "Persistent volume claim " + r.metadata.name + " added to " + g(t.kind) + " " + t.name + ".",
=======
message: "Persistent volume claim " + a.metadata.name + " added to " + g(t.kind) + " " + t.name + ".",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
details: e
}), w();
}, function(e) {
S("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
}));
<<<<<<< HEAD
}, n.$on("$destroy", function() {
r.unwatchAll(l), d();
});
}));
} ]), angular.module("openshiftConsole").controller("EditDeploymentConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$uibModal", "$window", "AuthorizationService", "BreadcrumbsService", "DataService", "EnvironmentService", "Navigate", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f) {
e.projectName = a.project, e.deploymentConfig = null, e.alerts = {}, e.view = {
advancedStrategyOptions: !1,
advancedImageOptions: !1
}, e.triggers = {}, e.breadcrumbs = s.getBreadcrumbs({
name: a.name,
kind: a.kind,
namespace: a.project,
subpage: "Edit Deployment Config"
}), e.deploymentConfigStrategyTypes = [ "Recreate", "Rolling", "Custom" ];
<<<<<<< HEAD
var f = t("orderByDisplayName"), h = t("getErrorDetails"), v = function(t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var g = t("orderByDisplayName"), h = t("getErrorDetails"), v = function(t, n) {
>>>>>>> Patternfly vertical navigation and project bar
=======
var g = t("orderByDisplayName"), v = t("getErrorDetails"), h = function(t, n) {
>>>>>>> Add SVG icons
e.alerts["from-value-objects"] = {
=======
} else l.toErrorPage("Storage is not supported for kind " + g(t.kind) + ".");
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("AddConfigVolumeController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
if (n.kind && n.name) {
var f = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(f, n.kind)) {
var g = {
resource: o.kindToResource(n.kind),
group: n.group
};
r.projectName = n.project, r.kind = n.kind, r.name = n.name, r.attach = {
allContainers: !0,
pickKeys: !1
}, r.forms = {}, r.RELATIVE_PATH_PATTERN = p, r.breadcrumbs = s.getBreadcrumbs({
name: n.name,
kind: n.kind,
namespace: n.project,
subpage: "Add Config Files"
}), r.configMapVersion = o.getPreferredVersion("configmaps"), r.secretVersion = o.getPreferredVersion("secrets");
var v = e("humanizeKind");
r.groupByKind = function(e) {
return v(e.kind);
};
r.$watch("attach.source", function() {
_.set(r, "attach.items", [ {} ]);
});
var h = function() {
r.forms.addConfigVolumeForm.$setDirty();
}, y = function() {
a.history.back();
};
r.cancel = y;
var b = function(e, t) {
u.addNotification({
id: "add-config-volume-error",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "error",
message: t,
details: n
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, C = i.getPreferredVersion("deploymentconfigs"), w = i.getPreferredVersion("configmaps"), P = i.getPreferredVersion("secrets"), j = [], k = [], I = [];
e.valueFromObjects = [];
var R = function(e) {
=======
}, y = [], b = [], C = [];
e.valueFromObjects = [];
var S = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, y = [], b = [], C = [];
e.valueFromObjects = [];
var S = function(e) {
>>>>>>> Add SVG icons
=======
}, y = [], b = [], S = [];
e.valueFromObjects = [];
var C = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, y = [], b = [], C = [];
e.valueFromObjects = [];
var S = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, y = [], b = [], S = [];
e.valueFromObjects = [];
var C = function(e) {
>>>>>>> Adding label filter to ste secrets page
switch (e) {
case "Recreate":
return "recreateParams";

case "Rolling":
return "rollingParams";

case "Custom":
return "customParams";

default:
return void Logger.error("Unknown deployment strategy type: " + e);
}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
p.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, s.canI("deploymentconfigs", "update", r.project) ? l.get(C, r.deploymentconfig, a, {
errorNotification: !1
}).then(function(t) {
e.deploymentConfig = t, e.breadcrumbs = c.getBreadcrumbs({
object: t,
project: n,
subpage: "Edit"
});
e.updatedDeploymentConfig = angular.copy(e.deploymentConfig), e.containerNames = _.map(e.deploymentConfig.spec.template.spec.containers, "name"), e.containerConfigByName = function(t, n) {
var r = {}, a = _.filter(n, {
type: "ImageChange"
});
<<<<<<< HEAD
return _.each(t, function(t) {
var n = _.find(a, function(e) {
return _.includes(e.imageChangeParams.containerNames, t.name);
}), o = {};
if (t.env = t.env || [], r[t.name] = {
=======
m.get(a.project).then(_.spread(function(n, r) {
=======
p.get(a.project).then(_.spread(function(n, r) {
>>>>>>> Updates for Service Instance & Bindings
=======
m.get(a.project).then(_.spread(function(n, r) {
>>>>>>> Support EnvFrom in the Env Editors
e.project = n, e.context = r, i.canI("deploymentconfigs", "update", a.project) ? c.get("deploymentconfigs", a.deploymentconfig, r, {
=======
}, S = function() {
u.hideNotification("add-config-volume-error");
};
r.$on("$destroy", S), r.addItem = function() {
r.attach.items.push({}), h();
}, r.removeItem = function(e) {
r.attach.items.splice(e, 1), h();
}, d.get(n.project).then(_.spread(function(t, a) {
if (r.project = t, i.canI(g, "update", n.project)) {
var o = e("orderByDisplayName"), d = e("getErrorDetails"), p = e("generateName");
<<<<<<< HEAD
c.get(g, n.name, r, {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
errorNotification: !1
}).then(function(t) {
e.deploymentConfig = t, e.breadcrumbs = s.getBreadcrumbs({
object: t,
project: n,
subpage: "Edit"
=======
c.get(g, n.name, a, {
errorNotification: !1
}).then(function(e) {
r.targetObject = e, r.breadcrumbs = s.getBreadcrumbs({
object: e,
project: t,
subpage: "Add Config Files"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
e.updatedDeploymentConfig = angular.copy(e.deploymentConfig), e.containerNames = _.map(e.deploymentConfig.spec.template.spec.containers, "name"), e.containerConfigByName = function(t, n) {
var a = {}, r = _.filter(n, {
type: "ImageChange"
});
return _.each(t, function(t) {
var n = _.find(r, function(e) {
return _.includes(e.imageChangeParams.containerNames, t.name);
}), o = {};
if (t.env = t.env || [], a[t.name] = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
env: t.env,
image: t.image,
hasDeploymentTrigger: !_.isEmpty(n)
}, n) {
var i = n.imageChangeParams.from, s = i.name.split(":");
o = {
data: n,
istag: {
namespace: i.namespace || e.projectName,
imageStream: s[0],
tagObject: {
tag: s[1]
}
},
automatic: _.get(n, "imageChangeParams.automatic", !1)
};
} else o = {
istag: {
namespace: "",
imageStream: ""
},
automatic: !0
};
<<<<<<< HEAD
_.set(r, [ t.name, "triggerData" ], o);
}), r;
=======
_.set(a, [ t.name, "triggerData" ], o);
}), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}(e.updatedDeploymentConfig.spec.template.spec.containers, e.updatedDeploymentConfig.spec.triggers), e.secrets = {
pullSecrets: angular.copy(e.deploymentConfig.spec.template.spec.imagePullSecrets) || [ {
name: ""
} ]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = R(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
type: "ConfigChange"
}), "Custom" !== e.strategyData.type || _.has(e.strategyData, "customParams.environment") || (e.strategyData.customParams.environment = []), l.list(w, a, null, {
errorNotification: !1
}).then(function(t) {
k = y(t.by("metadata.name")), e.availableConfigMaps = k, e.valueFromObjects = k.concat(I);
}, function(e) {
<<<<<<< HEAD
403 !== e.status && S("Could not load config maps", b(e));
}), l.list(P, a, null, {
errorNotification: !1
}).then(function(t) {
I = y(t.by("metadata.name")), e.availableSecrets = I, e.valueFromObjects = k.concat(I);
var n = g.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.secretsByType = _.each(r, function(e) {
e.unshift("");
});
}, function(e) {
403 !== e.status && S("Could not load secrets", b(e));
}), j.push(l.watchObject(C, r.deploymentconfig, a, function(t, n) {
"MODIFIED" === n && (e.alerts["updated/deleted"] = {
type: "warning",
message: v.getString(f("This deployment configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."))
=======
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = S(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
=======
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = C(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
>>>>>>> Service instance details configuration and edit
=======
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = S(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
type: "ConfigChange"
}), "Custom" !== e.strategyData.type || _.has(e.strategyData, "customParams.environment") || (e.strategyData.customParams.environment = []), c.list("configmaps", r, null, {
errorNotification: !1
}).then(function(t) {
b = g(t.by("metadata.name")), e.availableConfigMaps = b, e.valueFromObjects = b.concat(C);
}, function(e) {
403 !== e.code && h("Could not load config maps", v(e));
}), c.list("secrets", r, null, {
errorNotification: !1
}).then(function(t) {
C = g(t.by("metadata.name")), e.availableSecrets = C, e.valueFromObjects = C.concat(b);
var n = p.groupSecretsByType(t), a = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.secretsByType = _.each(a, function(e) {
e.unshift("");
});
}, function(e) {
403 !== e.code && h("Could not load secrets", v(e));
}), y.push(c.watchObject("deploymentconfigs", a.deploymentconfig, r, function(t, n) {
"MODIFIED" === n && (e.alerts["updated/deleted"] = {
type: "warning",
message: "This deployment configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}), "DELETED" === n && (e.alerts["updated/deleted"] = {
type: "warning",
message: "This deployment configuration has been deleted."
}, e.disableInputs = !0), e.deploymentConfig = t;
})), e.loaded = !0;
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The deployment configuration details could not be loaded.",
details: t("getErrorDetails")(n)
=======
r.error = e;
}), c.list(r.configMapVersion, a, null, {
errorNotification: !1
}).then(function(e) {
r.configMaps = o(e.by("metadata.name"));
}, function(e) {
403 !== e.status ? b("Could not load config maps", d(e)) : r.configMaps = [];
}), c.list(r.secretVersion, a, null, {
errorNotification: !1
}).then(function(e) {
r.secrets = o(e.by("metadata.name"));
}, function(e) {
403 !== e.status ? b("Could not load secrets", d(e)) : r.secrets = [];
});
var f = function(e) {
return r.attach.allContainers || r.attach.containers[e.name];
}, h = function() {
var e = _.get(r, "targetObject.spec.template");
r.existingMountPaths = m.getMountPaths(e, f);
};
r.$watchGroup([ "targetObject", "attach.allContainers" ], h), r.$watch("attach.containers", h, !0);
r.$watch("attach.items", function() {
var e = _.map(r.attach.items, "path");
r.itemPaths = _.compact(e);
}, !0), r.addVolume = function() {
if (!r.forms.addConfigVolumeForm.$invalid) {
var t = r.targetObject, o = _.get(r, "attach.source"), i = _.get(t, "spec.template"), s = p("volume-"), l = {
name: s,
mountPath: _.get(r, "attach.mountPath")
};
"Secret" === o.kind && (l.readOnly = !0), _.each(i.spec.containers, function(e) {
f(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(l));
});
var m, v = {
name: s
};
switch (r.attach.pickKeys && (m = r.attach.items), o.kind) {
case "ConfigMap":
v.configMap = {
name: o.metadata.name,
items: m
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
}) : d.toErrorPage("You do not have authority to update deployment config " + r.deploymentconfig + ".", "access_denied");
}));
var T = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, E = function(t) {
_.has(e.strategyData, t) || a.open({
=======
}) : u.toErrorPage("You do not have authority to update deployment config " + a.deploymentconfig + ".", "access_denied");
}));
var w = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, k = function(t) {
_.has(e.strategyData, t) || r.open({
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e.alerts,
<<<<<<< HEAD
title: "Keep some existing " + e.originalStrategy.toLowerCase() + " strategy parameters?",
=======
message: "Some of your existing " + e.originalStrategy.toLowerCase() + " strategy parameters can be used for the " + e.strategyData.type.toLowerCase() + " strategy. Keep parameters?",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
details: "The timeout parameter and any pre or post lifecycle hooks will be copied from " + e.originalStrategy.toLowerCase() + " strategy to " + e.strategyData.type.toLowerCase() + " strategy. After saving the changes, " + e.originalStrategy.toLowerCase() + " strategy parameters will be removed.",
okButtonText: "Yes",
okButtonClass: "btn-primary",
cancelButtonText: "No"
<<<<<<< HEAD
};
}
<<<<<<< HEAD
<<<<<<< HEAD
=======
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(v), a.disableInputs = !0, S();
=======
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(v), r.disableInputs = !0, S();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var h = e("humanizeKind"), C = h(o.kind), w = h(n.kind);
c.update(g, t.metadata.name, r.targetObject, a).then(function() {
u.addNotification({
type: "success",
message: "Successfully added " + C + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), y();
}, function(e) {
r.disableInputs = !1, b("An error occurred attaching the " + C + " to the " + w + ".", d(e));
});
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
}
}).result.then(function() {
e.strategyData[t] = angular.copy(e.strategyData[R(e.originalStrategy)]);
}, function() {
e.strategyData[t] = {};
});
};
e.strategyChanged = function() {
var t = R(e.strategyData.type);
T() ? E(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
image: "",
command: [],
environment: []
}), e.strategyParamsPropertyName = t;
};
var N = function(e, t, n, r) {
var a = {
kind: "ImageStreamTag",
namespace: t.namespace,
name: t.imageStream + ":" + t.tagObject.tag
};
<<<<<<< HEAD
return n ? (n.imageChangeParams.from = a, n.imageChangeParams.automatic = r) : n = {
type: "ImageChange",
imageChangeParams: {
automatic: r,
containerNames: [ e ],
from: a
}
}, n;
}, D = function() {
var t = _.reject(e.updatedDeploymentConfig.spec.triggers, function(e) {
return "ImageChange" === e.type || "ConfigChange" === e.type;
});
return _.each(e.containerConfigByName, function(n, r) {
n.hasDeploymentTrigger ? t.push(N(r, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: r
}).image = n.image;
}), e.triggers.hasConfigTrigger && t.push({
type: "ConfigChange"
}), t;
}, A = function() {
m.hideNotification("edit-deployment-config-error");
};
e.save = function() {
if (e.disableInputs = !0, _.each(e.containerConfigByName, function(t, n) {
_.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: n
<<<<<<< HEAD
}).env = h.compactEntries(t.env);
}), T() && delete e.strategyData[R(e.originalStrategy)], "Rolling" === e.strategyData.type) {
var r = e.strategyData[e.strategyParamsPropertyName].maxSurge, a = Number(r);
"" === r ? e.strategyData[e.strategyParamsPropertyName].maxSurge = null : _.isFinite(a) && (e.strategyData[e.strategyParamsPropertyName].maxSurge = a);
=======
}).env = f.compactEntries(t.env);
}), w() && delete e.strategyData[S(e.originalStrategy)], "Rolling" === e.strategyData.type) {
var a = e.strategyData[e.strategyParamsPropertyName].maxSurge, r = Number(a);
"" === a ? e.strategyData[e.strategyParamsPropertyName].maxSurge = null : _.isFinite(r) && (e.strategyData[e.strategyParamsPropertyName].maxSurge = r);
>>>>>>> Patternfly vertical navigation and project bar
var o = e.strategyData[e.strategyParamsPropertyName].maxUnavailable, i = Number(o);
"" === o ? e.strategyData[e.strategyParamsPropertyName].maxUnavailable = null : _.isFinite(i) && (e.strategyData[e.strategyParamsPropertyName].maxUnavailable = i);
}
"Custom" !== e.strategyData.type && _.each([ "pre", "mid", "post" ], function(t) {
<<<<<<< HEAD
_.has(e.strategyData, [ e.strategyParamsPropertyName, t, "execNewPod", "env" ]) && (e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env = h.compactEntries(e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env));
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = h.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = D(), A(), l.update(C, e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
m.addNotification({
=======
_.has(e.strategyData, [ e.strategyParamsPropertyName, t, "execNewPod", "env" ]) && (e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env = f.compactEntries(e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env));
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = f.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = P(), R(), c.update("deploymentconfigs", e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
d.addNotification({
>>>>>>> Patternfly vertical navigation and project bar
type: "success",
message: "Deployment config " + e.updatedDeploymentConfig.metadata.name + " was successfully updated."
});
var t = d.resourceURL(e.updatedDeploymentConfig);
n.url(t);
}, function(n) {
e.disableInputs = !1, m.addNotification({
id: "edit-deployment-config-error",
type: "error",
message: "An error occurred updating deployment config " + e.updatedDeploymentConfig.metadata.name + ".",
details: t("getErrorDetails")(n)
});
});
}, e.cancel = function() {
o.history.back();
}, e.$on("$destroy", function() {
l.unwatchAll(j), A();
});
} ]), angular.module("openshiftConsole").controller("EditAutoscalerController", [ "$scope", "$filter", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "HPAService", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
if (n.kind && n.name) {
var f = [ "Deployment", "DeploymentConfig", "HorizontalPodAutoscaler", "ReplicaSet", "ReplicationController" ];
if (_.includes(f, n.kind)) {
e.kind = n.kind, e.name = n.name, "HorizontalPodAutoscaler" === n.kind ? e.disableInputs = !0 : (e.targetKind = n.kind, e.targetName = n.name), e.autoscaling = {
name: e.name
}, e.labels = [], l.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
<<<<<<< HEAD
var f = t("getErrorDetails"), v = function() {
r.history.back();
=======
} ]), angular.module("openshiftConsole").controller("ConfirmScaleController", [ "$scope", "$uibModalInstance", "resource", "type", function(e, t, n, r) {
e.resource = n, e.type = r, e.confirmScale = function() {
t.close("confirmScale");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmSaveLogController", [ "$scope", "$uibModalInstance", "object", "CLIHelp", function(e, t, n, r) {
e.object = n, e.command = r.getLogsCommand(n), e.save = function() {
t.close("save");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DeleteModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.delete = function() {
t.close("delete");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DebugTerminalModalController", [ "$scope", "$filter", "$uibModalInstance", "container", "image", function(e, t, n, r, a) {
e.container = r, e.image = a, e.$watch("debugPod.status.containerStatuses", function() {
e.containerState = _.get(e, "debugPod.status.containerStatuses[0].state");
}), e.close = function() {
n.close("close");
};
} ]), angular.module("openshiftConsole").controller("ConfirmReplaceModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.replace = function() {
t.close("replace");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ProcessOrSaveTemplateModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.continue = function() {
t.close("create");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("LinkServiceModalController", [ "$scope", "$uibModalInstance", "ServicesService", function(e, t, n) {
e.$watch("services", function(t) {
var r = n.getDependentServices(e.service);
e.options = _.filter(t, function(t) {
return t !== e.service && !_.includes(r, t.metadata.name);
}), 1 === _.size(e.options) && _.set(e, "link.selectedService", _.head(e.options));
}), e.link = function() {
t.close(_.get(e, "link.selectedService"));
}, e.cancel = function() {
t.dismiss();
};
} ]), angular.module("openshiftConsole").controller("JenkinsfileExamplesModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.ok = function() {
t.close("ok");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
e.cancel = v;
var h = function() {
d.hideNotification("edit-hpa-error");
};
e.$on("$destroy", h);
var y = a.getPreferredVersion("horizontalpodautoscalers"), b = a.getPreferredVersion("limitranges");
m.get(n.project).then(_.spread(function(t, r) {
e.project = t;
var l = "HorizontalPodAutoscaler" === n.kind ? "update" : "create";
if (o.canI({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, l, n.project)) {
var m = function(t) {
e.disableInputs = !0, (t = angular.copy(t)).metadata.labels = p.mapEntries(p.compactEntries(e.labels)), t.spec.minReplicas = e.autoscaling.minReplicas, t.spec.maxReplicas = e.autoscaling.maxReplicas, t.spec.targetCPUUtilizationPercentage = e.autoscaling.targetCPU, s.update(y, t.metadata.name, t, r).then(function(e) {
d.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully updated."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: f(t)
});
});
}, g = {};
g = "HorizontalPodAutoscaler" === n.kind ? {
resource: "horizontalpodautoscalers",
group: "autoscaling",
version: "v1"
} : {
resource: a.kindToResource(n.kind),
group: n.group
}, s.get(g, n.name, r).then(function(a) {
if (e.labels = _.map(_.get(a, "metadata.labels", {}), function(e, t) {
return {
name: t,
value: e
};
<<<<<<< HEAD
}), e.usesV2Metrics = c.usesV2Metrics(a), "HorizontalPodAutoscaler" === n.kind) e.targetKind = _.get(a, "spec.scaleTargetRef.kind"), e.targetName = _.get(a, "spec.scaleTargetRef.name"), _.assign(e.autoscaling, {
minReplicas: _.get(a, "spec.minReplicas"),
maxReplicas: _.get(a, "spec.maxReplicas"),
targetCPU: _.get(a, "spec.targetCPUUtilizationPercentage")
}), e.disableInputs = !1, e.save = function() {
m(a);
}, e.breadcrumbs = i.getBreadcrumbs({
name: e.targetName,
kind: e.targetKind,
namespace: n.project,
project: t,
subpage: "Autoscale"
}); else {
e.breadcrumbs = i.getBreadcrumbs({
object: a,
project: t,
subpage: "Autoscale"
}), e.save = function() {
e.disableInputs = !0, h();
var t = {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
=======
} ]), angular.module("openshiftConsole").controller("CommandLineController", [ "$scope", "DataService", "AuthService", "Constants", function(e, t, n, r) {
n.withUser(), e.cliDownloadURL = r.CLI, e.cliDownloadURLPresent = e.cliDownloadURL && !_.isEmpty(e.cliDownloadURL), e.loginBaseURL = t.openshiftAPIBaseUrl(), r.DISABLE_COPY_LOGIN_COMMAND || (e.sessionToken = n.UserStore().getToken());
} ]), angular.module("openshiftConsole").controller("CreatePersistentVolumeClaimController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d) {
n.projectName = t.project, n.accessModes = "ReadWriteOnce", n.claim = {}, n.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.projectName + "/browse/storage"
}, {
title: "Create Storage"
} ];
var m = {
kind: "PersistentVolumeClaim",
apiVersion: "v1",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
metadata: {
name: e.autoscaling.name,
labels: p.mapEntries(p.compactEntries(e.labels))
},
spec: {
scaleTargetRef: {
kind: a.kind,
name: a.metadata.name,
apiVersion: a.apiVersion
},
minReplicas: e.autoscaling.minReplicas,
maxReplicas: e.autoscaling.maxReplicas,
targetCPUUtilizationPercentage: e.autoscaling.targetCPU
}
<<<<<<< HEAD
};
<<<<<<< HEAD
s.create(y, null, t, r).then(function(e) {
d.addNotification({
=======
}, p = a.objectToResourceGroupVersion(m), f = function() {
l.hideNotification("create-pvc-error");
};
n.$on("$destroy", f);
var g = function() {
r.history.back();
};
n.cancel = g, u.get(t.project).then(_.spread(function(r, a) {
function o() {
var e = angular.copy(m);
e.metadata.name = n.claim.name, e.spec.accessModes = [ n.claim.accessModes || "ReadWriteOnce" ];
var t = n.claim.unit || "Mi";
if (e.spec.resources.requests.storage = n.claim.amount + t, n.claim.selectedLabels) {
var r = d.mapEntries(d.compactEntries(n.claim.selectedLabels));
_.isEmpty(r) || _.set(e, "spec.selector.matchLabels", r);
}
return n.claim.storageClass && "No Storage Class" !== n.claim.storageClass.metadata.name && (e.metadata.annotations["volume.beta.kubernetes.io/storage-class"] = n.claim.storageClass.metadata.name), e;
}
n.project = r, i.canI(p, "create", t.project) ? n.createPersistentVolumeClaim = function() {
if (f(), n.createPersistentVolumeClaimForm.$valid) {
n.disableInputs = !0;
var t = o();
s.create(p, null, t, a).then(function(e) {
l.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully created."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: f(t)
=======
_.set(a, [ t.name, "triggerData" ], o);
}), a;
}(e.updatedDeploymentConfig.spec.template.spec.containers, e.updatedDeploymentConfig.spec.triggers), e.secrets = {
pullSecrets: angular.copy(e.deploymentConfig.spec.template.spec.imagePullSecrets) || [ {
name: ""
} ]
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = C(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
type: "ConfigChange"
}), "Custom" !== e.strategyData.type || _.has(e.strategyData, "customParams.environment") || (e.strategyData.customParams.environment = []), c.list("configmaps", r, null, {
errorNotification: !1
}).then(function(t) {
b = g(t.by("metadata.name")), e.availableConfigMaps = b, e.valueFromObjects = b.concat(S);
}, function(e) {
403 !== e.status && h("Could not load config maps", v(e));
}), c.list("secrets", r, null, {
errorNotification: !1
}).then(function(t) {
S = g(t.by("metadata.name")), e.availableSecrets = S, e.valueFromObjects = b.concat(S);
var n = p.groupSecretsByType(t), a = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
>>>>>>> Adding label filter to ste secrets page
});
});
};
<<<<<<< HEAD
var o = {}, l = function() {
var n = _.get(a, "spec.template.spec.containers", []);
e.showCPURequestWarning = !c.hasCPURequest(n, o, t);
};
s.list(b, r).then(function(e) {
=======
=======
}) : u.toErrorPage("You do not have authority to update deployment config " + a.deploymentconfig + ".", "access_denied");
}));
<<<<<<< HEAD
var w = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, P = function(t) {
=======
var I = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, R = function(t) {
>>>>>>> Add search catalog in project context
_.has(e.strategyData, t) || r.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e.alerts,
message: "Some of your existing " + e.originalStrategy.toLowerCase() + " strategy parameters can be used for the " + e.strategyData.type.toLowerCase() + " strategy. Keep parameters?",
details: "The timeout parameter and any pre or post lifecycle hooks will be copied from " + e.originalStrategy.toLowerCase() + " strategy to " + e.strategyData.type.toLowerCase() + " strategy. After saving the changes, " + e.originalStrategy.toLowerCase() + " strategy parameters will be removed.",
okButtonText: "Yes",
okButtonClass: "btn-primary",
cancelButtonText: "No"
>>>>>>> Update pod controller to use getPreferredVersion
};
<<<<<<< HEAD
}
}
}).result.then(function() {
e.strategyData[t] = angular.copy(e.strategyData[C(e.originalStrategy)]);
}, function() {
e.strategyData[t] = {};
=======
} ],
link: function(e, t, r, a) {
e.hideBuild = !1, e.$watch("build", function(t) {
e.hideBuild = n(t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
};
<<<<<<< HEAD
e.strategyChanged = function() {
<<<<<<< HEAD
var t = C(e.strategyData.type);
w() ? P(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
=======
var t = j(e.strategyData.type);
I() ? R(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
>>>>>>> Add search catalog in project context
image: "",
command: [],
environment: []
}), e.strategyParamsPropertyName = t;
};
var k = function(e, t, n, a) {
var r = {
kind: "ImageStreamTag",
namespace: t.namespace,
name: t.imageStream + ":" + t.tagObject.tag
};
return n ? (n.imageChangeParams.from = r, n.imageChangeParams.automatic = a) : n = {
type: "ImageChange",
imageChangeParams: {
automatic: a,
containerNames: [ e ],
from: r
}
}, n;
}, j = function() {
var t = _.reject(e.updatedDeploymentConfig.spec.triggers, function(e) {
return "ImageChange" === e.type || "ConfigChange" === e.type;
=======
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "APIService", "DataService", "NotificationsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a, o) {
var i = n.getPreferredVersion("serviceaccounts"), s = n.getPreferredVersion("secrets");
return {
restrict: "E",
scope: {
type: "=",
serviceAccountToLink: "=?",
namespace: "=",
onCreate: "&",
onCancel: "&"
},
templateUrl: "views/directives/create-secret.html",
link: function(n) {
n.nameValidation = o, n.secretAuthTypeMap = {
image: {
label: "Image Secret",
authTypes: [ {
id: "kubernetes.io/dockercfg",
label: "Image Registry Credentials"
}, {
id: "kubernetes.io/dockerconfigjson",
label: "Configuration File"
} ]
},
source: {
label: "Source Secret",
authTypes: [ {
id: "kubernetes.io/basic-auth",
label: "Basic Authentication"
}, {
id: "kubernetes.io/ssh-auth",
label: "SSH Key"
} ]
}
}, n.secretTypes = _.keys(n.secretAuthTypeMap), n.type ? n.newSecret = {
type: n.type,
authType: n.secretAuthTypeMap[n.type].authTypes[0].id,
data: {},
linkSecret: !_.isEmpty(n.serviceAccountToLink),
pickedServiceAccountToLink: n.serviceAccountToLink || ""
} : n.newSecret = {
type: "source",
authType: "kubernetes.io/basic-auth",
data: {},
linkSecret: !1,
pickedServiceAccountToLink: ""
}, n.add = {
gitconfig: !1,
cacert: !1
}, t.canI("serviceaccounts", "list") && t.canI("serviceaccounts", "update") && r.list(i, n, function(e) {
n.serviceAccounts = e.by("metadata.name"), n.serviceAccountsNames = _.keys(n.serviceAccounts);
});
var c = function(e, t) {
var r = {
apiVersion: "v1",
kind: "Secret",
metadata: {
name: n.newSecret.data.secretName
},
type: t,
data: {}
};
switch (t) {
case "kubernetes.io/basic-auth":
e.passwordToken ? r.data = {
password: window.btoa(e.passwordToken)
} : r.type = "Opaque", e.username && (r.data.username = window.btoa(e.username)), e.gitconfig && (r.data[".gitconfig"] = window.btoa(e.gitconfig)), e.cacert && (r.data["ca.crt"] = window.btoa(e.cacert));
break;

case "kubernetes.io/ssh-auth":
r.data = {
"ssh-privatekey": window.btoa(e.privateKey)
}, e.gitconfig && (r.data[".gitconfig"] = window.btoa(e.gitconfig));
break;

case "kubernetes.io/dockerconfigjson":
var a = window.btoa(e.dockerConfig);
JSON.parse(e.dockerConfig).auths ? r.data[".dockerconfigjson"] = a : (r.type = "kubernetes.io/dockercfg", r.data[".dockercfg"] = a);
break;

case "kubernetes.io/dockercfg":
var o = window.btoa(e.dockerUsername + ":" + e.dockerPassword), i = {};
i[e.dockerServer] = {
username: e.dockerUsername,
password: e.dockerPassword,
email: e.dockerMail,
auth: o
}, r.data[".dockercfg"] = window.btoa(JSON.stringify(i));
}
return r;
}, l = function() {
a.hideNotification("create-secret-error");
}, u = function(t) {
var o = angular.copy(n.serviceAccounts[n.newSecret.pickedServiceAccountToLink]);
switch (n.newSecret.type) {
case "source":
o.secrets.push({
name: t.metadata.name
});
break;

case "image":
o.imagePullSecrets.push({
name: t.metadata.name
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
return _.each(e.containerConfigByName, function(n, a) {
n.hasDeploymentTrigger ? t.push(k(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: a
}).image = n.image;
}), e.triggers.hasConfigTrigger && t.push({
type: "ConfigChange"
}), t;
}, R = function() {
d.hideNotification("edit-deployment-config-error");
};
e.save = function() {
if (e.disableInputs = !0, _.each(e.containerConfigByName, function(t, n) {
_.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: n
<<<<<<< HEAD
}).env = g.compactEntries(t.env);
<<<<<<< HEAD
}), w() && delete e.strategyData[S(e.originalStrategy)], "Rolling" === e.strategyData.type) {
=======
}).env = f.compactEntries(t.env);
<<<<<<< HEAD
<<<<<<< HEAD
}), w() && delete e.strategyData[C(e.originalStrategy)], "Rolling" === e.strategyData.type) {
>>>>>>> Service instance details configuration and edit
=======
}), w() && delete e.strategyData[S(e.originalStrategy)], "Rolling" === e.strategyData.type) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), w() && delete e.strategyData[C(e.originalStrategy)], "Rolling" === e.strategyData.type) {
>>>>>>> Adding label filter to ste secrets page
=======
}), I() && delete e.strategyData[j(e.originalStrategy)], "Rolling" === e.strategyData.type) {
>>>>>>> Add search catalog in project context
var a = e.strategyData[e.strategyParamsPropertyName].maxSurge, r = Number(a);
"" === a ? e.strategyData[e.strategyParamsPropertyName].maxSurge = null : _.isFinite(r) && (e.strategyData[e.strategyParamsPropertyName].maxSurge = r);
var o = e.strategyData[e.strategyParamsPropertyName].maxUnavailable, i = Number(o);
"" === o ? e.strategyData[e.strategyParamsPropertyName].maxUnavailable = null : _.isFinite(i) && (e.strategyData[e.strategyParamsPropertyName].maxUnavailable = i);
}
<<<<<<< HEAD
"Custom" !== e.strategyData.type && _.each([ "pre", "mid", "post" ], function(t) {
<<<<<<< HEAD
_.has(e.strategyData, [ e.strategyParamsPropertyName, t, "execNewPod", "env" ]) && (e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env = g.compactEntries(e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env));
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = g.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = P(), R(), c.update("deploymentconfigs", e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
=======
_.has(e.strategyData, [ e.strategyParamsPropertyName, t, "execNewPod", "env" ]) && (e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env = f.compactEntries(e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = f.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = j(), R(), c.update("deploymentconfigs", e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
>>>>>>> Service instance details configuration and edit
=======
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = f.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = P(), R(), c.update("deploymentconfigs", e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
>>>>>>> Add product icons for service catalog
=======
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = f.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = j(), R(), c.update("deploymentconfigs", e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = f.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = P(), R(), c.update("deploymentconfigs", e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = f.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = j(), R(), c.update("deploymentconfigs", e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
>>>>>>> Update template service broker flag name
d.addNotification({
=======
r.update(i, n.newSecret.pickedServiceAccountToLink, o, n).then(function(e) {
a.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "success",
message: "Deployment config " + e.updatedDeploymentConfig.metadata.name + " was successfully updated."
});
<<<<<<< HEAD
var t = u.resourceURL(e.updatedDeploymentConfig);
n.url(t);
}, function(n) {
e.disableInputs = !1, d.addNotification({
id: "edit-deployment-config-error",
type: "error",
message: "An error occurred updating deployment config " + e.updatedDeploymentConfig.metadata.name + ".",
details: t("getErrorDetails")(n)
=======
}, function(r) {
a.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created."
}), n.serviceAccountToLink || a.addNotification({
id: "secret-sa-link-error",
type: "error",
message: "An error occurred while linking the secret with service account " + n.newSecret.pickedServiceAccountToLink + ".",
details: e("getErrorDetails")(r)
}), n.onCreate({
newSecret: t
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
});
}, e.cancel = function() {
o.history.back();
}, e.$on("$destroy", function() {
c.unwatchAll(y), R();
});
} ]), angular.module("openshiftConsole").controller("EditAutoscalerController", [ "$scope", "$filter", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "HPAService", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
if (n.kind && n.name) {
var g = [ "Deployment", "DeploymentConfig", "HorizontalPodAutoscaler", "ReplicaSet", "ReplicationController" ];
if (_.includes(g, n.kind)) {
e.kind = n.kind, e.name = n.name, "HorizontalPodAutoscaler" === n.kind ? e.disableInputs = !0 : (e.targetKind = n.kind, e.targetName = n.name), e.autoscaling = {
name: e.name
}, e.labels = [], l.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
<<<<<<< HEAD
var f = t("getErrorDetails"), h = function() {
=======
var g = t("getErrorDetails"), h = function() {
>>>>>>> Patternfly vertical navigation and project bar
=======
var g = t("getErrorDetails"), v = function() {
>>>>>>> Add SVG icons
a.history.back();
};
e.cancel = v;
var h = function() {
d.hideNotification("edit-hpa-error");
};
e.$on("$destroy", h);
var y = r.getPreferredVersion("horizontalpodautoscalers"), b = r.getPreferredVersion("limitranges");
m.get(n.project).then(_.spread(function(t, a) {
e.project = t;
var l = "HorizontalPodAutoscaler" === n.kind ? "update" : "create";
if (o.canI({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, l, n.project)) {
var m = function() {
e.disableInputs = !0, h();
var t = {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: e.autoscaling.name,
labels: p.mapEntries(p.compactEntries(e.labels))
},
spec: {
scaleTargetRef: {
kind: n.kind,
name: n.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: e.autoscaling.minReplicas,
maxReplicas: e.autoscaling.maxReplicas,
targetCPUUtilizationPercentage: e.autoscaling.targetCPU || e.autoscaling.defaultTargetCPU || null
}
};
s.create(y, null, t, a).then(function(e) {
d.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully created."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: g(t)
});
<<<<<<< HEAD
});
}, f = function(t) {
e.disableInputs = !0, (t = angular.copy(t)).metadata.labels = p.mapEntries(p.compactEntries(e.labels)), t.spec.minReplicas = e.autoscaling.minReplicas, t.spec.maxReplicas = e.autoscaling.maxReplicas, t.spec.targetCPUUtilizationPercentage = e.autoscaling.targetCPU || e.autoscaling.defaultTargetCPU || null, s.update(y, t.metadata.name, t, a).then(function(e) {
d.addNotification({
=======
n.aceChanged = d, n.nameChanged = function() {
n.nameTaken = !1;
}, n.create = function() {
l();
var o = c(n.newSecret.data, n.newSecret.authType);
r.create(s, null, o, n).then(function(e) {
n.newSecret.linkSecret && n.serviceAccountsNames.contains(n.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? u(e) : (a.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully updated."
}), v();
}, function(t) {
<<<<<<< HEAD
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
=======
"AlreadyExists" !== (t.data || {}).reason ? a.addNotification({
id: "create-secret-error",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: g(t)
});
});
}, S = {};
S = "HorizontalPodAutoscaler" === n.kind ? {
resource: "horizontalpodautoscalers",
group: "autoscaling",
version: "v1"
} : {
resource: r.kindToResource(n.kind),
group: n.group
}, s.get(S, n.name, a).then(function(r) {
if (e.labels = _.map(_.get(r, "metadata.labels", {}), function(e, t) {
return {
name: t,
value: e
};
<<<<<<< HEAD
}), "HorizontalPodAutoscaler" === n.kind) e.targetKind = _.get(r, "spec.scaleTargetRef.kind"), e.targetName = _.get(r, "spec.scaleTargetRef.name"), _.assign(e.autoscaling, {
minReplicas: _.get(r, "spec.minReplicas"),
maxReplicas: _.get(r, "spec.maxReplicas"),
targetCPU: _.get(r, "spec.targetCPUUtilizationPercentage")
}), e.disableInputs = !1, e.save = function() {
f(r);
}, e.breadcrumbs = i.getBreadcrumbs({
name: e.targetName,
kind: e.targetKind,
namespace: n.project,
project: t,
subpage: "Autoscale"
}); else {
e.breadcrumbs = i.getBreadcrumbs({
object: r,
project: t,
subpage: "Autoscale"
}), e.save = m;
var o = {}, l = function() {
var n = _.get(r, "spec.template.spec.containers", []);
e.showCPURequestWarning = !c.hasCPURequest(n, o, t);
};
<<<<<<< HEAD
s.list("limitranges", a).then(function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
s.list(b, a).then(function(e) {
>>>>>>> Update autoscaler controller to use getPreferredVersion
o = e.by("metadata.name"), l();
=======
}).directive("durationUntilNow", function() {
return {
restrict: "E",
scope: {
timestamp: "=",
omitSingle: "=?",
precision: "=?"
},
template: '<span data-timestamp="{{timestamp}}" data-omit-single="{{omitSingle}}" data-precision="{{precision}}" class="duration">{{timestamp | duration : null : omitSingle : precision}}</span>'
};
}), angular.module("openshiftConsole").directive("deleteLink", [ "$uibModal", "$location", "$filter", "$q", "hashSizeFilter", "APIService", "DataService", "Navigate", "NotificationsService", "Logger", function(e, t, n, r, a, o, i, s, c, l) {
var u = o.getPreferredVersion("horizontalpodautoscalers");
return {
restrict: "E",
scope: {
kind: "@",
group: "@?",
typeDisplayName: "@?",
resourceName: "@",
projectName: "@",
alerts: "=",
displayName: "@",
disableDelete: "=?",
typeNameToConfirm: "=?",
label: "@?",
buttonOnly: "@",
stayOnCurrentPage: "=?",
hpaList: "=?",
success: "=?",
redirectUrl: "@?"
},
templateUrl: function(e, t) {
return angular.isDefined(t.buttonOnly) ? "views/directives/delete-button.html" : "views/directives/delete-link.html";
},
replace: !0,
link: function(r, a, d) {
"Project" === d.kind && (r.isProject = !0), r.options = {
deleteHPAs: !0,
deleteImmediately: !1
};
var m = function(e) {
r.stayOnCurrentPage && r.alerts ? r.alerts[e.name] = e.data : c.addNotification(e.data);
}, p = function(e) {
return i.delete(u, e.metadata.name, {
namespace: r.projectName
}).then(function() {
c.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " was marked for deletion."
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
});
<<<<<<< HEAD
} else u.toErrorPage("You do not have authority to " + l + " horizontal pod autoscalers in project " + n.project + ".", "access_denied");
}));
} else u.toErrorPage("Autoscaling not supported for kind " + n.kind + ".");
} else u.toErrorPage("Kind or name parameter missing.");
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("EditHealthChecksController", [ "$filter", "$location", "$routeParams", "$scope", "AuthorizationService", "BreadcrumbsService", "APIService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
if (n.kind && n.name) {
var d = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(d, n.kind)) {
r.name = n.name, r.resourceURL = c.resourceURL(r.name, n.kind, n.project), r.breadcrumbs = o.getBreadcrumbs({
name: n.name,
kind: n.kind,
namespace: n.project,
subpage: "Edit Health Checks"
}), r.previousProbes = {};
=======
} ]), angular.module("openshiftConsole").controller("EditHealthChecksController", [ "$filter", "$location", "$routeParams", "$scope", "AuthorizationService", "BreadcrumbsService", "APIService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u) {
if (n.kind && n.name) {
var d = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(d, n.kind)) {
a.name = n.name, a.resourceURL = c.resourceURL(a.name, n.kind, n.project), a.breadcrumbs = o.getBreadcrumbs({
name: n.name,
kind: n.kind,
namespace: n.project,
subpage: "Edit Health Checks"
}), a.previousProbes = {};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var m = e("getErrorDetails"), p = e("upperFirst"), g = function(e, t) {
=======
var m = e("getErrorDetails"), p = e("upperFirst"), f = function(e, t) {
>>>>>>> Patternfly vertical navigation and project bar
=======
var p = e("getErrorDetails"), m = e("upperFirst"), f = function(e, t) {
>>>>>>> Updates for Service Instance & Bindings
=======
var m = e("getErrorDetails"), p = e("upperFirst"), f = function(e, t) {
>>>>>>> Support EnvFrom in the Env Editors
l.addNotification({
id: "add-health-check-error",
=======
}, f = function() {
if (!r.stayOnCurrentPage) if (r.redirectUrl) t.url(r.redirectUrl); else if ("Project" === r.kind) if ("/" !== t.path()) {
var e = URI("/");
t.url(e);
} else r.$emit("deleteProject"); else s.toResourceList(o.kindToResource(r.kind), r.projectName);
};
r.openDeleteModal = function() {
r.disableDelete || e.open({
animation: !0,
templateUrl: "views/modals/delete-resource.html",
controller: "DeleteModalController",
scope: r
}).result.then(function() {
var e = r.kind, t = r.resourceName, a = r.typeDisplayName || n("humanizeKind")(e), s = _.capitalize(a) + " '" + (r.displayName ? r.displayName : t) + "'", u = "Project" === r.kind ? {} : {
namespace: r.projectName
}, d = {};
r.options.deleteImmediately && (d.gracePeriodSeconds = 0, d.propagationPolicy = null), "servicecatalog.k8s.io" === r.group && (d.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: r.group
}, t, u, d).then(function() {
c.addNotification({
type: "success",
message: s + " was marked for deletion."
}), r.success && r.success(), r.options.deleteHPAs && _.each(r.hpaList, p), f();
}).catch(function(e) {
m({
name: t,
data: {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "error",
message: e,
details: t
});
<<<<<<< HEAD
}, f = function() {
<<<<<<< HEAD
t.url(r.resourceURL);
};
r.cancel = f;
var v = function() {
l.hideNotification("add-health-check-error");
};
r.$on("$destroy", v), u.get(n.project).then(_.spread(function(t, u) {
var d = e("humanizeKind")(n.kind) + ' "' + r.name + '"', h = {
resource: i.kindToResource(n.kind),
group: n.group
};
<<<<<<< HEAD
a.canI(h, "update", n.project) ? s.get(h, r.name, u).then(function(e) {
var a = r.object = angular.copy(e);
r.breadcrumbs = o.getBreadcrumbs({
object: a,
project: t,
subpage: "Edit Health Checks"
}), r.containers = _.get(a, "spec.template.spec.containers"), r.addProbe = function(e, t) {
e[t] = _.get(r.previousProbes, [ e.name, t ], {}), r.form.$setDirty();
}, r.removeProbe = function(e, t) {
_.set(r.previousProbes, [ e.name, t ], e[t]), delete e[t], r.form.$setDirty();
}, r.save = function() {
r.disableInputs = !0, v(), s.update(i.kindToResource(n.kind), r.name, a, u).then(function() {
=======
=======
}, g = function() {
>>>>>>> Patternfly vertical navigation and project bar
t.url(a.resourceURL);
=======
}), angular.module("openshiftConsole").directive("editConfigMap", [ "DNS1123_SUBDOMAIN_VALIDATION", function(e) {
return {
require: "^form",
restrict: "E",
scope: {
configMap: "=model",
showNameInput: "="
},
templateUrl: "views/directives/edit-config-map.html",
link: function(t, n, r, a) {
t.form = a, t.nameValidation = e, t.addItem = function() {
t.data.push({
key: "",
value: ""
}), t.form.$setDirty();
}, t.removeItem = function(e) {
t.data.splice(e, 1), t.form.$setDirty();
}, t.getKeys = function() {
return _.map(t.data, "key");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
a.cancel = g;
var v = function() {
l.hideNotification("add-health-check-error");
};
a.$on("$destroy", v), u.get(n.project).then(_.spread(function(t, u) {
var d = e("humanizeKind")(n.kind) + ' "' + a.name + '"', h = {
resource: i.kindToResource(n.kind),
group: n.group
};
<<<<<<< HEAD
r.canI(h, "update", n.project) ? s.get(h, a.name, u).then(function(e) {
var r = a.object = angular.copy(e);
a.breadcrumbs = o.getBreadcrumbs({
object: r,
project: t,
subpage: "Edit Health Checks"
}), a.containers = _.get(r, "spec.template.spec.containers"), a.addProbe = function(e, t) {
e[t] = _.get(a.previousProbes, [ e.name, t ], {}), a.form.$setDirty();
}, a.removeProbe = function(e, t) {
_.set(a.previousProbes, [ e.name, t ], e[t]), delete e[t], a.form.$setDirty();
}, a.save = function() {
<<<<<<< HEAD
a.disableInputs = !0, h(), s.update(i.kindToResource(n.kind), a.name, r, u).then(function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.disableInputs = !0, v(), s.update(i.kindToResource(n.kind), a.name, r, u).then(function() {
>>>>>>> Add SVG icons
l.addNotification({
type: "success",
message: p(d) + " was updated."
}), g();
}, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
r.disableInputs = !1, g(p(d) + " could not be updated.", m(e));
=======
a.disableInputs = !1, g(p(d) + " could not be updated.", m(e));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.disableInputs = !1, f(p(d) + " could not be updated.", m(e));
>>>>>>> Patternfly vertical navigation and project bar
=======
a.disableInputs = !1, f(m(d) + " could not be updated.", p(e));
>>>>>>> Updates for Service Instance & Bindings
=======
a.disableInputs = !1, f(p(d) + " could not be updated.", m(e));
>>>>>>> Support EnvFrom in the Env Editors
});
};
}, function(e) {
f(p(d) + " could not be loaded.", m(e));
}) : c.toErrorPage("You do not have authority to update " + d + ".", "access_denied");
}));
} else c.toErrorPage("Health checks are not supported for kind " + n.kind + ".");
} else c.toErrorPage("Kind or name parameter missing.");
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("EditRouteController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "RoutesService", function(e, t, n, r, a, o, i, s, c, l, u) {
r.renderOptions = {
hideFilterWidget: !0
}, r.projectName = n.project, r.routeName = n.route, r.loading = !0, r.routeURL = s.resourceURL(r.routeName, "Route", r.projectName), r.breadcrumbs = [ {
title: "Routes",
link: "project/" + r.projectName + "/browse/routes"
}, {
title: r.routeName,
link: r.routeURL
}, {
title: "Edit"
} ];
var d = function() {
c.hideNotification("edit-route-error");
=======
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentFrom", {
controller: [ "$attrs", "$filter", "$scope", "keyValueEditorUtils", "SecretsService", function(e, t, n, r, a) {
var o = this, i = t("canI"), s = t("humanizeKind"), c = _.uniqueId(), l = /^[A-Za-z_][A-Za-z0-9_]*$/, u = !1;
o.setFocusClass = "edit-environment-from-set-focus-" + c, o.isEnvVarInvalid = function(e) {
return !l.test(e);
}, o.hasInvalidEnvVar = function(e) {
return _.some(e, function(e, t) {
return o.isEnvVarInvalid(t);
});
}, o.viewOverlayPanel = function(e) {
o.decodedData = e.data, o.overlayPaneEntryDetails = e, "Secret" === e.kind && (o.decodedData = a.decodeSecretData(e.data)), o.overlayPanelVisible = !0;
}, o.closeOverlayPanel = function() {
o.showSecret = !1, o.overlayPanelVisible = !1;
};
var d = function(e, t) {
e && e.push(t || {});
};
o.onAddRow = function() {
d(o.envFromEntries), r.setFocusOn("." + o.setFocusClass);
}, o.deleteEntry = function(e, t) {
o.envFromEntries && !o.envFromEntries.length || (o.envFromEntries.splice(e, t), o.envFromEntries.length || d(o.envFromEntries), o.updateEntries(o.envFromEntries), o.editEnvironmentFromForm.$setDirty());
}, o.hasOptions = function() {
return !_.isEmpty(o.envFromSelectorOptions);
}, o.hasEntries = function() {
return _.some(o.entries, function(e) {
return _.get(e, "configMapRef.name") || _.get(e, "secretRef.name");
});
}, o.isEnvFromReadonly = function(e) {
return !0 === o.isReadonly || e && !0 === e.isReadonly;
}, o.groupByKind = function(e) {
return s(e.kind);
}, o.dragControlListeners = {
accept: function(e, t) {
return e.itemScope.sortableScope.$id === t.$id;
},
orderChanged: function() {
o.editEnvironmentFromForm.$setDirty();
}
}, o.envFromObjectSelected = function(e, t, n) {
var r = {};
switch (n.kind) {
case "Secret":
r.secretRef = {
name: n.metadata.name
}, delete o.envFromEntries[e].configMapRef;
break;

case "ConfigMap":
r.configMapRef = {
name: n.metadata.name
}, delete o.envFromEntries[e].secretRef;
}
t.prefix && (r.prefix = t.prefix), _.assign(o.envFromEntries[e], r), o.updateEntries(o.envFromEntries);
}, o.updateEntries = function(e) {
u = !0, o.entries = _.filter(e, function(e) {
return e.secretRef || e.configMapRef;
});
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
r.$on("$destroy", d);
var m = function() {
<<<<<<< HEAD
t.path(r.routeURL);
};
r.cancel = m;
var p, g = a.getPreferredVersion("routes"), f = a.getPreferredVersion("services");
l.get(n.project).then(_.spread(function(t, a) {
if (r.project = t, o.canI("routes", "update", n.project)) {
var l, v = e("orderByDisplayName"), h = function() {
s.toErrorPage('Editing routes with non-service targets is unsupported. You can edit the route with the "Edit YAML" action instead.');
=======
var e = {}, t = {};
o.envFromEntries = o.entries || [], o.envFromEntries.length || d(o.envFromEntries), _.each(o.envFromSelectorOptions, function(n) {
switch (n.kind) {
case "ConfigMap":
e[n.metadata.name] = n;
break;

case "Secret":
t[n.metadata.name] = n;
}
}), _.each(o.envFromEntries, function(n) {
var r, a;
if (n.configMapRef && (r = "configMapRef", a = "configmaps"), n.secretRef && (r = "secretRef", a = "secrets"), r && a) {
var o = n[r].name;
n.configMapRef && o in e && (n.selectedEnvFrom = e[o]), n.secretRef && o in t && (n.selectedEnvFrom = t[o]), i(a, "get") || (n.isReadonly = !0);
}
});
};
o.$onInit = function() {
m(), "cannotDelete" in e && (o.cannotDeleteAny = !0), "cannotSort" in e && (o.cannotSort = !0), "showHeader" in e && (o.showHeader = !0), o.envFromEntries && !o.envFromEntries.length && d(o.envFromEntries);
}, n.$watch("$ctrl.entries", function() {
u ? u = !1 : m();
}), o.$onChanges = function(e) {
e.envFromSelectorOptions && m();
};
} ],
bindings: {
entries: "=",
envFromSelectorOptions: "<",
isReadonly: "<?"
},
templateUrl: "views/directives/edit-environment-from.html"
});
}(), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "APIService", "DataService", "KeywordService", "Logger", function(e, t, n, r, a, o) {
return {
restrict: "E",
scope: {
apiObjects: "=?",
projectContext: "="
},
templateUrl: "views/directives/events.html",
controller: [ "$scope", function(e) {
var t, i = {}, s = [], c = n.getPreferredVersion("events");
e.filter = {
text: ""
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
i.get(g, r.routeName, a).then(function(e) {
"Service" === e.spec.to.kind ? (l = angular.copy(e), p = _.get(l, "spec.host"), "Subdomain" === _.get(l, "spec.wildcardPolicy") && (p = "*." + u.getSubdomain(l)), r.routing = {
host: p,
wildcardPolicy: _.get(l, "spec.wildcardPolicy"),
path: _.get(l, "spec.path"),
targetPort: _.get(l, "spec.port.targetPort"),
tls: angular.copy(_.get(l, "spec.tls"))
}, i.list(f, a).then(function(e) {
r.loading = !1;
var t = e.by("metadata.name");
r.routing.to = l.spec.to, r.routing.alternateServices = [], _.each(_.get(l, "spec.alternateBackends"), function(e) {
if ("Service" !== e.kind) return h(), !1;
r.routing.alternateServices.push(e);
}), r.services = v(t);
})) : h();
}, function() {
s.toErrorPage("Could not load route " + r.routeName + ".");
});
<<<<<<< HEAD
=======
}, u = [], d = _.get(e, "sortConfig.currentField.id"), m = {
lastTimestamp: !0
}, p = function() {
var t = _.get(e, "sortConfig.currentField.id", "lastTimestamp");
d !== t && (d = t, e.sortConfig.isAscending = !m[d]);
var n = e.sortConfig.isAscending ? "asc" : "desc";
u = _.orderBy(e.events, [ t, "metadata.resourceVersion" ], [ n, n ]);
}, f = [], g = function() {
e.filterExpressions = f = a.generateKeywords(_.get(e, "filter.text"));
}, v = [ "reason", "message", "type" ];
e.resourceKind && e.resourceName || v.splice(0, 0, "involvedObject.name", "involvedObject.kind");
var h = function() {
e.filteredEvents = a.filterForKeywords(u, v, f);
};
e.$watch("filter.text", _.debounce(function() {
g(), e.$evalAsync(h);
}, 50, {
maxWait: 250
}));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var y = function() {
var e = angular.copy(l), t = _.get(r, "routing.to.name");
_.set(e, "spec.to.name", t);
var n = _.get(r, "routing.to.weight");
isNaN(n) || _.set(e, "spec.to.weight", n);
var a = r.routing.host;
p !== a && (a.startsWith("*.") && (a = "wildcard" + a.substring(1)), e.spec.host = a), e.spec.path = r.routing.path;
var o = r.routing.targetPort;
o ? _.set(e, "spec.port.targetPort", o) : delete e.spec.port, _.get(r, "routing.tls.termination") ? (e.spec.tls = r.routing.tls, "passthrough" === e.spec.tls.termination && (delete e.spec.path, delete e.spec.tls.certificate, delete e.spec.tls.key, delete e.spec.tls.caCertificate), "reencrypt" !== e.spec.tls.termination && delete e.spec.tls.destinationCACertificate) : delete e.spec.tls;
var i = _.get(r, "routing.alternateServices", []);
return _.isEmpty(i) ? delete e.spec.alternateBackends : e.spec.alternateBackends = _.map(i, function(e) {
=======
} ]), angular.module("openshiftConsole").controller("EditRouteController", [ "$filter", "$location", "$routeParams", "$scope", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "RoutesService", function(e, t, n, a, r, o, i, s, c, l) {
=======
} ]), angular.module("openshiftConsole").controller("EditRouteController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "RoutesService", function(e, t, n, a, r, o, i, s, c, l, u) {
>>>>>>> Update edit/route controller to use getPreferredVersion
a.renderOptions = {
hideFilterWidget: !0
}, a.projectName = n.project, a.routeName = n.route, a.loading = !0, a.routeURL = s.resourceURL(a.routeName, "Route", a.projectName), a.breadcrumbs = [ {
title: "Routes",
link: "project/" + a.projectName + "/browse/routes"
}, {
title: a.routeName,
link: a.routeURL
}, {
title: "Edit"
} ];
var d = function() {
c.hideNotification("edit-route-error");
};
a.$on("$destroy", d);
var m = function() {
t.path(a.routeURL);
};
a.cancel = m;
var p = r.getPreferredVersion("routes"), f = r.getPreferredVersion("services");
l.get(n.project).then(_.spread(function(t, r) {
if (a.project = t, o.canI("routes", "update", n.project)) {
var l, g = e("orderByDisplayName"), v = function() {
s.toErrorPage('Editing routes with non-service targets is unsupported. You can edit the route with the "Edit YAML" action instead.');
};
i.get(p, a.routeName, r).then(function(e) {
if ("Service" === e.spec.to.kind) {
l = angular.copy(e);
var t = _.get(l, "spec.host");
"Subdomain" === _.get(l, "spec.wildcardPolicy") && (t = "*." + u.getSubdomain(l)), a.routing = {
host: t,
wildcardPolicy: _.get(l, "spec.wildcardPolicy"),
path: _.get(l, "spec.path"),
targetPort: _.get(l, "spec.port.targetPort"),
tls: angular.copy(_.get(l, "spec.tls"))
}, i.list(f, r).then(function(e) {
a.loading = !1;
var t = e.by("metadata.name");
a.routing.to = l.spec.to, a.routing.alternateServices = [], _.each(_.get(l, "spec.alternateBackends"), function(e) {
if ("Service" !== e.kind) return v(), !1;
a.routing.alternateServices.push(e);
}), a.services = g(t);
});
<<<<<<< HEAD
} else v();
}, function() {
s.toErrorPage("Could not load route " + a.routeName + ".");
});
var h = function() {
var e = angular.copy(l), t = _.get(a, "routing.to.name");
_.set(e, "spec.to.name", t);
var n = _.get(a, "routing.to.weight");
isNaN(n) || _.set(e, "spec.to.weight", n), e.spec.path = a.routing.path;
var r = a.routing.targetPort;
r ? _.set(e, "spec.port.targetPort", r) : delete e.spec.port, _.get(a, "routing.tls.termination") ? (e.spec.tls = a.routing.tls, "passthrough" === e.spec.tls.termination && (delete e.spec.path, delete e.spec.tls.certificate, delete e.spec.tls.key, delete e.spec.tls.caCertificate), "reencrypt" !== e.spec.tls.termination && delete e.spec.tls.destinationCACertificate) : delete e.spec.tls;
var o = _.get(a, "routing.alternateServices", []);
return _.isEmpty(o) ? delete e.spec.alternateBackends : e.spec.alternateBackends = _.map(o, function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
kind: "Service",
name: e.name,
weight: e.weight
};
}), e;
};
<<<<<<< HEAD
<<<<<<< HEAD
r.updateRoute = function() {
if (r.form.$valid) {
d(), r.disableInputs = !0;
var t = y();
i.update(g, r.routeName, t, a).then(function() {
c.addNotification({
type: "success",
message: "Route " + r.routeName + " was successfully updated."
}), m();
}, function(t) {
r.disableInputs = !1, c.addNotification({
type: "error",
id: "edit-route-error",
message: "An error occurred updating route " + r.routeName + ".",
=======
a.updateRoute = function() {
if (a.form.$valid) {
u(), a.disableInputs = !0;
var t = g();
o.update("routes", a.routeName, t, c).then(function() {
s.addNotification({
type: "success",
message: "Route " + a.routeName + " was successfully updated."
}), d();
}, function(t) {
a.disableInputs = !1, s.addNotification({
type: "error",
id: "edit-route-error",
message: "An error occurred updating route " + a.routeName + ".",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
details: e("getErrorDetails")(t)
});
=======
}), s.push(r.watch(c, e.projectContext, function(n) {
t = n.by("metadata.name"), b(), o.log("events (subscribe)", e.filteredEvents);
}, {
skipDigest: !0
})), e.$on("$destroy", function() {
r.unwatchAll(s);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("eventsSidebar", [ "$rootScope", "APIService", "DataService", "Logger", function(e, t, n, r) {
var a = t.getPreferredVersion("events");
return {
restrict: "E",
scope: {
projectContext: "=",
collapsed: "="
},
templateUrl: "views/directives/events-sidebar.html",
controller: [ "$scope", function(t) {
var o = [];
o.push(n.watch(a, t.projectContext, function(e) {
var n = e.by("metadata.name");
t.events = _.orderBy(n, [ "lastTimestamp" ], [ "desc" ]), t.warningCount = _.size(_.filter(n, {
type: "Warning"
})), r.log("events (subscribe)", t.events);
})), t.highlightedEvents = {}, t.collapseSidebar = function() {
t.collapsed = !0;
};
var i = [];
i.push(e.$on("event.resource.highlight", function(e, n) {
var r = _.get(n, "kind"), a = _.get(n, "metadata.name");
r && a && _.each(t.events, function(e) {
e.involvedObject.kind === r && e.involvedObject.name === a && (t.highlightedEvents[r + "/" + a] = !0);
});
})), i.push(e.$on("event.resource.clear-highlight", function(e, n) {
var r = _.get(n, "kind"), a = _.get(n, "metadata.name");
r && a && _.each(t.events, function(e) {
e.involvedObject.kind === r && e.involvedObject.name === a && (t.highlightedEvents[r + "/" + a] = !1);
});
})), t.$on("$destroy", function() {
n.unwatchAll(o), _.each(i, function(e) {
e();
}), i = null;
});
} ]
};
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "APIService", "DataService", "Logger", function(e, t, n, r) {
var a = t.getPreferredVersion("events");
return {
restrict: "E",
scope: {
projectContext: "=",
sidebarCollapsed: "="
},
templateUrl: "views/directives/events-badge.html",
controller: [ "$scope", function(t) {
var o = [], i = e("orderObjectsByDate");
o.push(n.watch(a, t.projectContext, function(e) {
var n = e.by("metadata.name");
t.events = i(n, !0), t.warningCount = _.size(_.filter(n, {
type: "Warning"
})), t.normalCount = _.size(_.filter(n, {
type: "Normal"
})), r.log("events (subscribe)", t.events);
})), t.expandSidebar = function() {
t.sidebarCollapsed = !1;
}, t.$on("$destroy", function() {
n.unwatchAll(o);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("fromFile", [ "$filter", "$location", "$q", "$uibModal", "APIService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "QuotaService", "SecurityCheckService", "TaskList", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
return {
restrict: "E",
scope: {
project: "=",
isDialog: "="
},
templateUrl: "views/directives/from-file.html",
controller: [ "$scope", function(p) {
function f(e) {
return !!e.kind || (p.error = {
message: "Resource is missing kind field."
}, !1);
}
function g(e) {
return !!p.isList || (e.metadata ? e.metadata.name ? !e.metadata.namespace || e.metadata.namespace === p.input.selectedProject.metadata.name || (p.error = {
message: e.kind + " " + e.metadata.name + " can't be created in project " + e.metadata.namespace + ". Can't create resource in different projects."
}, !1) : (p.error = {
message: "Resource name is missing in metadata field."
}, !1) : (p.error = {
message: "Resource is missing metadata field."
}, !1));
}
function v() {
r.open({
animation: !0,
templateUrl: "views/modals/process-or-save-template.html",
controller: "ProcessOrSaveTemplateModalController",
scope: p
}).result.then(function() {
p.templateOptions.add ? y() : (o.setTemplate(p.resourceList[0]), b());
});
}
function h() {
r.open({
animation: !0,
templateUrl: "views/modals/confirm-replace.html",
controller: "ConfirmReplaceModalController",
scope: p
}).result.then(function() {
l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
<<<<<<< HEAD
};
<<<<<<< HEAD
} else s.toErrorPage("You do not have authority to update route " + n.routeName + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("EditYAMLController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "gettext", "gettextCatalog", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
if (r.kind && r.name) {
var g = t("humanizeKind");
e.alerts = {}, e.name = r.name, e.resourceURL = l.resourceURL(e.name, r.kind, r.project), e.breadcrumbs = [ {
title: r.name,
link: r.returnURL
=======
function y() {
var e = p.createResources.length, t = p.updateResources.length;
if (p.resourceKind.endsWith("List")) {
<<<<<<< HEAD
var a = [];
t > 0 && a.push(k()), e > 0 && a.push(w()), n.all(a).then(b);
=======
var r = [];
t > 0 && r.push(P()), e > 0 && r.push(w()), n.all(r).then(b);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else C();
}
function b() {
var e, n;
T(), "Template" === p.resourceKind && p.templateOptions.process && !p.errorOccurred ? p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
template: p.resource
}) : (n = p.templateOptions.add || p.updateResources.length > 0 ? p.input.selectedProject.metadata.name : "", e = s.createFromTemplateURL(p.resource, p.input.selectedProject.metadata.name, {
namespace: n
}), t.url(e)) : p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
resource: p.resource,
isList: p.isList
}) : (e = s.projectOverviewURL(p.input.selectedProject.metadata.name), t.url(e));
}
function S(e) {
var t = a.objectToResourceGroupVersion(e);
return t ? a.apiInfo(t) ? i.get(t, e.metadata.name, {
namespace: p.input.selectedProject.metadata.name
>>>>>>> Bug 1505281 - Improve import YAML results message
}, {
title: "Edit YAML"
} ];
var f = function() {
e.modified = !1, r.returnURL ? n.url(r.returnURL) : a.history.back();
}, v = [];
p.get(r.project).then(_.spread(function(n, a) {
var s = {
resource: o.kindToResource(r.kind),
group: r.group
};
i.canI(s, "update", r.project) ? (c.get(s, e.name, a, {
errorNotification: !1
}).then(function(n) {
var i = n;
_.set(e, "updated.resource", angular.copy(n)), e.$watch("updated.resource", function(t, n) {
t !== n && (e.modified = !0);
=======
a.updateRoute = function() {
if (a.form.$valid) {
d(), a.disableInputs = !0;
var t = h();
i.update(p, a.routeName, t, r).then(function() {
c.addNotification({
type: "success",
message: "Route " + a.routeName + " was successfully updated."
}), m();
}, function(t) {
a.disableInputs = !1, c.addNotification({
type: "error",
id: "edit-route-error",
message: "An error occurred updating route " + a.routeName + ".",
details: e("getErrorDetails")(t)
});
>>>>>>> Update edit/route controller to use getPreferredVersion
});
var l = function(e) {
return _.get(e, "metadata.resourceVersion");
};
<<<<<<< HEAD
e.save = function() {
var n = e.updated.resource;
if (e.modified = !1, n.kind === i.kind) {
var a = o.objectToResourceGroupVersion(i), s = o.objectToResourceGroupVersion(n);
s ? s.group === a.group ? o.apiInfo(s) ? (e.updatingNow = !0, c.update(a, i.metadata.name, n, {
namespace: i.metadata.namespace
}).then(function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
var a = _.get(n, "metadata.resourceVersion");
if (_.get(t, "metadata.resourceVersion") === a) return e.alerts["no-changes-applied"] = {
type: "warning",
message: m.getString(d("No changes were applied to")) + g(r.kind) + " " + r.name + ".",
details: m.getString(d("Make sure any new fields you may have added are supported API fields."))
}, void (e.updatingNow = !1);
u.addNotification({
=======
var n = angular.copy(e), a = angular.copy(t.metadata);
a.annotations = e.metadata.annotations, a.labels = e.metadata.labels, n.metadata = a, p.updateResources.push(n);
=======
var n = angular.copy(e), r = angular.copy(t.metadata);
r.annotations = e.metadata.annotations, r.labels = e.metadata.labels, n.metadata = r, p.updateResources.push(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, function() {
p.createResources.push(e);
}) : (p.errorOccurred = !0, void (p.error = {
message: a.unsupportedObjectKindOrVersion(e)
})) : (p.errorOccurred = !0, void (p.error = {
message: a.invalidObjectKindOrVersion(e)
}));
}
function C() {
var t;
_.isEmpty(p.createResources) ? (t = _.head(p.updateResources), i.update(a.kindToResource(t.kind), t.metadata.name, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = j(t.kind);
c.addNotification({
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
type: "success",
message: g(r.kind, !0) + " " + r.name + " was successfully updated."
}), f();
=======
} else i.toErrorPage("You do not have authority to update route " + n.routeName + ".", "access_denied");
=======
} else s.toErrorPage("You do not have authority to update route " + n.routeName + ".", "access_denied");
>>>>>>> Update edit/route controller to use getPreferredVersion
}));
} ]), angular.module("openshiftConsole").controller("EditYAMLController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d) {
if (a.kind && a.name) {
var m = t("humanizeKind");
e.alerts = {}, e.name = a.name, e.resourceURL = l.resourceURL(e.name, a.kind, a.project), e.breadcrumbs = [ {
title: a.name,
link: a.returnURL
}, {
title: "Edit YAML"
} ];
var p = function() {
e.modified = !1, a.returnURL ? n.url(a.returnURL) : r.history.back();
};
e.$watch("resource", function(t, n) {
t !== n && (e.modified = !0);
});
<<<<<<< HEAD
var f = [];
d.get(a.project).then(_.spread(function(n, r) {
var s = {
resource: o.kindToResource(a.kind),
group: a.group
};
i.canI(s, "update", a.project) ? (c.get(s, e.name, r, {
errorNotification: !1
}).then(function(n) {
var i = n;
_.set(e, "updated.resource", angular.copy(n));
var l = function(e) {
return _.get(e, "metadata.resourceVersion");
};
e.save = function() {
var n = e.updated.resource;
if (e.modified = !1, n.kind === i.kind) {
var r = o.objectToResourceGroupVersion(i), s = o.objectToResourceGroupVersion(n);
s ? s.group === r.group ? o.apiInfo(s) ? (e.updatingNow = !0, c.update(r, i.metadata.name, i, {
namespace: i.metadata.namespace
}).then(function(t) {
var r = _.get(n, "metadata.resourceVersion");
if (_.get(t, "metadata.resourceVersion") === r) return e.alerts["no-changes-applied"] = {
type: "warning",
message: "No changes were applied to " + m(a.kind) + " " + a.name + ".",
details: "Make sure any new fields you may have added are supported API fields."
}, void (e.updatingNow = !1);
u.addNotification({
=======
})) : (t = _.head(p.createResources), i.create(a.kindToResource(t.kind), null, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = j(t.kind);
c.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "success",
<<<<<<< HEAD
<<<<<<< HEAD
message: m(a.kind, !0) + " " + a.name + " was successfully updated."
}), p();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: p(a.kind, !0) + " " + a.name + " was successfully updated."
}), m();
>>>>>>> Updates for Service Instance & Bindings
=======
message: m(a.kind, !0) + " " + a.name + " was successfully updated."
}), p();
>>>>>>> Support EnvFrom in the Env Editors
}, function(n) {
e.updatingNow = !1, e.error = {
message: t("getErrorDetails")(n)
};
})) : e.error = {
message: o.unsupportedObjectKindOrVersion(n)
} : e.error = {
<<<<<<< HEAD
message: "Cannot change resource group (original: " + (a.group || "<none>") + ", modified: " + (s.group || "<none>") + ")."
=======
message: "Cannot change resource group (original: " + (r.group || "<none>") + ", modified: " + (s.group || "<none>") + ")."
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} : e.error = {
message: o.invalidObjectKindOrVersion(n)
};
} else e.error = {
message: "Cannot change resource kind (original: " + i.kind + ", modified: " + (n.kind || "<unspecified>") + ")."
};
}, e.cancel = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
f();
}, v.push(c.watchObject(s, e.name, a, function(t, n) {
=======
p();
<<<<<<< HEAD
<<<<<<< HEAD
}, f.push(c.watchObject(s, e.name, r, function(t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, g.push(c.watchObject(s, e.name, r, function(t, n) {
>>>>>>> Improve YAML editor validation and feedback
=======
=======
m();
>>>>>>> Updates for Service Instance & Bindings
=======
p();
>>>>>>> Support EnvFrom in the Env Editors
}, f.push(c.watchObject(s, e.name, r, function(t, n) {
>>>>>>> Patternfly vertical navigation and project bar
e.resourceChanged = l(t) !== l(i), e.resourceDeleted = "DELETED" === n;
}, {
errorNotification: !1
}));
<<<<<<< HEAD
}, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
l.toErrorPage("Could not load " + g(r.kind) + " '" + r.name + "'. " + t("getErrorDetails")(e));
}), e.$on("$destroy", function() {
c.unwatchAll(v);
})) : l.toErrorPage("You do not have authority to update " + g(r.kind) + " " + r.name + ".", "access_denied");
}));
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("BrowseCategoryController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "Constants", "DataService", "LabelFilter", "Navigate", "ProjectsService", "gettext", function(e, t, n, r, a, o, i, s, c, l, u, d) {
e.projectName = a.project;
var m = function(t, n) {
var r;
return _.some(t, function(t) {
if (r = _.find(t.items, {
id: n
})) {
e.category = r;
var a = _.get(r, "subcategories", []);
return e.subcategories = [ {
id: "",
label: ""
} ].concat(a), !0;
}
return !1;
}), r;
}, p = i.CATALOG_CATEGORIES, g = "none" === a.category ? "" : a.category;
if (e.category = m(p, g), e.category) {
var f;
!a.subcategory || (e.category, g = "none" === a.subcategory ? "" : a.subcategory, f = _.get(e.category, "subcategories", []), e.category = m(f, g), e.category) ? (e.alerts = e.alerts || {}, u.get(a.project).then(_.spread(function(t, n) {
e.project = t, e.context = n, s.list("imagestreams", {
=======
l.toErrorPage("Could not load " + m(a.kind) + " '" + a.name + "'. " + t("getErrorDetails")(e));
=======
l.toErrorPage("Could not load " + p(a.kind) + " '" + a.name + "'. " + t("getErrorDetails")(e));
>>>>>>> Updates for Service Instance & Bindings
=======
l.toErrorPage("Could not load " + m(a.kind) + " '" + a.name + "'. " + t("getErrorDetails")(e));
>>>>>>> Support EnvFrom in the Env Editors
}), e.$on("$destroy", function() {
c.unwatchAll(f);
})) : l.toErrorPage("You do not have authority to update " + m(a.kind) + " " + a.name + ".", "access_denied");
}));
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("BrowseCategoryController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "Constants", "DataService", "LabelFilter", "Navigate", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u) {
e.projectName = r.project;
var d = function(t, n) {
var a;
return _.some(t, function(t) {
if (a = _.find(t.items, {
id: n
})) {
e.category = a;
var r = _.get(a, "subcategories", []);
return e.subcategories = [ {
id: "",
label: ""
} ].concat(r), !0;
}
return !1;
}), a;
}, m = i.CATALOG_CATEGORIES, p = "none" === r.category ? "" : r.category;
if (e.category = d(m, p), e.category) {
var f, g;
!r.subcategory || (f = e.category, p = "none" === r.subcategory ? "" : r.subcategory, g = _.get(e.category, "subcategories", []), e.category = d(g, p), e.category) ? (e.alerts = e.alerts || {}, e.breadcrumbs = [ {
title: "Add to Project",
link: "project/" + e.projectName + "/create"
}, {
title: "Catalog",
link: "project/" + e.projectName + "/create?tab=fromCatalog"
} ], f && e.breadcrumbs.push({
title: f.label,
link: "project/" + e.projectName + "/create/category/" + f.id
}), e.breadcrumbs.push({
title: e.category.label
<<<<<<< HEAD
}), u.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, e.breadcrumbs[0].title = t("displayName")(n), s.list("imagestreams", {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), u.get(r.project).then(_.spread(function(t, n) {
e.project = t, e.context = n, s.list("imagestreams", {
>>>>>>> Patternfly vertical navigation and project bar
namespace: "openshift"
}).then(function(t) {
e.openshiftImageStreams = t.by("metadata.name");
}), s.list("templates", {
namespace: "openshift"
<<<<<<< HEAD
<<<<<<< HEAD
}, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.openshiftTemplates = t.by("metadata.name");
}), "openshift" === a.project ? (e.projectImageStreams = [], e.projectTemplates = []) : (s.list("imagestreams", n).then(function(t) {
e.projectImageStreams = t.by("metadata.name");
}), s.list("templates", n, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.projectTemplates = t.by("metadata.name");
}));
}))) : l.toErrorPage("Catalog category " + a.category + "/" + a.subcategory + " not found.");
} else l.toErrorPage("Catalog category " + a.category + " not found.");
} ]), angular.module("openshiftConsole").controller("CreateFromImageController", [ "$scope", "$filter", "$parse", "$q", "$routeParams", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "HPAService", "ImagesService", "LimitRangesService", "Logger", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "SOURCE_URL_PATTERN", "SecretsService", "TaskList", "failureObjectNameFilter", "keyValueEditorUtils", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v, h, y, b, S, C, w, P, j) {
var k = t("displayName"), I = t("humanize");
e.projectName = a.project, e.sourceURLPattern = y;
var R = a.imageStream;
if (R) if (a.imageTag) {
e.displayName = a.displayName, e.advancedOptions = "true" === a.advanced;
var T = {
name: "app",
value: ""
}, E = t("orderByDisplayName"), N = t("getErrorDetails"), D = {}, A = function() {
=======
=======
}, null, {
partialObjectMetadataList: !0
>>>>>>> Bug 1471033 - Only request template metadata
}).then(function(t) {
e.openshiftTemplates = t.by("metadata.name");
}), "openshift" === r.project ? (e.projectImageStreams = [], e.projectTemplates = []) : (s.list("imagestreams", n).then(function(t) {
e.projectImageStreams = t.by("metadata.name");
}), s.list("templates", n, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.projectTemplates = t.by("metadata.name");
}));
}))) : l.toErrorPage("Catalog category " + r.category + "/" + r.subcategory + " not found.");
} else l.toErrorPage("Catalog category " + r.category + " not found.");
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("CreateFromImageController", [ "$scope", "$filter", "$parse", "$q", "$routeParams", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "HPAService", "ImagesService", "LimitRangesService", "Logger", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "SOURCE_URL_PATTERN", "SecretsService", "TaskList", "failureObjectNameFilter", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w) {
var P = t("displayName"), k = t("humanize");
=======
} ]), angular.module("openshiftConsole").controller("CreateFromImageController", [ "$scope", "$filter", "$parse", "$q", "$routeParams", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "HPAService", "ImagesService", "LimitRangesService", "Logger", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "SOURCE_URL_PATTERN", "SecretsService", "TaskList", "failureObjectNameFilter", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w) {
<<<<<<< HEAD
var k = t("displayName"), P = t("humanize");
>>>>>>> Adding label filter to ste secrets page
=======
var P = t("displayName"), k = t("humanize");
>>>>>>> Update pod controller to use getPreferredVersion
e.projectName = r.project, e.sourceURLPattern = y;
var j = r.imageStream;
if (j) if (r.imageTag) {
<<<<<<< HEAD
var R = r.displayName || j;
e.displayName = r.displayName, e.advancedOptions = "true" === r.advanced, e.breadcrumbs = [ {
title: "Add to Project",
link: "project/" + e.projectName + "/create"
}, {
title: "Catalog",
link: "project/" + e.projectName + "/create?tab=fromCatalog"
}, {
title: R
} ];
var I = {
name: "app",
value: ""
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, E = t("orderByDisplayName"), N = t("getErrorDetails"), D = {}, I = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
f.hideNotification("create-builder-list-config-maps-error"), f.hideNotification("create-builder-list-secrets-error"), _.each(D, function(e) {
=======
}, E = t("orderByDisplayName"), D = t("getErrorDetails"), N = {}, I = function() {
f.hideNotification("create-builder-list-config-maps-error"), f.hideNotification("create-builder-list-secrets-error"), _.each(N, function(e) {
>>>>>>> Label Filter for Kubernetes Deployment History Tab
!e.id || "error" !== e.type && "warning" !== e.type || f.hideNotification(e.id);
});
};
<<<<<<< HEAD
e.$on("$destroy", A);
var $ = i.getPreferredVersion("configmaps"), B = i.getPreferredVersion("limitranges"), L = i.getPreferredVersion("imagestreams"), x = i.getPreferredVersion("imagestreamtags"), V = i.getPreferredVersion("secrets"), O = i.getPreferredVersion("resourcequotas"), U = i.getPreferredVersion("appliedclusterresourcequotas");
v.get(a.project).then(_.spread(function(t, n) {
e.project = t, a.sourceURI && (e.sourceURIinParams = !0), e.hasClusterResourceOverrides = d.hasClusterResourceOverrides(t);
var i = function() {
e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], t), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], t);
};
c.list(B, n).then(function(t) {
e.limitRanges = t.by("metadata.name"), _.isEmpty(e.limitRanges) || e.$watch("container", i, !0);
});
var v, y, C = function() {
e.scaling.autoscale && !e.hasClusterResourceOverrides ? e.showCPURequestWarning = !l.hasCPURequest([ e.container ], e.limitRanges, t) : e.showCPURequestWarning = !1;
};
c.list(O, n).then(function(e) {
v = e.by("metadata.name"), m.log("quotas", v);
}), c.list(U, n).then(function(e) {
y = e.by("metadata.name"), m.log("cluster quotas", y);
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
T.value && T.value !== t || (T.value = e);
}), function(r) {
r.name = a.name, r.imageName = R, r.imageTag = a.imageTag, r.namespace = a.namespace, r.buildConfig = {
=======
e.$on("$destroy", I), h.get(r.project).then(_.spread(function(n, i) {
=======
}, T = t("orderByDisplayName"), I = t("getErrorDetails"), D = {}, N = function() {
f.hideNotification("create-builder-list-config-maps-error"), f.hideNotification("create-builder-list-secrets-error"), _.each(D, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || f.hideNotification(e.id);
});
};
e.$on("$destroy", N), h.get(r.project).then(_.spread(function(n, i) {
>>>>>>> Add bindings list to resource pages
=======
}, T = t("orderByDisplayName"), I = t("getErrorDetails"), N = {}, D = function() {
f.hideNotification("create-builder-list-config-maps-error"), f.hideNotification("create-builder-list-secrets-error"), _.each(N, function(e) {
=======
}, T = t("orderByDisplayName"), N = t("getErrorDetails"), I = {}, D = function() {
f.hideNotification("create-builder-list-config-maps-error"), f.hideNotification("create-builder-list-secrets-error"), _.each(I, function(e) {
>>>>>>> Add notification-drawer to show curated list of events to user
=======
}, T = t("orderByDisplayName"), I = t("getErrorDetails"), N = {}, D = function() {
f.hideNotification("create-builder-list-config-maps-error"), f.hideNotification("create-builder-list-secrets-error"), _.each(N, function(e) {
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
}, T = t("orderByDisplayName"), I = t("getErrorDetails"), N = {}, D = function() {
f.hideNotification("create-builder-list-config-maps-error"), f.hideNotification("create-builder-list-secrets-error"), _.each(N, function(e) {
>>>>>>> Adjust events to show in the drawer
!e.id || "error" !== e.type && "warning" !== e.type || f.hideNotification(e.id);
});
};
e.$on("$destroy", D), h.get(r.project).then(_.spread(function(n, i) {
>>>>>>> Bug 1481127 - More robust handling of large project lists
e.project = n, e.breadcrumbs[0].title = t("displayName")(n), r.sourceURI && (e.sourceURIinParams = !0);
var h = function() {
e.hideCPU || (e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], n)), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], n);
};
c.list("limitranges", i).then(function(t) {
e.limitRanges = t.by("metadata.name"), _.isEmpty(e.limitRanges) || e.$watch("container", h, !0);
=======
}, T = t("orderByDisplayName"), I = t("getErrorDetails"), N = {}, D = function() {
=======
}, E = t("orderByDisplayName"), I = t("getErrorDetails"), N = {}, D = function() {
>>>>>>> Add the ability to add a secret to an application
=======
}, I = t("orderByDisplayName"), E = t("getErrorDetails"), N = {}, D = function() {
>>>>>>> Enable new landing page experience by default
=======
}, T = t("orderByDisplayName"), E = t("getErrorDetails"), N = {}, D = function() {
>>>>>>> Updates for Service Instance & Bindings
g.hideNotification("create-builder-list-config-maps-error"), g.hideNotification("create-builder-list-secrets-error"), _.each(N, function(e) {
=======
}, T = t("orderByDisplayName"), N = t("getErrorDetails"), E = {}, D = function() {
g.hideNotification("create-builder-list-config-maps-error"), g.hideNotification("create-builder-list-secrets-error"), _.each(E, function(e) {
>>>>>>> Quota Notifications
=======
}, E = t("orderByDisplayName"), T = t("getErrorDetails"), N = {}, D = function() {
g.hideNotification("create-builder-list-config-maps-error"), g.hideNotification("create-builder-list-secrets-error"), _.each(N, function(e) {
>>>>>>> Support EnvFrom in the Env Editors
=======
}, E = t("orderByDisplayName"), N = t("getErrorDetails"), T = {}, D = function() {
=======
e.displayName = r.displayName, e.advancedOptions = "true" === r.advanced;
var I = {
name: "app",
value: ""
}, R = t("orderByDisplayName"), E = t("getErrorDetails"), T = {}, N = function() {
>>>>>>> Add search catalog in project context
g.hideNotification("create-builder-list-config-maps-error"), g.hideNotification("create-builder-list-secrets-error"), _.each(T, function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, E = t("orderByDisplayName"), T = t("getErrorDetails"), N = {}, D = function() {
g.hideNotification("create-builder-list-config-maps-error"), g.hideNotification("create-builder-list-secrets-error"), _.each(N, function(e) {
>>>>>>> Update template service broker flag name
!e.id || "error" !== e.type && "warning" !== e.type || g.hideNotification(e.id);
});
};
<<<<<<< HEAD
e.$on("$destroy", D), v.get(r.project).then(_.spread(function(t, n) {
=======
e.$on("$destroy", N);
var D = i.getPreferredVersion("configmaps"), A = i.getPreferredVersion("limitranges"), $ = i.getPreferredVersion("imagestreams"), B = i.getPreferredVersion("imagestreamtags"), L = i.getPreferredVersion("secrets"), U = i.getPreferredVersion("resourcequotas"), O = i.getPreferredVersion("appliedclusterresourcequotas");
v.get(r.project).then(_.spread(function(t, n) {
>>>>>>> Update createFromImage controller to use getPreferredVersion
e.project = t, r.sourceURI && (e.sourceURIinParams = !0);
var i = function() {
e.hideCPU || (e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], t)), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], t);
};
c.list(A, n).then(function(t) {
e.limitRanges = t.by("metadata.name"), _.isEmpty(e.limitRanges) || e.$watch("container", i, !0);
>>>>>>> Patternfly vertical navigation and project bar
});
var v, y, C = function() {
e.scaling.autoscale ? e.showCPURequestWarning = !l.hasCPURequest([ e.container ], e.limitRanges, t) : e.showCPURequestWarning = !1;
};
c.list(U, n).then(function(e) {
v = e.by("metadata.name"), m.log("quotas", v);
}), c.list(O, n).then(function(e) {
y = e.by("metadata.name"), m.log("cluster quotas", y);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), e.$watch("scaling.autoscale", S), e.$watch("container", S, !0), e.$watch("name", function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
E.value && E.value !== t || (E.value = e);
<<<<<<< HEAD
}), function(t) {
<<<<<<< HEAD
t.name = r.name, t.imageName = R, t.imageTag = r.imageTag, t.namespace = r.namespace, t.buildConfig = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.name = r.name, t.imageName = P, t.imageTag = r.imageTag, t.namespace = r.namespace, t.buildConfig = {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
=======
T.value && T.value !== t || (T.value = e);
>>>>>>> Add the ability to add a secret to an application
=======
=======
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
>>>>>>> Service instance details configuration and edit
=======
}), e.$watch("scaling.autoscale", S), e.$watch("container", S, !0), e.$watch("name", function(e, t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
I.value && I.value !== t || (I.value = e);
>>>>>>> Updates for Service Instance & Bindings
=======
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
<<<<<<< HEAD
R.value && R.value !== t || (R.value = e);
>>>>>>> Adding label filter to ste secrets page
=======
I.value && I.value !== t || (I.value = e);
>>>>>>> Add search catalog in project context
}), function(a) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
a.name = r.name, a.imageName = P, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Patternfly vertical navigation and project bar
=======
a.name = r.name, a.imageName = j, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Service instance details configuration and edit
=======
a.name = r.name, a.imageName = P, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Add product icons for service catalog
=======
a.name = r.name, a.imageName = j, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
a.name = r.name, a.imageName = P, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
a.name = r.name, a.imageName = j, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Update template service broker flag name
buildOnSourceChange: !0,
buildOnImageChange: !0,
buildOnConfigChange: !0,
secrets: {
gitSecret: [ {
name: ""
} ]
},
<<<<<<< HEAD
sourceUrl: a.sourceURI,
gitRef: a.sourceRef,
contextDir: a.contextDir
}, r.buildConfigEnvVars = [], r.deploymentConfig = {
deployOnNewImage: !0,
deployOnConfigChange: !0
}, r.DCEnvVarsFromImage, r.DCEnvVarsFromUser = [], r.routing = {
include: !0,
portOptions: []
}, r.labelArray = [ T ], r.annotations = {}, r.scaling = {
=======
sourceUrl: r.sourceURI,
gitRef: r.sourceRef,
contextDir: r.contextDir
}, a.buildConfigEnvVars = [], a.deploymentConfig = {
deployOnNewImage: !0,
deployOnConfigChange: !0
}, a.DCEnvVarsFromImage, a.DCEnvVarsFromUser = [], a.routing = {
include: !0,
portOptions: []
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, t.userDefinedLabels = [], t.systemLabels = [ T ], t.annotations = {}, t.scaling = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, t.labelArray = [ T ], t.annotations = {}, t.scaling = {
>>>>>>> Let users edit app label directly for "add to project"
=======
}, t.labelArray = [ E ], t.annotations = {}, t.scaling = {
>>>>>>> Add bindings list to resource pages
=======
}, a.labelArray = [ E ], a.annotations = {}, a.scaling = {
>>>>>>> Patternfly vertical navigation and project bar
=======
}, a.labelArray = [ T ], a.annotations = {}, a.scaling = {
>>>>>>> Add the ability to add a secret to an application
=======
}, a.labelArray = [ I ], a.annotations = {}, a.scaling = {
>>>>>>> Updates for Service Instance & Bindings
=======
}, a.labelArray = [ I ], a.annotations = {}, a.scaling = {
>>>>>>> Add search catalog in project context
replicas: 1,
autoscale: !1,
autoscaleOptions: [ {
label: "Manual",
value: !1
}, {
label: "Automatic",
value: !0
} ]
<<<<<<< HEAD
<<<<<<< HEAD
}, r.container = {
resources: {}
}, r.cpuRequestCalculated = d.isRequestCalculated("cpu", t), r.cpuLimitCalculated = d.isLimitCalculated("cpu", t), r.memoryRequestCalculated = d.isRequestCalculated("memory", t), r.fillSampleRepo = function() {
var e;
(r.image || r.image.metadata || r.image.metadata.annotations) && (e = r.image.metadata.annotations, r.buildConfig.sourceUrl = e.sampleRepo || "", r.buildConfig.gitRef = e.sampleRef || "", r.buildConfig.contextDir = e.sampleContextDir || "", (e.sampleRef || e.sampleContextDir) && (r.advancedSourceOptions = !0));
}, r.usingSampleRepo = function() {
return r.buildConfig.sourceUrl === _.get(r, "image.metadata.annotations.sampleRepo");
}, p.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
var o = [], i = [];
e.valueFromObjects = [], c.list($, n, null, {
errorNotification: !1
}).then(function(t) {
o = E(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
=======
}, t.container = {
=======
}, a.container = {
>>>>>>> Patternfly vertical navigation and project bar
resources: {}
}, a.cpuRequestCalculated = d.isRequestCalculated("cpu", t), a.cpuLimitCalculated = d.isLimitCalculated("cpu", t), a.memoryRequestCalculated = d.isRequestCalculated("memory", t), a.fillSampleRepo = function() {
var e;
(a.image || a.image.metadata || a.image.metadata.annotations) && (e = a.image.metadata.annotations, a.buildConfig.sourceUrl = e.sampleRepo || "", a.buildConfig.gitRef = e.sampleRef || "", a.buildConfig.contextDir = e.sampleContextDir || "", (e.sampleRef || e.sampleContextDir) && (a.advancedSourceOptions = !0));
}, a.usingSampleRepo = function() {
return a.buildConfig.sourceUrl === _.get(a, "image.metadata.annotations.sampleRepo");
}, p.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
var o = [], i = [];
e.valueFromObjects = [], c.list(D, n, null, {
errorNotification: !1
}).then(function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
a = E(t.by("metadata.name")), e.valueFromObjects = a.concat(o);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a = T(t.by("metadata.name")), e.valueFromObjects = a.concat(o);
>>>>>>> Add bindings list to resource pages
=======
o = T(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
>>>>>>> Patternfly vertical navigation and project bar
=======
o = E(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
>>>>>>> Add the ability to add a secret to an application
=======
o = I(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
>>>>>>> Enable new landing page experience by default
=======
o = T(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
>>>>>>> Updates for Service Instance & Bindings
=======
o = E(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
>>>>>>> Support EnvFrom in the Env Editors
=======
o = R(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
>>>>>>> Add search catalog in project context
}, function(e) {
403 !== e.code && g.addNotification({
id: "create-builder-list-config-maps-error",
=======
}
function w() {
var e = {
started: "Creating resources in project " + A(p.input.selectedProject),
success: "Creating resources in project " + A(p.input.selectedProject),
failure: "Failed to create some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}, "create").then(function(t) {
var n = [], r = !1;
if (t.failure.length > 0) r = !0, p.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot create " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Created " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
});
}); else {
var a;
a = p.isList ? "All items in list were created successfully." : j(p.resourceKind) + " " + p.resourceName + " was successfully created.", n.push({
type: "success",
message: a
});
}
e.resolve({
alerts: n,
hasErrors: r
});
}), e.promise;
});
}
function P() {
var e = {
started: "Updating resources in project " + A(p.input.selectedProject),
success: "Updated resources in project " + A(p.input.selectedProject),
failure: "Failed to update some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.updateResources, {
namespace: p.input.selectedProject.metadata.name
}, "update").then(function(t) {
var n = [], r = !1;
if (t.failure.length > 0) r = !0, p.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "error",
message: "Could not load config maps.",
details: T(e)
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), c.list(V, n, null, {
errorNotification: !1
}).then(function(t) {
i = E(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
=======
}), c.list("secrets", i, null, {
errorNotification: !1
}).then(function(t) {
<<<<<<< HEAD
o = E(t.by("metadata.name")), e.valueFromObjects = o.concat(a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
o = T(t.by("metadata.name")), e.valueFromObjects = o.concat(a);
>>>>>>> Add bindings list to resource pages
var n = b.groupSecretsByType(t), r = _.mapValues(n, function(e) {
=======
}), c.list("secrets", n, null, {
=======
}), c.list(L, n, null, {
>>>>>>> Update createFromImage controller to use getPreferredVersion
errorNotification: !1
}).then(function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
i = E(t.by("metadata.name")), e.valueFromObjects = i.concat(o);
=======
i = I(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
>>>>>>> Enable valueFrom values for build config env vars
=======
i = R(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
>>>>>>> Add search catalog in project context
var n = b.groupSecretsByType(t), a = _.mapValues(n, function(e) {
>>>>>>> Patternfly vertical navigation and project bar
return _.map(e, "metadata.name");
});
e.secretsByType = _.each(a, function(e) {
e.unshift("");
});
}, function(e) {
403 !== e.code && g.addNotification({
id: "create-builder-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: T(e)
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), c.get(L, r.imageName, {
namespace: r.namespace || a.project
}).then(function(e) {
r.imageStream = e;
var t = r.imageTag;
c.get(x, e.metadata.name + ":" + t, {
namespace: r.namespace
}).then(function(e) {
r.image = e.image, r.DCEnvVarsFromImage = u.getEnvironment(e);
var t = s.parsePorts(e.image);
_.isEmpty(t) ? (r.routing.include = !1, r.routing.portOptions = []) : (r.routing.portOptions = _.map(t, function(e) {
=======
}), c.get("imagestreams", t.imageName, {
namespace: t.namespace || r.project
=======
}), c.get("imagestreams", a.imageName, {
=======
}), c.get($, a.imageName, {
>>>>>>> Update createFromImage controller to use getPreferredVersion
namespace: a.namespace || r.project
>>>>>>> Patternfly vertical navigation and project bar
}).then(function(e) {
a.imageStream = e;
var t = a.imageTag;
c.get(B, e.metadata.name + ":" + t, {
namespace: a.namespace
}).then(function(e) {
<<<<<<< HEAD
t.image = e.image, t.DCEnvVarsFromImage = u.getEnvironment(e);
var n = s.parsePorts(e.image);
_.isEmpty(n) ? (t.routing.include = !1, t.routing.portOptions = []) : (t.routing.portOptions = _.map(n, function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.image = e.image, a.DCEnvVarsFromImage = u.getEnvironment(e);
var t = s.parsePorts(e.image);
_.isEmpty(t) ? (a.routing.include = !1, a.routing.portOptions = []) : (a.routing.portOptions = _.map(t, function(e) {
>>>>>>> Patternfly vertical navigation and project bar
var t = s.getServicePort(e);
return {
port: t.name,
label: t.targetPort + "/" + t.protocol
};
<<<<<<< HEAD
<<<<<<< HEAD
}), r.routing.targetPort = r.routing.portOptions[0].port);
=======
}), t.routing.targetPort = t.routing.portOptions[0].port);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), a.routing.targetPort = a.routing.portOptions[0].port);
>>>>>>> Patternfly vertical navigation and project bar
}, function() {
f.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
});
}, function() {
f.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
});
}(e);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var F, M = function() {
var t = {
started: j.getString(P("Creating application")) + " " + e.name + " " + j.getString(P("in project")) + " " + e.projectDisplayName(),
success: j.getString(P("Created application")) + " " + e.name + " " + j.getString(P("in project")) + " " + e.projectDisplayName(),
failure: j.getString(P("Failed to create")) + " " + e.name + " " + j.getString(P("in project")) + " " + e.projectDisplayName()
}, o = {};
S.clear(), S.add(t, o, a.project, function() {
var t = r.defer();
return c.batch(F, n).then(function(n) {
var r = [], a = !1;
_.isEmpty(n.failure) ? r.push({
type: "success",
message: "All resources for application " + e.name + " were created successfully."
}) : (a = !0, n.failure.forEach(function(e) {
r.push({
type: "error",
message: "Cannot create " + I(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
<<<<<<< HEAD
}), n.success.forEach(function(e) {
r.push({
type: "success",
message: "Created " + I(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})), t.resolve({
alerts: r,
hasErrors: a
=======
}); else {
var a;
a = p.isList ? "All items in list were updated successfully." : j(p.resourceKind) + " " + p.resourceName + " was successfully updated.", n.push({
type: "success",
message: a
});
}
e.resolve({
alerts: n,
hasErrors: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), t.promise;
}), g.toNextSteps(e.name, e.projectName, {
usingSampleRepo: e.usingSampleRepo()
});
}, q = function(e) {
o.open({
=======
var B, A = function() {
=======
var A, B = function() {
>>>>>>> Improve YAML editor validation and feedback
=======
var B, A = function() {
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
var A, B = function() {
>>>>>>> Add bindings list to resource pages
=======
var $, A = function() {
>>>>>>> Patternfly vertical navigation and project bar
=======
var A, $ = function() {
>>>>>>> Let administrators disable "Copy Login Command"
=======
var V, F = function() {
>>>>>>> Update createFromImage controller to use getPreferredVersion
var t = {
started: "Creating application " + e.name + " in project " + e.projectDisplayName(),
success: "Created application " + e.name + " in project " + e.projectDisplayName(),
failure: "Failed to create " + e.name + " in project " + e.projectDisplayName()
}, o = {};
S.clear(), S.add(t, o, r.project, function() {
var t = a.defer();
<<<<<<< HEAD
return c.batch(A, n).then(function(n) {
=======
return c.batch(V, n).then(function(n) {
>>>>>>> Update createFromImage controller to use getPreferredVersion
var a = [], r = !1;
_.isEmpty(n.failure) ? a.push({
type: "success",
message: "All resources for application " + e.name + " were created successfully."
}) : (r = !0, n.failure.forEach(function(e) {
a.push({
type: "error",
message: "Cannot create " + k(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
<<<<<<< HEAD
}), n.success.forEach(function(e) {
a.push({
type: "success",
message: "Created " + k(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})), t.resolve({
alerts: a,
hasErrors: r
});
}), t.promise;
}), f.toNextSteps(e.name, e.projectName, {
usingSampleRepo: e.usingSampleRepo(),
breadcrumbTitle: R
});
<<<<<<< HEAD
}, B = function(e) {
=======
}, x = function(e) {
>>>>>>> Update createFromImage controller to use getPreferredVersion
o.open({
=======
}
var P;
p.noProjectsCantCreate = !1;
var j = e("humanizeKind"), R = e("getErrorDetails");
d.clear(), p.$on("no-projects-cannot-create", function() {
p.noProjectsCantCreate = !0;
}), p.input = {
selectedProject: p.project
}, p.$watch("input.selectedProject.metadata.name", function() {
p.projectNameTaken = !1;
}), p.aceLoaded = function(e) {
(P = e.getSession()).setOption("tabSize", 2), P.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
};
var I = function(e) {
a.open({
>>>>>>> Correct ProjectNameTaken error handling in deployImage, processTemplate, and fromFile wizards
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
<<<<<<< HEAD
title: "Confirm Creation",
details: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: j.getString(P("Cancel"))
};
}
}
}).result.then(M);
}, z = function(t) {
A(), D = t.quotaAlerts || [], e.nameTaken || _.some(D, {
type: "error"
}) ? (e.disableInputs = !1, _.each(D, function(e) {
e.id = _.uniqueId("create-builder-alert-"), f.addNotification(e);
})) : _.isEmpty(D) ? M() : (q(D), e.disableInputs = !1);
=======
message: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
<<<<<<< HEAD
}).result.then($);
}, L = function(t) {
D(), N = t.quotaAlerts || [], e.nameTaken || _.some(N, {
=======
}).result.then(F);
}, M = function(t) {
N(), T = t.quotaAlerts || [], e.nameTaken || _.some(T, {
>>>>>>> Update createFromImage controller to use getPreferredVersion
type: "error"
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}) ? (e.disableInputs = !1, _.each(N, function(e) {
<<<<<<< HEAD
e.id = _.uniqueId("create-builder-alert-"), f.addNotification(e);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})) : _.isEmpty(D) ? A() : (L(D), e.disableInputs = !1);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
})) : _.isEmpty(D) ? B() : (L(D), e.disableInputs = !1);
>>>>>>> Improve YAML editor validation and feedback
=======
})) : _.isEmpty(N) ? B() : (L(N), e.disableInputs = !1);
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
})) : _.isEmpty(N) ? A() : (L(N), e.disableInputs = !1);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
})) : _.isEmpty(D) ? B() : (L(D), e.disableInputs = !1);
>>>>>>> Add bindings list to resource pages
=======
})) : _.isEmpty(N) ? B() : (L(N), e.disableInputs = !1);
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
})) : _.isEmpty(I) ? B() : (L(I), e.disableInputs = !1);
>>>>>>> Add notification-drawer to show curated list of events to user
=======
})) : _.isEmpty(N) ? B() : (L(N), e.disableInputs = !1);
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
})) : _.isEmpty(N) ? B() : (L(N), e.disableInputs = !1);
>>>>>>> Adjust events to show in the drawer
=======
e.id = _.uniqueId("create-builder-alert-"), g.addNotification(e);
<<<<<<< HEAD
})) : _.isEmpty(N) ? A() : (B(N), e.disableInputs = !1);
>>>>>>> Patternfly vertical navigation and project bar
=======
})) : _.isEmpty(N) ? $() : (B(N), e.disableInputs = !1);
>>>>>>> Let administrators disable "Copy Login Command"
=======
}) ? (e.disableInputs = !1, _.each(E, function(e) {
e.id = _.uniqueId("create-builder-alert-"), g.addNotification(e);
})) : _.isEmpty(E) ? $() : (B(E), e.disableInputs = !1);
>>>>>>> Quota Notifications
=======
}) ? (e.disableInputs = !1, _.each(N, function(e) {
e.id = _.uniqueId("create-builder-alert-"), g.addNotification(e);
})) : _.isEmpty(N) ? $() : (B(N), e.disableInputs = !1);
>>>>>>> Support EnvFrom in the Env Editors
=======
}) ? (e.disableInputs = !1, _.each(T, function(e) {
e.id = _.uniqueId("create-builder-alert-"), g.addNotification(e);
<<<<<<< HEAD
})) : _.isEmpty(T) ? $() : (B(T), e.disableInputs = !1);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}) ? (e.disableInputs = !1, _.each(N, function(e) {
e.id = _.uniqueId("create-builder-alert-"), g.addNotification(e);
})) : _.isEmpty(N) ? $() : (B(N), e.disableInputs = !1);
>>>>>>> Update template service broker flag name
=======
})) : _.isEmpty(T) ? F() : (x(T), e.disableInputs = !1);
>>>>>>> Update createFromImage controller to use getPreferredVersion
};
<<<<<<< HEAD
e.projectDisplayName = function() {
return P(this.project) || this.projectName;
}, e.createApp = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e.disableInputs = !0, A(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser), e.labels = w.mapEntries(w.compactEntries(e.labelArray));
var t = s.generate(e);
F = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), F.push(e));
});
var r = s.ifResourcesDontExist(F, e.projectName), a = h.getLatestQuotaAlerts(F, n), o = function(t) {
return e.nameTaken = t.nameTaken, a;
};
r.then(o, o).then(z, z);
=======
e.disableInputs = !0, I(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser);
var t = w.mapEntries(w.compactEntries(e.userDefinedLabels)), n = w.mapEntries(w.compactEntries(e.systemLabels));
e.labels = _.extend(n, t);
var a = s.generate(e);
A = [], angular.forEach(a, function(e) {
=======
e.disableInputs = !0, I(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser), e.labels = w.mapEntries(w.compactEntries(e.labelArray));
var t = s.generate(e);
<<<<<<< HEAD
A = [], angular.forEach(t, function(e) {
>>>>>>> Let users edit app label directly for "add to project"
null !== e && (m.debug("Generated resource definition:", e), A.push(e));
=======
B = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), B.push(e));
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
e.disableInputs = !0, N(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser), e.labels = w.mapEntries(w.compactEntries(e.labelArray));
=======
e.disableInputs = !0, D(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser), e.labels = w.mapEntries(w.compactEntries(e.labelArray));
>>>>>>> Bug 1481127 - More robust handling of large project lists
var t = s.generate(e);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
A = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), A.push(e));
>>>>>>> Add bindings list to resource pages
=======
$ = [], angular.forEach(t, function(e) {
<<<<<<< HEAD
null !== e && (m.debug("Generated resource definition:", e), $.push(e));
>>>>>>> Patternfly vertical navigation and project bar
=======
null !== e && (p.debug("Generated resource definition:", e), $.push(e));
>>>>>>> Updates for Service Instance & Bindings
=======
A = [], angular.forEach(t, function(e) {
<<<<<<< HEAD
null !== e && (p.debug("Generated resource definition:", e), A.push(e));
>>>>>>> Let administrators disable "Copy Login Command"
=======
null !== e && (m.debug("Generated resource definition:", e), A.push(e));
>>>>>>> Support EnvFrom in the Env Editors
});
var a = s.ifResourcesDontExist(A, e.projectName), r = h.getLatestQuotaAlerts(A, n), o = function(t) {
return e.nameTaken = t.nameTaken, r;
};
<<<<<<< HEAD
<<<<<<< HEAD
r.then(c, c).then(U, U);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.then(r, r).then(U, U);
>>>>>>> Let users edit app label directly for "add to project"
=======
a.then(o, o).then(L, L);
>>>>>>> Patternfly vertical navigation and project bar
=======
V = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), V.push(e));
});
var a = s.ifResourcesDontExist(V, e.projectName), r = h.getLatestQuotaAlerts(V, n), o = function(t) {
return e.nameTaken = t.nameTaken, r;
};
a.then(o, o).then(M, M);
>>>>>>> Update createFromImage controller to use getPreferredVersion
};
})), e.cancel = function() {
f.toProjectOverview(e.projectName);
};
<<<<<<< HEAD
} else g.toErrorPage("Cannot create from source: a base image tag was not specified"); else g.toErrorPage("Cannot create from source: a base image was not specified");
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, r, a, o, i) {
e("displayName");
var s = [];
n.alerts = [], n.loginBaseUrl = a.openshiftAPIBaseUrl(), n.buildConfigs = {}, n.projectName = t.project, n.fromSampleRepo = t.fromSample, n.name = t.name;
var c = r.getPreferredVersion("buildconfigs");
i.get(t.project).then(_.spread(function(e, r) {
n.project = e, s.push(a.watch(c, r, function(e) {
n.buildConfigs = e.by("metadata.name"), n.createdBuildConfig = n.buildConfigs[t.name], o.log("buildconfigs (subscribe)", n.buildConfigs);
})), n.$on("$destroy", function() {
a.unwatchAll(s);
=======
p.create = function() {
if (delete p.error, f(p.resource) && (p.resourceKind = p.resource.kind, p.resourceKind.endsWith("List") ? p.isList = !0 : p.isList = !1, g(p.resource))) {
p.isList ? (p.resourceList = p.resource.items, p.resourceName = "") : (p.resourceList = [ p.resource ], p.resourceName = p.resource.metadata.name, "Template" === p.resourceKind && (p.templateOptions = {
process: !0,
add: !1
})), p.updateResources = [], p.createResources = [];
var e = [];
p.errorOccurred = !1, _.forEach(p.resourceList, function(t) {
if (!g(t)) return p.errorOccurred = !0, !1;
e.push(S(t));
}), D().then(function(t) {
p.input.selectedProject = t, n.all(e).then(function() {
p.errorOccurred || (1 === p.createResources.length && "Template" === p.resourceList[0].kind ? v() : _.isEmpty(p.updateResources) ? l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N) : (p.updateTemplate = 1 === p.updateResources.length && "Template" === p.updateResources[0].kind, p.updateTemplate ? v() : h()));
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
<<<<<<< HEAD
}));
} ]), angular.module("openshiftConsole").controller("NewFromTemplateController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "AuthorizationService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
function d(e, t) {
var n = _.get(e, "spec.triggers", []), r = _.find(n, function(e) {
=======
=======
} else f.toErrorPage("Cannot create from source: a base image tag was not specified"); else f.toErrorPage("Cannot create from source: a base image was not specified");
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Patternfly vertical navigation and project bar
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$scope", "$http", "$routeParams", "DataService", "$q", "$location", "TaskList", "$parse", "Navigate", "Logger", "$filter", "imageObjectRefFilter", "failureObjectNameFilter", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
=======
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$scope", "$http", "$routeParams", "DataService", "$q", "$location", "TaskList", "$parse", "Navigate", "Logger", "$filter", "imageObjectRefFilter", "failureObjectNameFilter", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, p, m) {
>>>>>>> Updates for Service Instance & Bindings
=======
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$scope", "$http", "$routeParams", "DataService", "$q", "$location", "TaskList", "$parse", "Navigate", "Logger", "$filter", "imageObjectRefFilter", "failureObjectNameFilter", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
>>>>>>> Support EnvFrom in the Env Editors
u("displayName");
var f = [];
e.alerts = [], e.loginBaseUrl = a.openshiftAPIBaseUrl(), e.buildConfigs = {}, e.projectName = n.project, e.fromSampleRepo = n.fromSample, e.name = n.breadcrumbTitle || n.name, e.breadcrumbs = [ {
title: "Add to Project",
link: "project/" + e.projectName + "/create"
}, {
title: n.breadcrumbTitle || n.name
}, {
title: "Next Steps"
} ], p.get(n.project).then(_.spread(function(t, r) {
e.project = t, f.push(a.watch("buildconfigs", r, function(t) {
e.buildConfigs = t.by("metadata.name"), e.createdBuildConfig = e.buildConfigs[n.name], l.log("buildconfigs (subscribe)", e.buildConfigs);
})), e.$on("$destroy", function() {
a.unwatchAll(f);
=======
}, function(e) {
"AlreadyExists" === e.data.reason ? p.projectNameTaken = !0 : c.addNotification({
id: "import-create-project-error",
type: "error",
message: "An error occurred creating project.",
details: R(e)
>>>>>>> Correct ProjectNameTaken error handling in deployImage, processTemplate, and fromFile wizards
=======
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, a, r, o, i) {
e("displayName");
var s = [];
n.alerts = [], n.loginBaseUrl = r.openshiftAPIBaseUrl(), n.buildConfigs = {}, n.projectName = t.project, n.fromSampleRepo = t.fromSample, n.name = t.name;
var c = a.getPreferredVersion("buildconfigs");
i.get(t.project).then(_.spread(function(e, a) {
n.project = e, s.push(r.watch(c, a, function(e) {
n.buildConfigs = e.by("metadata.name"), n.createdBuildConfig = n.buildConfigs[t.name], o.log("buildconfigs (subscribe)", n.buildConfigs);
})), n.$on("$destroy", function() {
r.unwatchAll(s);
>>>>>>> Update nextSteps controller to use getPreferredVersion
});
}));
} ]), angular.module("openshiftConsole").controller("NewFromTemplateController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "AuthorizationService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u) {
function d(e, t) {
var n = _.get(e, "spec.triggers", []), a = _.find(n, function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
if ("ImageChange" !== e.type) return !1;
var n = _.get(e, "imageChangeParams.containerNames", []);
return _.includes(n, t.name);
});
<<<<<<< HEAD
return _.get(r, "imageChangeParams.from.name");
}
function m(e) {
for (var t = [], n = P.exec(e); n; ) t.push(n[1]), n = P.exec(e);
return t;
}
function p() {
var e = v();
a.templateImages = _.map(j, function(t) {
return _.isEmpty(t.usesParameters) ? t : {
name: _.template(t.name, {
interpolate: P
})(e),
usesParameters: t.usesParameters
};
});
}
function g(e) {
var t = [], n = b(e);
return n && angular.forEach(n, function(n) {
var r = n.image, a = d(e, n);
a && (r = a), r && t.push(r);
}), t;
}
function f(e) {
j = [];
var t = [], n = {};
angular.forEach(e.objects, function(e) {
if ("BuildConfig" === e.kind) {
var r = w(S(e), y);
r && j.push({
name: r,
usesParameters: m(r)
});
var a = w(C(e), y);
a && (n[a] = !0);
}
"DeploymentConfig" === e.kind && (t = t.concat(g(e)));
}), t.forEach(function(e) {
n[e] || j.push({
name: e,
usesParameters: m(e)
});
}), j = _.uniqBy(j, "name");
}
function v() {
var e = {};
return _.each(a.template.parameters, function(t) {
e[t.name] = t.value;
}), e;
}
var h = r.template, y = r.namespace || "", b = n("spec.template.spec.containers"), S = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), w = e("imageObjectRef");
if (h) {
r.templateParamsMap && (a.prefillParameters = function() {
try {
return JSON.parse(r.templateParamsMap);
} catch (e) {
l.addNotification({
=======
return _.get(a, "imageChangeParams.from.name");
}
function m(e) {
for (var t = [], n = P.exec(e); n; ) t.push(n[1]), n = P.exec(e);
return t;
}
<<<<<<< HEAD
function m() {
var e = g();
=======
function p() {
var e = v();
<<<<<<< HEAD
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
r.templateImages = _.map(P, function(t) {
=======
r.templateImages = _.map(k, function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
return _.isEmpty(t.usesParameters) ? t : {
name: _.template(t.name, {
interpolate: P
})(e),
usesParameters: t.usesParameters
};
});
}
function f(e) {
var t = [], n = b(e);
return n && angular.forEach(n, function(n) {
var a = n.image, r = d(e, n);
r && (a = r), a && t.push(a);
}), t;
}
<<<<<<< HEAD
function f(e) {
=======
function g(e) {
<<<<<<< HEAD
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
P = [];
=======
k = [];
>>>>>>> Update pod controller to use getPreferredVersion
var t = [], n = {};
angular.forEach(e.objects, function(e) {
if ("BuildConfig" === e.kind) {
<<<<<<< HEAD
<<<<<<< HEAD
var a = S(b(e), h);
a && P.push({
=======
var a = C(b(e), h);
a && k.push({
>>>>>>> Adding label filter to ste secrets page
=======
var a = w(S(e), y);
<<<<<<< HEAD
a && P.push({
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
=======
a && k.push({
>>>>>>> Update pod controller to use getPreferredVersion
name: a,
usesParameters: m(a)
});
var r = w(C(e), y);
r && (n[r] = !0);
}
"DeploymentConfig" === e.kind && (t = t.concat(f(e)));
}), t.forEach(function(e) {
n[e] || k.push({
name: e,
usesParameters: m(e)
});
}), k = _.uniqBy(k, "name");
}
function v() {
var e = {};
return _.each(r.template.parameters, function(t) {
e[t.name] = t.value;
}), e;
}
<<<<<<< HEAD
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), S = n("spec.output.to"), C = e("imageObjectRef");
if (v) {
r.breadcrumbs = [ {
title: "Add to Project",
link: "project/" + a.project + "/create"
}, {
title: "Catalog",
link: "project/" + a.project + "/create?tab=fromCatalog"
}, {
title: v
} ];
=======
var h = a.template, y = a.namespace || "", b = n("spec.template.spec.containers"), S = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), w = e("imageObjectRef");
if (h) {
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
a.templateParamsMap && (r.prefillParameters = function() {
try {
return JSON.parse(a.templateParamsMap);
} catch (e) {
<<<<<<< HEAD
c.addNotification({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
l.addNotification({
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
id: "template-params-invalid-json",
type: "error",
message: "Could not prefill parameter values.",
details: "The `templateParamsMap` URL parameter is not valid JSON. " + e
});
}
}());
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var P = /\${([a-zA-Z0-9\_]+)}/g, j = [];
u.get(r.project).then(_.spread(function(e) {
if (a.project = e, o.canI("processedtemplates", "create", r.project)) if (y) s.get("templates", h, {
namespace: y || a.project.metadata.name
}).then(function(e) {
a.template = e, f(e);
_.some(j, function(e) {
return !_.isEmpty(e.usesParameters);
}) ? (a.parameterDisplayNames = {}, _.each(e.parameters, function(e) {
a.parameterDisplayNames[e.name] = e.displayName || e.name;
}), a.$watch("template.parameters", _.debounce(function() {
a.$apply(p);
}, 50, {
maxWait: 250
}), !0)) : a.templateImages = j;
}, function() {
c.toErrorPage("Cannot create from template: the specified template could not be retrieved.");
}); else {
if (a.template = i.getTemplate(), _.isEmpty(a.template)) {
var n = URI("error").query({
error: "not_found",
error_description: "Template wasn't found in cache."
}).toString();
t.url(n);
}
i.clearTemplate();
} else c.toErrorPage("You do not have authority to process templates in project " + r.project + ".", "access_denied");
}));
} else c.toErrorPage("Cannot create from template: a template name was not specified.");
=======
var k = /\${([a-zA-Z0-9\_]+)}/g, j = [];
=======
var w = /\${([a-zA-Z0-9\_]+)}/g, k = [];
>>>>>>> Patternfly vertical navigation and project bar
=======
var w = /\${([a-zA-Z0-9\_]+)}/g, P = [];
>>>>>>> Fix for adding non-builder templates to a project
l.get(a.project).then(_.spread(function(n) {
if (r.project = n, h) i.get("templates", v, {
namespace: h || r.project.metadata.name
}).then(function(t) {
r.template = t, r.breadcrumbs[2].title = e("displayName")(t), f(t);
=======
var k = /\${([a-zA-Z0-9\_]+)}/g, P = [];
=======
var P = /\${([a-zA-Z0-9\_]+)}/g, k = [];
>>>>>>> Update pod controller to use getPreferredVersion
u.get(a.project).then(_.spread(function(e) {
if (r.project = e, o.canI("processedtemplates", "create", a.project)) if (y) s.get("templates", h, {
namespace: y || r.project.metadata.name
}).then(function(e) {
r.template = e, g(e);
<<<<<<< HEAD
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
_.some(P, function(e) {
=======
_.some(k, function(e) {
>>>>>>> Update pod controller to use getPreferredVersion
return !_.isEmpty(e.usesParameters);
}) ? (r.parameterDisplayNames = {}, _.each(t.parameters, function(e) {
r.parameterDisplayNames[e.name] = e.displayName || e.name;
}), r.$watch("template.parameters", _.debounce(function() {
r.$apply(p);
}, 50, {
maxWait: 250
}), !0)) : r.templateImages = k;
}, function() {
c.toErrorPage("Cannot create from template: the specified template could not be retrieved.");
}); else {
<<<<<<< HEAD
if (r.template = o.getTemplate(), _.isEmpty(r.template)) {
var a = URI("error").query({
=======
if (r.template = i.getTemplate(), _.isEmpty(r.template)) {
var n = URI("error").query({
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
error: "not_found",
error_description: "Template wasn't found in cache."
}).toString();
t.url(a);
}
i.clearTemplate();
} else c.toErrorPage("You do not have authority to process templates in project " + a.project + ".", "access_denied");
}));
<<<<<<< HEAD
} else s.toErrorPage("Cannot create from template: a template name was not specified.");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} else c.toErrorPage("Cannot create from template: a template name was not specified.");
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
} ]), angular.module("openshiftConsole").controller("LabelsController", [ "$scope", function(e) {
e.expanded = !0, e.toggleExpanded = function() {
e.expanded = !e.expanded;
}, e.addLabel = function() {
e.labelKey && e.labelValue && (e.labels[e.labelKey] = e.labelValue, e.labelKey = "", e.labelValue = "", e.form.$setPristine(), e.form.$setUntouched());
}, e.deleteLabel = function(t) {
e.labels[t] && delete e.labels[t];
};
} ]), angular.module("openshiftConsole").controller("TasksController", [ "$scope", "TaskList", function(e, t) {
e.tasks = function() {
return t.taskList();
}, e.delete = function(e) {
t.deleteTask(e);
}, e.hasTaskWithError = function() {
var e = t.taskList();
return _.some(e, {
hasErrors: !0
});
};
} ]), angular.module("openshiftConsole").controller("EventsController", [ "$routeParams", "$scope", "ProjectsService", function(e, t, n) {
t.projectName = e.project, t.renderOptions = {
hideFilterWidget: !0
}, t.breadcrumbs = [ {
title: "Monitoring",
link: "project/" + e.project + "/monitoring"
}, {
title: "Events"
} ], n.get(e.project).then(_.spread(function(e, n) {
t.project = e, t.projectContext = n;
}));
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("OAuthController", [ "$scope", "$location", "$q", "APIService", "AuthService", "DataService", "Logger", "RedirectLoginService", function(e, t, n, r, a, o, i, s) {
var c = i.get("auth");
e.completeLogin = function() {}, e.cancelLogin = function() {
t.replace(), t.url("./");
};
var l = r.getPreferredVersion("users");
s.finish().then(function(n) {
var r = n.token, i = n.then, s = n.verified, u = n.ttl, d = {
errorNotification: !1,
http: {
auth: {
token: r,
=======
} ]), angular.module("openshiftConsole").controller("OAuthController", [ "$scope", "$location", "$q", "RedirectLoginService", "DataService", "AuthService", "Logger", function(e, t, n, a, r, o, i) {
var s = i.get("auth");
=======
} ]), angular.module("openshiftConsole").controller("OAuthController", [ "$scope", "$location", "$q", "APIService", "AuthService", "DataService", "Logger", "RedirectLoginService", function(e, t, n, a, r, o, i, s) {
var c = i.get("auth");
>>>>>>> Update util/oauth controller to use getPreferredVersion
e.completeLogin = function() {}, e.cancelLogin = function() {
t.replace(), t.url("./");
};
var l = a.getPreferredVersion("users");
s.finish().then(function(n) {
var a = n.token, i = n.then, s = n.verified, u = n.ttl, d = {
errorNotification: !1,
http: {
auth: {
token: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
triggerLogin: !1
}
}
};
<<<<<<< HEAD
<<<<<<< HEAD
c.log("OAuthController, got token, fetching user", d), o.get(l, "~", {}, d).then(function(n) {
if (c.log("OAuthController, got user", n), e.completeLogin = function() {
a.setUser(n, r, u);
var e = i || "./";
URI(e).is("absolute") && (c.log("OAuthController, invalid absolute redirect", e), e = "./"), c.log("OAuthController, redirecting", e), t.replace(), t.url(e);
}, s) e.completeLogin(); else {
e.confirmUser = n;
var o = a.UserStore().getUser();
o && o.metadata.name !== n.metadata.name && (e.overriddenUser = o);
=======
s.log("OAuthController, got token, fetching user", u), r.get("users", "~", {}, u).then(function(n) {
if (s.log("OAuthController, got user", n), e.completeLogin = function() {
o.setUser(n, a, l);
=======
c.log("OAuthController, got token, fetching user", d), o.get(l, "~", {}, d).then(function(n) {
if (c.log("OAuthController, got user", n), e.completeLogin = function() {
r.setUser(n, a, u);
>>>>>>> Update util/oauth controller to use getPreferredVersion
var e = i || "./";
URI(e).is("absolute") && (c.log("OAuthController, invalid absolute redirect", e), e = "./"), c.log("OAuthController, redirecting", e), t.replace(), t.url(e);
}, s) e.completeLogin(); else {
e.confirmUser = n;
<<<<<<< HEAD
var r = o.UserStore().getUser();
r && r.metadata.name !== n.metadata.name && (e.overriddenUser = r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var o = r.UserStore().getUser();
o && o.metadata.name !== n.metadata.name && (e.overriddenUser = o);
>>>>>>> Update util/oauth controller to use getPreferredVersion
}
}).catch(function(e) {
var n = URI("error").query({
error: "user_fetch_failed"
}).toString();
<<<<<<< HEAD
<<<<<<< HEAD
c.error("OAuthController, error fetching user", e, "redirecting", n), t.replace(), t.url(n);
=======
s.error("OAuthController, error fetching user", e, "redirecting", n), t.replace(), t.url(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
c.error("OAuthController, error fetching user", e, "redirecting", n), t.replace(), t.url(n);
>>>>>>> Update util/oauth controller to use getPreferredVersion
});
}).catch(function(e) {
var n = URI("error").query({
error: e.error || "",
error_description: e.error_description || "",
error_uri: e.error_uri || ""
}).toString();
<<<<<<< HEAD
<<<<<<< HEAD
c.error("OAuthController, error", e, "redirecting", n), t.replace(), t.url(n);
});
} ]), angular.module("openshiftConsole").controller("ErrorController", [ "$scope", "$window", "gettext", "gettextCatalog", function(e, t, n, r) {
var a = URI(window.location.href).query(!0);
switch (a.error) {
=======
s.error("OAuthController, error", e, "redirecting", n), t.replace(), t.url(n);
=======
c.error("OAuthController, error", e, "redirecting", n), t.replace(), t.url(n);
>>>>>>> Update util/oauth controller to use getPreferredVersion
});
} ]), angular.module("openshiftConsole").controller("ErrorController", [ "$scope", "$window", function(e, t) {
var n = URI(window.location.href).query(!0);
switch (n.error) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "access_denied":
e.errorMessage = "Access denied";
break;

case "not_found":
e.errorMessage = "Not found";
break;

case "invalid_request":
e.errorMessage = "Invalid request";
break;

case "API_DISCOVERY":
e.errorLinks = [ {
href: window.location.protocol + "//" + window.OPENSHIFT_CONFIG.api.openshift.hostPort + window.OPENSHIFT_CONFIG.api.openshift.prefix,
<<<<<<< HEAD
label: r.getString(n("Check Server Connection")),
=======
label: "Check Server Connection",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
target: "_blank"
} ];
break;

default:
<<<<<<< HEAD
e.errorMessage = r.getString(n("An error has occurred"));
}
a.error_description && (e.errorDetails = a.error_description), e.reloadConsole = function() {
t.location.href = "/";
};
} ]), angular.module("openshiftConsole").controller("LogoutController", [ "$scope", "$routeParams", "$log", "AuthService", "AUTH_CFG", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i) {
if (n.debug("LogoutController"), r.isLoggedIn()) n.debug("LogoutController, logged in, initiating logout"), e.logoutMessage = i.getString(o("Logging out...")), r.startLogout().finally(function() {
r.isLoggedIn() ? (n.debug("LogoutController, logout failed, still logged in"), e.logoutMessage = 'You could not be logged out. Return to the <a href="./">console</a>.') : a.logout_uri ? (n.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", a.logout_uri), window.location.href = a.logout_uri) : (n.debug("LogoutController, logout completed, reloading the page"), window.location.reload(!1));
}); else if (a.logout_uri) n.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", a.logout_uri), e.logoutMessage = i.getString(o("Logging out...")), window.location.href = a.logout_uri; else {
n.debug("LogoutController, not logged in, logout complete");
var s = i.getString(o("You are logged out."));
"timeout" === t.cause && (s = i.getString(o("You have been logged out due to inactivity."))), e.logoutMessage = s + " " + i.getString(o("Return to the")) + ' <a href="./">console</a>.';
}
} ]), angular.module("openshiftConsole").controller("CreateController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "CatalogService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
e.projectName = a.project, e.categories = s.CATALOG_CATEGORIES, e.alerts = e.alerts || {}, d.get(a.project).then(_.spread(function(t, n) {
e.project = t, e.context = n, c.list("imagestreams", {
=======
e.errorMessage = "An error has occurred";
}
n.error_description && (e.errorDetails = n.error_description), e.reloadConsole = function() {
t.location.href = "/";
};
} ]), angular.module("openshiftConsole").controller("LogoutController", [ "$scope", "$log", "AuthService", "AUTH_CFG", function(e, t, n, a) {
t.debug("LogoutController"), n.isLoggedIn() ? (t.debug("LogoutController, logged in, initiating logout"), e.logoutMessage = "Logging out...", n.startLogout().finally(function() {
n.isLoggedIn() ? (t.debug("LogoutController, logout failed, still logged in"), e.logoutMessage = 'You could not be logged out. Return to the <a href="./">console</a>.') : a.logout_uri ? (t.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", a.logout_uri), window.location.href = a.logout_uri) : (t.debug("LogoutController, logout completed, reloading the page"), window.location.reload(!1));
})) : a.logout_uri ? (t.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", a.logout_uri), e.logoutMessage = "Logging out...", window.location.href = a.logout_uri) : (t.debug("LogoutController, not logged in, logout complete"), e.logoutMessage = 'You are logged out. Return to the <a href="./">console</a>.');
} ]), angular.module("openshiftConsole").controller("CreateController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "CatalogService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d) {
e.projectName = r.project, e.categories = s.CATALOG_CATEGORIES, e.alerts = e.alerts || {}, e.breadcrumbs = [ {
title: "Add to Project"
<<<<<<< HEAD
} ], d.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, e.breadcrumbs[0].title = t("displayName")(n), c.list("imagestreams", {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ], d.get(r.project).then(_.spread(function(t, n) {
e.project = t, e.context = n, c.list("imagestreams", {
>>>>>>> Patternfly vertical navigation and project bar
namespace: "openshift"
}).then(function(t) {
e.openshiftImageStreams = t.by("metadata.name");
}), c.list("templates", {
namespace: "openshift"
<<<<<<< HEAD
<<<<<<< HEAD
}, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.openshiftTemplates = t.by("metadata.name");
}), "openshift" === a.project ? (e.projectImageStreams = [], e.projectTemplates = []) : (c.list("imagestreams", n).then(function(t) {
e.projectImageStreams = t.by("metadata.name");
}), c.list("templates", n, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.projectTemplates = t.by("metadata.name");
}));
}));
} ]), angular.module("openshiftConsole").controller("CreateFromURLController", [ "$scope", "$routeParams", "$location", "$filter", "APIService", "AuthService", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
o.withUser(), e.alerts = {}, e.selected = {};
var u = window.DMOS_OPENSHIFT_PROJECTNAMES.split(","), d = function(t) {
=======
=======
}, null, {
partialObjectMetadataList: !0
>>>>>>> Bug 1471033 - Only request template metadata
}).then(function(t) {
e.openshiftTemplates = t.by("metadata.name");
}), "openshift" === r.project ? (e.projectImageStreams = [], e.projectTemplates = []) : (c.list("imagestreams", n).then(function(t) {
e.projectImageStreams = t.by("metadata.name");
}), c.list("templates", n, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.projectTemplates = t.by("metadata.name");
}));
}));
} ]), angular.module("openshiftConsole").controller("CreateFromURLController", [ "$scope", "$routeParams", "$location", "$filter", "AuthService", "DataService", "Navigate", "ProjectsService", function(e, t, n, a, r, o, i, s) {
r.withUser(), e.alerts = {}, e.selected = {};
var c = function(t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
e.alerts.invalidImageStream = {
type: "error",
message: 'The requested image stream "' + t + '" could not be loaded.'
};
<<<<<<< HEAD
}, m = function(t) {
=======
}, l = function(t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
e.alerts.invalidImageTag = {
type: "error",
message: 'The requested image stream tag "' + t + '" could not be loaded.'
};
<<<<<<< HEAD
}, p = function(t) {
=======
}, u = function(t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
e.alerts.invalidTemplate = {
type: "error",
message: 'The requested template "' + t + '" could not be loaded.'
};
<<<<<<< HEAD
}, g = function() {
=======
}, d = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
try {
return t.templateParamsMap && JSON.parse(t.templateParamsMap) || {};
} catch (t) {
e.alerts.invalidTemplateParams = {
type: "error",
message: "The templateParamsMap is not valid JSON. " + t
};
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, f = a.getPreferredVersion("imagestreams"), v = a.getPreferredVersion("imagestreamtags"), h = a.getPreferredVersion("templates"), y = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, b = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], S = _.pickBy(t, function(e, t) {
return _.includes(b, t) && _.isString(e);
});
S.namespace = S.namespace || "openshift";
_.includes(y, S.namespace) ? S.imageStream && S.template ? e.alerts.invalidResource = {
type: "error",
message: "Image streams and templates cannot be combined."
} : S.imageStream || S.template ? S.name && !function(e) {
return _.size(e) < 25 && /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(e);
}(S.name) ? function(t) {
=======
}, m = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, p = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], g = _.pick(t, function(e, t) {
return _.contains(p, t) && _.isString(e);
=======
}, m = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, p = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], g = _.pickBy(t, function(e, t) {
=======
}, m = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, p = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], f = _.pickBy(t, function(e, t) {
>>>>>>> Patternfly vertical navigation and project bar
return _.includes(p, t) && _.isString(e);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
}, p = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, m = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], f = _.pickBy(t, function(e, t) {
return _.includes(m, t) && _.isString(e);
>>>>>>> Updates for Service Instance & Bindings
=======
}, m = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, p = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], f = _.pickBy(t, function(e, t) {
return _.includes(p, t) && _.isString(e);
>>>>>>> Support EnvFrom in the Env Editors
});
f.namespace = f.namespace || "openshift";
_.includes(m, f.namespace) ? f.imageStream && f.template ? e.alerts.invalidResource = {
type: "error",
message: "Image streams and templates cannot be combined."
} : f.imageStream || f.template ? f.name && !function(e) {
return _.size(e) < 25 && /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(e);
<<<<<<< HEAD
}(g.name) ? function(t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}(f.name) ? function(t) {
>>>>>>> Patternfly vertical navigation and project bar
e.alerts.invalidImageStream = {
type: "error",
message: 'The app name "' + t + "\" is not valid.  An app name is an alphanumeric (a-z, and 0-9) string with a maximum length of 24 characters, where the first character is a letter (a-z), and the '-' character is allowed anywhere except the first or last character."
};
<<<<<<< HEAD
<<<<<<< HEAD
}(S.name) : (S.imageStream && s.get(f, S.imageStream, {
namespace: S.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.imageStream = t, s.get(v, t.metadata.name + ":" + S.imageTag, {
namespace: S.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.imageStreamTag = t, e.validationPassed = !0, e.resource = t, S.displayName = r("displayName")(t);
}, function() {
m(S.imageTag);
});
}, function() {
d(S.imageStream);
}), S.template && s.get(h, S.template, {
namespace: S.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.template = t, g() && (e.validationPassed = !0, e.resource = t);
}, function() {
p(S.template);
})) : e.alerts.resourceRequired = {
type: "error",
message: "An image stream or template is required."
} : function(t) {
e.alerts.invalidNamespace = {
type: "error",
message: 'Resources from the namespace "' + t + '" are not permitted.'
};
}(S.namespace), angular.extend(e, {
createDetails: S,
createWithProject: function(r) {
r = r || e.selected.project.metadata.name;
var a = t.imageStream ? c.createFromImageURL(e.imageStream, S.imageTag, r, S) : c.createFromTemplateURL(e.template, r, S);
n.url(a);
}
}), e.projects = {}, e.canCreateProject = void 0, l.list().then(function(t) {
e.loaded = !0, e.projects = r("orderByDisplayName")(t.by("metadata.name")), e.projects = e.projects.filter(function(e) {
return u.indexOf(e.metadata.name) < 0;
}), e.noProjects = _.isEmpty(e.projects);
}), l.canCreate().then(function() {
e.canCreateProject = !0;
}, function() {
e.canCreateProject = !1;
}), e.forms = {}, e.canIAddToProject = !0, e.canIAddToSelectedProject = function(t) {
var n = _.get(t, "metadata.name");
i.getProjectRules(n).then(function() {
e.canIAddToProject = i.canIAddToProject(n), e.forms && e.forms.selectProjectForm.selectProject.$setValidity("cannotAddToProject", e.canIAddToProject);
});
};
} ]), angular.module("openshiftConsole").controller("CreateProjectController", [ "$scope", "$location", "$window", "AuthService", "Constants", function(e, t, n, r, a) {
var o = !a.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
e.onProjectCreated = function(e) {
o ? n.history.back() : t.path("project/" + e + "/create");
}, r.withUser();
} ]), angular.module("openshiftConsole").controller("EditProjectController", [ "$scope", "$routeParams", "$filter", "$location", "DataService", "ProjectsService", "Navigate", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c) {
e.alerts = {};
var l = n("annotation"), u = n("annotationName");
o.get(t.project).then(_.spread(function(a) {
var d = function(e) {
return {
description: l(e, "description"),
displayName: l(e, "displayName")
};
}, m = function(e, t) {
var n = angular.copy(e);
return n.metadata.annotations[u("description")] = t.description, n.metadata.annotations[u("displayName")] = t.displayName, n;
};
angular.extend(e, {
project: a,
editableFields: d(a),
=======
}(g.name) : (g.imageStream && o.get("imagestreams", g.imageStream, {
namespace: g.namespace
=======
}(f.name) : (f.imageStream && o.get("imagestreams", f.imageStream, {
namespace: f.namespace
>>>>>>> Patternfly vertical navigation and project bar
}, {
errorNotification: !1
}).then(function(t) {
e.imageStream = t, o.get("imagestreamtags", t.metadata.name + ":" + f.imageTag, {
namespace: f.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.imageStreamTag = t, e.validationPassed = !0, e.resource = t, f.displayName = a("displayName")(t);
}, function() {
l(f.imageTag);
});
}, function() {
c(f.imageStream);
}), f.template && o.get("templates", f.template, {
namespace: f.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.template = t, d() && (e.validationPassed = !0, e.resource = t);
}, function() {
u(f.template);
})) : e.alerts.resourceRequired = {
type: "error",
message: "An image stream or template is required."
} : function(t) {
e.alerts.invalidNamespace = {
type: "error",
message: 'Resources from the namespace "' + t + '" are not permitted.'
};
}(f.namespace), angular.extend(e, {
createDetails: f,
createWithProject: function(a) {
a = a || e.selected.project.metadata.name;
var r = t.imageStream ? i.createFromImageURL(e.imageStream, f.imageTag, a, f) : i.createFromTemplateURL(e.template, a, f);
n.url(r);
}
}), e.projects = {}, e.canCreateProject = void 0, s.list().then(function(t) {
e.loaded = !0, e.projects = a("orderByDisplayName")(t.by("metadata.name")), e.noProjects = _.isEmpty(e.projects);
}), s.canCreate().then(function() {
e.canCreateProject = !0;
}, function() {
e.canCreateProject = !1;
});
} ]), angular.module("openshiftConsole").controller("CreateProjectController", [ "$scope", "$location", "$window", "AuthService", "Constants", function(e, t, n, a, r) {
var o = !r.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
e.onProjectCreated = function(e) {
o ? n.history.back() : t.path("project/" + e + "/create");
}, a.withUser();
} ]), angular.module("openshiftConsole").controller("EditProjectController", [ "$scope", "$routeParams", "$filter", "$location", "DataService", "ProjectsService", "Navigate", function(e, t, n, a, r, o, i) {
e.alerts = {};
var s = n("annotation"), c = n("annotationName");
o.get(t.project).then(_.spread(function(r) {
var l = function(e) {
return {
description: s(e, "description"),
displayName: s(e, "displayName")
};
}, u = function(e, t) {
var n = angular.copy(e);
return n.metadata.annotations[c("description")] = t.description, n.metadata.annotations[c("displayName")] = t.displayName, n;
};
angular.extend(e, {
project: r,
editableFields: l(r),
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
show: {
editing: !1
},
actions: {
canSubmit: !1
},
canSubmit: function(t) {
e.actions.canSubmit = t;
},
update: function() {
<<<<<<< HEAD
e.disableInputs = !0, o.update(t.project, m(a, e.editableFields)).then(function() {
t.then ? r.path(t.then) : i.toProjectOverview(a.metadata.name);
}, function(t) {
e.disableInputs = !1, e.editableFields = d(a), e.alerts.update = {
type: "error",
message: c.getString(s("An error occurred while updating the project")),
=======
e.disableInputs = !0, o.update(t.project, u(r, e.editableFields)).then(function() {
t.then ? a.path(t.then) : i.toProjectOverview(r.metadata.name);
}, function(t) {
e.disableInputs = !1, e.editableFields = l(r), e.alerts.update = {
type: "error",
message: "An error occurred while updating the project",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
details: n("getErrorDetails")(t)
};
});
}
});
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("CreateRouteController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d) {
=======
} ]), angular.module("openshiftConsole").controller("CreateRouteController", [ "$filter", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
n.renderOptions = {
hideFilterWidget: !0
}, n.projectName = t.project, n.serviceName = t.service, n.labels = [], n.routing = {
name: n.serviceName || ""
}, n.breadcrumbs = [ {
<<<<<<< HEAD
<<<<<<< HEAD
=======
title: n.projectName,
link: "project/" + n.projectName
}, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Patternfly vertical navigation and project bar
title: "Routes",
link: "project/" + n.projectName + "/browse/routes"
}, {
title: "Create Route"
} ];
<<<<<<< HEAD
<<<<<<< HEAD
var m = a.getPreferredVersion("routes"), p = function() {
=======
var m = r.getPreferredVersion("routes"), p = r.getPreferredVersion("services"), f = function() {
>>>>>>> Support EnvFrom in the Env Editors
l.hideNotification("create-route-error");
};
n.$on("$destroy", p);
var g = function() {
r.history.back();
};
n.cancel = g, u.get(t.project).then(_.spread(function(r, u) {
if (n.project = r, i.canI(m, "create", t.project)) {
var f, v = e("orderByDisplayName");
=======
var d = function() {
c.hideNotification("create-route-error");
};
n.$on("$destroy", d);
var m = function() {
a.history.back();
};
<<<<<<< HEAD
n.cancel = m, l.get(t.project).then(_.spread(function(a, l) {
<<<<<<< HEAD
if (n.project = a, n.breadcrumbs[0].title = e("displayName")(a), o.canI("routes", "create", t.project)) {
var p = e("orderByDisplayName");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
if (n.project = a, o.canI("routes", "create", t.project)) {
var p, f = e("orderByDisplayName");
>>>>>>> Patternfly vertical navigation and project bar
=======
n.cancel = g, u.get(t.project).then(_.spread(function(a, u) {
if (n.project = a, i.canI(m, "create", t.project)) {
<<<<<<< HEAD
var h, v = e("orderByDisplayName");
>>>>>>> Support EnvFrom in the Env Editors
=======
var v, h = e("orderByDisplayName");
>>>>>>> Add SVG icons
n.routing.to = {
kind: "Service",
name: n.serviceName,
weight: 1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
};
var h, y = function() {
var e = h, t = _.get(n, "routing.to.name");
h = _.get(f, [ t, "metadata", "labels" ], {});
var r = d.mapEntries(d.compactEntries(n.labels)), a = _.assign(r, h);
e && (a = _.omitBy(a, function(t, n) {
return e[n] && !h[n];
})), n.labels = _.map(a, function(e, t) {
=======
};
var g, h = function() {
var e = g, t = _.get(n, "routing.to.name");
g = _.get(p, [ t, "metadata", "labels" ], {});
var a = u.mapEntries(u.compactEntries(n.labels)), r = _.assign(a, g);
=======
};
var y, b = function() {
var e = y, t = _.get(n, "routing.to.name");
y = _.get(v, [ t, "metadata", "labels" ], {});
var a = d.mapEntries(d.compactEntries(n.labels)), r = _.assign(a, y);
>>>>>>> Add SVG icons
e && (r = _.omitBy(r, function(t, n) {
return e[n] && !g[n];
})), n.labels = _.map(r, function(e, t) {
>>>>>>> Patternfly vertical navigation and project bar
return {
name: t,
value: e
};
});
};
<<<<<<< HEAD
<<<<<<< HEAD
s.list("services", u).then(function(e) {
f = e.by("metadata.name"), n.services = v(f), n.$watch("routing.to.name", y);
=======
i.list("services", l).then(function(e) {
p = e.by("metadata.name"), n.services = f(p), n.$watch("routing.to.name", h);
>>>>>>> Patternfly vertical navigation and project bar
=======
s.list(p, u).then(function(e) {
<<<<<<< HEAD
h = e.by("metadata.name"), n.services = v(h), n.$watch("routing.to.name", b);
>>>>>>> Support EnvFrom in the Env Editors
=======
v = e.by("metadata.name"), n.services = h(v), n.$watch("routing.to.name", b);
>>>>>>> Add SVG icons
}), n.createRoute = function() {
if (n.createRouteForm.$valid) {
p(), n.disableInputs = !0;
var t = n.routing.to.name, r = d.mapEntries(d.compactEntries(n.labels)), i = o.createRoute(n.routing, t, r), c = _.get(n, "routing.alternateServices", []);
_.isEmpty(c) || (i.spec.to.weight = _.get(n, "routing.to.weight"), i.spec.alternateBackends = _.map(c, function(e) {
return {
kind: "Service",
name: e.name,
weight: e.weight
};
}));
<<<<<<< HEAD
var m = a.objectToResourceGroupVersion(i);
=======
var m = r.objectToResourceGroupVersion(i);
>>>>>>> Support EnvFrom in the Env Editors
s.create(m, null, i, u).then(function() {
l.addNotification({
type: "success",
message: "Route " + i.metadata.name + " was successfully created."
}), g();
}, function(t) {
n.disableInputs = !1, l.addNotification({
type: "error",
id: "create-route-error",
message: "An error occurred creating the route.",
details: e("getErrorDetails")(t)
});
});
}
};
} else c.toErrorPage("You do not have authority to create routes in project " + t.project + ".", "access_denied");
}));
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
=======
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
>>>>>>> Support EnvFrom in the Env Editors
if (t.kind && t.name) {
<<<<<<< HEAD
var g = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ], f = e("humanizeKind");
if (_.includes(g, t.kind)) {
var v = {
resource: a.kindToResource(t.kind),
=======
var f = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ], g = e("humanizeKind");
if (_.includes(f, t.kind)) {
var v = {
resource: r.kindToResource(t.kind),
>>>>>>> Patternfly vertical navigation and project bar
group: t.group
};
n.projectName = t.project, n.kind = t.kind, n.name = t.name, n.RELATIVE_PATH_PATTERN = p, n.outOfClaims = !1, n.attach = {
persistentVolumeClaim: null,
volumeName: null,
mountPath: null,
allContainers: !0,
containers: {}
}, n.breadcrumbs = i.getBreadcrumbs({
name: t.name,
kind: t.kind,
namespace: t.project,
subpage: "Add Storage"
<<<<<<< HEAD
<<<<<<< HEAD
}), n.pvcVersion = a.getPreferredVersion("persistentvolumeclaims");
var h = a.getPreferredVersion("resourcequotas"), y = a.getPreferredVersion("appliedclusterresourcequotas");
d.get(t.project).then(_.spread(function(a, d) {
if (n.project = a, o.canI(v, "update", t.project)) {
var p = e("orderByDisplayName"), g = e("getErrorDetails"), b = e("generateName"), S = function(e, t) {
=======
}), d.get(t.project).then(_.spread(function(r, d) {
if (n.project = r, o.canI(h, "update", t.project)) {
var p = e("orderByDisplayName"), f = e("getErrorDetails"), v = e("generateName"), y = function(e, t) {
>>>>>>> Patternfly vertical navigation and project bar
=======
}), n.pvcVersion = r.getPreferredVersion("persistentvolumeclaims");
var h = r.getPreferredVersion("resourcequotas"), y = r.getPreferredVersion("appliedclusterresourcequotas");
d.get(t.project).then(_.spread(function(r, d) {
<<<<<<< HEAD
if (n.project = r, o.canI(h, "update", t.project)) {
<<<<<<< HEAD
var m = e("orderByDisplayName"), f = e("getErrorDetails"), b = e("generateName"), C = function(e, t) {
>>>>>>> Update attachPVC controller to use getPreferredVersion
=======
=======
if (n.project = r, o.canI(v, "update", t.project)) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add SVG icons
var p = e("orderByDisplayName"), f = e("getErrorDetails"), b = e("generateName"), C = function(e, t) {
>>>>>>> Support EnvFrom in the Env Editors
=======
var p = e("orderByDisplayName"), f = e("getErrorDetails"), b = e("generateName"), S = function(e, t) {
>>>>>>> Service instance details configuration and edit
=======
var p = e("orderByDisplayName"), f = e("getErrorDetails"), b = e("generateName"), C = function(e, t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
n.disableInputs = !0, u.addNotification({
id: "attach-pvc-error",
type: "error",
message: e,
details: t
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, C = function() {
u.hideNotification("attach-pvc-error");
};
n.$on("$destroy", C);
var w = function() {
r.history.back();
};
n.cancel = w;
var P = function(e) {
return n.attach.allContainers || n.attach.containers[e.name];
}, j = function() {
var e = _.get(n, "attach.resource.spec.template");
n.existingMountPaths = m.getMountPaths(e, P);
};
n.$watchGroup([ "attach.resource", "attach.allContainers" ], j), n.$watch("attach.containers", j, !0);
var k = function() {
var e = _.get(n, "attach.persistentVolumeClaim");
if (e) {
var t = _.get(n, "attach.resource.spec.template.spec.volumes"), r = _.find(t, {
persistentVolumeClaim: {
claimName: e.metadata.name
}
});
r ? (n.attach.volumeName = r.name, n.volumeAlreadyMounted = !0) : n.volumeAlreadyMounted && (n.attach.volumeName = "", n.volumeAlreadyMounted = !1);
}
};
n.onPVCSelected = k;
s.get(v, t.name, d).then(function(e) {
=======
}, S = function() {
=======
}, C = function() {
>>>>>>> Service instance details configuration and edit
=======
}, S = function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
u.hideNotification("attach-pvc-error");
};
n.$on("$destroy", S);
var w = function() {
a.history.back();
};
n.cancel = w;
var k = function(e) {
return n.attach.allContainers || n.attach.containers[e.name];
}, j = function() {
var e = _.get(n, "attach.resource.spec.template");
n.existingMountPaths = m.getMountPaths(e, k);
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
n.$watchGroup([ "attach.resource", "attach.allContainers" ], j), n.$watch("attach.containers", j, !0);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
s.get(h, t.name, d).then(function(e) {
>>>>>>> Update attachPVC controller to use getPreferredVersion
=======
=======
var P = function(e, t) {
var n = _.find(t.volumeMounts, function(t) {
return t.mountPath === e && t.name !== e.name;
});
return !n || (C('The volume mount "' + n.mountPath + '" with name "' + n.name + '" already exists for container "' + t.name + '"'), !1);
}, R = function(e, t) {
var n = _.findIndex(t.volumeMounts, {
name: e.name
});
return -1 !== n && (t.volumeMounts[n] = e, !0);
}, I = function(e, t, n, a, r) {
var o = !0;
return _.each(e.spec.containers, function(e) {
if (k(e)) {
var i = m.createVolumeMount(t, n, a, r);
return e.volumeMounts || (e.volumeMounts = []), P(i, e) ? !R(i, e) && void e.volumeMounts.push(i) : (o = !1, !1);
}
}), o;
};
>>>>>>> add "overwrite" option to attachPVC view
=======
>>>>>>> Revert "add "overwrite" option to attachPVC view"
=======
n.$watchGroup([ "attach.resource", "attach.allContainers" ], P), n.$watch("attach.containers", P, !0);
>>>>>>> Service instance details configuration and edit
=======
n.$watchGroup([ "attach.resource", "attach.allContainers" ], j), n.$watch("attach.containers", j, !0);
>>>>>>> Add product icons for service catalog
=======
n.$watchGroup([ "attach.resource", "attach.allContainers" ], P), n.$watch("attach.containers", P, !0);
>>>>>>> Handle displaying parameters when secrets are not available.
=======
n.$watchGroup([ "attach.resource", "attach.allContainers" ], j), n.$watch("attach.containers", j, !0);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
s.get(v, t.name, d).then(function(e) {
>>>>>>> Add SVG icons
n.attach.resource = e, n.breadcrumbs = i.getBreadcrumbs({
object: e,
<<<<<<< HEAD
project: a,
=======
project: r,
>>>>>>> Patternfly vertical navigation and project bar
subpage: "Add Storage"
});
var t = _.get(e, "spec.template");
<<<<<<< HEAD
n.existingVolumeNames = m.getVolumeNames(t), k();
=======
n.existingVolumeNames = m.getVolumeNames(t);
>>>>>>> Support EnvFrom in the Env Editors
}, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
S(t.name + " could not be loaded.", g(e));
}), s.list(n.pvcVersion, d).then(function(e) {
n.pvcs = p(e.by("metadata.name")), _.isEmpty(n.pvcs) || n.attach.persistentVolumeClaim || (n.attach.persistentVolumeClaim = _.head(n.pvcs), k());
}), s.list(h, {
=======
y(t.name + " could not be loaded.", f(e));
}), s.list("persistentvolumeclaims", d).then(function(e) {
n.pvcs = p(e.by("metadata.name")), _.isEmpty(n.pvcs) || n.attach.persistentVolumeClaim || (n.attach.persistentVolumeClaim = _.head(n.pvcs));
}), s.list("resourcequotas", {
>>>>>>> Patternfly vertical navigation and project bar
=======
C(t.name + " could not be loaded.", f(e));
=======
S(t.name + " could not be loaded.", f(e));
>>>>>>> Service instance details configuration and edit
=======
C(t.name + " could not be loaded.", f(e));
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
}), s.list(n.pvcVersion, d).then(function(e) {
n.pvcs = p(e.by("metadata.name")), _.isEmpty(n.pvcs) || n.attach.persistentVolumeClaim || (n.attach.persistentVolumeClaim = _.head(n.pvcs));
<<<<<<< HEAD
}), s.list(v, {
>>>>>>> Update attachPVC controller to use getPreferredVersion
=======
}), s.list(h, {
>>>>>>> Add SVG icons
namespace: n.projectName
}, function(e) {
n.quotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), s.list(y, {
namespace: n.projectName
}, function(e) {
n.clusterQuotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), n.attachPVC = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
if (n.disableInputs = !0, C(), n.attachPVCForm.$valid) {
n.attach.volumeName || (n.attach.volumeName = b("volume-"));
var e = n.attach.resource, r = _.get(e, "spec.template"), a = n.attach.persistentVolumeClaim, o = n.attach.volumeName, i = n.attach.mountPath, c = n.attach.subPath, l = n.attach.readOnly;
i && angular.forEach(r.spec.containers, function(e) {
if (P(e)) {
var t = m.createVolumeMount(o, i, c, l);
=======
if (n.disableInputs = !0, S(), n.attachPVCForm.$valid) {
=======
if (n.disableInputs = !0, C(), n.attachPVCForm.$valid) {
>>>>>>> Service instance details configuration and edit
=======
if (n.disableInputs = !0, S(), n.attachPVCForm.$valid) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
n.attach.volumeName || (n.attach.volumeName = b("volume-"));
var e = n.attach.resource, a = _.get(e, "spec.template"), r = n.attach.persistentVolumeClaim, o = n.attach.volumeName, i = n.attach.mountPath, c = n.attach.subPath, l = n.attach.readOnly;
<<<<<<< HEAD
<<<<<<< HEAD
i && angular.forEach(a.spec.containers, function(e) {
if (k(e)) {
<<<<<<< HEAD
var t = p.createVolumeMount(o, i, c, l);
>>>>>>> Update attachPVC controller to use getPreferredVersion
e.volumeMounts || (e.volumeMounts = []), e.volumeMounts.push(t);
}
}), n.volumeAlreadyMounted || (r.spec.volumes = r.spec.volumes || [], r.spec.volumes.push(m.createVolume(o, a))), s.update(v, e.metadata.name, n.attach.resource, d).then(function() {
var e;
i || (e = "No mount path was provided. The volume reference was added to the configuration, but it will not be mounted into running pods."), u.addNotification({
type: "success",
message: "Persistent volume claim " + a.metadata.name + " added to " + f(t.kind) + " " + t.name + ".",
details: e
}), w();
}, function(e) {
<<<<<<< HEAD
S("An error occurred attaching the persistent volume claim to the " + f(t.kind) + ".", g(e)), n.disableInputs = !1;
=======
C("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Update attachPVC controller to use getPreferredVersion
});
}
};
} else l.toErrorPage("You do not have authority to update " + f(t.kind) + " " + t.name + ".", "access_denied");
}));
} else l.toErrorPage("Storage is not supported for kind " + f(t.kind) + ".");
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("AddConfigVolumeController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g) {
if (n.kind && n.name) {
var f = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(f, n.kind)) {
var v = {
resource: o.kindToResource(n.kind),
group: n.group
};
<<<<<<< HEAD
r.projectName = n.project, r.kind = n.kind, r.name = n.name, r.attach = {
allContainers: !0,
pickKeys: !1
}, r.forms = {}, r.RELATIVE_PATH_PATTERN = p, r.breadcrumbs = s.getBreadcrumbs({
name: n.name,
kind: n.kind,
namespace: n.project,
subpage: "Add Config Files"
<<<<<<< HEAD
}), r.configMapVersion = o.getPreferredVersion("configmaps"), r.secretVersion = o.getPreferredVersion("secrets");
=======
}), a.configMapVersion = o.getPreferredVersion("configmaps"), a.secretVersion = o.getPreferredVersion("secrets");
>>>>>>> Update addConfigVolume controller
var h = e("humanizeKind");
r.groupByKind = function(e) {
return g.getString(h(e.kind));
};
r.$watch("attach.source", function() {
_.set(r, "attach.items", [ {} ]);
});
var y = function() {
r.forms.addConfigVolumeForm.$setDirty();
}, b = function() {
a.history.back();
};
r.cancel = b;
var S = function(e, t) {
=======
}, i.list("services", l).then(function(e) {
n.services = p(e.by("metadata.name"));
}), n.copyServiceLabels = function() {
var e = _.get(n, "routing.to.service.metadata.labels", {}), t = u.mapEntries(u.compactEntries(n.labels)), a = _.assign(t, e);
n.labels = _.map(a, function(e, t) {
=======
};
var f, h = function() {
var e = f, t = _.get(n, "routing.to.name");
f = _.get(p, [ t, "metadata", "labels" ], {});
var a = u.mapEntries(u.compactEntries(n.labels)), r = _.assign(a, f);
=======
n.$on("$destroy", d);
var p = function() {
a.history.back();
};
n.cancel = p, l.get(t.project).then(_.spread(function(a, l) {
if (n.project = a, o.canI("routes", "create", t.project)) {
var m, f = e("orderByDisplayName");
n.routing.to = {
kind: "Service",
name: n.serviceName,
weight: 1
};
var g, h = function() {
var e = g, t = _.get(n, "routing.to.name");
g = _.get(m, [ t, "metadata", "labels" ], {});
var a = u.mapEntries(u.compactEntries(n.labels)), r = _.assign(a, g);
>>>>>>> Updates for Service Instance & Bindings
e && (r = _.omitBy(r, function(t, n) {
return e[n] && !f[n];
})), n.labels = _.map(r, function(e, t) {
>>>>>>> Prefill service labels when creating route
return {
name: t,
value: e
};
<<<<<<< HEAD
});
};
i.list("services", l).then(function(e) {
<<<<<<< HEAD
p = e.by("metadata.name"), n.services = g(p), n.$watch("routing.to.name", h);
=======
m = e.by("metadata.name"), n.services = f(m), n.$watch("routing.to.name", h);
>>>>>>> Updates for Service Instance & Bindings
}), n.createRoute = function() {
if (n.createRouteForm.$valid) {
d(), n.disableInputs = !0;
var t = n.routing.to.name, a = u.mapEntries(u.compactEntries(n.labels)), o = r.createRoute(n.routing, t, a), s = _.get(n, "routing.alternateServices", []);
_.isEmpty(s) || (o.spec.to.weight = _.get(n, "routing.to.weight"), o.spec.alternateBackends = _.map(s, function(e) {
return {
kind: "Service",
name: e.name,
weight: e.weight
};
})), i.create("routes", null, o, l).then(function() {
c.addNotification({
type: "success",
message: "Route " + o.metadata.name + " was successfully created."
}), p();
}, function(t) {
n.disableInputs = !1, c.addNotification({
type: "error",
id: "create-route-error",
message: "An error occurred creating the route.",
details: e("getErrorDetails")(t)
=======
_.size(l) <= 100 ? (u = e("orderByDisplayName")(l), y = _.map(u, function(e) {
return n(e, !1);
})) : y = [ n(l[t], !0) ], h.empty(), h.append(y), h.append($('<option data-divider="true"></option>')), h.append($('<option value="">View All Projects</option>')), h.selectpicker("refresh");
}
}, S = function() {
return s.list().then(function(e) {
l = e.by("metadata.name");
});
}, C = function() {
var e = a.project;
r.currentProjectName !== e && (r.currentProjectName = e, r.chromeless = "chromeless" === a.view, e && !r.chromeless ? (_.set(n, "view.hasProject", !0), r.canIAddToProject = !1, o.getProjectRules(e).then(function() {
r.currentProjectName === e && (r.canIAddToProject = o.canIAddToProject(e));
}), S().then(function() {
r.currentProjectName && l && (l[r.currentProjectName] || (l[r.currentProjectName] = {
metadata: {
name: r.currentProjectName
}
}), r.currentProject = l[r.currentProjectName], b());
})) : _.set(n, "view.hasProject", !1));
};
C(), r.$on("$routeChangeSuccess", C), h.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : c(e);
r.$apply(function() {
t.url(n);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
});
}
};
} else s.toErrorPage("You do not have authority to create routes in project " + t.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, a, r, o, i, s, c, l, u, d, p, m) {
if (t.kind && t.name) {
var g = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ], f = e("humanizeKind");
if (_.includes(g, t.kind)) {
var h = {
resource: r.kindToResource(t.kind),
group: t.group
};
n.projectName = t.project, n.kind = t.kind, n.name = t.name, n.RELATIVE_PATH_PATTERN = m, n.outOfClaims = !1, n.attach = {
persistentVolumeClaim: null,
volumeName: null,
mountPath: null,
allContainers: !0,
containers: {}
}, n.breadcrumbs = i.getBreadcrumbs({
name: t.name,
kind: t.kind,
namespace: t.project,
<<<<<<< HEAD
subpage: "Add Storage",
includeProject: !0
}), d.get(t.project).then(_.spread(function(r, d) {
<<<<<<< HEAD
if (n.project = r, n.breadcrumbs[0].title = e("displayName")(r), o.canI(h, "update", t.project)) {
var p = e("orderByDisplayName"), g = e("getErrorDetails"), v = e("generateName"), y = function(e, t) {
=======
if (n.project = r, o.canI(h, "update", t.project)) {
var m = e("orderByDisplayName"), f = e("getErrorDetails"), v = e("generateName"), y = function(e, t) {
>>>>>>> Updates for Service Instance & Bindings
=======
subpage: "Add Storage"
}), n.pvcVersion = r.getPreferredVersion("persistentvolumeclaims");
var h = r.getPreferredVersion("resourcequotas"), y = r.getPreferredVersion("appliedclusterresourcequotas");
d.get(t.project).then(_.spread(function(r, d) {
if (n.project = r, o.canI(v, "update", t.project)) {
var p = e("orderByDisplayName"), f = e("getErrorDetails"), b = e("generateName"), S = function(e, t) {
>>>>>>> Adding label filter to ste secrets page
n.disableInputs = !0, u.addNotification({
id: "attach-pvc-error",
type: "error",
message: e,
details: t
});
<<<<<<< HEAD
}, b = function() {
u.hideNotification("attach-pvc-error");
};
n.$on("$destroy", b);
var C = function() {
=======
}, C = function() {
u.hideNotification("attach-pvc-error");
};
n.$on("$destroy", C);
var w = function() {
>>>>>>> Adding label filter to ste secrets page
a.history.back();
};
<<<<<<< HEAD
<<<<<<< HEAD
n.cancel = C;
var S = function(e) {
return n.attach.allContainers || n.attach.containers[e.name];
<<<<<<< HEAD
}, w = function() {
=======
}, P = function() {
>>>>>>> Update template service broker flag name
var e = _.get(n, "attach.resource.spec.template");
n.existingMountPaths = p.getMountPaths(e, S);
};
<<<<<<< HEAD
n.$watchGroup([ "attach.resource", "attach.allContainers" ], w), n.$watch("attach.containers", w, !0);
s.get(h, t.name, d).then(function(e) {
=======
n.$watchGroup([ "attach.resource", "attach.allContainers" ], P), n.$watch("attach.containers", P, !0);
=======
n.cancel = w;
var P = function(e) {
return n.attach.allContainers || n.attach.containers[e.name];
}, k = function() {
var e = _.get(n, "attach.resource.spec.template");
n.existingMountPaths = m.getMountPaths(e, P);
};
n.$watchGroup([ "attach.resource", "attach.allContainers" ], k), n.$watch("attach.containers", k, !0);
>>>>>>> Fix for adding non-builder templates to a project
=======
n.cancel = w;
var P = function(e) {
return n.attach.allContainers || n.attach.containers[e.name];
}, k = function() {
var e = _.get(n, "attach.resource.spec.template");
n.existingMountPaths = m.getMountPaths(e, P);
};
n.$watchGroup([ "attach.resource", "attach.allContainers" ], k), n.$watch("attach.containers", k, !0);
>>>>>>> Update pod controller to use getPreferredVersion
s.get(v, t.name, d).then(function(e) {
>>>>>>> Update template service broker flag name
n.attach.resource = e, n.breadcrumbs = i.getBreadcrumbs({
object: e,
project: r,
subpage: "Add Storage",
includeProject: !0
});
var t = _.get(e, "spec.template");
n.existingVolumeNames = p.getVolumeNames(t);
}, function(e) {
<<<<<<< HEAD
y(t.name + " could not be loaded.", g(e));
}), s.list("persistentvolumeclaims", d).then(function(e) {
n.pvcs = m(e.by("metadata.name")), _.isEmpty(n.pvcs) || n.attach.persistentVolumeClaim || (n.attach.persistentVolumeClaim = _.head(n.pvcs));
}), s.list("resourcequotas", {
=======
S(t.name + " could not be loaded.", f(e));
}), s.list(n.pvcVersion, d).then(function(e) {
n.pvcs = p(e.by("metadata.name")), _.isEmpty(n.pvcs) || n.attach.persistentVolumeClaim || (n.attach.persistentVolumeClaim = _.head(n.pvcs));
}), s.list(h, {
>>>>>>> Adding label filter to ste secrets page
namespace: n.projectName
}, function(e) {
n.quotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), s.list("appliedclusterresourcequotas", {
namespace: n.projectName
}, function(e) {
n.clusterQuotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), n.attachPVC = function() {
<<<<<<< HEAD
if (n.disableInputs = !0, b(), n.attachPVCForm.$valid) {
n.attach.volumeName || (n.attach.volumeName = v("volume-"));
=======
if (n.disableInputs = !0, C(), n.attachPVCForm.$valid) {
n.attach.volumeName || (n.attach.volumeName = b("volume-"));
>>>>>>> Adding label filter to ste secrets page
var e = n.attach.resource, a = _.get(e, "spec.template"), r = n.attach.persistentVolumeClaim, o = n.attach.volumeName, i = n.attach.mountPath, c = n.attach.subPath, l = n.attach.readOnly;
i && angular.forEach(a.spec.containers, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
if (S(e)) {
var t = p.createVolumeMount(o, i, c, l);
=======
var t = m.createVolumeMount(o, i, c, l);
>>>>>>> Support EnvFrom in the Env Editors
e.volumeMounts || (e.volumeMounts = []), e.volumeMounts.push(t);
}
});
=======
if (i && !I(a, o, i, c, l)) return void (n.disableInputs = !1);
>>>>>>> add "overwrite" option to attachPVC view
=======
i && angular.forEach(a.spec.containers, function(e) {
if (k(e)) {
=======
if (P(e)) {
>>>>>>> Fix for adding non-builder templates to a project
=======
if (P(e)) {
>>>>>>> Update pod controller to use getPreferredVersion
var t = m.createVolumeMount(o, i, c, l);
e.volumeMounts || (e.volumeMounts = []), e.volumeMounts.push(t);
}
});
>>>>>>> Revert "add "overwrite" option to attachPVC view"
var p = m.createVolume(o, r);
a.spec.volumes || (a.spec.volumes = []), a.spec.volumes.push(p), s.update(v, e.metadata.name, n.attach.resource, d).then(function() {
var e;
i || (e = "No mount path was provided. The volume reference was added to the configuration, but it will not be mounted into running pods."), u.addNotification({
type: "success",
message: "Persistent volume claim " + r.metadata.name + " added to " + g(t.kind) + " " + t.name + ".",
details: e
}), C();
}, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
y("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
=======
S("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Service instance details configuration and edit
=======
C("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
S("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Adding label filter to ste secrets page
});
}
};
} else l.toErrorPage("You do not have authority to update " + g(t.kind) + " " + t.name + ".", "access_denied");
}));
} else l.toErrorPage("Storage is not supported for kind " + g(t.kind) + ".");
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("AddConfigVolumeController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
if (n.kind && n.name) {
var f = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(f, n.kind)) {
var g = {
resource: o.kindToResource(n.kind),
group: n.group
};
a.projectName = n.project, a.kind = n.kind, a.name = n.name, a.attach = {
allContainers: !0,
pickKeys: !1
}, a.forms = {}, a.RELATIVE_PATH_PATTERN = p, a.breadcrumbs = s.getBreadcrumbs({
name: n.name,
kind: n.kind,
namespace: n.project,
subpage: "Add Config Files"
<<<<<<< HEAD
});
var h = e("humanizeKind");
=======
}), a.configMapVersion = o.getPreferredVersion("configmaps"), a.secretVersion = o.getPreferredVersion("secrets");
var v = e("humanizeKind");
>>>>>>> Add SVG icons
a.groupByKind = function(e) {
return v(e.kind);
};
a.$watch("attach.source", function() {
_.set(a, "attach.items", [ {} ]);
});
var h = function() {
a.forms.addConfigVolumeForm.$setDirty();
}, y = function() {
r.history.back();
};
a.cancel = y;
var b = function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
u.addNotification({
id: "add-config-volume-error",
type: "error",
message: e,
details: t
});
}, S = function() {
u.hideNotification("add-config-volume-error");
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
r.$on("$destroy", C), r.addItem = function() {
r.attach.items.push({}), y();
}, r.removeItem = function(e) {
r.attach.items.splice(e, 1), y();
}, d.get(n.project).then(_.spread(function(t, a) {
if (r.project = t, i.canI(v, "update", n.project)) {
var o = e("orderByDisplayName"), d = e("getErrorDetails"), p = e("generateName");
c.get(v, n.name, a, {
errorNotification: !1
}).then(function(e) {
r.targetObject = e, r.breadcrumbs = s.getBreadcrumbs({
object: e,
project: t,
subpage: "Add Config Files"
});
}, function(e) {
r.error = e;
}), c.list(r.configMapVersion, a, null, {
errorNotification: !1
}).then(function(e) {
r.configMaps = o(e.by("metadata.name"));
}, function(e) {
403 !== e.status ? S("Could not load config maps", d(e)) : r.configMaps = [];
}), c.list(r.secretVersion, a, null, {
errorNotification: !1
}).then(function(e) {
r.secrets = o(e.by("metadata.name"));
}, function(e) {
403 !== e.status ? S("Could not load secrets", d(e)) : r.secrets = [];
});
var g = function(e) {
return r.attach.allContainers || r.attach.containers[e.name];
}, f = function() {
var e = _.get(r, "targetObject.spec.template");
r.existingMountPaths = m.getMountPaths(e, g);
};
r.$watchGroup([ "targetObject", "attach.allContainers" ], f), r.$watch("attach.containers", f, !0);
r.$watch("attach.items", function() {
var e = _.map(r.attach.items, "path");
r.itemPaths = _.compact(e);
}, !0), r.addVolume = function() {
if (!r.forms.addConfigVolumeForm.$invalid) {
var t = r.targetObject, o = _.get(r, "attach.source"), i = _.get(t, "spec.template"), s = p("volume-"), l = {
name: s,
mountPath: _.get(r, "attach.mountPath")
=======
a.$on("$destroy", C), a.addItem = function() {
=======
a.$on("$destroy", S), a.addItem = function() {
>>>>>>> Service instance details configuration and edit
=======
a.$on("$destroy", C), a.addItem = function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
a.$on("$destroy", S), a.addItem = function() {
>>>>>>> Adding label filter to ste secrets page
a.attach.items.push({}), h();
}, a.removeItem = function(e) {
a.attach.items.splice(e, 1), h();
}, d.get(n.project).then(_.spread(function(t, r) {
if (a.project = t, i.canI(g, "update", n.project)) {
var o = e("orderByDisplayName"), d = e("getErrorDetails"), p = e("generateName");
c.get(g, n.name, r, {
errorNotification: !1
}).then(function(e) {
a.targetObject = e, a.breadcrumbs = s.getBreadcrumbs({
object: e,
project: t,
subpage: "Add Config Files"
});
}, function(e) {
a.error = e;
}), c.list(a.configMapVersion, r, null, {
errorNotification: !1
}).then(function(e) {
a.configMaps = o(e.by("metadata.name"));
}, function(e) {
403 !== e.code ? b("Could not load config maps", d(e)) : a.configMaps = [];
}), c.list(a.secretVersion, r, null, {
errorNotification: !1
}).then(function(e) {
a.secrets = o(e.by("metadata.name"));
}, function(e) {
403 !== e.code ? b("Could not load secrets", d(e)) : a.secrets = [];
});
var f = function(e) {
return a.attach.allContainers || a.attach.containers[e.name];
}, h = function() {
var e = _.get(a, "targetObject.spec.template");
a.existingMountPaths = m.getMountPaths(e, f);
};
a.$watchGroup([ "targetObject", "attach.allContainers" ], h), a.$watch("attach.containers", h, !0);
a.$watch("attach.items", function() {
var e = _.map(a.attach.items, "path");
a.itemPaths = _.compact(e);
}, !0), a.addVolume = function() {
if (!a.forms.addConfigVolumeForm.$invalid) {
var t = a.targetObject, o = _.get(a, "attach.source"), i = _.get(t, "spec.template"), s = p("volume-"), l = {
name: s,
mountPath: _.get(a, "attach.mountPath")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
"Secret" === o.kind && (l.readOnly = !0), _.each(i.spec.containers, function(e) {
f(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(l));
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var m, f = {
name: s
};
switch (r.attach.pickKeys && (m = r.attach.items), o.kind) {
case "ConfigMap":
f.configMap = {
=======
var m, h = {
=======
var p, h = {
>>>>>>> Updates for Service Instance & Bindings
=======
var m, h = {
>>>>>>> Support EnvFrom in the Env Editors
=======
var m, v = {
>>>>>>> Add SVG icons
name: s
};
switch (a.attach.pickKeys && (m = a.attach.items), o.kind) {
case "ConfigMap":
<<<<<<< HEAD
h.configMap = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
v.configMap = {
>>>>>>> Add SVG icons
name: o.metadata.name,
items: m
};
break;

case "Secret":
<<<<<<< HEAD
<<<<<<< HEAD
f.secret = {
=======
h.secret = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
v.secret = {
>>>>>>> Add SVG icons
secretName: o.metadata.name,
items: m
};
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(f), r.disableInputs = !0, C();
var h = e("humanizeKind"), y = h(o.kind), w = h(n.kind);
c.update(v, t.metadata.name, r.targetObject, a).then(function() {
=======
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(v), a.disableInputs = !0, C();
var h = e("humanizeKind"), S = h(o.kind), w = h(n.kind);
=======
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(v), a.disableInputs = !0, S();
var h = e("humanizeKind"), C = h(o.kind), w = h(n.kind);
>>>>>>> Service instance details configuration and edit
=======
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(v), a.disableInputs = !0, C();
var h = e("humanizeKind"), S = h(o.kind), w = h(n.kind);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
c.update(g, t.metadata.name, a.targetObject, r).then(function() {
>>>>>>> Add SVG icons
u.addNotification({
type: "success",
<<<<<<< HEAD
<<<<<<< HEAD
message: "Successfully added " + y + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), b();
}, function(e) {
r.disableInputs = !1, S("An error occurred attaching the " + y + " to the " + w + ".", d(e));
=======
message: "Successfully added " + C + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), y();
}, function(e) {
a.disableInputs = !1, b("An error occurred attaching the " + C + " to the " + w + ".", d(e));
>>>>>>> Service instance details configuration and edit
=======
message: "Successfully added " + S + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), y();
}, function(e) {
a.disableInputs = !1, b("An error occurred attaching the " + S + " to the " + w + ".", d(e));
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
});
}
};
} else l.toErrorPage("You do not have authority to update " + v(n.kind) + " " + n.name + ".", "access_denied");
}));
} else l.toErrorPage("Volumes are not supported for kind " + n.kind + ".");
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("CreateSecretModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.onCreate = function(e) {
t.close(e);
}, e.onCancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmModalController", [ "$scope", "$uibModalInstance", "modalConfig", function(e, t, n) {
_.extend(e, n), e.confirm = function() {
t.close("confirm");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmScaleController", [ "$scope", "$uibModalInstance", "resource", "type", function(e, t, n, r) {
e.resource = n, e.type = r, e.confirmScale = function() {
t.close("confirmScale");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmSaveLogController", [ "$scope", "$uibModalInstance", "object", "CLIHelp", function(e, t, n, r) {
e.object = n, e.command = r.getLogsCommand(n), e.save = function() {
t.close("save");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DeleteModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.delete = function() {
t.close("delete");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DebugTerminalModalController", [ "$scope", "$filter", "$uibModalInstance", "container", "image", function(e, t, n, r, a) {
e.container = r, e.image = a, e.$watch("debugPod.status.containerStatuses", function() {
e.containerState = _.get(e, "debugPod.status.containerStatuses[0].state");
}), e.close = function() {
n.close("close");
};
} ]), angular.module("openshiftConsole").controller("ConfirmReplaceModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.replace = function() {
t.close("replace");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ProcessOrSaveTemplateModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.continue = function() {
t.close("create");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("LinkServiceModalController", [ "$scope", "$uibModalInstance", "ServicesService", function(e, t, n) {
e.$watch("services", function(t) {
var r = n.getDependentServices(e.service);
e.options = _.filter(t, function(t) {
return t !== e.service && !_.includes(r, t.metadata.name);
}), 1 === _.size(e.options) && _.set(e, "link.selectedService", _.head(e.options));
}), e.link = function() {
t.close(_.get(e, "link.selectedService"));
}, e.cancel = function() {
t.dismiss();
};
} ]), angular.module("openshiftConsole").controller("LogoutModalController", [ "$timeout", "$location", "$filter", "$scope", "$uibModalInstance", "Constants", function(e, t, n, r, a, o) {
r.endTimestamp = moment().add(30, "seconds").toString();
var i = e(function() {
r.logout();
}, 3e4);
r.logout = function() {
e.cancel(i), a.close("logout");
}, r.cancel = function() {
e.cancel(i), a.close("cancel");
}, r.$on("$destroy", function() {
e.cancel(i);
});
} ]), angular.module("openshiftConsole").controller("JenkinsfileExamplesModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.close = function() {
t.close("close");
};
} ]), angular.module("openshiftConsole").controller("AboutComputeUnitsModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.close = function() {
t.close("close");
};
} ]), angular.module("openshiftConsole").controller("SetHomePageModalController", [ "$scope", "$uibModalInstance", "HomePagePreferenceService", "ProjectsService", function(e, t, n, r) {
e.homePagePreference = n.getHomePagePreference(), e.availableProjects = [], e.selectedProject = null, e.onProjectSelected = function(t) {
e.selectedProject = t;
}, e.onOpen = function() {
e.homePagePreference = "project-overview";
}, e.preselectedProjectName = n.getHomePageProjectName(), r.list().then(function(t) {
e.availableProjects = _.toArray(t.by("metadata.name")), e.availableProjects = _.reject(e.availableProjects, "metadata.deletionTimestamp"), 1 === e.availableProjects.length ? e.selectedProject = e.availableProjects[0] : e.preselectedProjectName && (e.selectedProject = _.find(e.availableProjects, {
metadata: {
name: e.preselectedProjectName
}
<<<<<<< HEAD
}));
}), e.setHomePage = function() {
var r = {
type: e.homePagePreference
};
"project-overview" === e.homePagePreference && e.selectedProject && (r.project = e.selectedProject.metadata.name), n.setHomePagePreference(r), t.close("setHomePage");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("AboutController", [ "$scope", "$q", "AuthService", "Constants", "DataService", function(e, t, n, r, a) {
n.withUser(), e.version = {
master: {},
console: r.VERSION.console || "unknown"
};
var o = e.version.master, i = [];
i.push(a.getKubernetesMasterVersion().then(function(e) {
o.kubernetes = e.data.gitVersion;
})), i.push(a.getOpenShiftMasterVersion().then(function(e) {
o.openshift = e.data.gitVersion;
})), t.all(i).finally(function() {
o.kubernetes = o.kubernetes || "unknown", o.openshift = o.openshift || "unknown";
});
} ]), angular.module("openshiftConsole").controller("CommandLineController", [ "$scope", "DataService", "AuthService", "Constants", function(e, t, n, r) {
n.withUser(), e.cliDownloadURL = r.CLI, e.cliDownloadURLPresent = e.cliDownloadURL && !_.isEmpty(e.cliDownloadURL), e.loginBaseURL = t.openshiftAPIBaseUrl(), r.DISABLE_COPY_LOGIN_COMMAND || (e.sessionToken = n.UserStore().getToken());
} ]), angular.module("openshiftConsole").controller("CreatePersistentVolumeClaimController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d) {
n.projectName = t.project, n.accessModes = "ReadWriteOnce", n.claim = {}, n.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.projectName + "/browse/storage"
}, {
title: "Create Storage"
} ];
var m = {
kind: "PersistentVolumeClaim",
apiVersion: "v1",
metadata: {
name: void 0,
=======
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(h), a.disableInputs = !0, C();
var v = e("humanizeKind"), S = v(o.kind), w = v(n.kind);
c.update(g, t.metadata.name, a.targetObject, r).then(function() {
u.addNotification({
type: "success",
message: "Succesfully added " + S + " " + o.metadata.name + " to " + w + " " + n.name + "."
=======
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(v), a.disableInputs = !0, S();
var h = e("humanizeKind"), C = h(o.kind), w = h(n.kind);
c.update(g, t.metadata.name, a.targetObject, r).then(function() {
u.addNotification({
type: "success",
message: "Successfully added " + C + " " + o.metadata.name + " to " + w + " " + n.name + "."
>>>>>>> Adding label filter to ste secrets page
}), y();
}, function(e) {
a.disableInputs = !1, b("An error occurred attaching the " + C + " to the " + w + ".", d(e));
});
}
};
} else l.toErrorPage("You do not have authority to update " + h(n.kind) + " " + n.name + ".", "access_denied");
}));
} else l.toErrorPage("Volumes are not supported for kind " + n.kind + ".");
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("CreateSecretModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.onCreate = function(e) {
t.close(e);
}, e.onCancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmModalController", [ "$scope", "$uibModalInstance", "modalConfig", function(e, t, n) {
_.extend(e, n), e.confirm = function() {
t.close("confirm");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmScaleController", [ "$scope", "$uibModalInstance", "resource", "type", function(e, t, n, a) {
e.resource = n, e.type = a, e.confirmScale = function() {
t.close("confirmScale");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmSaveLogController", [ "$scope", "$uibModalInstance", "object", "CLIHelp", function(e, t, n, a) {
e.object = n, e.command = a.getLogsCommand(n), e.save = function() {
t.close("save");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DeleteModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.delete = function() {
t.close("delete");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DebugTerminalModalController", [ "$scope", "$filter", "$uibModalInstance", "container", "image", function(e, t, n, a, r) {
e.container = a, e.image = r, e.$watch("debugPod.status.containerStatuses", function() {
e.containerState = _.get(e, "debugPod.status.containerStatuses[0].state");
}), e.close = function() {
n.close("close");
};
} ]), angular.module("openshiftConsole").controller("ConfirmReplaceModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.replace = function() {
t.close("replace");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ProcessOrSaveTemplateModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.continue = function() {
t.close("create");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("LinkServiceModalController", [ "$scope", "$uibModalInstance", "ServicesService", function(e, t, n) {
e.$watch("services", function(t) {
var a = n.getDependentServices(e.service);
e.options = _.filter(t, function(t) {
return t !== e.service && !_.includes(a, t.metadata.name);
}), 1 === _.size(e.options) && _.set(e, "link.selectedService", _.head(e.options));
}), e.link = function() {
t.close(_.get(e, "link.selectedService"));
}, e.cancel = function() {
t.dismiss();
};
} ]), angular.module("openshiftConsole").controller("JenkinsfileExamplesModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.ok = function() {
t.close("ok");
};
} ]), angular.module("openshiftConsole").controller("AboutComputeUnitsModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.ok = function() {
t.close("ok");
};
} ]), angular.module("openshiftConsole").controller("AboutController", [ "$scope", "AuthService", "Constants", function(e, t, n) {
t.withUser(), e.version = {
master: {
openshift: n.VERSION.openshift,
kubernetes: n.VERSION.kubernetes
}
};
} ]), angular.module("openshiftConsole").controller("CommandLineController", [ "$scope", "DataService", "AuthService", "Constants", function(e, t, n, a) {
n.withUser(), e.cliDownloadURL = a.CLI, e.cliDownloadURLPresent = e.cliDownloadURL && !_.isEmpty(e.cliDownloadURL), e.loginBaseURL = t.openshiftAPIBaseUrl(), a.DISABLE_COPY_LOGIN_COMMAND || (e.sessionToken = n.UserStore().getToken());
} ]), angular.module("openshiftConsole").controller("CreatePersistentVolumeClaimController", [ "$filter", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u) {
n.projectName = t.project, n.accessModes = "ReadWriteOnce", n.claim = {}, n.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.projectName + "/browse/storage"
}, {
title: "Create Storage"
} ];
<<<<<<< HEAD
var d = function() {
c.hideNotification("create-pvc-error");
};
n.$on("$destroy", d);
var p = function() {
a.history.back();
};
n.cancel = p, l.get(t.project).then(_.spread(function(a, r) {
function l() {
var e = {
=======
var m = {
>>>>>>> Support EnvFrom in the Env Editors
kind: "PersistentVolumeClaim",
apiVersion: "v1",
metadata: {
name: n.claim.name,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
labels: {},
annotations: {}
},
spec: {
resources: {
requests: {}
}
}
<<<<<<< HEAD
<<<<<<< HEAD
}, p = a.objectToResourceGroupVersion(m), g = function() {
=======
}, p = r.objectToResourceGroupVersion(m), f = function() {
>>>>>>> Support EnvFrom in the Env Editors
l.hideNotification("create-pvc-error");
};
n.$on("$destroy", g);
var f = function() {
r.history.back();
};
n.cancel = f, u.get(t.project).then(_.spread(function(r, a) {
function o() {
var e = angular.copy(m);
e.metadata.name = n.claim.name, e.spec.accessModes = [ n.claim.accessModes || "ReadWriteOnce" ];
var t = n.claim.unit || "Mi";
if (e.spec.resources.requests.storage = n.claim.amount + t, n.claim.selectedLabels) {
var r = d.mapEntries(d.compactEntries(n.claim.selectedLabels));
_.isEmpty(r) || _.set(e, "spec.selector.matchLabels", r);
}
return n.claim.storageClass && "No Storage Class" !== n.claim.storageClass.metadata.name && (e.metadata.annotations["volume.beta.kubernetes.io/storage-class"] = n.claim.storageClass.metadata.name), e;
}
<<<<<<< HEAD
n.project = r, i.canI("persistentvolumeclaims", "create", t.project) ? n.createPersistentVolumeClaim = function() {
if (g(), n.createPersistentVolumeClaimForm.$valid) {
n.disableInputs = !0;
var t = o();
s.create(p, null, t, a).then(function(e) {
=======
n.project = a, i.canI(p, "create", t.project) ? n.createPersistentVolumeClaim = function() {
if (f(), n.createPersistentVolumeClaimForm.$valid) {
n.disableInputs = !0;
var t = o();
s.create(p, null, t, r).then(function(e) {
>>>>>>> Support EnvFrom in the Env Editors
l.addNotification({
type: "success",
message: "Persistent volume claim " + e.metadata.name + " successfully created."
}), f();
}, function(t) {
n.disableInputs = !1, l.addNotification({
=======
};
e.spec.accessModes = [ n.claim.accessModes || "ReadWriteOnce" ];
var t = n.claim.unit || "Mi";
if (e.spec.resources.requests.storage = n.claim.amount + t, n.claim.selectedLabels) {
var a = u.mapEntries(u.compactEntries(n.claim.selectedLabels));
_.isEmpty(a) || _.set(e, "spec.selector.matchLabels", a);
}
return n.claim.storageClass && "No Storage Class" !== n.claim.storageClass.metadata.name && (e.metadata.annotations["volume.beta.kubernetes.io/storage-class"] = n.claim.storageClass.metadata.name), e;
}
n.project = a, o.canI("persistentvolumeclaims", "create", t.project) ? n.createPersistentVolumeClaim = function() {
if (d(), n.createPersistentVolumeClaimForm.$valid) {
n.disableInputs = !0;
var t = l();
i.create("persistentvolumeclaims", null, t, r).then(function(e) {
c.addNotification({
type: "success",
message: "Persistent volume claim " + e.metadata.name + " successfully created."
}), p();
}, function(t) {
n.disableInputs = !1, c.addNotification({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
id: "create-pvc-error",
type: "error",
message: "An error occurred requesting storage.",
details: e("getErrorDetails")(t)
});
});
}
<<<<<<< HEAD
} : c.toErrorPage("You do not have authority to create persistent volume claims in project " + t.project + ".", "access_denied");
=======
} : s.toErrorPage("You do not have authority to create persistent volume claims in project " + t.project + ".", "access_denied");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}));
} ]), angular.module("openshiftConsole").directive("buildClose", [ "$window", function(e) {
var t = function(e) {
return "hide/build/" + e.metadata.uid;
}, n = function(e) {
var n = t(e);
return "true" === sessionStorage.getItem(n);
};
return {
restrict: "AE",
scope: {
build: "=",
hideBuild: "="
},
controller: [ "$scope", function(e) {
e.onHideBuild = function() {
var n = t(e.build);
e.hideBuild = !0, sessionStorage.setItem(n, "true");
};
} ],
<<<<<<< HEAD
link: function(e, t, r, a) {
=======
link: function(e, t, a, r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
e.hideBuild = !1, e.$watch("build", function(t) {
e.hideBuild = n(t);
});
},
templateUrl: "views/directives/_build-close.html"
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "APIService", "DataService", "NotificationsService", "gettext", "gettextCatalog", "ApplicationGenerator", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a, o, i, s, c) {
var l = n.getPreferredVersion("serviceaccounts"), u = n.getPreferredVersion("secrets");
=======
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "DataService", "NotificationsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, a, r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "APIService", "DataService", "NotificationsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, a, r, o) {
var i = n.getPreferredVersion("serviceaccounts"), s = n.getPreferredVersion("secrets");
>>>>>>> Update directives/createSecret to use getPreferredVersion
return {
restrict: "E",
scope: {
type: "=",
serviceAccountToLink: "=?",
namespace: "=",
onCreate: "&",
onCancel: "&"
},
templateUrl: "views/directives/create-secret.html",
<<<<<<< HEAD
<<<<<<< HEAD
link: function(d) {
d.nameValidation = c, d.secretReferenceValidation = {
pattern: /^[a-zA-Z0-9\-_]+$/,
minLength: 8,
description: "Secret reference key must consist of lower-case, upper-case letters, numbers, dash, and underscore."
}, d.secretAuthTypeMap = {
image: {
label: i.getString(o("Image Secret")),
authTypes: [ {
id: "kubernetes.io/dockercfg",
label: i.getString(o("Image Registry Credentials"))
}, {
id: "kubernetes.io/dockerconfigjson",
label: i.getString(o("Configuration File"))
} ]
},
source: {
label: i.getString(o("Source Secret")),
authTypes: [ {
id: "kubernetes.io/basic-auth",
label: i.getString(o("Basic Authentication"))
}, {
id: "kubernetes.io/ssh-auth",
label: i.getString(o("SSH Key"))
} ]
},
webhook: {
label: "Webhook Secret",
authTypes: [ {
id: "Opaque",
label: "Webhook Secret"
} ]
}
}, d.secretTypes = _.keys(d.secretAuthTypeMap), d.type ? d.newSecret = {
type: d.type,
authType: d.secretAuthTypeMap[d.type].authTypes[0].id,
data: {},
linkSecret: !_.isEmpty(d.serviceAccountToLink),
pickedServiceAccountToLink: d.serviceAccountToLink || ""
} : d.newSecret = {
=======
link: function(o) {
o.nameValidation = r, o.secretAuthTypeMap = {
=======
link: function(n) {
n.nameValidation = o, n.secretAuthTypeMap = {
>>>>>>> Update directives/createSecret to use getPreferredVersion
image: {
label: "Image Secret",
authTypes: [ {
id: "kubernetes.io/dockercfg",
label: "Image Registry Credentials"
}, {
id: "kubernetes.io/dockerconfigjson",
label: "Configuration File"
} ]
},
source: {
label: "Source Secret",
authTypes: [ {
id: "kubernetes.io/basic-auth",
label: "Basic Authentication"
}, {
id: "kubernetes.io/ssh-auth",
label: "SSH Key"
} ]
}
}, n.secretTypes = _.keys(n.secretAuthTypeMap), n.type ? n.newSecret = {
type: n.type,
authType: n.secretAuthTypeMap[n.type].authTypes[0].id,
data: {},
<<<<<<< HEAD
linkSecret: !_.isEmpty(o.serviceAccountToLink),
pickedServiceAccountToLink: o.serviceAccountToLink || ""
} : o.newSecret = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
linkSecret: !_.isEmpty(n.serviceAccountToLink),
pickedServiceAccountToLink: n.serviceAccountToLink || ""
} : n.newSecret = {
>>>>>>> Update directives/createSecret to use getPreferredVersion
type: "source",
authType: "kubernetes.io/basic-auth",
data: {},
linkSecret: !1,
pickedServiceAccountToLink: ""
<<<<<<< HEAD
<<<<<<< HEAD
}, d.add = {
gitconfig: !1,
cacert: !1
}, t.canI("serviceaccounts", "list") && t.canI("serviceaccounts", "update") && r.list(l, d, function(e) {
d.serviceAccounts = e.by("metadata.name"), d.serviceAccountsNames = _.keys(d.serviceAccounts);
});
var m = function(e, t) {
=======
}, o.add = {
=======
}, n.add = {
>>>>>>> Update directives/createSecret to use getPreferredVersion
gitconfig: !1,
cacert: !1
}, t.canI("serviceaccounts", "list") && t.canI("serviceaccounts", "update") && a.list(i, n, function(e) {
n.serviceAccounts = e.by("metadata.name"), n.serviceAccountsNames = _.keys(n.serviceAccounts);
});
<<<<<<< HEAD
var i = function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var n = {
apiVersion: "v1",
kind: "Secret",
metadata: {
<<<<<<< HEAD
name: d.newSecret.data.secretName
},
type: t,
stringData: {}
};
switch (t) {
case "kubernetes.io/basic-auth":
e.passwordToken ? n.stringData.password = e.passwordToken : n.type = "Opaque", e.username && (n.stringData.username = e.username), e.gitconfig && (n.stringData[".gitconfig"] = e.gitconfig), e.cacert && (n.stringData["ca.crt"] = e.cacert);
break;

case "kubernetes.io/ssh-auth":
n.stringData["ssh-privatekey"] = e.privateKey, e.gitconfig && (n.stringData[".gitconfig"] = e.gitconfig);
break;

case "kubernetes.io/dockerconfigjson":
var r = ".dockerconfigjson";
JSON.parse(e.dockerConfig).auths || (n.type = "kubernetes.io/dockercfg", r = ".dockercfg"), n.stringData[r] = e.dockerConfig;
break;

case "kubernetes.io/dockercfg":
var a = window.btoa(e.dockerUsername + ":" + e.dockerPassword), o = {};
o[e.dockerServer] = {
username: e.dockerUsername,
password: e.dockerPassword,
email: e.dockerMail,
auth: a
}, n.stringData[".dockercfg"] = JSON.stringify(o);
break;

case "Opaque":
e.webhookSecretKey && (n.stringData.WebHookSecretKey = e.webhookSecretKey);
}
return n;
}, p = function() {
a.hideNotification("create-secret-error");
}, g = function(t) {
var o = angular.copy(d.serviceAccounts[d.newSecret.pickedServiceAccountToLink]), i = n.objectToResourceGroupVersion(o);
switch (d.newSecret.type) {
case "source":
o.secrets.push({
=======
name: o.newSecret.data.secretName
=======
var c = function(e, t) {
var a = {
apiVersion: "v1",
kind: "Secret",
metadata: {
name: n.newSecret.data.secretName
>>>>>>> Update directives/createSecret to use getPreferredVersion
},
type: t,
data: {}
};
switch (t) {
case "kubernetes.io/basic-auth":
e.passwordToken ? a.data = {
password: window.btoa(e.passwordToken)
} : a.type = "Opaque", e.username && (a.data.username = window.btoa(e.username)), e.gitconfig && (a.data[".gitconfig"] = window.btoa(e.gitconfig)), e.cacert && (a.data["ca.crt"] = window.btoa(e.cacert));
break;

case "kubernetes.io/ssh-auth":
a.data = {
"ssh-privatekey": window.btoa(e.privateKey)
}, e.gitconfig && (a.data[".gitconfig"] = window.btoa(e.gitconfig));
break;

case "kubernetes.io/dockerconfigjson":
var r = window.btoa(e.dockerConfig);
JSON.parse(e.dockerConfig).auths ? a.data[".dockerconfigjson"] = r : (a.type = "kubernetes.io/dockercfg", a.data[".dockercfg"] = r);
break;

case "kubernetes.io/dockercfg":
var o = window.btoa(e.dockerUsername + ":" + e.dockerPassword), i = {};
i[e.dockerServer] = {
username: e.dockerUsername,
password: e.dockerPassword,
email: e.dockerMail,
auth: o
}, a.data[".dockercfg"] = window.btoa(JSON.stringify(i));
}
return a;
}, l = function() {
r.hideNotification("create-secret-error");
}, u = function(t) {
var o = angular.copy(n.serviceAccounts[n.newSecret.pickedServiceAccountToLink]);
switch (n.newSecret.type) {
case "source":
<<<<<<< HEAD
r.secrets.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
o.secrets.push({
>>>>>>> Update directives/createSecret to use getPreferredVersion
name: t.metadata.name
});
break;

case "image":
<<<<<<< HEAD
<<<<<<< HEAD
o.imagePullSecrets.push({
name: t.metadata.name
});
}
r.update(i, d.newSecret.pickedServiceAccountToLink, o, d).then(function(e) {
a.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created and linked with service account " + e.metadata.name + "."
}), d.onCreate({
=======
r.imagePullSecrets.push({
=======
o.imagePullSecrets.push({
>>>>>>> Update directives/createSecret to use getPreferredVersion
name: t.metadata.name
});
}
a.update(i, n.newSecret.pickedServiceAccountToLink, o, n).then(function(e) {
r.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created and linked with service account " + e.metadata.name + "."
<<<<<<< HEAD
}), o.onCreate({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), n.onCreate({
>>>>>>> Update directives/createSecret to use getPreferredVersion
newSecret: t
});
}, function(a) {
r.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created."
<<<<<<< HEAD
<<<<<<< HEAD
}), d.serviceAccountToLink || a.addNotification({
id: "secret-sa-link-error",
type: "error",
message: "An error occurred while linking the secret with service account " + d.newSecret.pickedServiceAccountToLink + ".",
details: e("getErrorDetails")(n)
}), d.onCreate({
newSecret: t
});
});
}, f = _.debounce(function() {
try {
JSON.parse(d.newSecret.data.dockerConfig), d.invalidConfigFormat = !1;
} catch (e) {
d.invalidConfigFormat = !0;
=======
}), o.serviceAccountToLink || a.addNotification({
=======
}), n.serviceAccountToLink || r.addNotification({
>>>>>>> Update directives/createSecret to use getPreferredVersion
id: "secret-sa-link-error",
type: "error",
message: "An error occurred while linking the secret with service account " + n.newSecret.pickedServiceAccountToLink + ".",
details: e("getErrorDetails")(a)
}), n.onCreate({
newSecret: t
});
});
}, d = _.debounce(function() {
try {
JSON.parse(n.newSecret.data.dockerConfig), n.invalidConfigFormat = !1;
} catch (e) {
<<<<<<< HEAD
o.invalidConfigFormat = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.invalidConfigFormat = !0;
>>>>>>> Update directives/createSecret to use getPreferredVersion
}
}, 300, {
leading: !0
});
<<<<<<< HEAD
<<<<<<< HEAD
d.aceChanged = f, d.nameChanged = function() {
d.nameTaken = !1;
}, d.generateWebhookSecretKey = function() {
d.newSecret.data.webhookSecretKey = s._generateSecret();
}, d.create = function() {
p();
var n = m(d.newSecret.data, d.newSecret.authType);
r.create(u, null, n, d).then(function(e) {
d.newSecret.linkSecret && d.serviceAccountsNames.contains(d.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? g(e) : (a.addNotification({
type: "success",
message: "Secret " + n.metadata.name + " was created."
}), d.onCreate({
=======
o.aceChanged = l, o.nameChanged = function() {
o.nameTaken = !1;
}, o.create = function() {
s();
var r = i(o.newSecret.data, o.newSecret.authType);
n.create("secrets", null, r, o).then(function(e) {
o.newSecret.linkSecret && o.serviceAccountsNames.contains(o.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? c(e) : (a.addNotification({
type: "success",
message: "Secret " + r.metadata.name + " was created."
}), o.onCreate({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.aceChanged = d, n.nameChanged = function() {
n.nameTaken = !1;
}, n.create = function() {
l();
var o = c(n.newSecret.data, n.newSecret.authType);
a.create(s, null, o, n).then(function(e) {
n.newSecret.linkSecret && n.serviceAccountsNames.contains(n.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? u(e) : (r.addNotification({
type: "success",
message: "Secret " + o.metadata.name + " was created."
}), n.onCreate({
>>>>>>> Update directives/createSecret to use getPreferredVersion
newSecret: e
}));
}, function(t) {
"AlreadyExists" !== (t.data || {}).reason ? r.addNotification({
id: "create-secret-error",
type: "error",
message: "An error occurred while creating the secret.",
details: e("getErrorDetails")(t)
<<<<<<< HEAD
<<<<<<< HEAD
}) : d.nameTaken = !0;
});
}, d.cancel = function() {
p(), d.onCancel();
=======
}) : o.nameTaken = !0;
});
}, o.cancel = function() {
s(), o.onCancel();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
};
} ]), angular.module("openshiftConsole").directive("timeOnlyDurationUntilNow", function() {
return {
restrict: "E",
scope: {
timestamp: "=",
omitSingle: "=?",
precision: "=?"
},
template: '<span data-timestamp="{{timestamp}}" data-time-only="true" class="duration">{{timestamp | timeOnlyDurationFromTimestamps : null}}</span>'
<<<<<<< HEAD
=======
};
}).directive("durationUntilNow", function() {
return {
restrict: "E",
scope: {
timestamp: "=",
omitSingle: "=?",
precision: "=?"
},
template: '<span data-timestamp="{{timestamp}}" data-omit-single="{{omitSingle}}" data-precision="{{precision}}" class="duration">{{timestamp | duration : null : omitSingle : precision}}</span>'
};
}), angular.module("openshiftConsole").directive("deleteLink", [ "$uibModal", "$location", "$filter", "$q", "hashSizeFilter", "APIService", "DataService", "Navigate", "NotificationsService", "Logger", function(e, t, n, a, r, o, i, s, c, l) {
return {
restrict: "E",
scope: {
kind: "@",
group: "@?",
typeDisplayName: "@?",
resourceName: "@",
projectName: "@",
alerts: "=",
displayName: "@",
disableDelete: "=?",
typeNameToConfirm: "=?",
label: "@?",
buttonOnly: "@",
stayOnCurrentPage: "=?",
hpaList: "=?",
success: "=?",
redirectUrl: "@?"
},
templateUrl: function(e, t) {
return angular.isDefined(t.buttonOnly) ? "views/directives/delete-button.html" : "views/directives/delete-link.html";
},
replace: !0,
link: function(a, r, u) {
"Project" === u.kind && (a.isProject = !0), a.options = {
deleteHPAs: !0,
deleteImmediately: !1
};
var d = function(e) {
a.stayOnCurrentPage && a.alerts ? a.alerts[e.name] = e.data : c.addNotification(e.data);
}, m = function(e) {
return i.delete({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, e.metadata.name, {
namespace: a.projectName
}).then(function() {
c.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " was marked for deletion."
});
}).catch(function(t) {
d({
name: e.metadata.name,
data: {
type: "error",
message: "Horizontal pod autoscaler " + e.metadata.name + " could not be deleted."
}
}), l.error("HPA " + e.metadata.name + " could not be deleted.", t);
});
}, p = function() {
if (!a.stayOnCurrentPage) if (a.redirectUrl) t.url(a.redirectUrl); else if ("Project" === a.kind) if ("/" !== t.path()) {
var e = URI("/");
t.url(e);
} else a.$emit("deleteProject"); else s.toResourceList(o.kindToResource(a.kind), a.projectName);
};
<<<<<<< HEAD
a.openDeleteModal = function() {
a.disableDelete || e.open({
animation: !0,
templateUrl: "views/modals/delete-resource.html",
controller: "DeleteModalController",
scope: a
}).result.then(function() {
var e = a.kind, t = a.resourceName, r = (a.typeDisplayName || n("humanizeKind")(e)) + " '" + (a.displayName ? a.displayName : t) + "'", s = "Project" === a.kind ? {} : {
namespace: a.projectName
<<<<<<< HEAD
<<<<<<< HEAD
}, u = {};
a.options.deleteImmediately && (u.gracePeriodSeconds = 0, u.propagationPolicy = null), "servicecatalog.k8s.io" === a.group && (u.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: a.group
}, t, s, u).then(function() {
=======
}, g = {};
a.options.deleteImmediately && (g.gracePeriodSeconds = 0, g.propagationPolicy = null), "servicecatalog.k8s.io" === a.group && (g.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: a.group
}, t, u, g).then(function() {
>>>>>>> Add bindings list to resource pages
=======
}, f = {};
a.options.deleteImmediately && (f.gracePeriodSeconds = 0, f.propagationPolicy = null), "servicecatalog.k8s.io" === a.group && (f.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: a.group
}, t, u, f).then(function() {
>>>>>>> Patternfly vertical navigation and project bar
c.addNotification({
type: "success",
<<<<<<< HEAD
message: _.capitalize(r) + " was marked for deletion."
}), a.success && a.success(), a.options.deleteHPAs && _.each(a.hpaList, m), p();
=======
message: s + " was marked for deletion."
<<<<<<< HEAD
}), a.success && a.success(), a.options.deleteHPAs && _.each(a.hpaList, p), m();
>>>>>>> Updates for Service Instance & Bindings
=======
}), a.success && a.success(), a.options.deleteHPAs && _.each(a.hpaList, m), p();
>>>>>>> Support EnvFrom in the Env Editors
}).catch(function(e) {
d({
name: t,
data: {
=======
return t.data && t.data.length ? (a = _.last(t.data), r.start = a.end) : r.start = n, m.pod ? _.assign(r, {
namespace: m.pod.metadata.namespace,
pod: m.pod,
containerName: e.containerMetric ? m.options.selectedContainer.name : "pod"
}) : null;
}
function S() {
A || (U = 0, _.each(m.metrics, function(e) {
g(e), f(e);
}));
}
function C(e) {
if (!A) if (U++, m.noData) m.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(U < 2)) {
var t = "metrics-failed-" + m.uniqueID;
m.alerts[t] = {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
type: "error",
<<<<<<< HEAD
message: _.capitalize(r) + "' could not be deleted.",
details: n("getErrorDetails")(e)
}, l.error(r + " could not be deleted.", e);
});
});
=======
}) : n.nameTaken = !0;
});
}, n.cancel = function() {
l(), n.onCancel();
>>>>>>> Update directives/createSecret to use getPreferredVersion
};
}
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).directive("durationUntilNow", function() {
return {
restrict: "E",
scope: {
<<<<<<< HEAD
timestamp: "=",
omitSingle: "=?",
precision: "=?"
},
template: '<span data-timestamp="{{timestamp}}" data-omit-single="{{omitSingle}}" data-precision="{{precision}}" class="duration">{{timestamp | duration : null : omitSingle : precision}}</span>'
};
}).directive("timeRemainingFromNow", function() {
return {
restrict: "E",
scope: {
endTimestamp: "="
},
template: '<span data-timestamp="{{endTimestamp}}" class="countdown">{{endTimestamp | countdownToTimestamp}}</span>'
};
<<<<<<< HEAD
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("deleteLink", [ "$uibModal", "$location", "$filter", "$q", "hashSizeFilter", "APIService", "DataService", "Navigate", "NotificationsService", "Logger", function(e, t, n, r, a, o, i, s, c, l) {
var u = o.getPreferredVersion("horizontalpodautoscalers");
=======
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentFrom", {
controller: [ "$attrs", "$filter", "keyValueEditorUtils", function(e, t, n) {
var a = this, r = t("canI"), o = t("humanizeKind"), i = _.uniqueId();
a.setFocusClass = "edit-environment-from-set-focus-" + i;
var s = function(e, t) {
e && e.push(t || {});
};
a.onAddRow = function() {
s(a.envFromEntries), n.setFocusOn("." + a.setFocusClass);
}, a.deleteEntry = function(e, t) {
a.envFromEntries && !a.envFromEntries.length || (a.envFromEntries.splice(e, t), !a.envFromEntries.length && a.addRowLink && s(a.envFromEntries), a.updateEntries(a.envFromEntries), a.editEnvironmentFromForm.$setDirty());
}, a.isEnvFromReadonly = function(e) {
return a.isReadonlyAny || !0 === e.isReadonlyValue || (e.secretRef || e.configMapRef) && !e.selectedEnvFrom || _.isEmpty(a.envFromSelectorOptions);
}, a.groupByKind = function(e) {
return o(e.kind);
}, a.dragControlListeners = {
accept: function(e, t) {
return e.itemScope.sortableScope.$id === t.$id;
},
orderChanged: function() {
a.editEnvironmentFromForm.$setDirty();
}
}, a.envFromObjectSelected = function(e, t, n) {
var r = {};
switch (n.kind) {
case "Secret":
r.secretRef = {
name: n.metadata.name
}, delete a.envFromEntries[e].configMapRef;
break;

case "ConfigMap":
r.configMapRef = {
name: n.metadata.name
}, delete a.envFromEntries[e].secretRef;
}
_.assign(a.envFromEntries[e], r), a.updateEntries(a.envFromEntries);
}, a.updateEntries = function(e) {
a.entries = _.filter(e, function(e) {
return e.secretRef || e.configMapRef;
});
};
var c = function(e) {
a.envFromEntries = e || [], a.envFromEntries.length || s(a.envFromEntries), _.each(a.envFromEntries, function(e) {
e && (e.configMapRef && !r("configmaps", "get") && (e.isReadonlyValue = !0), e.secretRef && !r("secrets", "get") && (e.isReadonlyValue = !0));
});
<<<<<<< HEAD
}, l = function(e) {
var t;
switch (e.kind) {
case "ConfigMap":
t = _.find(a.envFromEntries, {
configMapRef: {
name: e.metadata.name
}
=======
}), r.all(t).then(S, C).finally(function() {
m.loaded = !0;
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
break;

case "Secret":
t = _.find(a.envFromEntries, {
secretRef: {
name: e.metadata.name
}
});
}
return t;
};
a.checkEntries = function(e) {
return !!l(e);
};
var u = function(e, t) {
a.cannotAdd = a.isReadonlyAny || _.isEmpty(t), t && _.each(t, function(e) {
var t = l(e);
t && _.set(t, "selectedEnvFrom", e);
});
};
a.$onInit = function() {
c(a.entries), u(a.entries, a.envFromSelectorOptions), "cannotDelete" in e && (a.cannotDeleteAny = !0), "cannotSort" in e && (a.cannotSort = !0), "isReadonly" in e && (a.isReadonlyAny = !0), "showHeader" in e && (a.showHeader = !0), a.envFromEntries && !a.envFromEntries.length && s(a.envFromEntries);
}, a.$onChanges = function(e) {
e.entries && c(e.entries.currentValue), e.envFromSelectorOptions && u(a.envFromEntries, e.envFromSelectorOptions.currentValue);
};
} ],
bindings: {
addRowLink: "@",
entries: "=",
envFromSelectorOptions: "<",
selectorPlaceholder: "@"
},
templateUrl: "views/directives/edit-environment-from.html"
});
}(), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "DataService", "KeywordService", "ProjectsService", "Logger", function(e, t, n, a, r, o) {
>>>>>>> Support EnvFrom in the Env Editors
=======
}), angular.module("openshiftConsole").directive("deleteLink", [ "$uibModal", "$location", "$filter", "$q", "hashSizeFilter", "APIService", "DataService", "Navigate", "NotificationsService", "Logger", function(e, t, n, a, r, o, i, s, c, l) {
var u = o.getPreferredVersion("horizontalpodautoscalers");
>>>>>>> Update deleteLink directive to use getPreferredVersion
return {
restrict: "E",
scope: {
kind: "@",
group: "@?",
typeDisplayName: "@?",
resourceName: "@",
projectName: "@",
alerts: "=",
displayName: "@",
disableDelete: "=?",
typeNameToConfirm: "=?",
label: "@?",
buttonOnly: "@",
stayOnCurrentPage: "=?",
hpaList: "=?",
success: "=?",
redirectUrl: "@?"
},
templateUrl: function(e, t) {
return angular.isDefined(t.buttonOnly) ? "views/directives/delete-button.html" : "views/directives/delete-link.html";
},
replace: !0,
<<<<<<< HEAD
link: function(r, a, d) {
"Project" === d.kind && (r.isProject = !0), r.options = {
=======
link: function(a, r, d) {
"Project" === d.kind && (a.isProject = !0), a.options = {
>>>>>>> Update deleteLink directive to use getPreferredVersion
deleteHPAs: !0,
deleteImmediately: !1
};
var m = function(e) {
<<<<<<< HEAD
r.stayOnCurrentPage && r.alerts ? r.alerts[e.name] = e.data : c.addNotification(e.data);
}, p = function(e) {
return i.delete(u, e.metadata.name, {
namespace: r.projectName
=======
a.stayOnCurrentPage && a.alerts ? a.alerts[e.name] = e.data : c.addNotification(e.data);
}, p = function(e) {
return i.delete(u, e.metadata.name, {
namespace: a.projectName
>>>>>>> Update deleteLink directive to use getPreferredVersion
}).then(function() {
c.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " was marked for deletion."
});
}).catch(function(t) {
m({
name: e.metadata.name,
data: {
type: "error",
message: "Horizontal pod autoscaler " + e.metadata.name + " could not be deleted."
}
}), l.error("HPA " + e.metadata.name + " could not be deleted.", t);
});
<<<<<<< HEAD
}, g = function() {
if (!r.stayOnCurrentPage) if (r.redirectUrl) t.url(r.redirectUrl); else if ("Project" === r.kind) if ("/" !== t.path()) {
=======
}, f = function() {
if (!a.stayOnCurrentPage) if (a.redirectUrl) t.url(a.redirectUrl); else if ("Project" === a.kind) if ("/" !== t.path()) {
>>>>>>> Update deleteLink directive to use getPreferredVersion
var e = URI("/");
t.url(e);
} else r.$emit("deleteProject"); else s.toResourceList(o.kindToResource(r.kind), r.projectName);
};
r.openDeleteModal = function() {
r.disableDelete || e.open({
templateUrl: "views/modals/delete-resource.html",
controller: "DeleteModalController",
scope: r
}).result.then(function() {
<<<<<<< HEAD
var e = r.kind, t = r.resourceName, a = r.typeDisplayName || n("humanizeKind")(e), s = _.capitalize(a) + " '" + (r.displayName ? r.displayName : t) + "'", u = "Project" === r.kind ? {} : {
namespace: r.projectName
}, d = {};
r.options.deleteImmediately && (d.gracePeriodSeconds = 0, d.propagationPolicy = null), "servicecatalog.k8s.io" === r.group && (d.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: r.group
=======
var e = a.kind, t = a.resourceName, r = a.typeDisplayName || n("humanizeKind")(e), s = _.capitalize(r) + " '" + (a.displayName ? a.displayName : t) + "'", u = "Project" === a.kind ? {} : {
namespace: a.projectName
}, d = {};
a.options.deleteImmediately && (d.gracePeriodSeconds = 0, d.propagationPolicy = null), "servicecatalog.k8s.io" === a.group && (d.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: a.group
>>>>>>> Update deleteLink directive to use getPreferredVersion
}, t, u, d).then(function() {
c.addNotification({
type: "success",
message: s + " was marked for deletion."
<<<<<<< HEAD
}), r.success && r.success(), r.options.deleteHPAs && _.each(r.hpaList, p), g();
=======
}), a.success && a.success(), a.options.deleteHPAs && _.each(a.hpaList, p), f();
>>>>>>> Update deleteLink directive to use getPreferredVersion
}).catch(function(e) {
m({
name: t,
data: {
type: "error",
=======
>>>>>>> Add bindings list to resource pages
message: _.capitalize(s) + "' could not be deleted.",
details: n("getErrorDetails")(e)
}
}), l.error(s + " could not be deleted.", e);
<<<<<<< HEAD
});
});
};
}
};
} ]), angular.module("openshiftConsole").directive("editConfigMap", [ "DNS1123_SUBDOMAIN_VALIDATION", function(e) {
=======
type: "@",
typeInfo: "@",
triggers: "=",
bcName: "=",
projectName: "=",
form: "="
},
templateUrl: "views/directives/edit-webhook-triggers.html"
};
}), angular.module("openshiftConsole").directive("editConfigMap", [ "DNS1123_SUBDOMAIN_VALIDATION", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
require: "^form",
restrict: "E",
scope: {
configMap: "=model",
showNameInput: "="
},
templateUrl: "views/directives/edit-config-map.html",
<<<<<<< HEAD
link: function(t, n, r, a) {
t.form = a, t.nameValidation = e, t.addItem = function() {
=======
link: function(t, n, a, r) {
t.form = r, t.nameValidation = e, t.addItem = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
t.data.push({
key: "",
value: ""
}), t.form.$setDirty();
}, t.removeItem = function(e) {
t.data.splice(e, 1), t.form.$setDirty();
}, t.getKeys = function() {
return _.map(t.data, "key");
};
var o = t.$watch("configMap.data", function(e) {
e && (t.data = _.map(e, function(e, t) {
return {
key: t,
value: e
};
}), _.sortBy(t.data, "key"), _.isEmpty(t.data) && t.addItem(), o(), t.$watch("data", function(e) {
var n = {};
_.each(e, function(e) {
n[e.key] = e.value;
}), _.set(t, "configMap.data", n);
}, !0));
});
}
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentFrom", {
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$attrs", "$filter", "$scope", "keyValueEditorUtils", "SecretsService", function(e, t, n, r, a) {
=======
controller: [ "$attrs", "$filter", "$scope", "keyValueEditorUtils", "SecretsService", function(e, t, n, a, r) {
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
var o = this, i = t("canI"), s = t("humanizeKind"), c = _.uniqueId(), l = /^[A-Za-z_][A-Za-z0-9_]*$/, u = !1;
o.setFocusClass = "edit-environment-from-set-focus-" + c, o.isEnvVarInvalid = function(e) {
return !l.test(e);
}, o.hasInvalidEnvVar = function(e) {
<<<<<<< HEAD
return _.some(e, function(e, t) {
return o.isEnvVarInvalid(t);
});
}, o.viewOverlayPanel = function(e) {
o.decodedData = e.data, o.overlayPaneEntryDetails = e, "Secret" === e.kind && (o.decodedData = a.decodeSecretData(e.data)), o.overlayPanelVisible = !0;
}, o.closeOverlayPanel = function() {
o.showSecret = !1, o.overlayPanelVisible = !1;
=======
return t.showAverage ? (_.each(e[r.descriptor], function(e, t) {
h(r.descriptor, t, e);
}), i.type = "area-spline", w && r.compactType && (i.type = r.compactType), i.x = "Date", i.columns = a(r), i) : (_.each(e[r.descriptor], function(e, t) {
h(r.descriptor, t, e);
var a = t + "-dates";
_.set(i, [ "xs", t ], a);
var s = [ a ], c = [ t ];
o.push(s), o.push(c), _.each(R[r.descriptor][t], function(e) {
if (s.push(e.start), (!P || P < e.end) && (P = e.end), n(e)) c.push(e.value); else {
var t = r.convert ? r.convert(e.value) : e.value;
c.push(t);
}
});
}), i.columns = _.sortBy(o, function(e) {
return e[0];
}), i);
}
function u(e) {
k || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), S[i] ? (S[i].load(r), t.showAverage ? S[i].legend.hide() : S[i].legend.show()) : ((a = D(n)).data = r, S[i] = c3.generate(a));
}));
}
function d() {
return w ? "-15mn" : "-" + t.options.timeRange.value + "mn";
}
function m() {
return 60 * t.options.timeRange.value * 1e3;
}
function p() {
return w ? "1mn" : Math.floor(m() / C) + "ms";
}
function f() {
var e = _.find(t.pods, "metadata.namespace");
if (e) {
var n = {
pods: t.pods,
namespace: e.metadata.namespace,
bucketDuration: p()
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
};
var d = function(e, t) {
e && e.push(t || {});
};
o.onAddRow = function() {
d(o.envFromEntries), r.setFocusOn("." + o.setFocusClass);
}, o.deleteEntry = function(e, t) {
o.envFromEntries && !o.envFromEntries.length || (o.envFromEntries.splice(e, t), !o.envFromEntries.length && o.addRowLink && d(o.envFromEntries), o.updateEntries(o.envFromEntries), o.editEnvironmentFromForm.$setDirty());
}, o.isEnvFromReadonly = function(e) {
return o.isReadonlyAny || !0 === e.isReadonlyValue || (e.secretRef || e.configMapRef) && !e.selectedEnvFrom || _.isEmpty(o.envFromSelectorOptions);
}, o.groupByKind = function(e) {
return s(e.kind);
}, o.dragControlListeners = {
=======
controller: [ "$attrs", "$filter", "keyValueEditorUtils", "SecretsService", function(e, t, n, a) {
var r = this, o = t("canI"), i = t("humanizeKind"), s = _.uniqueId(), c = /^[A-Za-z_][A-Za-z0-9_]*$/;
r.setFocusClass = "edit-environment-from-set-focus-" + s, r.isEnvVarInvalid = function(e) {
return !c.test(e);
}, r.hasInvalidEnvVar = function(e) {
=======
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
return _.some(e, function(e, t) {
return o.isEnvVarInvalid(t);
});
}, o.viewOverlayPanel = function(e) {
o.decodedData = e.data, o.overlayPaneEntryDetails = e, "Secret" === e.kind && (o.decodedData = r.decodeSecretData(e.data)), o.overlayPanelVisible = !0;
}, o.closeOverlayPanel = function() {
o.showSecret = !1, o.overlayPanelVisible = !1;
};
var d = function(e, t) {
e && e.push(t || {});
};
o.onAddRow = function() {
d(o.envFromEntries), a.setFocusOn("." + o.setFocusClass);
}, o.deleteEntry = function(e, t) {
o.envFromEntries && !o.envFromEntries.length || (o.envFromEntries.splice(e, t), o.envFromEntries.length || d(o.envFromEntries), o.updateEntries(o.envFromEntries), o.editEnvironmentFromForm.$setDirty());
}, o.hasOptions = function() {
return !_.isEmpty(o.envFromSelectorOptions);
}, o.hasEntries = function() {
return _.some(o.entries, function(e) {
return _.get(e, "configMapRef.name") || _.get(e, "secretRef.name");
});
<<<<<<< HEAD
}, r.isEnvFromReadonly = function(e) {
return !0 === r.isReadonly || e && !0 === e.isReadonly;
}, r.groupByKind = function(e) {
return i(e.kind);
}, r.dragControlListeners = {
>>>>>>> Reveal and hide secrets
=======
}, o.isEnvFromReadonly = function(e) {
return !0 === o.isReadonly || e && !0 === e.isReadonly;
}, o.groupByKind = function(e) {
return s(e.kind);
}, o.dragControlListeners = {
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
accept: function(e, t) {
return e.itemScope.sortableScope.$id === t.$id;
},
orderChanged: function() {
<<<<<<< HEAD
<<<<<<< HEAD
o.editEnvironmentFromForm.$setDirty();
}
}, o.envFromObjectSelected = function(e, t, n) {
var r = {};
=======
r.editEnvironmentFromForm.$setDirty();
=======
o.editEnvironmentFromForm.$setDirty();
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
}
}, o.envFromObjectSelected = function(e, t, n) {
var a = {};
>>>>>>> Reveal and hide secrets
switch (n.kind) {
case "Secret":
a.secretRef = {
name: n.metadata.name
<<<<<<< HEAD
<<<<<<< HEAD
}, delete o.envFromEntries[e].configMapRef;
=======
}, delete r.envFromEntries[e].configMapRef;
>>>>>>> Reveal and hide secrets
=======
}, delete o.envFromEntries[e].configMapRef;
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
break;

case "ConfigMap":
a.configMapRef = {
name: n.metadata.name
<<<<<<< HEAD
<<<<<<< HEAD
}, delete o.envFromEntries[e].secretRef;
}
_.assign(o.envFromEntries[e], r), o.updateEntries(o.envFromEntries);
}, o.updateEntries = function(e) {
u = !0, o.entries = _.filter(e, function(e) {
return e.secretRef || e.configMapRef;
});
};
var m = function(e) {
o.envFromEntries = e || [], o.envFromEntries.length || d(o.envFromEntries), _.each(o.envFromEntries, function(e) {
e && (e.configMapRef && !i("configmaps", "get") && (e.isReadonlyValue = !0), e.secretRef && !i("secrets", "get") && (e.isReadonlyValue = !0));
});
}, p = function(e) {
var t;
switch (e.kind) {
=======
}, delete r.envFromEntries[e].secretRef;
=======
}, delete o.envFromEntries[e].secretRef;
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
}
t.prefix && (a.prefix = t.prefix), _.assign(o.envFromEntries[e], a), o.updateEntries(o.envFromEntries);
}, o.updateEntries = function(e) {
u = !0, o.entries = _.filter(e, function(e) {
return e.secretRef || e.configMapRef;
});
};
<<<<<<< HEAD
<<<<<<< HEAD
var l = function() {
var e = {}, t = {};
r.envFromEntries = r.entries || [], r.envFromEntries.length || c(r.envFromEntries), _.each(r.envFromSelectorOptions, function(n) {
switch (n.kind) {
>>>>>>> Reveal and hide secrets
case "ConfigMap":
t = _.find(o.envFromEntries, {
configMapRef: {
name: e.metadata.name
}
<<<<<<< HEAD
=======
function v() {
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && N < 2;
}
function h(e, n, a) {
t.noData = !1;
var r = _.initial(a), o = _.get(R, [ e, n ]);
if (o) {
var i = _.takeRight(o.concat(r), C);
_.set(R, [ e, n ], i);
} else _.set(R, [ e, n ], r);
}
function y() {
if (!I && v()) {
j = Date.now();
var e = f();
c.getPodMetrics(e).then(u, g).finally(function() {
t.loaded = !0;
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
break;

case "Secret":
t = _.find(o.envFromEntries, {
secretRef: {
name: e.metadata.name
}
<<<<<<< HEAD
=======
>>>>>>> Add bindings list to resource pages
});
=======
=======
var u = function() {
var e = {}, t = {};
r.envFromEntries = r.entries || [], r.envFromEntries.length || l(r.envFromEntries), _.each(r.envFromSelectorOptions, function(n) {
=======
var m = function() {
var e = {}, t = {};
o.envFromEntries = o.entries || [], o.envFromEntries.length || d(o.envFromEntries), _.each(o.envFromSelectorOptions, function(n) {
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
switch (n.kind) {
case "ConfigMap":
e[n.metadata.name] = n;
break;

case "Secret":
t[n.metadata.name] = n;
}
<<<<<<< HEAD
>>>>>>> Bug 1506998 - DC's environment tab not showing image secrets properly
}), _.each(r.envFromEntries, function(n) {
var a, r;
if (n.configMapRef && (a = "configMapRef", r = "configmaps"), n.secretRef && (a = "secretRef", r = "secrets"), a && r) {
var i = n[a].name;
n.configMapRef && i in e && (n.selectedEnvFrom = e[i]), n.secretRef && i in t && (n.selectedEnvFrom = t[i]), o(r, "get") || (n.isReadonly = !0);
<<<<<<< HEAD
>>>>>>> Reveal and hide secrets
}
<<<<<<< HEAD
return t;
=======
var b, S = {}, C = 30, w = "compact" === t.profile, k = !1;
t.uniqueID = s.uniqueID();
var P, j, R = {}, I = w, E = function(e) {
return e >= 1024;
};
t.metrics = [ {
label: "Memory",
units: "MiB",
convert: i.bytesToMiB,
formatUsage: function(e) {
return E(e) && (e /= 1024), s.formatUsage(e);
},
usageUnits: function(e) {
return E(e) ? "GiB" : "MiB";
},
descriptor: "memory/usage",
type: "pod_container",
chartID: "memory-" + t.uniqueID
}, {
label: "CPU",
units: "cores",
convert: i.millicoresToCores,
formatUsage: s.formatUsage,
usageUnits: function() {
return "cores";
},
descriptor: "cpu/usage_rate",
type: "pod_container",
chartID: "cpu-" + t.uniqueID
}, {
label: "Network (Sent)",
units: "KiB/s",
convert: i.bytesToKiB,
formatUsage: s.formatUsage,
usageUnits: function() {
return "KiB/s";
},
descriptor: "network/tx_rate",
type: "pod",
compactLabel: "Network",
compactDatasetLabel: "Sent",
compactType: "spline",
chartID: "network-tx-" + t.uniqueID
}, {
label: "Network (Received)",
units: "KiB/s",
convert: i.bytesToKiB,
formatUsage: s.formatUsage,
usageUnits: function() {
return "KiB/s";
},
descriptor: "network/rx_rate",
type: "pod",
compactCombineWith: "network/tx_rate",
compactDatasetLabel: "Received",
compactType: "spline",
chartID: "network-rx-" + t.uniqueID
} ];
var T = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
c.getMetricsURL().then(function(e) {
t.metricsURL = e;
}), t.options = {
rangeOptions: s.getTimeRangeOptions()
}, t.options.timeRange = _.head(t.options.rangeOptions), t.options.selectedContainer = _.head(t.containers);
var D = function(e) {
var n = s.getDefaultSparklineConfig(e.chartID, e.units, w);
return _.set(n, "legend.show", !w && !t.showAverage), n;
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
};
o.checkEntries = function(e) {
return !!p(e);
};
<<<<<<< HEAD
var g = function(e, t) {
o.cannotAdd = o.isReadonlyAny || _.isEmpty(t), t && _.each(t, function(e) {
var t = p(e);
t && _.set(t, "selectedEnvFrom", e);
=======
var A = r.$on("metrics.charts.resize", function() {
s.redraw(S);
});
t.$on("$destroy", function() {
b && (e.cancel(b), b = null), A && (A(), A = null), angular.forEach(S, function(e) {
e.destroy();
}), S = null, k = !0;
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
=======
}), _.each(o.envFromEntries, function(n) {
var a, r;
if (n.configMapRef && (a = "configMapRef", r = "configmaps"), n.secretRef && (a = "secretRef", r = "secrets"), a && r) {
var o = n[a].name;
n.configMapRef && o in e && (n.selectedEnvFrom = e[o]), n.secretRef && o in t && (n.selectedEnvFrom = t[o]), i(r, "get") || (n.isReadonly = !0);
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
}
>>>>>>> Bug 1506998 - DC's environment tab not showing image secrets properly
});
};
<<<<<<< HEAD
<<<<<<< HEAD
o.$onInit = function() {
m(o.entries), g(o.entries, o.envFromSelectorOptions), "cannotDelete" in e && (o.cannotDeleteAny = !0), "cannotSort" in e && (o.cannotSort = !0), "isReadonly" in e && (o.isReadonlyAny = !0), "showHeader" in e && (o.showHeader = !0), o.envFromEntries && !o.envFromEntries.length && d(o.envFromEntries);
=======
o.$onInit = function() {
m(), "cannotDelete" in e && (o.cannotDeleteAny = !0), "cannotSort" in e && (o.cannotSort = !0), "showHeader" in e && (o.showHeader = !0), o.envFromEntries && !o.envFromEntries.length && d(o.envFromEntries);
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
}, n.$watch("$ctrl.entries", function() {
u ? u = !1 : m();
}), o.$onChanges = function(e) {
e.envFromSelectorOptions && m();
<<<<<<< HEAD
=======
r.$onInit = function() {
u(), "cannotDelete" in e && (r.cannotDeleteAny = !0), "cannotSort" in e && (r.cannotSort = !0), "showHeader" in e && (r.showHeader = !0), r.envFromEntries && !r.envFromEntries.length && l(r.envFromEntries);
}, r.$onChanges = function(e) {
<<<<<<< HEAD
(e.entries || e.envFromSelectorOptions) && l();
>>>>>>> Reveal and hide secrets
=======
(e.entries || e.envFromSelectorOptions) && u();
>>>>>>> Bug 1506998 - DC's environment tab not showing image secrets properly
=======
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
};
} ],
bindings: {
addRowLink: "@",
entries: "=",
envFromSelectorOptions: "<",
selectorPlaceholder: "@"
},
templateUrl: "views/directives/edit-environment-from.html"
});
<<<<<<< HEAD
}(), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "APIService", "DataService", "gettextCatalog", "gettext", "KeywordService", "Logger", function(e, t, n, r, a, o, i, s) {
return {
restrict: "E",
scope: {
apiObjects: "=?",
projectContext: "="
},
templateUrl: "views/directives/events.html",
controller: [ "$scope", function(e) {
var t, c = {}, l = [], u = n.getPreferredVersion("events");
e.filter = {
text: ""
};
var d = function(e) {
return _.isEmpty(c) ? e : _.filter(e, function(e) {
return c[e.involvedObject.uid];
});
<<<<<<< HEAD
}, m = [], p = _.get(e, "sortConfig.currentField.id"), g = {
lastTimestamp: !0
}, f = function() {
var t = _.get(e, "sortConfig.currentField.id", "lastTimestamp");
p !== t && (p = t, e.sortConfig.isAscending = !g[p]);
var n = e.sortConfig.isAscending ? "asc" : "desc";
m = _.orderBy(e.events, [ t ], [ n ]);
}, v = [], h = function() {
e.filterExpressions = v = i.generateKeywords(_.get(e, "filter.text"));
}, y = [ "reason", "message", "type" ];
e.resourceKind && e.resourceName || y.splice(0, 0, "involvedObject.name", "involvedObject.kind");
var b = function() {
e.filteredEvents = i.filterForKeywords(m, y, v);
};
e.$watch("filter.text", _.debounce(function() {
h(), e.$evalAsync(b);
}, 50, {
maxWait: 250
}));
var S = function() {
f(), b();
}, C = _.debounce(function() {
t && e.$evalAsync(function() {
e.events = d(t), S();
=======
} ]), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "DataService", "KeywordService", "ProjectsService", "Logger", function(e, t, n, a, r, o) {
=======
}(), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "APIService", "DataService", "KeywordService", "Logger", function(e, t, n, a, r, o) {
>>>>>>> Update events directive to use getPreferredVersion
return {
restrict: "E",
scope: {
apiObjects: "=?",
projectContext: "="
},
templateUrl: "views/directives/events.html",
controller: [ "$scope", function(e) {
var t, i = {}, s = [], c = n.getPreferredVersion("events");
e.filter = {
text: ""
};
var l = function(e) {
return _.isEmpty(i) ? e : _.filter(e, function(e) {
return i[e.involvedObject.uid];
});
}, u = [], d = _.get(e, "sortConfig.currentField.id"), m = {
lastTimestamp: !0
}, p = function() {
var t = _.get(e, "sortConfig.currentField.id", "lastTimestamp");
d !== t && (d = t, e.sortConfig.isAscending = !m[d]);
var n = e.sortConfig.isAscending ? "asc" : "desc";
<<<<<<< HEAD
c = _.orderBy(e.events, [ t ], [ n ]);
}, m = [], p = function() {
e.filterExpressions = m = a.generateKeywords(_.get(e, "filter.text"));
}, f = [ "reason", "message", "type" ];
e.resourceKind && e.resourceName || f.splice(0, 0, "involvedObject.name", "involvedObject.kind");
var g = function() {
e.filteredEvents = a.filterForKeywords(c, f, m);
=======
u = _.orderBy(e.events, [ t, "metadata.resourceVersion" ], [ n, n ]);
}, f = [], g = function() {
e.filterExpressions = f = r.generateKeywords(_.get(e, "filter.text"));
}, v = [ "reason", "message", "type" ];
e.resourceKind && e.resourceName || v.splice(0, 0, "involvedObject.name", "involvedObject.kind");
var h = function() {
e.filteredEvents = r.filterForKeywords(u, v, f);
>>>>>>> Update events directive to use getPreferredVersion
};
e.$watch("filter.text", _.debounce(function() {
g(), e.$evalAsync(h);
}, 50, {
maxWait: 250
}));
var y = function() {
p(), h();
}, b = _.debounce(function() {
t && e.$evalAsync(function() {
<<<<<<< HEAD
<<<<<<< HEAD
e.events = s(t), h();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.events = s(t), v();
>>>>>>> Add SVG icons
=======
}, S = !1, C = function() {
S ? S = !1 : t.$evalAsync(function() {
t.autoScrollActive = !1;
});
}, w = function() {
u ? $(u).on("scroll", C) : m.on("scroll", C);
}, k = function() {
t.fixedHeight || p.affix({
target: window,
offset: {
top: t.followAffixTop || 0
}
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
e.events = l(t), y();
>>>>>>> Update events directive to use getPreferredVersion
});
}, 250, {
leading: !0,
trailing: !0,
maxWait: 1e3
});
<<<<<<< HEAD
e.$watch("apiObjects", function(n) {
<<<<<<< HEAD
<<<<<<< HEAD
c = {}, _.each(n, function(e) {
_.get(e, "metadata.uid") && (c[e.metadata.uid] = !0);
}), e.showKindAndName = 1 !== _.size(c), t && C();
=======
r = {}, _.each(n, function(e) {
_.get(e, "metadata.uid") && (r[e.metadata.uid] = !0);
<<<<<<< HEAD
}), e.showKindAndName = 1 !== _.size(r), t && v();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), e.showKindAndName = 1 !== _.size(r), t && h();
>>>>>>> Add SVG icons
=======
i = {}, _.each(n, function(e) {
_.get(e, "metadata.uid") && (i[e.metadata.uid] = !0);
}), e.showKindAndName = 1 !== _.size(i), t && b();
>>>>>>> Update events directive to use getPreferredVersion
}), e.$watch("showKindAndName", function(t) {
e.sortConfig = {
fields: [ {
id: "lastTimestamp",
<<<<<<< HEAD
title: a.getString(o("Time")),
sortType: "alpha"
}, {
id: "type",
title: a.getString(o("Severity")),
sortType: "alpha"
}, {
id: "reason",
title: a.getString(o("Reason")),
sortType: "alpha"
}, {
id: "message",
title: a.getString(o("Message")),
sortType: "alpha"
}, {
id: "count",
title: a.getString(o("Count")),
sortType: "numeric"
} ],
isAscending: !0,
onSortChange: S
}, t && e.sortConfig.fields.splice(1, 0, {
id: "involvedObject.name",
title: a.getString(o("Name")),
sortType: "alpha"
}, {
id: "involvedObject.kind",
title: a.getString(o("Kind")),
sortType: "alpha"
=======
}, n = 0;
y = setInterval(function() {
n > 10 ? e() : (n++, P().is(":visible") && (j(), e()));
}, 100);
}
}, I = _.debounce(function() {
j(!0), b(), C();
}, 100);
m.on("resize", I);
var E, T = function() {
S = !0, d.scrollBottom(u);
}, N = document.createDocumentFragment(), D = _.debounce(function() {
l.appendChild(N), N = document.createDocumentFragment(), t.autoScrollActive && T(), t.showScrollLinks || b();
}, 100, {
maxWait: 300
}), A = function(e) {
var t = r.defer();
return E ? (E.onClose(function() {
t.resolve();
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
}, B = function() {
A().then(function() {
t.$evalAsync(function() {
if (t.run) {
angular.extend(t, {
loading: !0,
autoScrollActive: !0,
largeLog: !1,
limitReached: !1,
showScrollLinks: !1,
state: ""
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
}), l.push(r.watch(u, e.projectContext, function(n) {
t = n.by("metadata.name"), C(), s.log("events (subscribe)", e.filteredEvents);
}, {
skipDigest: !0
})), e.$on("$destroy", function() {
r.unwatchAll(l);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("eventsSidebar", [ "$rootScope", "APIService", "DataService", "Logger", function(e, t, n, r) {
var a = t.getPreferredVersion("events");
=======
title: "Time",
sortType: "alpha"
}, {
id: "type",
title: "Severity",
sortType: "alpha"
}, {
id: "reason",
title: "Reason",
sortType: "alpha"
}, {
id: "message",
title: "Message",
sortType: "alpha"
}, {
id: "count",
title: "Count",
sortType: "numeric"
} ],
isAscending: !0,
onSortChange: y
}, t && e.sortConfig.fields.splice(1, 0, {
id: "involvedObject.name",
title: "Name",
sortType: "alpha"
}, {
id: "involvedObject.kind",
title: "Kind",
sortType: "alpha"
});
}), s.push(a.watch(c, e.projectContext, function(n) {
t = n.by("metadata.name"), b(), o.log("events (subscribe)", e.filteredEvents);
}, {
skipDigest: !0
})), e.$on("$destroy", function() {
a.unwatchAll(s);
});
} ]
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("eventsSidebar", [ "DataService", "Logger", "$rootScope", function(e, t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("eventsSidebar", [ "$rootScope", "APIService", "DataService", "Logger", function(e, t, n, a) {
var r = t.getPreferredVersion("events");
>>>>>>> Update directives/eventsSidebar to use getPreferredVersion
return {
restrict: "E",
scope: {
projectContext: "=",
collapsed: "="
},
templateUrl: "views/directives/events-sidebar.html",
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", function(t) {
var o = [];
o.push(n.watch(a, t.projectContext, function(e) {
var n = e.by("metadata.name");
t.events = _.orderBy(n, [ "lastTimestamp" ], [ "desc" ]), t.warningCount = _.size(_.filter(n, {
type: "Warning"
})), r.log("events (subscribe)", t.events);
})), t.highlightedEvents = {}, t.collapseSidebar = function() {
t.collapsed = !0;
};
var i = [];
i.push(e.$on("event.resource.highlight", function(e, n) {
var r = _.get(n, "kind"), a = _.get(n, "metadata.name");
r && a && _.each(t.events, function(e) {
e.involvedObject.kind === r && e.involvedObject.name === a && (t.highlightedEvents[r + "/" + a] = !0);
});
})), i.push(e.$on("event.resource.clear-highlight", function(e, n) {
var r = _.get(n, "kind"), a = _.get(n, "metadata.name");
r && a && _.each(t.events, function(e) {
e.involvedObject.kind === r && e.involvedObject.name === a && (t.highlightedEvents[r + "/" + a] = !1);
});
})), t.$on("$destroy", function() {
n.unwatchAll(o), _.each(i, function(e) {
e();
}), i = null;
});
} ]
};
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "APIService", "DataService", "Logger", function(e, t, n, r) {
var a = t.getPreferredVersion("events");
=======
controller: [ "$scope", function(a) {
var r = [];
r.push(e.watch("events", a.projectContext, function(e) {
=======
controller: [ "$scope", function(t) {
var o = [];
o.push(n.watch(r, t.projectContext, function(e) {
>>>>>>> Update directives/eventsSidebar to use getPreferredVersion
var n = e.by("metadata.name");
t.events = _.orderBy(n, [ "lastTimestamp" ], [ "desc" ]), t.warningCount = _.size(_.filter(n, {
type: "Warning"
})), a.log("events (subscribe)", t.events);
})), t.highlightedEvents = {}, t.collapseSidebar = function() {
t.collapsed = !0;
};
<<<<<<< HEAD
var o = [];
o.push(n.$on("event.resource.highlight", function(e, t) {
var n = _.get(t, "kind"), r = _.get(t, "metadata.name");
n && r && _.each(a.events, function(e) {
e.involvedObject.kind === n && e.involvedObject.name === r && (a.highlightedEvents[n + "/" + r] = !0);
});
<<<<<<< HEAD
})), o.push(n.$on("event.resource.clear-highlight", function(e, t) {
var n = _.get(t, "kind"), r = _.get(t, "metadata.name");
n && r && _.each(a.events, function(e) {
e.involvedObject.kind === n && e.involvedObject.name === r && (a.highlightedEvents[n + "/" + r] = !1);
=======
}));
}), this.cacheScrollableNode = function(e) {
u = e;
}, this.cacheLogNode = function(e) {
l = e;
}, this.cacheAffixable = function(e) {
p = $(e);
}, this.start = function() {
w(), k();
}, angular.extend(t, {
ready: !0,
loading: !0,
autoScrollActive: !0,
state: !1,
onScrollBottom: function() {
d.scrollBottom(u);
},
onScrollTop: function() {
t.autoScrollActive = !1, d.scrollTop(u), $("#" + t.logViewerID + "-affixedFollow").affix("checkPosition");
},
toggleAutoScroll: function() {
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && T();
},
goChromeless: d.chromelessLink,
restartLogs: B
}), t.$on("$destroy", function() {
A(), m.off("resize", I), m.off("scroll", C), u && $(u).off("scroll", C);
}), "deploymentconfigs/logs" === v && !h) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
t.$watchGroup([ "name", "options.container", "run" ], B);
} ],
require: "logViewer",
link: function(e, n, a, r) {
t(function() {
e.fixedHeight && r.cacheScrollableNode(document.getElementById(e.logViewerID + "-fixed-scrollable")), r.cacheLogNode(document.getElementById(e.logViewerID + "-logContent")), r.cacheAffixable(document.getElementById(e.logViewerID + "-affixedFollow")), r.start();
}, 0);
var o = function() {
var t = $(n).find(".log-line-text").text(), a = _.get(e, "object.metadata.name", "openshift") + ".log", r = new Blob([ t ], {
type: "text/plain;charset=utf-8"
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
})), a.$on("$destroy", function() {
e.unwatchAll(r), _.each(o, function(e) {
=======
var i = [];
i.push(e.$on("event.resource.highlight", function(e, n) {
var a = _.get(n, "kind"), r = _.get(n, "metadata.name");
a && r && _.each(t.events, function(e) {
e.involvedObject.kind === a && e.involvedObject.name === r && (t.highlightedEvents[a + "/" + r] = !0);
});
})), i.push(e.$on("event.resource.clear-highlight", function(e, n) {
var a = _.get(n, "kind"), r = _.get(n, "metadata.name");
a && r && _.each(t.events, function(e) {
e.involvedObject.kind === a && e.involvedObject.name === r && (t.highlightedEvents[a + "/" + r] = !1);
});
})), t.$on("$destroy", function() {
n.unwatchAll(o), _.each(i, function(e) {
>>>>>>> Update directives/eventsSidebar to use getPreferredVersion
e();
}), i = null;
});
} ]
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "DataService", "Logger", function(e, t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "APIService", "DataService", "Logger", function(e, t, n, a) {
var r = t.getPreferredVersion("events");
>>>>>>> Update direcives/eventsBadge to use getPreferredVersion
return {
restrict: "E",
scope: {
projectContext: "=",
sidebarCollapsed: "="
},
templateUrl: "views/directives/events-badge.html",
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", function(t) {
var o = [], i = e("orderObjectsByDate");
o.push(n.watch(a, t.projectContext, function(e) {
var n = e.by("metadata.name");
t.events = i(n, !0), t.warningCount = _.size(_.filter(n, {
type: "Warning"
})), t.normalCount = _.size(_.filter(n, {
type: "Normal"
})), r.log("events (subscribe)", t.events);
})), t.expandSidebar = function() {
t.sidebarCollapsed = !1;
}, t.$on("$destroy", function() {
n.unwatchAll(o);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("fromFile", [ "$filter", "$location", "$q", "$uibModal", "APIService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "QuotaService", "SecurityCheckService", "gettextCatalog", "gettext", "TaskList", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g) {
return {
restrict: "E",
scope: {
=======
controller: [ "$scope", function(a) {
var r = [], o = e("orderObjectsByDate");
r.push(t.watch("events", a.projectContext, function(e) {
var t = e.by("metadata.name");
a.events = o(t, !0), a.warningCount = _.size(_.filter(t, {
=======
controller: [ "$scope", function(t) {
var o = [], i = e("orderObjectsByDate");
o.push(n.watch(r, t.projectContext, function(e) {
var n = e.by("metadata.name");
t.events = i(n, !0), t.warningCount = _.size(_.filter(n, {
>>>>>>> Update direcives/eventsBadge to use getPreferredVersion
type: "Warning"
})), t.normalCount = _.size(_.filter(n, {
type: "Normal"
})), a.log("events (subscribe)", t.events);
})), t.expandSidebar = function() {
t.sidebarCollapsed = !1;
}, t.$on("$destroy", function() {
n.unwatchAll(o);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("fromFile", [ "$filter", "$location", "$q", "$uibModal", "APIService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "QuotaService", "SecurityCheckService", "TaskList", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
return {
restrict: "E",
scope: {
<<<<<<< HEAD
context: "=",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
project: "=",
isDialog: "="
},
templateUrl: "views/directives/from-file.html",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", function(f) {
function v(e) {
return !!e.kind || (f.error = {
message: d.getString(m("Resource is missing kind field."))
}, !1);
}
function h(e) {
return !!f.isList || (e.metadata ? e.metadata.name ? !e.metadata.namespace || e.metadata.namespace === f.input.selectedProject.metadata.name || (f.error = {
message: e.kind + " " + e.metadata.name + " can't be created in project " + e.metadata.namespace + ". Can't create resource in different projects."
}, !1) : (f.error = {
message: d.getString(m("Resource name is missing in metadata field."))
}, !1) : (f.error = {
message: d.getString(m("Resource is missing metadata field."))
=======
controller: [ "$scope", function(p) {
function f(e) {
return !!e.kind || (p.error = {
message: "Resource is missing kind field."
}, !1);
}
function g(e) {
return !!p.isList || (e.metadata ? e.metadata.name ? !e.metadata.namespace || e.metadata.namespace === p.input.selectedProject.metadata.name || (p.error = {
message: e.kind + " " + e.metadata.name + " can't be created in project " + e.metadata.namespace + ". Can't create resource in different projects."
}, !1) : (p.error = {
message: "Resource name is missing in metadata field."
}, !1) : (p.error = {
message: "Resource is missing metadata field."
>>>>>>> Support EnvFrom in the Env Editors
}, !1));
}
function y() {
r.open({
templateUrl: "views/modals/process-or-save-template.html",
controller: "ProcessOrSaveTemplateModalController",
<<<<<<< HEAD
scope: f
}).result.then(function() {
f.templateOptions.add ? S() : (o.setTemplate(f.resourceList[0]), C());
=======
scope: p
}).result.then(function() {
p.templateOptions.add ? y() : (o.setTemplate(p.resourceList[0]), b());
>>>>>>> Support EnvFrom in the Env Editors
});
}
function b() {
r.open({
templateUrl: "views/modals/confirm-replace.html",
controller: "ConfirmReplaceModalController",
<<<<<<< HEAD
scope: f
}).result.then(function() {
l.getLatestQuotaAlerts(f.createResources, {
namespace: f.input.selectedProject.metadata.name
}).then(A);
});
}
function S() {
var e = f.createResources.length, t = f.updateResources.length;
if (f.resourceKind.endsWith("List")) {
var r = [];
t > 0 && r.push(k()), e > 0 && r.push(j()), n.all(r).then(C);
} else P();
}
function C() {
var e, n;
D(), "Template" === f.resourceKind && f.templateOptions.process && !f.errorOccurred ? f.isDialog ? f.$emit("fileImportedFromYAMLOrJSON", {
project: f.input.selectedProject,
template: f.resource
}) : (n = f.templateOptions.add || f.updateResources.length > 0 ? f.input.selectedProject.metadata.name : "", e = s.createFromTemplateURL(f.resource, f.input.selectedProject.metadata.name, {
namespace: n
}), t.url(e)) : f.isDialog ? f.$emit("fileImportedFromYAMLOrJSON", {
project: f.input.selectedProject,
resource: f.resource,
isList: f.isList
}) : (e = s.projectOverviewURL(f.input.selectedProject.metadata.name), t.url(e));
}
function w(e) {
var t = a.objectToResourceGroupVersion(e);
return t ? a.apiInfo(t) ? i.get(t, e.metadata.name, {
namespace: f.input.selectedProject.metadata.name
}, {
errorNotification: !1
}).then(function(t) {
var n = angular.copy(e), r = angular.copy(t.metadata);
r.annotations = e.metadata.annotations, r.labels = e.metadata.labels, n.metadata = r, f.updateResources.push(n);
}, function() {
var t = angular.copy(e);
_.unset(t, "metadata.resourceVersion"), f.createResources.push(t);
}) : (f.errorOccurred = !0, void (f.error = {
message: a.unsupportedObjectKindOrVersion(e)
})) : (f.errorOccurred = !0, void (f.error = {
message: a.invalidObjectKindOrVersion(e)
}));
}
function P() {
var t;
_.isEmpty(f.createResources) ? (t = _.head(f.updateResources), i.update(a.kindToResource(t.kind), t.metadata.name, t, {
namespace: f.input.selectedProject.metadata.name
}).then(function() {
if (!f.isDialog) {
var e = R(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully updated."
});
}
C();
=======
controller: [ "$scope", function(m) {
function p(e) {
return !!e.kind || (m.error = {
=======
controller: [ "$scope", function(p) {
function f(e) {
return !!e.kind || (p.error = {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
controller: [ "$scope", function(m) {
function f(e) {
return !!e.kind || (m.error = {
>>>>>>> Updates for Service Instance & Bindings
message: "Resource is missing kind field."
}, !1);
}
function g(e) {
return !!m.isList || (e.metadata ? e.metadata.name ? !e.metadata.namespace || e.metadata.namespace === m.input.selectedProject.metadata.name || (m.error = {
message: e.kind + " " + e.metadata.name + " can't be created in project " + e.metadata.namespace + ". Can't create resource in different projects."
}, !1) : (m.error = {
message: "Resource name is missing in metadata field."
}, !1) : (m.error = {
message: "Resource is missing metadata field."
}, !1));
}
function v() {
a.open({
animation: !0,
templateUrl: "views/modals/process-or-save-template.html",
controller: "ProcessOrSaveTemplateModalController",
scope: m
}).result.then(function() {
m.templateOptions.add ? y() : (o.setTemplate(m.resourceList[0]), b());
});
}
function h() {
a.open({
animation: !0,
templateUrl: "views/modals/confirm-replace.html",
controller: "ConfirmReplaceModalController",
scope: m
}).result.then(function() {
l.getLatestQuotaAlerts(m.createResources, {
namespace: m.input.selectedProject.metadata.name
}).then(E);
});
}
function y() {
var e = m.createResources.length, t = m.updateResources.length;
if (m.resourceKind.endsWith("List")) {
=======
scope: p
}).result.then(function() {
l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N);
});
}
function y() {
var e = p.createResources.length, t = p.updateResources.length;
if (p.resourceKind.endsWith("List")) {
>>>>>>> Support EnvFrom in the Env Editors
var a = [];
<<<<<<< HEAD
<<<<<<< HEAD
t > 0 && a.push(P()), e > 0 && a.push(w()), n.all(a).then(b);
} else S();
=======
t > 0 && a.push(k()), e > 0 && a.push(w()), n.all(a).then(b);
=======
t > 0 && a.push(P()), e > 0 && a.push(w()), n.all(a).then(b);
>>>>>>> Update pod controller to use getPreferredVersion
} else C();
>>>>>>> Adding label filter to ste secrets page
}
function b() {
var e, n;
T(), "Template" === p.resourceKind && p.templateOptions.process && !p.errorOccurred ? p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
template: p.resource
}) : (n = p.templateOptions.add || p.updateResources.length > 0 ? p.input.selectedProject.metadata.name : "", e = s.createFromTemplateURL(p.resource, p.input.selectedProject.metadata.name, {
namespace: n
}), t.url(e)) : p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject
}) : (e = s.projectOverviewURL(p.input.selectedProject.metadata.name), t.url(e));
}
function S(e) {
var t = r.objectToResourceGroupVersion(e);
return t ? r.apiInfo(t) ? i.get(t, e.metadata.name, {
namespace: p.input.selectedProject.metadata.name
}, {
errorNotification: !1
}).then(function(t) {
var n = angular.copy(e), a = angular.copy(t.metadata);
a.annotations = e.metadata.annotations, a.labels = e.metadata.labels, n.metadata = a, p.updateResources.push(n);
}, function() {
p.createResources.push(e);
}) : (p.errorOccurred = !0, void (p.error = {
message: r.unsupportedObjectKindOrVersion(e)
})) : (p.errorOccurred = !0, void (p.error = {
message: r.invalidObjectKindOrVersion(e)
}));
}
function C() {
var t;
_.isEmpty(p.createResources) ? (t = _.head(p.updateResources), i.update(r.kindToResource(t.kind), t.metadata.name, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = j(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully updated."
<<<<<<< HEAD
<<<<<<< HEAD
}), y();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), b();
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
});
}
b();
>>>>>>> Making next steps/results messaging consistent
}, function(n) {
c.addNotification({
id: "from-file-error",
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: "Unable to update the " + R(t.kind) + " '" + t.metadata.name + "'.",
details: e("getErrorDetails")(n)
});
})) : (t = _.head(f.createResources), i.create(a.kindToResource(t.kind), null, t, {
namespace: f.input.selectedProject.metadata.name
}).then(function() {
if (!f.isDialog) {
var e = R(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully created."
=======
message: "Unable to update the " + j(t.kind) + " '" + t.metadata.name + "'.",
=======
message: "Unable to update the " + P(t.kind) + " '" + t.metadata.name + "'.",
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
message: "Unable to update the " + j(t.kind) + " '" + t.metadata.name + "'.",
>>>>>>> Service instance details configuration and edit
=======
message: "Unable to update the " + P(t.kind) + " '" + t.metadata.name + "'.",
>>>>>>> Add product icons for service catalog
=======
message: "Unable to update the " + j(t.kind) + " '" + t.metadata.name + "'.",
>>>>>>> Handle displaying parameters when secrets are not available.
=======
message: "Unable to update the " + P(t.kind) + " '" + t.metadata.name + "'.",
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
message: "Unable to update the " + j(t.kind) + " '" + t.metadata.name + "'.",
>>>>>>> Update template service broker flag name
details: e("getErrorDetails")(n)
});
})) : (t = _.head(p.createResources), i.create(r.kindToResource(t.kind), null, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = j(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully created."
});
}
b();
}, function(n) {
c.addNotification({
id: "from-file-error",
type: "error",
message: "Unable to create the " + j(t.kind) + " '" + t.metadata.name + "'.",
details: e("getErrorDetails")(n)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
<<<<<<< HEAD
C();
}, function(n) {
c.addNotification({
id: "from-file-error",
type: "error",
message: "Unable to create the " + R(t.kind) + " '" + t.metadata.name + "'.",
details: e("getErrorDetails")(n)
});
}));
}
<<<<<<< HEAD
function j() {
var e = {
started: "Creating resources in project " + B(f.input.selectedProject),
success: "Creating resources in project " + B(f.input.selectedProject),
failure: "Failed to create some resources in project " + B(f.input.selectedProject)
}, t = {};
p.add(e, t, f.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(f.createResources, {
namespace: f.input.selectedProject.metadata.name
}, "create").then(function(t) {
var n = [], r = !1;
if (t.failure.length > 0) r = !0, f.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot create " + R(e.object.kind) + ' "' + e.object.metadata.name + '". ',
=======
function S() {
=======
function w() {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
var e = {
started: "Creating resources in project " + A(p.input.selectedProject),
success: "Creating resources in project " + A(p.input.selectedProject),
failure: "Failed to create some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}, "create").then(function(t) {
var n = [], a = !1;
if (t.failure.length > 0) a = !0, p.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: "Cannot create " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "Cannot create " + P(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
message: "Cannot create " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Service instance details configuration and edit
=======
message: "Cannot create " + P(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Add product icons for service catalog
=======
message: "Cannot create " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Handle displaying parameters when secrets are not available.
=======
message: "Cannot create " + P(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
message: "Cannot create " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Update template service broker flag name
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: "Created " + R(e.kind) + ' "' + e.metadata.name + '" successfully. '
});
}); else {
var a;
a = f.isList ? "All items in list were created successfully." : R(f.resourceKind) + " " + f.resourceName + " was successfully created.", n.push({
type: "success",
message: a
=======
message: "Created " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
=======
message: "Created " + P(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
message: "Created " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Service instance details configuration and edit
=======
message: "Created " + P(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Add product icons for service catalog
=======
message: "Created " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Handle displaying parameters when secrets are not available.
=======
message: "Created " + P(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
message: "Created " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Update template service broker flag name
});
}); else {
var r;
r = p.isList ? "All items in list were created successfully." : j(p.resourceKind) + " " + p.resourceName + " was successfully created.", n.push({
type: "success",
message: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
e.resolve({
alerts: n,
<<<<<<< HEAD
hasErrors: r
=======
hasErrors: a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}), e.promise;
});
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
function k() {
var e = {
started: "Updating resources in project " + B(f.input.selectedProject),
success: "Updated resources in project " + B(f.input.selectedProject),
failure: "Failed to update some resources in project " + B(f.input.selectedProject)
}, t = {};
p.add(e, t, f.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(f.updateResources, {
namespace: f.input.selectedProject.metadata.name
}, "update").then(function(t) {
var n = [], r = !1;
if (t.failure.length > 0) r = !0, f.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot update " + R(e.object.kind) + ' "' + e.object.metadata.name + '". ',
=======
function w() {
=======
function k() {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
function P() {
>>>>>>> Fix for adding non-builder templates to a project
=======
function P() {
>>>>>>> Update pod controller to use getPreferredVersion
var e = {
started: "Updating resources in project " + A(p.input.selectedProject),
success: "Updated resources in project " + A(p.input.selectedProject),
failure: "Failed to update some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.updateResources, {
namespace: p.input.selectedProject.metadata.name
}, "update").then(function(t) {
var n = [], a = !1;
if (t.failure.length > 0) a = !0, p.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: "Cannot update " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "Cannot update " + P(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
message: "Cannot update " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Service instance details configuration and edit
=======
message: "Cannot update " + P(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Add product icons for service catalog
=======
message: "Cannot update " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Handle displaying parameters when secrets are not available.
=======
message: "Cannot update " + P(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
message: "Cannot update " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
>>>>>>> Update template service broker flag name
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
message: "Updated " + R(e.kind) + ' "' + e.metadata.name + '" successfully. '
});
}); else {
var a;
a = f.isList ? "All items in list were updated successfully." : R(f.resourceKind) + " " + f.resourceName + " was successfully updated.", n.push({
type: "success",
message: a
});
}
e.resolve({
alerts: n,
hasErrors: r
});
}, function(t) {
var n = [];
n.push({
type: "error",
message: "An error occurred updating the resources.",
details: "Status: " + t.status + ". " + t.data
}), e.resolve({
alerts: n
});
}), e.promise;
});
}
var I;
f.noProjectsCantCreate = !1;
var R = e("humanizeKind"), T = e("getErrorDetails");
p.clear(), f.$on("no-projects-cannot-create", function() {
f.noProjectsCantCreate = !0;
}), f.input = {
selectedProject: f.project
}, f.$watch("input.selectedProject.metadata.name", function() {
f.projectNameTaken = !1;
}), f.aceLoaded = function(e) {
(I = e.getSession()).setOption("tabSize", 2), I.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
};
var E = function(e) {
r.open({
=======
message: "Updated " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
=======
message: "Updated " + P(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
message: "Updated " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Service instance details configuration and edit
=======
message: "Updated " + P(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Add product icons for service catalog
=======
message: "Updated " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Handle displaying parameters when secrets are not available.
=======
message: "Updated " + P(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
message: "Updated " + j(e.kind) + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Update template service broker flag name
});
}); else {
var r;
r = p.isList ? "All items in list were updated successfully." : j(p.resourceKind) + " " + p.resourceName + " was successfully updated.", n.push({
type: "success",
message: r
});
}
e.resolve({
alerts: n,
hasErrors: a
});
}, function(t) {
var n = [];
n.push({
type: "error",
message: "An error occurred updating the resources.",
details: "Status: " + t.status + ". " + t.data
}), e.resolve({
alerts: n
});
}), e.promise;
});
}
var k;
p.noProjectsCantCreate = !1;
var j = e("humanizeKind"), I = e("getErrorDetails");
d.clear(), p.$on("no-projects-cannot-create", function() {
p.noProjectsCantCreate = !0;
}), p.input = {
selectedProject: p.project
<<<<<<< HEAD
}, p.aceLoaded = function(e) {
=======
}, p.$watch("input.selectedProject.metadata.name", function() {
p.projectNameTaken = !1;
}), p.aceLoaded = function(e) {
>>>>>>> Update pod controller to use getPreferredVersion
(k = e.getSession()).setOption("tabSize", 2), k.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
};
var R = function(e) {
a.open({
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
<<<<<<< HEAD
title: d.getString(m("Confirm Creation")),
details: d.getString(m("We checked your application for potential problems. Please confirm you still want to create this application.")),
okButtonText: d.getString(m("Create Anyway")),
okButtonClass: "btn-danger",
cancelButtonText: d.getString(m("Cancel"))
};
}
}
}).result.then(S);
=======
message: "We checked your application for potential problems. Please confirm you still want to create this application.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
<<<<<<< HEAD
}).result.then(v);
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, N = {}, D = function() {
c.hideNotification("from-file-error"), _.each(N, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
});
<<<<<<< HEAD
}, A = function(e) {
D(), N = u.getSecurityAlerts(f.createResources, f.input.selectedProject.metadata.name);
=======
}, I = function(e) {
D(), N = u.getSecurityAlerts(m.createResources, m.project.metadata.name);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, P = {}, T = function() {
c.hideNotification("from-file-error"), _.each(P, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
});
}, E = function(e) {
T(), P = u.getSecurityAlerts(m.createResources, m.project.metadata.name);
>>>>>>> Improve YAML editor validation and feedback
=======
}, P = {}, E = function() {
c.hideNotification("from-file-error"), _.each(P, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
});
}, T = function(e) {
E(), P = u.getSecurityAlerts(m.createResources, m.project.metadata.name);
>>>>>>> Add bindings list to resource pages
=======
}).result.then(y);
}, E = {}, T = function() {
c.hideNotification("from-file-error"), _.each(E, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, N = function(e) {
I(), T = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
}, I = function(e) {
N(), T = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> Add notification-drawer to show curated list of events to user
=======
}, N = function(e) {
<<<<<<< HEAD
I(), T = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
}, N = function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
I(), T = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> Adjust events to show in the drawer
=======
I(), E = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> Add the ability to add a secret to an application
=======
E(), I = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> Enable new landing page experience by default
=======
E(), T = u.getSecurityAlerts(m.createResources, m.input.selectedProject.metadata.name);
>>>>>>> Updates for Service Instance & Bindings
=======
}, E = function(e) {
N(), T = u.getSecurityAlerts(m.createResources, m.input.selectedProject.metadata.name);
>>>>>>> Quota Notifications
=======
}, N = function(e) {
T(), E = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> Support EnvFrom in the Env Editors
=======
}, T = function(e) {
N(), E = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, N = function(e) {
T(), E = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
>>>>>>> Update template service broker flag name
var t = e.quotaAlerts || [];
E = E.concat(t), _.filter(E, {
type: "error"
}).length ? (_.each(E, function(e) {
e.id = _.uniqueId("from-file-alert-"), c.addNotification(e);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), f.disableInputs = !1) : N.length ? (E(N), f.disableInputs = !1) : S();
}, $ = function() {
if (_.has(f.input.selectedProject, "metadata.uid")) return n.when(f.input.selectedProject);
var t = f.input.selectedProject.metadata.name, r = f.input.selectedProject.metadata.annotations["new-display-name"], a = e("description")(f.input.selectedProject);
return g.create(t, r, a);
};
f.create = function() {
if (delete f.error, v(f.resource) && (f.resourceKind = f.resource.kind, f.resourceKind.endsWith("List") ? f.isList = !0 : f.isList = !1, h(f.resource))) {
f.isList ? (f.resourceList = f.resource.items, f.resourceName = "") : (f.resourceList = [ f.resource ], f.resourceName = f.resource.metadata.name, "Template" === f.resourceKind && (f.templateOptions = {
process: !0,
add: !1
})), f.updateResources = [], f.createResources = [];
var e = [];
f.errorOccurred = !1, _.forEach(f.resourceList, function(t) {
if (!h(t)) return f.errorOccurred = !0, !1;
e.push(w(t));
}), $().then(function(t) {
f.input.selectedProject = t, n.all(e).then(function() {
f.errorOccurred || (1 === f.createResources.length && "Template" === f.resourceList[0].kind ? y() : _.isEmpty(f.updateResources) ? l.getLatestQuotaAlerts(f.createResources, {
namespace: f.input.selectedProject.metadata.name
}).then(A) : (f.updateTemplate = 1 === f.updateResources.length && "Template" === f.updateResources[0].kind, f.updateTemplate ? y() : b()));
});
}, function(e) {
"AlreadyExists" === e.data.reason ? f.projectNameTaken = !0 : c.addNotification({
id: "import-create-project-error",
type: "error",
message: d.getString(m("An error occurred creating project.")),
details: T(e)
});
});
}
}, f.cancel = function() {
D(), s.toProjectOverview(f.input.selectedProject.metadata.name);
};
var B = e("displayName");
f.$on("importFileFromYAMLOrJSON", f.create), f.$on("$destroy", D);
=======
}), m.disableInputs = !1) : N.length ? (E(N), m.disableInputs = !1) : v();
=======
}), m.disableInputs = !1) : P.length ? (R(P), m.disableInputs = !1) : v();
>>>>>>> Improve YAML editor validation and feedback
};
m.create = function() {
if (delete m.error, p(m.resource) && (m.resourceKind = m.resource.kind, m.resourceKind.endsWith("List") ? m.isList = !0 : m.isList = !1, g(m.resource))) {
m.isList ? (m.resourceList = m.resource.items, m.resourceName = "") : (m.resourceList = [ m.resource ], m.resourceName = m.resource.metadata.name, "Template" === m.resourceKind && (m.templateOptions = {
=======
}), p.disableInputs = !1) : T.length ? (E(T), p.disableInputs = !1) : y();
=======
}), p.disableInputs = !1) : E.length ? (T(E), p.disableInputs = !1) : y();
>>>>>>> Add the ability to add a secret to an application
=======
}), p.disableInputs = !1) : I.length ? (T(I), p.disableInputs = !1) : y();
>>>>>>> Enable new landing page experience by default
=======
}), m.disableInputs = !1) : T.length ? (I(T), m.disableInputs = !1) : y();
>>>>>>> Updates for Service Instance & Bindings
=======
}), p.disableInputs = !1) : E.length ? (I(E), p.disableInputs = !1) : y();
>>>>>>> Support EnvFrom in the Env Editors
=======
}), p.disableInputs = !1) : E.length ? (R(E), p.disableInputs = !1) : y();
>>>>>>> Add search catalog in project context
}, D = function() {
if (_.has(p.input.selectedProject, "metadata.uid")) return n.when(p.input.selectedProject);
var t = p.input.selectedProject.metadata.name, a = p.input.selectedProject.metadata.annotations["new-display-name"], r = e("description")(p.input.selectedProject);
return m.create(t, a, r);
};
<<<<<<< HEAD
<<<<<<< HEAD
p.create = function() {
if (delete p.error, f(p.resource) && (p.resourceKind = p.resource.kind, p.resourceKind.endsWith("List") ? p.isList = !0 : p.isList = !1, g(p.resource))) {
p.isList ? (p.resourceList = p.resource.items, p.resourceName = "") : (p.resourceList = [ p.resource ], p.resourceName = p.resource.metadata.name, "Template" === p.resourceKind && (p.templateOptions = {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
m.create = function() {
if (delete m.error, f(m.resource) && (m.resourceKind = m.resource.kind, m.resourceKind.endsWith("List") ? m.isList = !0 : m.isList = !1, g(m.resource))) {
m.isList ? (m.resourceList = m.resource.items, m.resourceName = "") : (m.resourceList = [ m.resource ], m.resourceName = m.resource.metadata.name, "Template" === m.resourceKind && (m.templateOptions = {
>>>>>>> Updates for Service Instance & Bindings
=======
p.create = function() {
if (delete p.error, f(p.resource) && (p.resourceKind = p.resource.kind, p.resourceKind.endsWith("List") ? p.isList = !0 : p.isList = !1, g(p.resource))) {
p.isList ? (p.resourceList = p.resource.items, p.resourceName = "") : (p.resourceList = [ p.resource ], p.resourceName = p.resource.metadata.name, "Template" === p.resourceKind && (p.templateOptions = {
>>>>>>> Support EnvFrom in the Env Editors
process: !0,
add: !1
})), p.updateResources = [], p.createResources = [];
var e = [];
p.errorOccurred = !1, _.forEach(p.resourceList, function(t) {
if (!g(t)) return p.errorOccurred = !0, !1;
e.push(S(t));
}), D().then(function(t) {
p.input.selectedProject = t, n.all(e).then(function() {
p.errorOccurred || (1 === p.createResources.length && "Template" === p.resourceList[0].kind ? v() : _.isEmpty(p.updateResources) ? l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N) : (p.updateTemplate = 1 === p.updateResources.length && "Template" === p.updateResources[0].kind, p.updateTemplate ? v() : h()));
});
}, function(e) {
c.addNotification({
id: "import-create-project-error",
type: "error",
<<<<<<< HEAD
message: "An error occurred creating project",
details: R(e)
=======
message: "An error occurred creating project.",
details: I(e)
>>>>>>> Add search catalog in project context
});
});
}
}, p.cancel = function() {
T(), s.toProjectOverview(p.input.selectedProject.metadata.name);
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var $ = e("displayName");
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
m.$on("importFileFromYAMLOrJSON", m.create), m.$on("$destroy", D);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var N = e("displayName");
=======
var D = e("displayName");
>>>>>>> Label Filter for Kubernetes Deployment History Tab
m.$on("importFileFromYAMLOrJSON", m.create), m.$on("$destroy", T);
>>>>>>> Improve YAML editor validation and feedback
=======
var I = e("displayName");
=======
var A = e("displayName");
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Let administrators disable "Copy Login Command"
m.$on("importFileFromYAMLOrJSON", m.create), m.$on("$destroy", E);
>>>>>>> Add bindings list to resource pages
=======
var $ = e("displayName");
<<<<<<< HEAD
<<<<<<< HEAD
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", I);
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", N);
>>>>>>> Add notification-drawer to show curated list of events to user
=======
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", I);
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", I);
>>>>>>> Adjust events to show in the drawer
=======
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", E);
>>>>>>> Enable new landing page experience by default
=======
m.$on("importFileFromYAMLOrJSON", m.create), m.$on("$destroy", E);
>>>>>>> Updates for Service Instance & Bindings
=======
m.$on("importFileFromYAMLOrJSON", m.create), m.$on("$destroy", N);
>>>>>>> Quota Notifications
=======
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", T);
>>>>>>> Support EnvFrom in the Env Editors
=======
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", N);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", T);
>>>>>>> Update template service broker flag name
} ]
};
} ]), angular.module("openshiftConsole").directive("oscFileInput", [ "Logger", function(e) {
return {
restrict: "E",
scope: {
model: "=",
<<<<<<< HEAD
required: "<",
disabled: "<ngDisabled",
readonly: "<ngReadonly",
showTextArea: "<",
hideClear: "<?",
helpText: "@?",
dropZoneId: "@?",
onFileAdded: "<?"
},
templateUrl: "views/directives/osc-file-input.html",
link: function(t, n) {
function r(n) {
var r = new FileReader();
r.onloadend = function() {
t.$apply(function() {
t.fileName = n.name, t.model = r.result;
var e = t.onFileAdded;
_.isFunction(e) && e(r.result), r.error || (t.uploadError = !1);
});
}, r.onerror = function(n) {
t.uploadError = !0, e.error("Could not read file", n);
}, r.readAsText(n);
}
function a() {
=======
required: "=",
disabled: "=ngDisabled",
readonly: "=ngReadonly",
showTextArea: "=",
hideClear: "=?",
helpText: "@?",
dropZoneId: "@?"
},
templateUrl: "views/directives/osc-file-input.html",
link: function(t, n) {
function a(n) {
var a = new FileReader();
a.onloadend = function() {
t.$apply(function() {
t.fileName = n.name, t.model = a.result;
});
}, a.onerror = function(n) {
t.supportsFileUpload = !1, t.uploadError = !0, e.error("Could not read file", n);
}, a.readAsText(n);
}
function r() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
n.find(".drag-and-drop-zone").removeClass("show-drag-and-drop-zone highlight-drag-and-drop-zone");
}
var o = _.uniqueId("osc-file-input-");
t.dropMessageID = o + "-drop-message", t.helpID = o + "-help", t.supportsFileUpload = window.File && window.FileReader && window.FileList && window.Blob, t.uploadError = !1;
var i = "#" + t.dropMessageID, s = !1, c = !1, l = n.find("input[type=file]");
setTimeout(function() {
var e = n.find(".drag-and-drop-zone");
e.on("dragover", function() {
t.disabled || (e.addClass("highlight-drag-and-drop-zone"), s = !0);
}), n.find(".drag-and-drop-zone p").on("dragover", function() {
t.disabled || (s = !0);
}), e.on("dragleave", function() {
t.disabled || (s = !1, _.delay(function() {
s || e.removeClass("highlight-drag-and-drop-zone");
}, 200));
}), e.on("drop", function(e) {
if (!t.disabled) {
var n = _.get(e, "originalEvent.dataTransfer.files", []);
<<<<<<< HEAD
return n.length > 0 && (t.file = _.head(n), r(t.file)), a(), $(".drag-and-drop-zone").trigger("putDropZoneFront", !1), $(".drag-and-drop-zone").trigger("reset"), !1;
}
});
var o = function(e, t) {
var n = t.find("label").outerHeight(), r = n ? t.outerHeight() - n : t.outerHeight(), a = t.outerWidth();
e.css({
width: a + 6,
height: r,
position: "absolute",
"z-index": 100
});
};
e.on("putDropZoneFront", function(e, r) {
if (!t.disabled) {
var a, i = n.find(".drag-and-drop-zone");
return r ? (a = t.dropZoneId ? $("#" + t.dropZoneId) : n, o(i, a)) : i.css("z-index", "-1"), !1;
=======
return n.length > 0 && (t.file = _.head(n), a(t.file)), r(), $(".drag-and-drop-zone").trigger("putDropZoneFront", !1), $(".drag-and-drop-zone").trigger("reset"), !1;
}
});
var o = function(e, t) {
var n = t.offset(), a = t.outerWidth(), r = t.outerHeight();
e.css({
height: r + 6,
width: a + 6,
top: n.top,
left: n.left,
position: "fixed",
"z-index": 100
});
};
e.on("putDropZoneFront", function(e, a) {
if (!t.disabled) {
var r, i = n.find(".drag-and-drop-zone");
return a ? (r = t.dropZoneId ? $("#" + t.dropZoneId) : n, o(i, r)) : i.css("z-index", "-1"), !1;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}), e.on("reset", function() {
if (!t.disabled) return c = !1, !1;
});
}), $(document).on("drop." + o, function() {
<<<<<<< HEAD
return a(), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !1), !1;
=======
return r(), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !1), !1;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}), $(document).on("dragenter." + o, function() {
if (!t.disabled) return c = !0, n.find(".drag-and-drop-zone").addClass("show-drag-and-drop-zone"), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !0), !1;
}), $(document).on("dragover." + o, function() {
if (!t.disabled) return c = !0, n.find(".drag-and-drop-zone").addClass("show-drag-and-drop-zone"), !1;
}), $(document).on("dragleave." + o, function() {
return c = !1, _.delay(function() {
c || n.find(".drag-and-drop-zone").removeClass("show-drag-and-drop-zone");
}, 200), !1;
}), t.cleanInputValues = function() {
t.model = "", t.fileName = "", l[0].value = "";
}, l.change(function() {
<<<<<<< HEAD
r(l[0].files[0]), l[0].value = "";
=======
a(l[0].files[0]);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}), t.$on("$destroy", function() {
$(i).off(), $(document).off("drop." + o).off("dragenter." + o).off("dragover." + o).off("dragleave." + o);
});
}
};
} ]), angular.module("openshiftConsole").directive("oscFormSection", function() {
return {
restrict: "E",
transclude: !0,
scope: {
header: "@",
about: "@",
aboutTitle: "@",
editText: "@",
expand: "=?",
canToggle: "=?"
},
templateUrl: "views/directives/osc-form-section.html",
link: function(e, t, n) {
n.editText || (n.editText = "Edit"), angular.isDefined(n.canToggle) || (e.canToggle = !0), e.toggle = function() {
e.expand = !e.expand;
};
}
};
}), angular.module("openshiftConsole").directive("oscGitLink", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
uri: "=",
ref: "=",
contextDir: "="
},
transclude: !0,
link: function(t) {
<<<<<<< HEAD
var n = e("isAbsoluteURL"), r = e("githubLink");
t.$watchGroup([ "uri", "ref", "contextDir" ], function() {
t.gitLink = r(t.uri, t.ref, t.contextDir), t.isLink = n(t.gitLink);
=======
var n = e("isAbsoluteURL"), a = e("githubLink");
t.$watchGroup([ "uri", "ref", "contextDir" ], function() {
t.gitLink = a(t.uri, t.ref, t.contextDir), t.isLink = n(t.gitLink);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
},
template: '<a ng-if="isLink" ng-href="{{gitLink}}" ng-transclude target="_blank"></a><span ng-if="!isLink" ng-transclude></span>'
};
} ]), angular.module("openshiftConsole").directive("oscImageSummary", function() {
return {
restrict: "E",
scope: {
resource: "=",
name: "=",
tag: "="
},
templateUrl: "views/directives/osc-image-summary.html"
};
<<<<<<< HEAD
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("oscRouting", [ "$filter", "Constants", "gettextCatalog", "gettext", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a) {
=======
}), angular.module("openshiftConsole").directive("oscRouting", [ "Constants", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").directive("oscRouting", [ "$filter", "Constants", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
>>>>>>> Add canI checks for route custom hosts
return {
require: "^form",
restrict: "E",
scope: {
route: "=model",
services: "=",
showNameInput: "=",
routingDisabled: "=",
<<<<<<< HEAD
<<<<<<< HEAD
existingRoute: "="
},
templateUrl: "views/directives/osc-routing.html",
link: function(o, i, s, c) {
o.form = c, o.controls = {}, o.options = {
secureRoute: !1,
alternateServices: !1
};
var l = {
group: "route.openshift.io",
resource: "routes/custom-host"
};
o.canICreateCustomHosts = e("canI")(l, "create"), o.canIUpdateCustomHosts = e("canI")(l, "update");
var u = function() {
return o.existingRoute ? o.canIUpdateCustomHosts : o.canICreateCustomHosts;
};
o.isHostnameReadOnly = function() {
return !u();
}, o.disableWildcards = t.DISABLE_WILDCARD_ROUTES || o.existingRoute && "Subdomain" !== o.route.wildcardPolicy, o.areCertificateInputsReadOnly = function() {
return !o.canICreateCustomHosts;
}, o.areCertificateInputsDisabled = function() {
var e = _.get(o, "route.tls.termination");
return !e || "passthrough" === e;
}, o.isDestinationCACertInputDisabled = function() {
return "reencrypt" !== _.get(o, "route.tls.termination");
}, o.insecureTrafficOptions = [ {
value: "",
label: n.getString(r("None"))
}, {
value: "Allow",
label: n.getString(r("Allow"))
}, {
value: "Redirect",
label: n.getString(r("Redirect"))
} ], _.has(o, "route.tls.insecureEdgeTerminationPolicy") || _.set(o, "route.tls.insecureEdgeTerminationPolicy", "");
o.$watchGroup([ "route.tls.termination", "route.tls.insecureEdgeTerminationPolicy" ], function() {
var e = "passthrough" !== _.get(o, "route.tls.termination") || "Allow" !== _.get(o, "route.tls.insecureEdgeTerminationPolicy");
o.routeForm.insecureTraffic.$setValidity("passthrough", e);
}), o.nameValidation = a, o.disableWildcards ? o.hostnamePattern = a.pattern : o.hostnamePattern = /^(\*(\.[a-z0-9]([-a-z0-9]*[a-z0-9]))+|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$/, o.hostnameMaxLength = a.maxlength;
var d = function(e) {
if (e) {
var t = _.get(e, "spec.ports", []);
o.unnamedServicePort = 1 === t.length && !t[0].name, t.length && !o.unnamedServicePort ? o.route.portOptions = _.map(t, function(e) {
=======
hostReadOnly: "="
=======
existingRoute: "="
>>>>>>> Add canI checks for route custom hosts
},
templateUrl: "views/directives/osc-routing.html",
link: function(a, r, o, i) {
a.form = i, a.controls = {}, a.options = {
secureRoute: !1,
alternateServices: !1
};
var s = {
group: "route.openshift.io",
resource: "routes/custom-host"
};
a.canICreateCustomHosts = e("canI")(s, "create"), a.canIUpdateCustomHosts = e("canI")(s, "update");
var c = function() {
return a.existingRoute ? a.canIUpdateCustomHosts : a.canICreateCustomHosts;
};
a.isHostnameReadOnly = function() {
return !c();
}, a.disableWildcards = t.DISABLE_WILDCARD_ROUTES, a.areCertificateInputsReadOnly = function() {
return !c();
}, a.areCertificateInputsDisabled = function() {
var e = _.get(a, "route.tls.termination");
return !e || "passthrough" === e;
}, a.isDestinationCACertInputDisabled = function() {
return "reencrypt" !== _.get(a, "route.tls.termination");
}, a.insecureTrafficOptions = [ {
value: "",
label: "None"
}, {
value: "Allow",
label: "Allow"
}, {
value: "Redirect",
label: "Redirect"
} ], _.has(a, "route.tls.insecureEdgeTerminationPolicy") || _.set(a, "route.tls.insecureEdgeTerminationPolicy", "");
a.$watchGroup([ "route.tls.termination", "route.tls.insecureEdgeTerminationPolicy" ], function() {
var e = "passthrough" !== _.get(a, "route.tls.termination") || "Allow" !== _.get(a, "route.tls.insecureEdgeTerminationPolicy");
a.routeForm.insecureTraffic.$setValidity("passthrough", e);
}), a.nameValidation = n, a.disableWildcards ? a.hostnamePattern = n.pattern : a.hostnamePattern = /^(\*(\.[a-z0-9]([-a-z0-9]*[a-z0-9]))+|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$/, a.hostnameMaxLength = n.maxlength;
var l = function(e) {
if (e) {
var t = _.get(e, "spec.ports", []);
<<<<<<< HEAD
n.unnamedServicePort = 1 === t.length && !t[0].name, t.length && !n.unnamedServicePort ? n.route.portOptions = _.map(t, function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.unnamedServicePort = 1 === t.length && !t[0].name, t.length && !a.unnamedServicePort ? a.route.portOptions = _.map(t, function(e) {
>>>>>>> Add canI checks for route custom hosts
return {
port: e.name,
label: e.port + " → " + e.targetPort + " (" + e.protocol + ")"
};
<<<<<<< HEAD
<<<<<<< HEAD
}) : o.route.portOptions = [];
}
};
o.services && !o.route.service && (o.route.service = _.find(o.services)), o.servicesByName, o.services ? o.servicesByName = _.keyBy(o.services, "metadata.name") : o.servicesByName = {}, o.$watch("route.to.name", function(e, t) {
d(o.servicesByName[e]), e === t && o.route.targetPort || (o.route.targetPort = _.get(o, "route.portOptions[0].port")), o.services && (o.alternateServiceOptions = _.reject(o.services, function(t) {
return e === t.metadata.name;
}));
}), o.$watch("route.alternateServices", function(e) {
o.duplicateServices = _(e).map("name").filter(function(e, t, n) {
return _.includes(n, e, t + 1);
}).value(), c.$setValidity("duplicateServices", !o.duplicateServices.length), o.options.alternateServices = !_.isEmpty(e);
}, !0);
var m = function() {
return !!o.route.tls && ((!o.route.tls.termination || "passthrough" === o.route.tls.termination) && (o.route.tls.certificate || o.route.tls.key || o.route.tls.caCertificate || o.route.tls.destinationCACertificate));
};
o.$watch("route.tls.termination", function() {
o.options.secureRoute = !!_.get(o, "route.tls.termination"), o.showCertificatesNotUsedWarning = m();
});
var p;
o.$watch("options.secureRoute", function(e, t) {
if (e !== t) {
var n = _.get(o, "route.tls.termination");
!o.securetRoute && n && (p = n, delete o.route.tls.termination), o.options.secureRoute && !n && _.set(o, "route.tls.termination", p || "edge");
}
}), o.$watch("options.alternateServices", function(e, t) {
e !== t && (e || (o.route.alternateServices = []), e && _.isEmpty(o.route.alternateServices) && o.addAlternateService());
}), o.addAlternateService = function() {
o.route.alternateServices = o.route.alternateServices || [];
var e = _.find(o.services, function(e) {
return e.metadata.name !== o.route.to.service && !_.some(o.route.alternateServices, {
service: e.metadata.name
});
});
_.has(o, "route.to.weight") || _.set(o, "route.to.weight", 1), o.route.alternateServices.push({
service: e.metadata.name,
weight: 1
});
}, o.weightAsPercentage = function(e, t) {
e = e || 0;
var n = _.get(o, "route.to.weight", 0);
if (_.each(o.route.alternateServices, function(e) {
n += _.get(e, "weight", 0);
}), !n) return "";
var r = e / n * 100;
return t ? d3.round(r, 1) + "%" : r;
};
var g = !1;
o.$watch("route.alternateServices.length", function(e) {
if (0 === e && _.has(o, "route.to.weight") && delete o.route.to.weight, 1 === e) {
if (0 === o.route.to.weight && 0 === o.route.alternateServices[0].weight) return void (o.controls.hideSlider = !0);
g = !0, o.controls.rangeSlider = o.weightAsPercentage(o.route.to.weight);
}
}), o.$watch("controls.hideSlider", function(e) {
e || 1 !== _.size(o.route.alternateServices) || (g = !0, o.controls.rangeSlider = o.weightAsPercentage(o.route.to.weight));
}), o.$watch("controls.rangeSlider", function(e, t) {
g ? g = !1 : e !== t && (e = parseInt(e, 10), _.set(o, "route.to.weight", e), _.set(o, "route.alternateServices[0].weight", 100 - e));
=======
}) : n.route.portOptions = [];
=======
}) : a.route.portOptions = [];
>>>>>>> Add canI checks for route custom hosts
}
};
a.services && !a.route.service && (a.route.service = _.find(a.services)), a.servicesByName, a.services ? a.servicesByName = _.keyBy(a.services, "metadata.name") : a.servicesByName = {}, a.$watch("route.to.name", function(e, t) {
l(a.servicesByName[e]), e === t && a.route.targetPort || (a.route.targetPort = _.get(a, "route.portOptions[0].port")), a.services && (a.alternateServiceOptions = _.reject(a.services, function(t) {
return e === t.metadata.name;
}));
}), a.$watch("route.alternateServices", function(e) {
a.duplicateServices = _(e).map("name").filter(function(e, t, n) {
return _.includes(n, e, t + 1);
}).value(), i.$setValidity("duplicateServices", !a.duplicateServices.length), a.options.alternateServices = !_.isEmpty(e);
}, !0);
var u = function() {
return !!a.route.tls && ((!a.route.tls.termination || "passthrough" === a.route.tls.termination) && (a.route.tls.certificate || a.route.tls.key || a.route.tls.caCertificate || a.route.tls.destinationCACertificate));
};
a.$watch("route.tls.termination", function() {
a.options.secureRoute = !!_.get(a, "route.tls.termination"), a.showCertificatesNotUsedWarning = u();
});
var d;
a.$watch("options.secureRoute", function(e, t) {
if (e !== t) {
var n = _.get(a, "route.tls.termination");
!a.securetRoute && n && (d = n, delete a.route.tls.termination), a.options.secureRoute && !n && _.set(a, "route.tls.termination", d || "edge");
}
}), a.$watch("options.alternateServices", function(e, t) {
e !== t && (e || (a.route.alternateServices = []), e && _.isEmpty(a.route.alternateServices) && a.addAlternateService());
}), a.addAlternateService = function() {
a.route.alternateServices = a.route.alternateServices || [];
var e = _.find(a.services, function(e) {
return e.metadata.name !== a.route.to.service && !_.some(a.route.alternateServices, {
service: e.metadata.name
});
});
_.has(a, "route.to.weight") || _.set(a, "route.to.weight", 1), a.route.alternateServices.push({
service: e.metadata.name,
weight: 1
});
}, a.weightAsPercentage = function(e, t) {
e = e || 0;
var n = _.get(a, "route.to.weight", 0);
if (_.each(a.route.alternateServices, function(e) {
n += _.get(e, "weight", 0);
}), !n) return "";
var r = e / n * 100;
return t ? d3.round(r, 1) + "%" : r;
};
var m = !1;
a.$watch("route.alternateServices.length", function(e) {
if (0 === e && _.has(a, "route.to.weight") && delete a.route.to.weight, 1 === e) {
if (0 === a.route.to.weight && 0 === a.route.alternateServices[0].weight) return void (a.controls.hideSlider = !0);
m = !0, a.controls.rangeSlider = a.weightAsPercentage(a.route.to.weight);
}
<<<<<<< HEAD
}), n.$watch("controls.rangeSlider", function(e, t) {
l ? l = !1 : e !== t && (e = parseInt(e, 10), _.set(n, "route.to.weight", e), _.set(n, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), a.$watch("controls.rangeSlider", function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
m ? m = !1 : e !== t && (e = parseInt(e, 10), _.set(a, "route.to.weight", e), _.set(a, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Add canI checks for route custom hosts
=======
p ? p = !1 : e !== t && (e = parseInt(e, 10), _.set(a, "route.to.weight", e), _.set(a, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Updates for Service Instance & Bindings
=======
m ? m = !1 : e !== t && (e = parseInt(e, 10), _.set(a, "route.to.weight", e), _.set(a, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Support EnvFrom in the Env Editors
});
}
};
} ]).directive("oscRoutingService", function() {
return {
restrict: "E",
scope: {
model: "=",
serviceOptions: "=",
allServices: "=",
isAlternate: "=?",
showWeight: "=?",
warnUnnamedPort: "=?"
},
templateUrl: "views/directives/osc-routing-service.html",
<<<<<<< HEAD
link: function(e, t, n, r) {
e.form = r, e.id = _.uniqueId("osc-routing-service-"), e.$watchGroup([ "model.name", "serviceOptions" ], function() {
if (_.isEmpty(e.serviceOptions)) e.optionsNames = []; else {
var t = _.get(e, "model.name");
e.optionNames = [], e.selectedExists = !1, e.optionNames = _.map(e.serviceOptions, "metadata.name"), t && !e.allServices[t] && e.optionNames.push(t), t || _.set(e, "model.name", _.head(e.optionNames));
=======
link: function(e, t, n, a) {
e.form = a, e.id = _.uniqueId("osc-routing-service-"), e.$watchGroup([ "model.name", "serviceOptions" ], function() {
if (_.isEmpty(e.serviceOptions)) e.optionsNames = []; else {
var t = _.get(e, "model.name");
<<<<<<< HEAD
e.optionNames = [], e.selectedExists = !1, e.optionNames = _.map(e.serviceOptions, "metadata.name"), t && !e.allServices[t] && e.optionNames.push(t), t || _.set(e, "model.name", _.first(e.optionNames));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.optionNames = [], e.selectedExists = !1, e.optionNames = _.map(e.serviceOptions, "metadata.name"), t && !e.allServices[t] && e.optionNames.push(t), t || _.set(e, "model.name", _.head(e.optionNames));
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
}
});
}
};
<<<<<<< HEAD
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("oscPersistentVolumeClaim", [ "$filter", "APIService", "DataService", "LimitRangesService", "QuotaService", "ModalsService", "gettextCatalog", "gettext", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a, o, i, s, c) {
var l = t.getPreferredVersion("storageclasses"), u = t.getPreferredVersion("limitranges"), d = t.getPreferredVersion("resourcequotas"), m = t.getPreferredVersion("appliedclusterresourcequotas");
=======
}), angular.module("openshiftConsole").directive("oscPersistentVolumeClaim", [ "$filter", "DataService", "LimitRangesService", "QuotaService", "ModalsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, a, r, o) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").directive("oscPersistentVolumeClaim", [ "$filter", "APIService", "DataService", "LimitRangesService", "QuotaService", "ModalsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, a, r, o, i) {
var s = t.getPreferredVersion("storageclasses"), c = t.getPreferredVersion("limitranges"), l = t.getPreferredVersion("resourcequotas"), u = t.getPreferredVersion("appliedclusterresourcequotas");
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
return {
restrict: "E",
scope: {
claim: "=model",
projectName: "="
},
templateUrl: "views/directives/osc-persistent-volume-claim.html",
<<<<<<< HEAD
<<<<<<< HEAD
link: function(t) {
var p = e("amountAndUnit"), g = e("storageClassAccessMode"), f = e("usageValue");
t.nameValidation = c, t.storageClasses = [], t.defaultStorageClass = "", t.claim.accessModes = "ReadWriteOnce", t.claim.unit = "Gi", t.units = [ {
value: "Mi",
label: "MiB"
}, {
value: "Gi",
label: "GiB"
}, {
value: "Ti",
label: "TiB"
} ], t.claim.selectedLabels = [];
var v = [];
t.$watch("useLabels", function(e, n) {
e !== n && (e ? t.claim.selectedLabels = v : (v = t.claim.selectedLabels, t.claim.selectedLabels = []));
}), t.groupUnits = function(e) {
=======
link: function(i) {
var s = e("amountAndUnit"), c = e("usageValue");
i.nameValidation = o, i.storageClasses = [], i.defaultStorageClass = "", i.claim.unit = "Gi", i.units = [ {
=======
link: function(t) {
var d = e("amountAndUnit"), m = e("usageValue");
t.nameValidation = i, t.storageClasses = [], t.defaultStorageClass = "", t.claim.unit = "Gi", t.units = [ {
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
value: "Mi",
label: "MiB"
}, {
value: "Gi",
label: "GiB"
}, {
value: "Ti",
label: "TiB"
}, {
value: "M",
label: "MB"
}, {
value: "G",
label: "GB"
}, {
value: "T",
label: "TB"
<<<<<<< HEAD
<<<<<<< HEAD
} ], i.claim.selectedLabels = [], i.groupUnits = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ], i.claim.selectedLabels = [];
var l = [];
i.$watch("useLabels", function(e, t) {
e !== t && (e ? i.claim.selectedLabels = l : (l = i.claim.selectedLabels, i.claim.selectedLabels = []));
}), i.groupUnits = function(e) {
>>>>>>> Use label-editor for PVC labels
=======
} ], t.claim.selectedLabels = [];
var p = [];
t.$watch("useLabels", function(e, n) {
e !== n && (e ? t.claim.selectedLabels = p : (p = t.claim.selectedLabels, t.claim.selectedLabels = []));
}), t.groupUnits = function(e) {
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
switch (e.value) {
case "Mi":
case "Gi":
case "Ti":
return i.getString(s("Binary Units"));

case "M":
case "G":
case "T":
return i.getString(s("Decimal Units"));
}
return "";
<<<<<<< HEAD
<<<<<<< HEAD
}, t.showComputeUnitsHelp = function() {
o.showComputeUnitsHelp();
}, t.onStorageClassSelected = function(e) {
var n = g(e);
n && (t.claim.accessModes = n);
};
var h = function() {
var e = t.claim.amount && f(t.claim.amount + t.claim.unit), n = _.has(t, "limits.min") && f(t.limits.min), r = _.has(t, "limits.max") && f(t.limits.max), a = !0, o = !0;
e && n && (a = e >= n), e && r && (o = e <= r), t.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMin", a), t.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMax", o);
}, y = function() {
var e = a.isAnyStorageQuotaExceeded(t.quotas, t.clusterQuotas), n = a.willRequestExceedQuota(t.quotas, t.clusterQuotas, "requests.storage", t.claim.amount + t.claim.unit);
t.persistentVolumeClaimForm.capacity.$setValidity("willExceedStorage", !n), t.persistentVolumeClaimForm.capacity.$setValidity("outOfClaims", !e);
};
n.list(l, {}, function(n) {
var r = n.by("metadata.name");
if (!_.isEmpty(r)) {
t.storageClasses = _.sortBy(r, "metadata.name");
var a = e("annotation");
if (t.defaultStorageClass = _.find(t.storageClasses, function(e) {
return "true" === a(e, "storageclass.beta.kubernetes.io/is-default-class");
}), t.defaultStorageClass) t.claim.storageClass = t.defaultStorageClass; else {
var o = {
metadata: {
name: "No Storage Class",
labels: {},
annotations: {
description: "No storage class will be assigned"
}
}
};
t.storageClasses.unshift(o);
=======
}, i.showComputeUnitsHelp = function() {
r.showComputeUnitsHelp();
=======
}, t.showComputeUnitsHelp = function() {
o.showComputeUnitsHelp();
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
};
var f = function() {
var e = t.claim.amount && m(t.claim.amount + t.claim.unit), n = _.has(t, "limits.min") && m(t.limits.min), a = _.has(t, "limits.max") && m(t.limits.max), r = !0, o = !0;
e && n && (r = e >= n), e && a && (o = e <= a), t.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMin", r), t.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMax", o);
}, g = function() {
var e = r.isAnyStorageQuotaExceeded(t.quotas, t.clusterQuotas), n = r.willRequestExceedQuota(t.quotas, t.clusterQuotas, "requests.storage", t.claim.amount + t.claim.unit);
t.persistentVolumeClaimForm.capacity.$setValidity("willExceedStorage", !n), t.persistentVolumeClaimForm.capacity.$setValidity("outOfClaims", !e);
};
n.list(s, {}, function(n) {
var a = n.by("metadata.name");
if (!_.isEmpty(a)) {
t.storageClasses = _.sortBy(a, "metadata.name");
var r = e("annotation");
if (t.defaultStorageClass = _.find(t.storageClasses, function(e) {
return "true" === r(e, "storageclass.beta.kubernetes.io/is-default-class");
}), t.defaultStorageClass) t.claim.storageClass = t.defaultStorageClass; else {
var o = {
metadata: {
name: "No Storage Class",
labels: {},
annotations: {
description: "No storage class will be assigned"
}
}
};
<<<<<<< HEAD
i.storageClasses.unshift(r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.storageClasses.unshift(o);
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
}
}
}, {
errorNotification: !1
<<<<<<< HEAD
<<<<<<< HEAD
}), n.list(u, {
namespace: t.projectName
}, function(e) {
var n = e.by("metadata.name");
if (!_.isEmpty(n)) {
t.limits = r.getEffectiveLimitRange(n, "storage", "PersistentVolumeClaim");
var a;
t.limits.min && t.limits.max && f(t.limits.min) === f(t.limits.max) && (a = p(t.limits.max), t.claim.amount = Number(a[0]), t.claim.unit = a[1], t.capacityReadOnly = !0), t.$watchGroup([ "claim.amount", "claim.unit" ], h);
}
}), n.list(d, {
namespace: t.projectName
}, function(e) {
t.quotas = e.by("metadata.name"), t.$watchGroup([ "claim.amount", "claim.unit" ], y);
}), n.list(m, {
namespace: t.projectName
}, function(e) {
t.clusterQuotas = e.by("metadata.name");
});
}
};
} ]), angular.module("openshiftConsole").directive("oscAutoscaling", [ "Constants", "HPAService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
=======
}), t.list("limitranges", {
namespace: i.projectName
=======
}), n.list(c, {
namespace: t.projectName
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
}, function(e) {
var n = e.by("metadata.name");
if (!_.isEmpty(n)) {
t.limits = a.getEffectiveLimitRange(n, "storage", "PersistentVolumeClaim");
var r;
t.limits.min && t.limits.max && m(t.limits.min) === m(t.limits.max) && (r = d(t.limits.max), t.claim.amount = Number(r[0]), t.claim.unit = r[1], t.capacityReadOnly = !0), t.$watchGroup([ "claim.amount", "claim.unit" ], f);
}
}), n.list(l, {
namespace: t.projectName
}, function(e) {
t.quotas = e.by("metadata.name"), t.$watchGroup([ "claim.amount", "claim.unit" ], g);
}), n.list(u, {
namespace: t.projectName
}, function(e) {
t.clusterQuotas = e.by("metadata.name");
});
}
};
} ]), angular.module("openshiftConsole").directive("oscAutoscaling", [ "HPAService", "LimitRangesService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
autoscaling: "=model",
<<<<<<< HEAD
showNameInput: "=?",
nameReadOnly: "=?",
showRequestInput: "&"
},
templateUrl: "views/directives/osc-autoscaling.html",
link: function(t, r, a) {
t.nameValidation = n;
var o = e.DEFAULT_HPA_CPU_TARGET_PERCENT, i = _.get(t, "autoscaling.targetCPU");
_.isNil(i) && o && _.set(t, "autoscaling.targetCPU", o), "showRequestInput" in a || (t.showRequestInput = !0);
}
};
} ]), angular.module("openshiftConsole").directive("oscSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, r, a) {
=======
project: "=",
showNameInput: "=?",
nameReadOnly: "=?"
},
templateUrl: "views/directives/osc-autoscaling.html",
link: function(a) {
a.nameValidation = n, a.$watch("project", function() {
if (a.project) {
a.isRequestCalculated = t.isRequestCalculated("cpu", a.project);
var n = window.OPENSHIFT_CONSTANTS.DEFAULT_HPA_CPU_TARGET_PERCENT;
a.isRequestCalculated && (n = e.convertLimitPercentToRequest(n, a.project)), _.set(a, "autoscaling.defaultTargetCPU", n), a.defaultTargetCPUDisplayValue = window.OPENSHIFT_CONSTANTS.DEFAULT_HPA_CPU_TARGET_PERCENT;
var r = !1;
a.$watch("autoscaling.targetCPU", function(t) {
r ? r = !1 : (t && a.isRequestCalculated && (t = e.convertRequestPercentToLimit(t, a.project)), _.set(a, "targetCPUInput.percent", t));
});
<<<<<<< HEAD
var o = function(t) {
t && a.isRequestCalculated && (t = e.convertLimitPercentToRequest(t, a.project)), r = !0, _.set(a, "autoscaling.targetCPU", t);
=======
}
var g, v = this, h = e("displayName"), y = e("humanize");
v.noProjectsCantCreate = !1, v.$onInit = function() {
v.labels = [], v.template = angular.copy(v.template), v.templateDisplayName = h(v.template), v.selectedProject = v.project, n.$watch("$ctrl.selectedProject.metadata.name", function() {
v.projectNameTaken = !1;
}), n.$on("no-projects-cannot-create", function() {
v.noProjectsCantCreate = !0;
}), f();
>>>>>>> Correct ProjectNameTaken error handling in deployImage, processTemplate, and fromFile wizards
};
a.$watch("targetCPUInput.percent", function(e, t) {
e !== t && o(e);
});
}
});
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("oscSecrets", [ "$uibModal", "$filter", "DataService", "SecretsService", function(e, t, n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("oscSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, a, r) {
>>>>>>> Update directives/oscSecrets to use getPreferredVersion
return {
restrict: "E",
scope: {
pickedSecrets: "=model",
secretsByType: "=",
namespace: "=",
displayType: "@",
type: "@",
alerts: "=",
disableInput: "=",
serviceAccountToLink: "@?",
allowMultipleSecrets: "=?"
},
templateUrl: "views/directives/osc-secrets.html",
link: function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
t.secretsVersion = n.getPreferredVersion("secrets"), t.canAddSourceSecret = function() {
=======
t.canAddSourceSecret = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.secretsVersion = n.getPreferredVersion("secrets"), t.canAddSourceSecret = function() {
>>>>>>> Update directives/oscSecrets to use getPreferredVersion
if (!t.allowMultipleSecrets) return !1;
var e = _.last(t.pickedSecrets);
return !!e && e.name;
}, t.setLastSecretsName = function(e) {
_.last(t.pickedSecrets).name = e;
}, t.addSourceSecret = function() {
t.pickedSecrets.push({
name: ""
});
}, t.removeSecret = function(e) {
1 === t.pickedSecrets.length ? t.pickedSecrets = [ {
name: ""
} ] : t.pickedSecrets.splice(e, 1), t.secretsForm.$setDirty();
}, t.openCreateSecretModal = function() {
t.newSecret = {}, e.open({
<<<<<<< HEAD
=======
animation: !0,
backdrop: "static",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
r.list(t.secretsVersion, {
=======
n.list("secrets", {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.list(t.secretsVersion, {
>>>>>>> Update directives/oscSecrets to use getPreferredVersion
namespace: t.namespace
}, function(n) {
var a = r.groupSecretsByType(n), o = _.mapValues(a, function(e) {
return _.map(e, "metadata.name");
});
<<<<<<< HEAD
t.secretsByType = _.each(o, function(e) {
e.unshift("");
}), t.setLastSecretsName(e.metadata.name), t.secretsForm.$setDirty();
=======
}, function(e) {
if (v.disableInputs = !1, "AlreadyExists" === e.data.reason) v.projectNameTaken = !0; else {
var t;
e.data && e.data.message && (t = e.data.message), i.addNotification({
id: "process-template-error",
type: "error",
message: "An error occurred creating the project.",
details: t
>>>>>>> Correct ProjectNameTaken error handling in deployImage, processTemplate, and fromFile wizards
});
}
});
};
}
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("oscSourceSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, r, a) {
=======
} ]), angular.module("openshiftConsole").directive("oscSourceSecrets", [ "$uibModal", "$filter", "DataService", "SecretsService", function(e, t, n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("oscSourceSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, a, r) {
>>>>>>> Update oscSourceSecrets directive to use getPreferredVersion
return {
restrict: "E",
scope: {
pickedSecrets: "=model",
secretsByType: "=",
strategyType: "=",
type: "@",
displayType: "@",
namespace: "=",
alerts: "=",
serviceAccountToLink: "@?"
},
templateUrl: "views/directives/osc-source-secrets.html",
link: function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
t.secretsVersion = n.getPreferredVersion("secrets"), t.canAddSourceSecret = function() {
=======
t.canAddSourceSecret = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.secretsVersion = n.getPreferredVersion("secrets"), t.canAddSourceSecret = function() {
>>>>>>> Update oscSourceSecrets directive to use getPreferredVersion
var e = _.last(t.pickedSecrets);
switch (t.strategyType) {
case "Custom":
return _.get(e, "secretSource.name");

default:
return _.get(e, "secret.name");
}
}, t.setLastSecretsName = function(e) {
var n = _.last(t.pickedSecrets);
switch (t.strategyType) {
case "Custom":
return void (n.secretSource.name = e);

default:
return void (n.secret.name = e);
}
}, t.addSourceSecret = function() {
switch (t.strategyType) {
case "Custom":
return void t.pickedSecrets.push({
secretSource: {
name: ""
},
mountPath: ""
});

default:
return void t.pickedSecrets.push({
secret: {
name: ""
},
destinationDir: ""
});
}
}, t.removeSecret = function(e) {
if (1 === t.pickedSecrets.length) switch (t.strategyType) {
case "Custom":
t.pickedSecrets = [ {
secretSource: {
name: ""
},
mountPath: ""
} ];
break;

default:
t.pickedSecrets = [ {
secret: {
name: ""
},
destinationDir: ""
} ];
} else t.pickedSecrets.splice(e, 1);
t.secretsForm.$setDirty();
}, t.openCreateSecretModal = function() {
e.open({
<<<<<<< HEAD
=======
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
r.list(t.secretsVersion, {
=======
n.list("secrets", {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.list(t.secretsVersion, {
>>>>>>> Update oscSourceSecrets directive to use getPreferredVersion
namespace: t.namespace
}, function(n) {
var a = r.groupSecretsByType(n), o = _.mapValues(a, function(e) {
return _.map(e, "metadata.name");
});
t.secretsByType = _.each(o, function(e) {
e.unshift("");
}), t.setLastSecretsName(e.metadata.name);
});
});
};
}
};
} ]), angular.module("openshiftConsole").directive("replicas", function() {
return {
restrict: "E",
scope: {
status: "=?",
spec: "=",
disableScaling: "=?",
scaleFn: "&?",
deployment: "="
},
templateUrl: "views/directives/replicas.html",
link: function(e) {
e.model = {
editing: !1
}, e.scale = function() {
e.form.scaling.$valid && (e.scaleFn({
replicas: e.model.desired
}), e.model.editing = !1);
}, e.cancel = function() {
e.model.editing = !1;
};
}
};
}), angular.module("openshiftConsole").directive("containerStatuses", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
pod: "=",
onDebugTerminal: "=?",
detailed: "=?"
},
templateUrl: "views/_container-statuses.html",
link: function(t) {
t.hasDebugTerminal = angular.isFunction(t.onDebugTerminal);
<<<<<<< HEAD
var n = e("isContainerTerminatedSuccessfully"), r = function(e) {
return _.every(e, n);
};
t.$watch("pod", function(e) {
t.initContainersTerminated = r(e.status.initContainerStatuses), !1 !== t.expandInitContainers && (t.expandInitContainers = !t.initContainersTerminated);
=======
var n = e("isContainerTerminatedSuccessfully"), a = function(e) {
return _.every(e, n);
};
t.$watch("pod", function(e) {
t.initContainersTerminated = a(e.status.initContainerStatuses), !1 !== t.expandInitContainers && (t.expandInitContainers = !t.initContainersTerminated);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}), t.toggleInitContainer = function() {
t.expandInitContainers = !t.expandInitContainers;
}, t.showDebugAction = function(n) {
if ("Completed" === _.get(t.pod, "status.phase")) return !1;
if (e("annotation")(t.pod, "openshift.io/build.name")) return !1;
if (e("isDebugPod")(t.pod)) return !1;
<<<<<<< HEAD
var r = _.get(n, "state.waiting.reason");
return "ImagePullBackOff" !== r && "ErrImagePull" !== r && (!_.get(n, "state.running") || !n.ready);
=======
var a = _.get(n, "state.waiting.reason");
return "ImagePullBackOff" !== a && "ErrImagePull" !== a && (!_.get(n, "state.running") || !n.ready);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, t.debugTerminal = function(e) {
if (t.hasDebugTerminal) return t.onDebugTerminal.call(this, e);
};
}
};
} ]).directive("podTemplate", function() {
return {
restrict: "E",
scope: {
podTemplate: "=",
imagesByDockerReference: "=",
builds: "=",
detailed: "=?",
addHealthCheckUrl: "@?"
},
templateUrl: "views/_pod-template.html"
};
}).directive("podTemplateContainer", function() {
return {
restrict: "E",
scope: {
container: "=podTemplateContainer",
imagesByDockerReference: "=",
builds: "=",
<<<<<<< HEAD
detailed: "=?"
=======
detailed: "=?",
labelPrefix: "@?"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
templateUrl: "views/_pod-template-container.html"
};
}).directive("annotations", function() {
return {
restrict: "E",
scope: {
annotations: "="
},
templateUrl: "views/directives/annotations.html",
link: function(e) {
e.expandAnnotations = !1, e.toggleAnnotations = function() {
e.expandAnnotations = !e.expandAnnotations;
};
}
};
}).directive("registryAnnotations", function() {
return {
restrict: "E",
priority: 1,
terminal: !0,
scope: {
annotations: "="
},
templateUrl: "views/directives/annotations.html",
link: function(e) {
e.expandAnnotations = !1, e.toggleAnnotations = function() {
e.expandAnnotations = !e.expandAnnotations;
};
}
};
}).directive("volumes", function() {
return {
restrict: "E",
scope: {
volumes: "=",
namespace: "=",
canRemove: "=?",
removeFn: "&?"
},
templateUrl: "views/_volumes.html"
};
}).directive("volumeClaimTemplates", function() {
return {
restrict: "E",
scope: {
templates: "="
},
templateUrl: "views/_volume-claim-templates.html"
};
}).directive("hpa", function() {
return {
restrict: "E",
scope: {
hpa: "=",
project: "=",
showScaleTarget: "=?",
alerts: "="
},
templateUrl: "views/directives/hpa.html"
};
}).directive("probe", function() {
return {
restrict: "E",
scope: {
probe: "="
},
templateUrl: "views/directives/_probe.html"
};
}).directive("podsTable", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
pods: "=",
activePods: "=?",
emptyMessage: "=?",
customNameHeader: "=?",
podFailureReasons: "=?"
},
templateUrl: "views/directives/pods-table.html",
link: function(t) {
<<<<<<< HEAD
var n = e("orderObjectsByDate"), r = _.debounce(function(e) {
=======
var n = e("orderObjectsByDate"), a = _.debounce(function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
t.$evalAsync(function() {
t.sortedPods = n(e, !0);
});
}, 150, {
maxWait: 500
});
<<<<<<< HEAD
t.$watch("pods", r);
=======
t.$watch("pods", a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
};
} ]).directive("trafficTable", function() {
return {
restrict: "E",
scope: {
routes: "=",
services: "=",
portsByRoute: "=",
showNodePorts: "=?",
customNameHeader: "=?"
},
templateUrl: "views/directives/traffic-table.html"
};
<<<<<<< HEAD
<<<<<<< HEAD
}), angular.module("openshiftConsole").component("resourceServiceBindings", {
controller: [ "$filter", "APIService", "BindingService", "CatalogService", "DataService", ResourceServiceBindings ],
=======
}), angular.module("openshiftConsole").component("resourceServiceBindings", {
<<<<<<< HEAD
controller: [ "$filter", "DataService", "BindingService", "CatalogService", ResourceServiceBindings ],
>>>>>>> Add bindings list to resource pages
=======
controller: [ "$filter", "APIService", "BindingService", "CatalogService", "DataService", ResourceServiceBindings ],
>>>>>>> Adopt service catalog API changes
controllerAs: "$ctrl",
bindings: {
project: "<",
projectContext: "<",
apiObject: "<",
createBinding: "&"
},
templateUrl: "views/directives/resource-service-bindings.html"
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Fix issues with bindings widget for service instances
}), angular.module("openshiftConsole").component("serviceInstanceBindings", {
controller: [ "$filter", "APIService", "BindingService", ServiceInstanceBindings ],
controllerAs: "$ctrl",
bindings: {
showHeader: "<?",
project: "<",
bindings: "<",
serviceInstance: "<",
serviceClass: "<",
servicePlan: "<"
},
templateUrl: "views/directives/service-instance-bindings.html"
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "$timeout", "$rootScope", "$routeParams", "APIService", "AuthorizationService", "Constants", "HTMLService", function(e, t, n, r, a, o, i, s, c) {
var l = function(e, t) {
=======
=======
>>>>>>> Add bindings list to resource pages
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "Constants", function(e, t, n) {
var a = t("canI"), r = function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "$timeout", "$rootScope", "AuthorizationService", "Constants", "HTMLService", function(e, t, n, a, r, o, i) {
var s = function(e, t) {
>>>>>>> Patternfly vertical navigation and project bar
=======
=======
>>>>>>> Fix issues with bindings widget for service instances
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "$timeout", "$rootScope", "$routeParams", "AuthorizationService", "Constants", "HTMLService", function(e, t, n, a, r, o, i, s) {
var c = function(e, t) {
>>>>>>> Make sure there's always a menu item for the current project
return e.href === t || _.some(e.prefixes, function(e) {
return _.startsWith(t, e);
});
};
return {
restrict: "E",
templateUrl: "views/_sidebar.html",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", function(u) {
var d;
u.navItems = s.PROJECT_NAVIGATION, u.sidebar = {};
var m = function() {
u.projectName = a.project, _.set(u, "sidebar.secondaryOpen", !1), _.set(r, "nav.showMobileNav", !1), u.activeSecondary = null, u.activePrimary = _.find(u.navItems, function(t) {
return d = e.path().replace("/project/" + u.projectName, ""), l(t, d) ? (u.activeSecondary = null, !0) : _.some(t.secondaryNavSections, function(e) {
var t = _.find(e.items, function(e) {
return l(e, d);
});
return !!t && (u.activeSecondary = t, !0);
});
});
};
m(), u.$on("$routeChangeSuccess", m);
var p = function() {
_.each(u.navItems, function(e) {
e.isHover = !1;
});
};
u.navURL = function(e) {
return e ? t("isAbsoluteURL")(e) ? e : "project/" + u.projectName + e : "";
}, u.show = function(e) {
if (!(!e.isValid || e.isValid())) return !1;
if (!e.canI) return !0;
if (e.canI.addToProject) return u.canIAddToProject;
var t = _.pick(e.canI, [ "resource", "group", "version" ]);
return o.apiInfo(t) && i.canI(t, e.canI.verb, u.projectName);
}, u.itemClicked = function(e) {
if (p(), e.href) return u.nav.showMobileNav = !1, void (u.sidebar.secondaryOpen = !1);
e.isHover = !0, e.mobileSecondary = u.isMobile, u.sidebar.showMobileSecondary = u.isMobile, u.sidebar.secondaryOpen = !0;
}, u.onMouseEnter = function(e) {
e.mouseLeaveTimeout && (n.cancel(e.mouseLeaveTimeout), e.mouseLeaveTimeout = null), e.mouseEnterTimeout = n(function() {
e.isHover = !0, e.mouseEnterTimeout = null, u.sidebar.secondaryOpen = !_.isEmpty(e.secondaryNavSections);
}, 200);
}, u.onMouseLeave = function(e) {
e.mouseEnterTimeout && (n.cancel(e.mouseEnterTimeout), e.mouseEnterTimeout = null), e.mouseLeaveTimeout = n(function() {
e.isHover = !1, e.mouseLeaveTimeout = null, u.sidebar.secondaryOpen = _.some(u.navItems, function(e) {
return e.isHover && !_.isEmpty(e.secondaryNavSections);
});
}, 300);
}, u.closeNav = function() {
p(), u.nav.showMobileNav = !1, u.sidebar.secondaryOpen = !1;
}, u.collapseMobileSecondary = function(e, t) {
e.mobileSecondary = !1, t.stopPropagation();
=======
controller: [ "$scope", function(o) {
var i = e.path().replace("/project/" + o.projectName, "");
o.activeSecondary, o.navItems = n.PROJECT_NAVIGATION, o.activePrimary = _.find(o.navItems, function(e) {
return r(e, i) ? (o.activeSecondary = null, !0) : _.some(e.secondaryNavSections, function(e) {
=======
controller: [ "$scope", function(c) {
var l;
c.navItems = o.PROJECT_NAVIGATION, c.sidebar = {};
var u = function() {
_.set(c, "sidebar.secondaryOpen", !1), _.set(a, "nav.showMobileNav", !1), c.activeSecondary = null, c.activePrimary = _.find(c.navItems, function(t) {
return l = e.path().replace("/project/" + c.projectName, ""), s(t, l) ? (c.activeSecondary = null, !0) : _.some(t.secondaryNavSections, function(e) {
>>>>>>> Patternfly vertical navigation and project bar
=======
controller: [ "$scope", function(l) {
var u;
l.navItems = i.PROJECT_NAVIGATION, l.sidebar = {};
var d = function() {
l.projectName = r.project, _.set(l, "sidebar.secondaryOpen", !1), _.set(a, "nav.showMobileNav", !1), l.activeSecondary = null, l.activePrimary = _.find(l.navItems, function(t) {
return u = e.path().replace("/project/" + l.projectName, ""), c(t, u) ? (l.activeSecondary = null, !0) : _.some(t.secondaryNavSections, function(e) {
>>>>>>> Make sure there's always a menu item for the current project
var t = _.find(e.items, function(e) {
return c(e, u);
});
return !!t && (l.activeSecondary = t, !0);
});
});
};
d(), l.$on("$routeChangeSuccess", d);
var m = function() {
_.each(l.navItems, function(e) {
e.isHover = !1;
});
};
l.navURL = function(e) {
return e ? t("isAbsoluteURL")(e) ? e : "project/" + l.projectName + e : "";
}, l.show = function(e) {
return !(e.isValid && !e.isValid()) && (!e.canI || o.canI({
resource: e.canI.resource,
group: e.canI.group
}, e.canI.verb, l.projectName));
}, l.itemClicked = function(e) {
if (e.href) return l.nav.showMobileNav = !1, void (l.sidebar.secondaryOpen = !1);
m(), e.isHover = !0, e.mobileSecondary = l.isMobile, l.sidebar.showMobileSecondary = l.isMobile, l.sidebar.secondaryOpen = !0;
}, l.onMouseEnter = function(e) {
_.isEmpty(e.secondaryNavSections) || (e.mouseLeaveTimeout && (n.cancel(e.mouseLeaveTimeout), e.mouseLeaveTimeout = null), e.mouseEnterTimeout = n(function() {
e.isHover = !0, e.mouseEnterTimeout = null, l.sidebar.secondaryOpen = !0;
}, 300));
}, l.onMouseLeave = function(e) {
_.isEmpty(e.secondaryNavSections) || (e.mouseEnterTimeout && (n.cancel(e.mouseEnterTimeout), e.mouseEnterTimeout = null), e.mouseLeaveTimeout = n(function() {
e.isHover = !1, e.mouseLeaveTimeout = null, l.sidebar.secondaryOpen = _.some(l.navItems, function(e) {
return e.isHover && !_.isEmpty(e.secondaryNavSections);
});
<<<<<<< HEAD
}), o.navURL = function(e) {
return e ? t("isAbsoluteURL")(e) ? e : "project/" + o.projectName + e : "";
}, o.show = function(e) {
return !(e.isValid && !e.isValid()) && (!e.canI || a(e.canI.resource, e.canI.verb, e.canI.group));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
var g = function() {
return c.isWindowBelowBreakpoint(c.WINDOW_SIZE_SM);
};
u.isMobile = g();
var f = _.throttle(function() {
var e = g();
e !== u.isMobile && u.$evalAsync(function() {
u.isMobile = e, e || (_.set(r, "nav.showMobileNav", !1), _.each(u.navItems, function(e) {
=======
}, 500));
}, l.closeNav = function() {
m(), l.nav.showMobileNav = !1, l.sidebar.secondaryOpen = !1;
}, l.collapseMobileSecondary = function(e, t) {
e.mobileSecondary = !1, t.stopPropagation();
};
var p = function() {
return s.isWindowBelowBreakpoint(s.WINDOW_SIZE_SM);
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
c.isMobile = m();
var p = _.throttle(function() {
var e = m();
e !== c.isMobile && c.$evalAsync(function() {
c.isMobile = e, e || (_.set(a, "nav.showMobileNav", !1), _.each(c.navItems, function(e) {
>>>>>>> Patternfly vertical navigation and project bar
=======
l.isMobile = p();
=======
l.isMobile = m();
>>>>>>> Updates for Service Instance & Bindings
=======
l.isMobile = p();
>>>>>>> Support EnvFrom in the Env Editors
var f = _.throttle(function() {
var e = p();
e !== l.isMobile && l.$evalAsync(function() {
l.isMobile = e, e || (_.set(a, "nav.showMobileNav", !1), _.each(l.navItems, function(e) {
>>>>>>> Make sure there's always a menu item for the current project
e.mobileSecondary = !1;
}));
});
}, 50);
<<<<<<< HEAD
<<<<<<< HEAD
$(window).on("resize.verticalnav", f), u.$on("$destroy", function() {
=======
$(window).on("resize.verticalnav", p), c.$on("$destroy", function() {
>>>>>>> Patternfly vertical navigation and project bar
=======
$(window).on("resize.verticalnav", f), l.$on("$destroy", function() {
>>>>>>> Make sure there's always a menu item for the current project
$(window).off(".verticalnav");
});
} ]
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]).directive("oscHeader", [ "$filter", "$location", "$q", "$rootScope", "$routeParams", "$timeout", "APIService", "AuthorizationService", "Catalog", "CatalogService", "Constants", "DataService", "Navigate", "NotificationsService", "ProjectsService", "projectOverviewURLFilter", "gettext", "gettextCatalog", "RecentlyViewedServiceItems", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v, h, y) {
var b = {}, S = [], C = e("displayName"), w = e("uniqueDisplayName"), P = i.getPreferredVersion("templates");
return {
restrict: "EA",
templateUrl: "views/directives/header/header.html",
link: function(i, p) {
i.currentProject = b[a.project];
var j = function(e, t) {
var n;
_.set(r, "nav.collapsed", e), t && (n = e ? "true" : "false", localStorage.setItem("openshift/vertical-nav-collapsed", n));
};
!function() {
var e = "true" === localStorage.getItem("openshift/vertical-nav-collapsed");
j(e);
}();
var k = function() {
return _.get(r, "nav.collapsed", !1);
}, I = function(e) {
_.set(r, "nav.showMobileNav", e);
};
i.toggleNav = function() {
var e = k();
j(!e, !0), r.$emit("oscHeader.toggleNav");
}, i.toggleMobileNav = function() {
var e = _.get(r, "nav.showMobileNav");
I(!e);
}, i.closeMobileNav = function() {
I(!1);
}, i.closeOrderingPanel = function() {
i.orderingPanelVisible = !1;
}, i.showOrderingPanel = function(e) {
i.orderingPanelVisible = !0, i.orderKind = e;
}, i.onSearchToggle = function(e) {
_.set(r, "view.hasProjectSearch", e);
}, i.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var R = p.find(".selectpicker"), T = [], E = function() {
var t = i.currentProjectName;
if (t) {
var n = function(e, n) {
var r = $("<option>").attr("value", e.metadata.name).attr("selected", e.metadata.name === t);
return n ? r.text(C(e)) : r.text(w(e, S)), r;
};
_.size(b) <= 100 ? (S = e("orderByDisplayName")(b), T = _.map(S, function(e) {
return n(e, !1);
})) : T = [ n(b[t], !0) ], R.empty(), R.append(T), R.append($('<option data-divider="true"></option>')), R.append($('<option value="">' + h.getString(v("View All Projects")) + "</option>")), R.selectpicker("refresh");
}
}, N = function() {
return g.list().then(function(e) {
b = e.by("metadata.name");
});
}, D = function() {
var e = a.project;
if (i.currentProjectName !== e) {
i.currentProjectName = e, i.chromeless = "chromeless" === a.view;
var t, o;
e && !i.chromeless ? (_.set(r, "view.hasProject", !0), i.canIAddToProject = !1, s.getProjectRules(e).then(function() {
if (i.currentProjectName === e && (i.canIAddToProject = s.canIAddToProject(e), i.canIAddToProject)) {
var r = l.getCatalogItems().then(function(e) {
t = e;
}), a = c.getProjectCatalogItems(e).then(_.spread(function(e) {
o = e;
}));
n.all([ r, a ]).then(function() {
i.catalogItems = c.sortCatalogItems(_.concat(t, o));
=======
} ]).directive("projectHeader", [ "$timeout", "$location", "$filter", "DataService", "projectOverviewURLFilter", "Constants", function(e, t, n, a, r, o) {
var i = {}, s = [];
=======
} ]).directive("projectHeader", [ "$timeout", "$location", "$filter", "ProjectsService", "projectOverviewURLFilter", "Constants", function(e, t, n, a, r, o) {
var i = {}, s = [], c = n("displayName"), l = n("uniqueDisplayName");
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
} ]).directive("oscHeader", [ "$filter", "$location", "$rootScope", "$routeParams", "$timeout", "AuthorizationService", "Constants", "ProjectsService", "projectOverviewURLFilter", function(e, t, n, a, r, o, i, s, c) {
<<<<<<< HEAD
<<<<<<< HEAD
var l = {}, u = [], d = e("displayName"), m = e("uniqueDisplayName");
>>>>>>> Patternfly vertical navigation and project bar
=======
var l = {}, u = [], d = e("displayName"), p = e("uniqueDisplayName");
>>>>>>> Updates for Service Instance & Bindings
=======
var l = {}, u = [], d = e("displayName"), m = e("uniqueDisplayName");
>>>>>>> Support EnvFrom in the Env Editors
=======
} ]).directive("oscHeader", [ "$filter", "$location", "$q", "$rootScope", "$routeParams", "$timeout", "AuthorizationService", "Catalog", "CatalogService", "Constants", "DataService", "NotificationsService", "ProjectsService", "projectOverviewURLFilter", "RecentlyViewedServiceItems", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f) {
var g = {}, v = [], h = e("displayName"), y = e("uniqueDisplayName");
>>>>>>> Add search catalog in project context
return {
restrict: "EA",
templateUrl: "views/directives/header/header.html",
link: function(o, d) {
o.currentProject = g[r.project];
var b = function(e, t) {
var n;
_.set(a, "nav.collapsed", e), t && (n = e ? "true" : "false", localStorage.setItem("openshift/vertical-nav-collapsed", n));
};
!function() {
var e = "true" === localStorage.getItem("openshift/vertical-nav-collapsed");
b(e);
}();
var S = function() {
return _.get(a, "nav.collapsed", !1);
}, C = function(e) {
_.set(a, "nav.showMobileNav", e);
};
o.toggleNav = function() {
var e = S();
b(!e, !0);
}, o.toggleMobileNav = function() {
var e = _.get(a, "nav.showMobileNav");
C(!e);
}, o.closeMobileNav = function() {
C(!1);
}, o.closeOrderingPanel = function() {
o.orderingPanelVisible = !1;
}, o.showOrderingPanel = function(e) {
o.orderingPanelVisible = !0, o.orderKind = e;
}, o.onSearchToggle = function(e) {
_.set(a, "view.hasProjectSearch", e);
}, o.catalogLandingPageEnabled = !l.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var w = d.find(".selectpicker"), P = [], k = function() {
var t = o.currentProjectName;
if (t) {
var n = function(e, n) {
var a = $("<option>").attr("value", e.metadata.name).attr("selected", e.metadata.name === t);
return n ? a.text(h(e)) : a.text(y(e, v)), a;
};
_.size(g) <= 100 ? (v = e("orderByDisplayName")(g), P = _.map(v, function(e) {
return n(e, !1);
<<<<<<< HEAD
<<<<<<< HEAD
})) : y = [ n(l[t], !0) ], v.empty(), v.append(y), v.append($('<option data-divider="true"></option>')), v.append($('<option value="">View all Projects</option>')), v.selectpicker("refresh");
=======
})) : y = [ n(l[t], !0) ], h.empty(), h.append(y), h.append($('<option data-divider="true"></option>')), h.append($('<option value="">View All Projects</option>')), h.selectpicker("refresh");
>>>>>>> Add SVG icons
=======
})) : P = [ n(g[t], !0) ], w.empty(), w.append(P), w.append($('<option data-divider="true"></option>')), w.append($('<option value="">View All Projects</option>')), w.selectpicker("refresh");
>>>>>>> Add search catalog in project context
}
}, j = function() {
return m.list().then(function(e) {
g = e.by("metadata.name");
});
}, I = function() {
var e = r.project;
o.currentProjectName !== e && (o.currentProjectName = e, o.chromeless = "chromeless" === r.view, e && !o.chromeless ? (_.set(a, "view.hasProject", !0), o.canIAddToProject = !1, i.getProjectRules(e).then(function() {
o.currentProjectName === e && (o.canIAddToProject = i.canIAddToProject(e), o.canIAddToProject && c.getCatalogItems().then(function(e) {
o.catalogItems = e;
}));
}), j().then(function() {
o.currentProjectName && g && (g[o.currentProjectName] || (g[o.currentProjectName] = {
metadata: {
name: o.currentProjectName
}
}), o.currentProject = g[o.currentProjectName], k());
})) : _.set(a, "view.hasProject", !1));
}, R = function() {
o.orderingPanelVisible && f.addItem(_.get(o.selectedItem, "resource.metadata.uid"));
}, E = function(e) {
return "PartialObjectMetadata" === e.kind;
}, T = function(e) {
return E(e) ? u.get("templates", e.metadata.name, {
namespace: e.metadata.namespace
}) : n.when(e);
};
o.$on("open-overlay-panel", function(e, t) {
o.currentProjectName && (o.servicePlansForItem = null, o.orderKind = _.get(t, "kind"), "Template" !== o.orderKind ? "ClusterServiceClass" !== o.orderKind ? (o.selectedItem = t, o.orderingPanelVisible = !0) : s.getServicePlansForServiceClass(_.get(t, "resource.metadata.name")).then(function(e) {
o.servicePlansForItem = _.reject(e.by("metadata.name"), {
status: {
removedFromBrokerCatalog: !0
}
}), o.selectedItem = t, o.orderingPanelVisible = !0;
}) : T(t.resource).then(function(e) {
o.selectedItem = e, o.orderingPanelVisible = !0, o.orderKind = "Template";
}));
});
var N = a.$on("filter-catalog-items", function(e, n) {
if (o.currentProjectName) {
var a = {
filter: n.searchText
};
t.path("project/" + encodeURIComponent(o.currentProjectName) + "/project-browse-catalog").search(a);
}
});
o.closeOrderingPanel = function() {
f.addItem(_.get(o.selectedItem, "resource.metadata.uid")), o.orderingPanelVisible = !1;
}, I(), o.$on("$routeChangeSuccess", I), w.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : p(e);
o.$apply(function() {
t.url(n);
});
<<<<<<< HEAD
<<<<<<< HEAD
}), e.$on("project.settings.update", function(e, t) {
<<<<<<< HEAD
i[t.metadata.name] = t, d();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i[t.metadata.name] = t, p();
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
>>>>>>> Patternfly vertical navigation and project bar
=======
}), o.$on("$destroy", function() {
N(), R();
>>>>>>> Add search catalog in project context
});
}
}), N().then(function() {
i.currentProjectName && b && (b[i.currentProjectName] || (b[i.currentProjectName] = {
metadata: {
name: i.currentProjectName
}
}), i.currentProject = b[i.currentProjectName], E());
})) : _.set(r, "view.hasProject", !1);
}
}, A = function() {
i.orderingPanelVisible && y.addItem(_.get(i.selectedItem, "resource.metadata.uid"));
}, B = function(e) {
return "PartialObjectMetadata" === e.kind;
}, L = function(e) {
return B(e) ? d.get(P, e.metadata.name, {
namespace: e.metadata.namespace
}) : n.when(e);
};
i.$on("open-overlay-panel", function(e, t) {
i.currentProjectName && (i.servicePlansForItem = null, i.orderKind = _.get(t, "kind"), "Template" !== i.orderKind ? "ClusterServiceClass" !== i.orderKind ? o(function() {
i.selectedItem = t, i.orderingPanelVisible = !0;
}) : c.getServicePlansForServiceClass(_.get(t, "resource.metadata.name")).then(function(e) {
i.servicePlansForItem = _.reject(e.by("metadata.name"), {
status: {
removedFromBrokerCatalog: !0
}
}), i.selectedItem = t, i.orderingPanelVisible = !0;
}) : L(t.resource).then(function(e) {
i.selectedItem = e, i.orderingPanelVisible = !0, i.orderKind = "Template";
}));
});
var x = r.$on("filter-catalog-items", function(e, t) {
if (i.currentProjectName) {
var n = {
filter: t.searchText
};
<<<<<<< HEAD
m.toProjectCatalog(i.currentProjectName, n);
}
});
i.closeOrderingPanel = function() {
y.addItem(_.get(i.selectedItem, "resource.metadata.uid")), i.orderingPanelVisible = !1;
}, D(), i.$on("$routeChangeSuccess", D), R.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : f(e);
i.$apply(function() {
t.url(n);
});
}), i.$on("$destroy", function() {
x(), A();
=======
} ]).directive("projectFilter", [ "LabelFilter", function(e) {
return {
restrict: "E",
templateUrl: "views/directives/_project-filter.html",
link: function(t, n) {
e.setupFilterWidget(n.find(".navbar-filter-widget"), n.find(".active-filters"), {
addButtonText: "Add"
}), e.toggleFilterWidget(!t.renderOptions || !t.renderOptions.hideFilterWidget), t.$watch("renderOptions", function(t) {
e.toggleFilterWidget(!t || !t.hideFilterWidget);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
};
<<<<<<< HEAD
} ]).directive("projectFilter", [ "LabelFilter", "gettext", "gettextCatalog", function(e, t, n) {
return {
restrict: "E",
<<<<<<< HEAD
templateUrl: "views/directives/_project-filter.html",
link: function(r, a) {
e.setupFilterWidget(a.find(".navbar-filter-widget"), a.find(".active-filters"), {
addButtonText: n.getString(t("Add"))
}), e.toggleFilterWidget(!r.renderOptions || !r.renderOptions.hideFilterWidget), r.$watch("renderOptions", function(t) {
e.toggleFilterWidget(!t || !t.hideFilterWidget);
});
}
=======
transclude: !0,
templateUrl: "views/_project-page.html"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
=======
>>>>>>> Patternfly vertical navigation and project bar
} ]).directive("navbarUtility", function() {
return {
restrict: "E",
transclude: !0,
templateUrl: "views/directives/header/_navbar-utility.html",
controller: [ "$scope", "Constants", function(e, t) {
e.launcherApps = t.APP_LAUNCHER_NAVIGATION;
} ]
};
}).directive("navbarUtilityMobile", [ "$timeout", function(e) {
return {
restrict: "E",
<<<<<<< HEAD
transclude: !0,
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Patternfly vertical navigation and project bar
templateUrl: "views/directives/header/_navbar-utility-mobile.html",
link: function(t, n) {
e(function() {
var e = n.find("li");
e.addClass("list-group-item");
<<<<<<< HEAD
var r = {};
e.each(function(e, t) {
var n = $(t).find("a");
n.each(function(e, n) {
n.href && (r[n.href] = t);
=======
var a = {};
e.each(function(e, t) {
var n = $(t).find("a");
n.each(function(e, n) {
n.href && (a[n.href] = t);
>>>>>>> Patternfly vertical navigation and project bar
}), n.contents().filter(function() {
return 3 === this.nodeType && $.trim(this.nodeValue).length;
}).wrap('<span class="list-group-item-value"/>');
=======
scope: {
project: "=",
isDialog: "="
},
templateUrl: "views/directives/deploy-image.html",
controller: [ "$scope", function(e) {
e.forms = {}, e.noProjectsCantCreate = !1, e.input = {
selectedProject: e.project
}, e.$watch("input.selectedProject.metadata.name", function() {
e.projectNameTaken = !1;
});
} ],
link: function(n) {
function m() {
var e = p.mapEntries(p.compactEntries(n.labels));
return i.getResources({
name: n.app.name,
image: n.import.name,
namespace: n.import.namespace,
tag: n.import.tag || "latest",
ports: n.ports,
volumes: n.volumes,
env: p.compactEntries(n.env),
labels: e
});
}
n.mode = "istag", n.istag = {}, n.app = {}, n.env = [], n.labels = [ {
name: "app",
value: ""
} ], n.$on("no-projects-cannot-create", function() {
n.noProjectsCantCreate = !0;
});
var f = e("orderByDisplayName"), g = e("getErrorDetails"), v = {}, h = function() {
c.hideNotification("deploy-image-list-config-maps-error"), c.hideNotification("deploy-image-list-secrets-error"), _.each(v, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
>>>>>>> Correct ProjectNameTaken error handling in deployImage, processTemplate, and fromFile wizards
});
<<<<<<< HEAD
var a = function() {
e.removeClass("active");
var t = r[window.location.href];
t && $(t).addClass("active");
};
a(), t.$on("$routeChangeSuccess", a);
});
}
=======
templateUrl: "views/directives/header/_navbar-utility-mobile.html"
};
}).directive("defaultHeader", function() {
return {
restrict: "E",
transclude: !0,
templateUrl: "views/directives/header/default-header.html"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = function() {
e.removeClass("active");
var t = a[window.location.href];
t && $(t).addClass("active");
};
r(), t.$on("$routeChangeSuccess", r);
});
}
>>>>>>> Patternfly vertical navigation and project bar
};
<<<<<<< HEAD
} ]).directive("navPfVerticalAlt", function() {
return {
restrict: "EAC",
link: function() {
$.fn.navigation();
=======
t.then(o, o).then(E, E);
}, function(e) {
n.disableInputs = !1, "AlreadyExists" === e.data.reason ? n.projectNameTaken = !0 : c.addNotification({
id: "deploy-image-create-project-error",
type: "error",
message: "An error occurred creating project.",
details: g(e)
});
});
}, n.$on("newAppFromDeployImage", n.create), n.$on("$destroy", h);
>>>>>>> Correct ProjectNameTaken error handling in deployImage, processTemplate, and fromFile wizards
}
};
}).directive("breadcrumbs", function() {
return {
restrict: "E",
scope: {
breadcrumbs: "="
},
templateUrl: "views/directives/breadcrumbs.html"
};
}).directive("back", [ "$window", function(e) {
return {
restrict: "A",
link: function(t, n) {
n.bind("click", function() {
e.history.back();
});
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").component("alerts", {
bindings: {
alerts: "=",
filter: "<?",
hideCloseButton: "<?"
},
templateUrl: "components/alerts/alerts.html",
controller: function() {
var e = this;
e.close = function(e) {
e.hidden = !0, _.isFunction(e.onClose) && e.onClose();
}, e.onClick = function(t, n) {
_.isFunction(n.onClick) && n.onClick() && e.close(t);
};
}
}), function() {
angular.module("openshiftConsole").component("oscWebhookTriggers", {
controller: [ "$filter", "$scope", "$timeout", "$uibModal", "APIService", function(e, t, n, r, a) {
var o = this;
o.isDeprecated = function(t) {
var n = e("getWebhookSecretData")(t);
return _.has(n, "secret") && !_.has(n, "secretReference.name");
}, o.addEmptyWebhookTrigger = function() {
o.webhookTriggers.push({
lastTriggerType: "",
data: {
type: ""
}
});
var e = o.webhookTriggers.length - 1;
n(function() {
t.$broadcast("focus-index-" + e);
});
=======
} ]), angular.module("openshiftConsole").directive("alerts", function() {
return {
restrict: "E",
scope: {
alerts: "=",
filter: "=?",
animateSlide: "=?",
hideCloseButton: "=?",
toast: "=?"
},
templateUrl: "views/_alerts.html",
link: function(e) {
e.close = function(e) {
e.hidden = !0, _.isFunction(e.onClose) && e.onClose();
}, e.onClick = function(e, t) {
_.isFunction(t.onClick) && t.onClick() && (e.hidden = !0);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
var i = function(e) {
var t = _.get(e, "data.type");
if (t && !_.isNil(e.data[t.toLowerCase()])) {
var n = _.filter(o.webhookTriggers, function(t) {
return _.isEqual(t.data, e.data);
});
_.each(n, function(e, t) {
var n = 0 === t;
e.isDuplicate = !n;
});
}
}, s = function() {
_.isEmpty(o.webhookTriggers) ? o.addEmptyWebhookTrigger() : _.each(o.webhookTriggers, function(e) {
o.isDeprecated(e) && (e.secretInputType = "password"), e.isDuplicate || i(e);
});
};
o.$onInit = function() {
t.namespace = o.namespace, t.type = o.type, o.secretsVersion = a.getPreferredVersion("secrets"), o.webhookTypesOptions = [ {
type: "github",
label: "GitHub"
}, {
type: "gitlab",
label: "GitLab"
}, {
type: "bitbucket",
label: "Bitbucket"
}, {
type: "generic",
label: "Generic"
} ], s();
}, o.toggleSecretInputType = function(e) {
e.secretInputType = "password" === e.secretInputType ? "text" : "password";
}, o.removeWebhookTrigger = function(e, t) {
var n = _.clone(e);
if (1 === o.webhookTriggers.length) {
var r = _.first(o.webhookTriggers);
r.lastTriggerType = "", r.data = {
type: ""
};
} else o.webhookTriggers.splice(t, 1);
o.form.$setDirty(), i(n);
}, o.triggerTypeChange = function(e) {
var t = _.toLower(e.lastTriggerType), n = _.toLower(e.data.type);
e.data[n] = e.data[t], delete e.data[t], e.lastTriggerType = e.data.type, i(e);
}, o.triggerSecretChange = function(e) {
i(e);
}, o.openCreateWebhookSecretModal = function() {
r.open({
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
o.webhookSecrets.push(e);
});
};
} ],
controllerAs: "$ctrl",
bindings: {
webhookSecrets: "<",
namespace: "<",
type: "@",
webhookTriggers: "=",
form: "="
},
templateUrl: "components/osc-webhook-triggers/osc-webhook-triggers.html"
});
}(), angular.module("openshiftConsole").directive("parseError", function() {
return {
restrict: "E",
scope: {
error: "="
},
templateUrl: "views/_parse-error.html",
link: function(e) {
e.$watch("error", function() {
e.hidden = !1;
});
}
};
}), angular.module("openshiftConsole").directive("podWarnings", [ "podWarningsFilter", function(e) {
return {
restrict: "E",
scope: {
pod: "="
},
link: function(t) {
<<<<<<< HEAD
var n, r = "", a = e(t.pod);
for (n = 0; n < _.size(a); n++) r && (r += "<br>"), "error" === a[n].severity && (t.hasError = !0), r += a[n].message;
t.content = r;
=======
var n, a = "", r = e(t.pod);
for (n = 0; n < _.size(r); n++) a && (a += "<br>"), "error" === r[n].severity && (t.hasError = !0), a += r[n].message;
t.content = a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
templateUrl: "views/directives/_warnings-popover.html"
};
} ]).directive("routeWarnings", [ "RoutesService", function(e) {
return {
restrict: "E",
scope: {
route: "=",
services: "="
},
link: function(t) {
t.$watchGroup([ "route", "services" ], function() {
var n = e.getRouteWarnings(t.route, t.services);
t.content = _.map(n, _.escape).join("<br>");
});
},
templateUrl: "views/directives/_warnings-popover.html"
};
} ]), angular.module("openshiftConsole").directive("takeFocus", [ "$timeout", function(e) {
return {
restrict: "A",
link: function(t, n) {
e(function() {
$(n).focus();
}, 300);
}
};
<<<<<<< HEAD
} ]).directive("selectOnFocus", function() {
return {
restrict: "A",
link: function(e, t) {
$(t).focus(function() {
$(this).select();
});
}
<<<<<<< HEAD
=======
e.$on("$destroy", N);
var D = i.getPreferredVersion("configmaps"), A = i.getPreferredVersion("limitranges"), $ = i.getPreferredVersion("imagestreams"), B = i.getPreferredVersion("imagestreamtags"), L = i.getPreferredVersion("secrets"), U = i.getPreferredVersion("resourcequotas"), V = i.getPreferredVersion("appliedclusterresourcequotas");
v.get(a.project).then(_.spread(function(t, n) {
e.project = t, a.sourceURI && (e.sourceURIinParams = !0);
var i = function() {
e.hideCPU || (e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], t)), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], t);
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
};
}).directive("focusWhen", [ "$timeout", function(e) {
return {
restrict: "A",
scope: {
trigger: "@focusWhen"
},
link: function(t, n) {
t.$watch("trigger", function(t) {
t && e(function() {
$(n).focus();
=======
function k() {
var e = {
started: "Updating resources in project " + A(p.input.selectedProject),
success: "Updated resources in project " + A(p.input.selectedProject),
failure: "Failed to update some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.updateResources, {
namespace: p.input.selectedProject.metadata.name
}, "update").then(function(t) {
var n = [], a = !1;
if (t.failure.length > 0) a = !0, p.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot update " + j(e.object.kind) + ' "' + e.object.metadata.name + '". ',
details: e.data.message
>>>>>>> Bug 1505281 - Improve import YAML results message
});
});
}
};
<<<<<<< HEAD
} ]).directive("clickToReveal", function() {
return {
restrict: "A",
transclude: !0,
scope: {
linkText: "@"
=======
c.list(U, n).then(function(e) {
v = e.by("metadata.name"), m.log("quotas", v);
}), c.list(V, n).then(function(e) {
y = e.by("metadata.name"), m.log("cluster quotas", y);
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
I.value && I.value !== t || (I.value = e);
}), function(r) {
r.name = a.name, r.imageName = k, r.imageTag = a.imageTag, r.namespace = a.namespace, r.buildConfig = {
buildOnSourceChange: !0,
buildOnImageChange: !0,
buildOnConfigChange: !0,
secrets: {
gitSecret: [ {
name: ""
} ]
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
},
templateUrl: "views/directives/_click-to-reveal.html",
link: function(e, t) {
$(".reveal-contents-link", t).click(function() {
$(this).hide(), $(".reveal-contents", t).show();
});
}
};
}).directive("copyToClipboard", function() {
return {
restrict: "E",
scope: {
clipboardText: "=",
isDisabled: "=?",
displayWide: "=?",
inputText: "=?",
multiline: "=?"
},
templateUrl: "views/directives/_copy-to-clipboard.html",
controller: [ "$scope", function(e) {
e.id = _.uniqueId("clipboardJs");
} ],
link: function(e, t) {
<<<<<<< HEAD
var n = $("a", t), r = n.get(0);
e.inputText && (r = n.get(1));
var a = new Clipboard(r);
a.on("success", function(e) {
$(e.trigger).attr("title", "Copied!").tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle"), e.clearSelection();
}), a.on("error", function(e) {
var t = /Mac/i.test(navigator.userAgent) ? "Press ⌘C to copy" : "Press Ctrl-C to copy";
$(e.trigger).attr("title", t).tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle");
}), t.on("$destroy", function() {
a.destroy();
});
}
};
}).directive("copyLoginToClipboard", [ "AlertMessageService", "NotificationsService", function(e, t) {
return {
restrict: "E",
replace: !0,
scope: {
clipboardText: "="
},
template: '<a href="" data-clipboard-text="" translate>Copy Login Command</a>',
link: function(n, r) {
var a = new Clipboard(r.get(0));
a.on("success", function() {
t.addNotification({
id: "copy-login-command-success",
type: "success",
message: "Login command copied."
});
e.isAlertPermanentlyHidden("openshift/token-warning") || t.addNotification({
id: "openshift/token-warning",
type: "warning",
message: "A token is a form of a password. Do not share your API token.",
links: [ {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return e.permanentlyHideAlert("openshift/token-warning"), !0;
}
} ]
});
}), a.on("error", function() {
t.addNotification({
id: "copy-login-command-error",
type: "error",
message: "Unable to copy the login command."
});
}), r.on("$destroy", function() {
a.destroy();
});
}
<<<<<<< HEAD
=======
var P;
p.noProjectsCantCreate = !1;
var j = e("humanizeKind"), R = e("getErrorDetails");
d.clear(), p.$on("no-projects-cannot-create", function() {
p.noProjectsCantCreate = !0;
}), p.input = {
selectedProject: p.project
}, p.aceLoaded = function(e) {
(P = e.getSession()).setOption("tabSize", 2), P.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Bug 1505281 - Improve import YAML results message
};
} ]).directive("setHomePage", [ "$uibModal", function(e) {
return {
restrict: "E",
replace: !0,
template: '<a href="">Set Home Page</a>',
link: function(t, n) {
n.bind("click", function() {
e.open({
templateUrl: "views/modals/set-home-page-modal.html",
controller: "SetHomePageModalController"
});
=======
var n = $("a", t), a = n.get(0);
e.inputText && (a = n.get(1));
var r = new Clipboard(a);
r.on("success", function(e) {
$(e.trigger).attr("title", "Copied!").tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle"), e.clearSelection();
}), r.on("error", function(e) {
var t = /Mac/i.test(navigator.userAgent) ? "Press ⌘C to copy" : "Press Ctrl-C to copy";
$(e.trigger).attr("title", t).tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle");
}), t.on("$destroy", function() {
r.destroy();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
<<<<<<< HEAD
}
};
<<<<<<< HEAD
<<<<<<< HEAD
=======
}).directive("copyLoginToClipboard", [ "NotificationsService", function(e) {
=======
}).directive("copyLoginToClipboard", [ "AlertMessageService", "NotificationsService", function(e, t) {
>>>>>>> Let administrators disable "Copy Login Command"
return {
restrict: "E",
replace: !0,
scope: {
clipboardText: "="
},
template: '<a href="" data-clipboard-text="">Copy Login Command</a>',
link: function(n, a) {
var r = new Clipboard(a.get(0));
r.on("success", function() {
t.addNotification({
id: "copy-login-command-success",
=======
}(e);
var O, F = function() {
var t = {
started: "Creating application " + e.name + " in project " + e.projectDisplayName(),
success: "Created application " + e.name + " in project " + e.projectDisplayName(),
failure: "Failed to create " + e.name + " in project " + e.projectDisplayName()
}, o = {};
S.clear(), S.add(t, o, a.project, function() {
var t = r.defer();
return c.batch(O, n).then(function(n) {
var r = [], a = !1;
_.isEmpty(n.failure) ? r.push({
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
type: "success",
message: "Login command copied."
});
e.isAlertPermanentlyHidden("openshift/token-warning") || t.addNotification({
id: "openshift/token-warning",
type: "warning",
message: "A token is a form of a password. Do not share your API token.",
links: [ {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return e.permanentlyHideAlert("openshift/token-warning"), !0;
}
} ]
});
}), r.on("error", function() {
t.addNotification({
id: "copy-login-command-error",
type: "error",
message: "Unable to copy the login command."
});
}), a.on("$destroy", function() {
r.destroy();
});
}
};
>>>>>>> Add quick command to help dropdown
} ]).directive("shortId", function() {
return {
restrict: "E",
scope: {
id: "@"
},
template: '<code class="short-id" title="{{id}}">{{id.substring(0, 6)}}</code>'
};
}).directive("customIcon", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
resource: "=",
kind: "@",
tag: "=?"
},
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", function(t) {
t.$watchGroup([ "resource", "tag" ], function() {
t.tag ? t.icon = e("imageStreamTagAnnotation")(t.resource, "icon", t.tag) : t.icon = e("annotation")(t.resource, "icon"), t.icon && 0 === t.icon.indexOf("data:") ? t.image = t.icon : (t.tag ? t.icon = e("imageStreamTagIconClass")(t.resource, t.tag) : t.icon = e("iconClass")(t.resource, t.kind), t.image = e("imageForIconClass")(t.icon));
=======
controller: [ "$scope", "$filter", function(e, t) {
e.$watchGroup([ "resource", "tag" ], function() {
e.tag ? e.icon = t("imageStreamTagAnnotation")(e.resource, "icon", e.tag) : e.icon = t("annotation")(e.resource, "icon"), e.isDataIcon = e.icon && 0 === e.icon.indexOf("data:"), e.isDataIcon || (e.tag ? e.icon = t("imageStreamTagIconClass")(e.resource, e.tag) : e.icon = t("iconClass")(e.resource, e.kind));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
controller: [ "$scope", function(t) {
t.$watchGroup([ "resource", "tag" ], function() {
t.tag ? t.icon = e("imageStreamTagAnnotation")(t.resource, "icon", t.tag) : t.icon = e("annotation")(t.resource, "icon"), t.icon && 0 === t.icon.indexOf("data:") ? t.image = t.icon : (t.tag ? t.icon = e("imageStreamTagIconClass")(t.resource, t.tag) : t.icon = e("iconClass")(t.resource, t.kind), t.image = e("imageForIconClass")(t.icon));
>>>>>>> Add SVG icons
});
} ],
templateUrl: "views/directives/_custom-icon.html"
};
} ]).directive("bottomOfWindow", function() {
return {
restrict: "A",
link: function(e, t) {
function n() {
var e = $(window).height() - t[0].getBoundingClientRect().top;
t.css("height", e - 10 + "px");
}
$(window).on("resize", n), n(), t.on("$destroy", function() {
$(window).off("resize", n);
});
}
};
<<<<<<< HEAD
}).directive("onEnter", function() {
return function(e, t, n) {
t.bind("keydown keypress", function(t) {
13 === t.which && (e.$apply(function() {
e.$eval(n.onEnter);
}), t.preventDefault());
});
=======
e.projectDisplayName = function() {
return P(this.project) || this.projectName;
}, e.createApp = function() {
e.disableInputs = !0, N(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser), e.labels = w.mapEntries(w.compactEntries(e.labelArray));
var t = s.generate(e);
O = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), O.push(e));
});
var r = s.ifResourcesDontExist(O, e.projectName), a = h.getLatestQuotaAlerts(O, n), o = function(t) {
return e.nameTaken = t.nameTaken, a;
};
r.then(o, o).then(M, M);
};
})), e.cancel = function() {
f.toProjectOverview(e.projectName);
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
};
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Patternfly vertical navigation and project bar
}).directive("onEsc", function() {
return function(e, t, n) {
t.bind("keydown keypress", function(t) {
27 === t.which && (e.$apply(function() {
e.$eval(n.onEsc);
}), t.preventDefault());
});
};
<<<<<<< HEAD
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Patternfly vertical navigation and project bar
}).directive("persistTabState", [ "$routeParams", "$location", function(e, t) {
return {
restrict: "A",
scope: !1,
link: function(n) {
n.selectedTab = n.selectedTab || {}, n.$watch(function() {
return e.tab;
}, function(e) {
e && (n.selectedTab[e] = !0);
}), n.$watch("selectedTab", function() {
<<<<<<< HEAD
<<<<<<< HEAD
var e = _.keys(_.pickBy(n.selectedTab, function(e) {
return e;
}));
if (1 === e.length) {
var r = t.search();
r.tab = e[0], t.replace().search(r);
=======
var e = _.keys(_.pick(n.selectedTab, function(e) {
=======
var e = _.keys(_.pickBy(n.selectedTab, function(e) {
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
return e;
}));
if (1 === e.length) {
var a = t.search();
a.tab = e[0], t.replace().search(a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}, !0);
}
};
} ]), angular.module("openshiftConsole").directive("labels", [ "$location", "$timeout", "LabelFilter", function(e, t, n) {
return {
restrict: "E",
scope: {
labels: "=",
clickable: "@?",
kind: "@?",
projectName: "@?",
limit: "=?",
titleKind: "@?",
navigateUrl: "@?",
filterCurrentPage: "=?"
},
templateUrl: "views/directives/labels.html",
<<<<<<< HEAD
link: function(r) {
r.filterAndNavigate = function(a, o) {
r.kind && r.projectName && (r.filterCurrentPage || e.url(r.navigateUrl || "/project/" + r.projectName + "/browse/" + r.kind), t(function() {
var e = {};
e[a] = o, n.setLabelSelector(new LabelSelector(e, !0));
=======
link: function(a) {
a.filterAndNavigate = function(r, o) {
a.kind && a.projectName && (a.filterCurrentPage || e.url(a.navigateUrl || "/project/" + a.projectName + "/browse/" + a.kind), t(function() {
var e = {};
e[r] = o, n.setLabelSelector(new LabelSelector(e, !0));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, 1));
};
}
};
} ]).directive("labelEditor", function() {
function e(e) {
<<<<<<< HEAD
return !(e.length > o) && a.test(e);
}
function t(e) {
return !(e.length > r) && n.test(e);
}
var n = /^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$/, r = 63, a = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/, o = 253;
=======
return !(e.length > o) && r.test(e);
}
function t(e) {
return !(e.length > a) && n.test(e);
}
var n = /^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$/, a = 63, r = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/, o = 253;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
labels: "=",
<<<<<<< HEAD
<<<<<<< HEAD
=======
systemLabels: "=",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Let users edit app label directly for "add to project"
expand: "=?",
canToggle: "=?",
helpText: "@?"
},
templateUrl: "views/directives/label-editor.html",
link: function(e, t, n) {
angular.isDefined(n.canToggle) || (e.canToggle = !0);
},
controller: [ "$scope", function(n) {
<<<<<<< HEAD
var r = {
test: function(n) {
var r = n.split("/");
switch (r.length) {
case 1:
return t(r[0]);

case 2:
return e(r[0]) && t(r[1]);
=======
var a = {
test: function(n) {
var a = n.split("/");
switch (a.length) {
case 1:
return t(a[0]);

case 2:
return e(a[0]) && t(a[1]);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
return !1;
}
};
angular.extend(n, {
validator: {
<<<<<<< HEAD
key: r,
value: r
=======
key: a,
value: a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
});
} ]
};
}), angular.module("openshiftConsole").directive("editLifecycleHook", function() {
return {
restrict: "E",
scope: {
type: "@",
hookParams: "=model",
availableVolumes: "=",
availableContainers: "=",
availableSecrets: "=",
availableConfigMaps: "=",
namespace: "="
},
templateUrl: "views/directives/edit-lifecycle-hook.html",
controller: [ "$scope", function(e) {
e.view = {
isDisabled: !1
}, e.lifecycleHookFailurePolicyTypes = [ "Abort", "Retry", "Ignore" ], e.istagHook = {}, e.removedHookParams = {}, e.action = {
type: _.has(e.hookParams, "tagImages") ? "tagImages" : "execNewPod"
};
var t = {
command: [],
env: [],
volumes: [],
containerName: e.availableContainers[0] || ""
}, n = {
to: {},
containerName: e.availableContainers[0] || ""
<<<<<<< HEAD
}, r = function(t) {
=======
}, a = function(t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var n = {};
if (_.isEmpty(t)) n = {
namespace: e.namespace,
imageStream: "",
tagObject: null
}; else {
<<<<<<< HEAD
var r = t.name.split(":");
n = {
namespace: t.namespace || e.namespace,
imageStream: r[0],
tagObject: {
tag: r[1]
=======
var a = t.name.split(":");
n = {
namespace: t.namespace || e.namespace,
imageStream: a[0],
tagObject: {
tag: a[1]
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
};
}
return n;
<<<<<<< HEAD
}, a = function() {
"execNewPod" === e.action.type ? (_.has(e.removedHookParams, "execNewPod") ? e.hookParams.execNewPod = e.removedHookParams.execNewPod : e.hookParams.execNewPod = _.get(e, "hookParams.execNewPod", {}), e.hookParams.execNewPod = _.merge(angular.copy(t), e.hookParams.execNewPod)) : (_.has(e.removedHookParams, "tagImages") ? e.hookParams.tagImages = e.removedHookParams.tagImages : e.hookParams.tagImages = _.get(e, "hookParams.tagImages", [ {} ]), e.hookParams.tagImages = [ _.merge(angular.copy(n), e.hookParams.tagImages[0]) ], e.istagHook = r(_.head(e.hookParams.tagImages).to)), e.hookParams.failurePolicy = _.get(e.hookParams, "failurePolicy", "Abort");
};
e.addHook = function() {
_.isEmpty(e.removedHookParams) ? (e.hookParams = {}, a()) : e.hookParams = e.removedHookParams;
=======
}, r = function() {
"execNewPod" === e.action.type ? (_.has(e.removedHookParams, "execNewPod") ? e.hookParams.execNewPod = e.removedHookParams.execNewPod : e.hookParams.execNewPod = _.get(e, "hookParams.execNewPod", {}), e.hookParams.execNewPod = _.merge(angular.copy(t), e.hookParams.execNewPod)) : (_.has(e.removedHookParams, "tagImages") ? e.hookParams.tagImages = e.removedHookParams.tagImages : e.hookParams.tagImages = _.get(e, "hookParams.tagImages", [ {} ]), e.hookParams.tagImages = [ _.merge(angular.copy(n), e.hookParams.tagImages[0]) ], e.istagHook = a(_.head(e.hookParams.tagImages).to)), e.hookParams.failurePolicy = _.get(e.hookParams, "failurePolicy", "Abort");
};
e.addHook = function() {
_.isEmpty(e.removedHookParams) ? (e.hookParams = {}, r()) : e.hookParams = e.removedHookParams;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, e.removeHook = function() {
e.removedHookParams = e.hookParams, delete e.hookParams, e.editForm.$setDirty();
};
e.$watchGroup([ "hookParams", "action.type" ], function() {
<<<<<<< HEAD
e.hookParams && ("execNewPod" === e.action.type ? (e.hookParams.tagImages && (e.removedHookParams.tagImages = e.hookParams.tagImages, delete e.hookParams.tagImages), a()) : "tagImages" === e.action.type && (e.hookParams.execNewPod && (e.removedHookParams.execNewPod = e.hookParams.execNewPod, delete e.hookParams.execNewPod), a()));
}), e.valueFromObjects = [], e.$watchGroup([ "availableSecrets", "availableConfigMaps" ], function() {
var t = e.availableConfigMaps || [], n = e.availableSecrets || [];
e.valueFromObjects = t.concat(n);
=======
e.hookParams && ("execNewPod" === e.action.type ? (e.hookParams.tagImages && (e.removedHookParams.tagImages = e.hookParams.tagImages, delete e.hookParams.tagImages), r()) : "tagImages" === e.action.type && (e.hookParams.execNewPod && (e.removedHookParams.execNewPod = e.hookParams.execNewPod, delete e.hookParams.execNewPod), r()));
}), e.valueFromObjects = [], e.$watchGroup([ "availableSecrets", "availableConfigMaps" ], function() {
e.valueFromObjects = (e.availableSecrets || []).concat(e.availableConfigMaps);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}), e.$watch("istagHook.tagObject.tag", function() {
_.has(e.istagHook, [ "tagObject", "tag" ]) && (_.set(e.hookParams, "tagImages[0].to.kind", "ImageStreamTag"), _.set(e.hookParams, "tagImages[0].to.namespace", e.istagHook.namespace), _.set(e.hookParams, "tagImages[0].to.name", e.istagHook.imageStream + ":" + e.istagHook.tagObject.tag));
});
} ]
};
}).directive("lifecycleHook", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
deploymentConfig: "=",
type: "@"
},
templateUrl: "views/directives/lifecycle-hook.html",
link: function(t) {
t.$watch("deploymentConfig", function(n) {
t.strategyParams = e("deploymentStrategyParams")(n);
});
}
};
} ]), angular.module("openshiftConsole").directive("actionChip", function() {
return {
restrict: "E",
scope: {
key: "=?",
value: "=?",
keyHelp: "=?",
valueHelp: "=",
action: "&?",
actionIcon: "=?",
<<<<<<< HEAD
actionTitle: "@",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
showAction: "=?"
},
templateUrl: "views/directives/action-chip.html"
};
<<<<<<< HEAD
<<<<<<< HEAD
}), function() {
angular.module("openshiftConsole").component("addConfigToApplication", {
<<<<<<< HEAD
controller: [ "$filter", "$scope", "APIService", "ApplicationsService", "DataService", "Navigate", "NotificationsService", "StorageService", function(e, t, n, r, a, o, i, s) {
=======
controller: [ "$filter", "$scope", "APIService", "ApplicationsService", "DataService", "Navigate", "NotificationsService", "StorageService", function(e, t, n, a, r, o, i, s) {
>>>>>>> Show application kind when add to application dropdown is open
var c = this, l = e("humanizeKind"), u = function() {
var e = {
namespace: c.project.metadata.name
};
r.getApplications(e).then(function(e) {
c.applications = e, c.updating = !1;
});
};
c.$onInit = function() {
c.addType = "env", c.disableInputs = !1, u();
var e = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
c.hasInvalidEnvVars = _.some(c.apiObject.data, function(t, n) {
return !e.test(n);
});
};
var d = function(e) {
return c.attachAllContainers || c.attachContainers[e.name];
};
c.$postLink = function() {
t.$watch(function() {
return c.application;
}, function() {
var e = _.get(c.application, "spec.template");
c.existingMountPaths = s.getMountPaths(e), c.attachAllContainers = !0;
});
}, c.groupByKind = function(e) {
return l(e.kind);
}, c.addToApplication = function() {
var t = angular.copy(c.application), r = _.get(t, "spec.template");
if (c.disableInputs = !0, "env" === c.addType) {
var s = {};
switch (c.apiObject.kind) {
case "Secret":
s.secretRef = {
name: c.apiObject.metadata.name
};
break;

case "ConfigMap":
s.configMapRef = {
name: c.apiObject.metadata.name
=======
}), angular.module("openshiftConsole").directive("templateOptions", function() {
=======
}), function() {
angular.module("openshiftConsole").component("addConfigToApplication", {
controller: [ "$filter", "$scope", "APIService", "ApplicationsService", "DataService", "Navigate", "NotificationsService", "StorageService", function(e, t, n, a, r, o, i, s) {
var c = this, l = function() {
var e = {
namespace: c.project.metadata.name
};
<<<<<<< HEAD
a.getApplications(e).then(function(e) {
c.applications = e, c.updating = !1;
});
};
<<<<<<< HEAD
m.$onInit = function() {
m.addType = "env", m.disableInputs = !1, f();
<<<<<<< HEAD
}, m.$postLink = function() {
=======
=======
c.$onInit = function() {
c.addType = "env", c.disableInputs = !1, l();
<<<<<<< HEAD
>>>>>>> Use new ApplicationsService.getApplications utility
var e = new RegExp("^[A-Za-z_]{1}[A-Za-z0-9_]*$");
c.hasInvalidEnvVars = _.some(c.secret.data, function(t, n) {
=======
var e = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
c.hasInvalidEnvVars = _.some(c.apiObject.data, function(t, n) {
>>>>>>> "Add to Application" for config maps
return !e.test(n);
=======
}
_.each(a.spec.containers, function(e) {
d(e) && (e.envFrom = e.envFrom || [], e.envFrom.push(s));
});
} else {
var l = e("generateName")(c.apiObject.metadata.name + "-"), u = {
name: l,
mountPath: c.mountVolume,
readOnly: !0
};
_.each(a.spec.containers, function(e) {
d(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(u));
>>>>>>> Show application kind when add to application dropdown is open
});
<<<<<<< HEAD
=======
var m = {
name: l
>>>>>>> Support EnvFrom in the Env Editors
};
var u = function(e) {
return c.attachAllContainers || c.attachContainers[e.name];
};
<<<<<<< HEAD
m.$postLink = function() {
>>>>>>> Allow the user to select containers when adding a secret to an application
=======
c.$postLink = function() {
>>>>>>> Use new ApplicationsService.getApplications utility
t.$watch(function() {
return c.application;
}, function() {
var e = _.get(c.application, "spec.template");
c.existingMountPaths = s.getMountPaths(e), c.attachAllContainers = !0;
});
}, c.addToApplication = function() {
var t = angular.copy(c.application), a = _.get(t, "spec.template");
if (c.disableInputs = !0, "env" === c.addType) {
var s = {};
switch (c.apiObject.kind) {
case "Secret":
<<<<<<< HEAD
s.secretRef = {
name: c.apiObject.metadata.name
=======
m.secret = {
secretName: c.apiObject.metadata.name
>>>>>>> Support EnvFrom in the Env Editors
};
break;

case "ConfigMap":
<<<<<<< HEAD
s.configMapRef = {
name: c.apiObject.metadata.name
};
}
<<<<<<< HEAD
_.each(a.spec.containers, function(e) {
u(e) && (e.envFrom = e.envFrom || [], e.envFrom.push(s));
=======
c.envPrefix && (s.prefix = c.envPrefix), _.each(a.spec.containers, function(e) {
m(e) && !u(e) && (e.envFrom = e.envFrom || [], e.envFrom.push(s));
>>>>>>> Allow setting environment variable prefix when adding secret to application
});
} else {
var l = e("generateName")(c.apiObject.metadata.name + "-"), d = {
name: l,
mountPath: c.mountVolume,
readOnly: !0
};
_.each(a.spec.containers, function(e) {
u(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(d));
});
var p = {
name: l
};
switch (c.apiObject.kind) {
case "Secret":
p.secret = {
secretName: c.apiObject.metadata.name
};
break;

case "ConfigMap":
p.configMap = {
name: c.apiObject.metadata.name
};
}
a.spec.volumes = a.spec.volumes || [], a.spec.volumes.push(p);
}
var m = e("humanizeKind"), f = m(c.apiObject.kind), g = m(t.kind), h = {
=======
m.configMap = {
name: c.apiObject.metadata.name
};
}
a.spec.volumes = a.spec.volumes || [], a.spec.volumes.push(m);
}
<<<<<<< HEAD
var p = e("humanizeKind"), f = p(c.apiObject.kind), g = p(t.kind), h = {
>>>>>>> Support EnvFrom in the Env Editors
=======
var p = e("humanizeKind"), f = p(c.apiObject.kind), g = p(t.kind), v = {
>>>>>>> Add SVG icons
namespace: c.project.metadata.name
};
r.update(n.kindToResource(t.kind), t.metadata.name, t, v).then(function() {
i.addNotification({
type: "success",
message: "Successfully added " + f + " " + c.apiObject.metadata.name + " to " + g + " " + t.metadata.name + ".",
links: [ {
href: o.resourceURL(t),
label: "View " + p(t.kind, !0)
} ]
}), angular.isFunction(c.onComplete) && c.onComplete();
}, function(n) {
var a = e("getErrorDetails");
i.addNotification({
type: "error",
message: "An error occurred  adding " + f + " " + c.apiObject.metadata.name + " to " + g + " " + t.metadata.name + ". " + a(n)
});
}).finally(function() {
c.disableInputs = !1;
});
};
} ],
controllerAs: "ctrl",
bindings: {
project: "<",
apiObject: "<",
onComplete: "<",
onCancel: "<"
},
templateUrl: "views/directives/add-config-to-application.html"
});
}(), angular.module("openshiftConsole").directive("templateOptions", function() {
>>>>>>> Add the ability to add a secret to an application
return {
restrict: "E",
templateUrl: "views/_templateopt.html",
transclude: !0,
scope: {
parameters: "=",
expand: "=?",
canToggle: "=?",
isDialog: "=?"
},
link: function(e, t, n) {
angular.isDefined(n.canToggle) || (e.canToggle = !0), e.isOnlyWhitespace = function(e) {
return /^\s+$/.test(e);
}, e.focus = function(e) {
angular.element("#" + e).focus();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
c.envPrefix && (s.prefix = c.envPrefix), _.each(r.spec.containers, function(e) {
d(e) && (e.envFrom = e.envFrom || [], e.envFrom.push(s));
});
} else {
var l = e("generateName")(c.apiObject.metadata.name + "-"), u = {
name: l,
mountPath: c.mountVolume,
readOnly: !0
};
<<<<<<< HEAD
_.each(r.spec.containers, function(e) {
d(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(u));
});
var m = {
name: l
};
switch (c.apiObject.kind) {
case "Secret":
m.secret = {
secretName: c.apiObject.metadata.name
};
break;

case "ConfigMap":
m.configMap = {
name: c.apiObject.metadata.name
};
}
r.spec.volumes = r.spec.volumes || [], r.spec.volumes.push(m);
}
var p = e("humanizeKind"), g = p(c.apiObject.kind), f = p(t.kind), v = {
namespace: c.project.metadata.name
};
a.update(n.kindToResource(t.kind), t.metadata.name, t, v).then(function() {
i.addNotification({
type: "success",
message: "Successfully added " + g + " " + c.apiObject.metadata.name + " to " + f + " " + t.metadata.name + ".",
links: [ {
href: o.resourceURL(t),
label: "View " + m(t.kind, !0)
} ]
}), angular.isFunction(c.onComplete) && c.onComplete();
}, function(n) {
var r = e("getErrorDetails");
i.addNotification({
type: "error",
message: "An error occurred  adding " + g + " " + c.apiObject.metadata.name + " to " + f + " " + t.metadata.name + ". " + r(n)
});
}).finally(function() {
c.disableInputs = !1;
});
};
} ],
controllerAs: "ctrl",
bindings: {
project: "<",
apiObject: "<",
onComplete: "<",
onCancel: "<"
},
templateUrl: "views/directives/add-config-to-application.html"
});
}(), angular.module("openshiftConsole").directive("templateOptions", [ "gettext", function(e) {
return {
restrict: "E",
templateUrl: "views/_templateopt.html",
transclude: !0,
scope: {
parameters: "=",
expand: "=?",
canToggle: "=?",
isDialog: "=?"
},
link: function(t, n, r) {
angular.isDefined(r.canToggle) || (t.canToggle = !0), t.isOnlyWhitespace = function(e) {
return /^\s+$/.test(e);
}, t.focus = function(e) {
angular.element("#" + e).focus();
}, t.singleText = e("Collapse to a single line input This may strip any new lines you have entered."), t.multiText = e("Expand to enter multiple lines of content. This is required if you need to include newline characters.");
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("catalog", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, r) {
return {
restrict: "E",
scope: {
projectImageStreams: "=",
openshiftImageStreams: "=",
projectTemplates: "=",
openshiftTemplates: "=",
projectName: "=",
parentCategory: "=category"
},
templateUrl: "views/catalog/catalog.html",
link: function(a) {
function o() {
var t = a.keywords = n.generateKeywords(a.filter.keyword);
if (_.isEmpty(t)) return a.filterActive = !1, a.filteredBuildersByCategory = a.buildersByCategory, void (a.filteredTemplatesByCategory = a.templatesByCategory);
a.filterActive = !0, a.filteredBuildersByCategory = {}, _.each(a.buildersByCategory, function(n, r) {
var o = e.getCategoryItem(r), i = _.reject(t, function(e) {
return e.test(o.label);
});
a.filteredBuildersByCategory[r] = e.filterImageStreams(n, i);
}), a.filteredBuildersNoSubcategory = e.filterImageStreams(a.buildersNoSubcategory, t), a.filteredTemplatesByCategory = {}, _.each(a.templatesByCategory, function(n, r) {
var o = e.getCategoryItem(r), i = _.reject(t, function(e) {
return e.test(o.label);
});
a.filteredTemplatesByCategory[r] = e.filterTemplates(n, i);
}), a.filteredTemplatesNoSubcategory = e.filterTemplates(a.templatesNoSubcategory, t);
}
function i(e) {
var t = _.get(a, "parentCategory.subcategories", []);
=======
}), angular.module("openshiftConsole").directive("tasks", function() {
return {
restrict: "E",
templateUrl: "views/_tasks.html"
};
=======
>>>>>>> Improving display of results status messages and removing orphaned tasks directive
}), angular.module("openshiftConsole").directive("catalog", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, a) {
return {
restrict: "E",
scope: {
projectImageStreams: "=",
openshiftImageStreams: "=",
projectTemplates: "=",
openshiftTemplates: "=",
projectName: "=",
parentCategory: "=category"
},
templateUrl: "views/catalog/catalog.html",
link: function(r) {
function o() {
var t = r.keywords = n.generateKeywords(r.filter.keyword);
if (_.isEmpty(t)) return r.filterActive = !1, r.filteredBuildersByCategory = r.buildersByCategory, void (r.filteredTemplatesByCategory = r.templatesByCategory);
r.filterActive = !0, r.filteredBuildersByCategory = {}, _.each(r.buildersByCategory, function(n, a) {
var o = e.getCategoryItem(a), i = _.reject(t, function(e) {
return e.test(o.label);
});
r.filteredBuildersByCategory[a] = e.filterImageStreams(n, i);
}), r.filteredBuildersNoSubcategory = e.filterImageStreams(r.buildersNoSubcategory, t), r.filteredTemplatesByCategory = {}, _.each(r.templatesByCategory, function(n, a) {
var o = e.getCategoryItem(a), i = _.reject(t, function(e) {
return e.test(o.label);
});
r.filteredTemplatesByCategory[a] = e.filterTemplates(n, i);
}), r.filteredTemplatesNoSubcategory = e.filterTemplates(r.templatesNoSubcategory, t);
}
function i(e) {
var t = _.get(r, "parentCategory.subcategories", []);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
if (_.isEmpty(t)) return [];
var n = {};
_.each(t, function(t) {
_.each(t.items, function(t) {
_.each(e[t.id], function(e) {
var t = _.get(e, "metadata.uid");
n[t] = !0;
});
});
});
<<<<<<< HEAD
var r = a.parentCategory.id;
return _.reject(e[r], function(e) {
var t = _.get(e, "metadata.uid");
return !!n[t];
});
}
function s() {
a.noFilterMatches = !0, u = [];
var e = {};
_.each(a.filteredBuildersByCategory, function(t, n) {
e[n] = _.size(t);
}), _.each(a.filteredTemplatesByCategory, function(t, n) {
e[n] = (e[n] || 0) + _.size(t);
}), a.allContentHidden = !0, _.each(a.categories, function(t) {
var n = !1;
_.each(t.items, function(t) {
e[t.id] && (u.push(t), n = !0);
}), _.set(a, [ "hasContent", t.id ], n), n && (a.allContentHidden = !1);
}), a.countByCategory = e, a.hasItemsNoSubcategory = !_.isEmpty(a.buildersNoSubcategory) || !_.isEmpty(a.templatesNoSubcategory), a.countFilteredNoSubcategory = _.size(a.filteredBuildersNoSubcategory) + _.size(a.filteredTemplatesNoSubcategory), a.countFilteredNoSubcategory && (a.allContentHidden = !1);
}
function c() {
return !!a.parentCategory && (1 === u.length && !a.hasItemsNoSubcategory);
}
function l() {
a.loaded = a.projectTemplates && a.openshiftTemplates && a.projectImageStreams && a.openshiftImageStreams, o(), s(), a.loaded && (c() && (a.singleCategory = _.head(u)), r.log("templates by category", a.templatesByCategory), r.log("builder images", a.buildersByCategory));
}
a.categories = _.get(a, "parentCategory.subcategories", t.CATALOG_CATEGORIES), a.loaded = !1, a.emptyCatalog = !0, a.filter = {
keyword: ""
}, a.$watch("filter.keyword", _.debounce(function() {
a.$apply(function() {
=======
var a = r.parentCategory.id;
return _.reject(e[a], function(e) {
var t = _.get(e, "metadata.uid");
return !!n[t];
});
}
function s() {
r.noFilterMatches = !0, u = [];
var e = {};
_.each(r.filteredBuildersByCategory, function(t, n) {
e[n] = _.size(t);
}), _.each(r.filteredTemplatesByCategory, function(t, n) {
e[n] = (e[n] || 0) + _.size(t);
}), r.allContentHidden = !0, _.each(r.categories, function(t) {
var n = !1;
_.each(t.items, function(t) {
e[t.id] && (u.push(t), n = !0);
}), _.set(r, [ "hasContent", t.id ], n), n && (r.allContentHidden = !1);
}), r.countByCategory = e, r.hasItemsNoSubcategory = !_.isEmpty(r.buildersNoSubcategory) || !_.isEmpty(r.templatesNoSubcategory), r.countFilteredNoSubcategory = _.size(r.filteredBuildersNoSubcategory) + _.size(r.filteredTemplatesNoSubcategory), r.countFilteredNoSubcategory && (r.allContentHidden = !1);
}
function c() {
return !!r.parentCategory && (1 === u.length && !r.hasItemsNoSubcategory);
}
function l() {
r.loaded = r.projectTemplates && r.openshiftTemplates && r.projectImageStreams && r.openshiftImageStreams, o(), s(), r.loaded && (c() && (r.singleCategory = _.head(u)), a.log("templates by category", r.templatesByCategory), a.log("builder images", r.buildersByCategory));
}
r.categories = _.get(r, "parentCategory.subcategories", t.CATALOG_CATEGORIES), r.loaded = !1, r.emptyCatalog = !0, r.filter = {
keyword: ""
}, r.$watch("filter.keyword", _.debounce(function() {
r.$apply(function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
o(), s();
});
}, 200, {
maxWait: 1e3,
trailing: !0
}));
var u;
<<<<<<< HEAD
a.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], function() {
if (a.projectImageStreams && a.openshiftImageStreams) {
var t = _.toArray(a.projectImageStreams).concat(_.toArray(a.openshiftImageStreams));
a.buildersByCategory = e.categorizeImageStreams(t), a.buildersNoSubcategory = i(a.buildersByCategory), a.emptyCatalog = a.emptyCatalog && _.every(a.buildersByCategory, _.isEmpty) && _.isEmpty(a.buildersNoSubcategory), l();
}
}), a.$watchGroup([ "openshiftTemplates", "projectTemplates" ], function() {
if (a.projectTemplates && a.openshiftTemplates) {
var t = _.toArray(a.projectTemplates).concat(_.toArray(a.openshiftTemplates));
a.templatesByCategory = e.categorizeTemplates(t), a.templatesNoSubcategory = i(a.templatesByCategory), a.emptyCatalog = a.emptyCatalog && _.every(a.templatesByCategory, _.isEmpty) && _.isEmpty(a.templatesNoSubcategory), l();
}
});
}
};
} ]), angular.module("openshiftConsole").directive("categoryContent", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, r) {
=======
r.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], function() {
if (r.projectImageStreams && r.openshiftImageStreams) {
var t = _.toArray(r.projectImageStreams).concat(_.toArray(r.openshiftImageStreams));
r.buildersByCategory = e.categorizeImageStreams(t), r.buildersNoSubcategory = i(r.buildersByCategory), r.emptyCatalog = r.emptyCatalog && _.every(r.buildersByCategory, _.isEmpty) && _.isEmpty(r.buildersNoSubcategory), l();
}
}), r.$watchGroup([ "openshiftTemplates", "projectTemplates" ], function() {
if (r.projectTemplates && r.openshiftTemplates) {
var t = _.toArray(r.projectTemplates).concat(_.toArray(r.openshiftTemplates));
r.templatesByCategory = e.categorizeTemplates(t), r.templatesNoSubcategory = i(r.templatesByCategory), r.emptyCatalog = r.emptyCatalog && _.every(r.templatesByCategory, _.isEmpty) && _.isEmpty(r.templatesNoSubcategory), l();
}
});
}
};
} ]), angular.module("openshiftConsole").directive("categoryContent", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
projectImageStreams: "=",
openshiftImageStreams: "=",
projectTemplates: "=",
openshiftTemplates: "=",
projectName: "=",
category: "="
},
templateUrl: "views/catalog/category-content.html",
link: function(t) {
<<<<<<< HEAD
function a() {
var r = t.keywords = n.generateKeywords(t.filter.keyword);
t.filteredBuilderImages = e.filterImageStreams(c, r), t.filteredTemplates = e.filterTemplates(l, r);
=======
function r() {
var a = t.keywords = n.generateKeywords(t.filter.keyword);
t.filteredBuilderImages = e.filterImageStreams(c, a), t.filteredTemplates = e.filterTemplates(l, a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
function o() {
return t.projectImageStreams && t.openshiftImageStreams ? _.toArray(t.projectImageStreams).concat(_.toArray(t.openshiftImageStreams)) : [];
}
function i() {
return t.projectTemplates && t.openshiftTemplates ? _.toArray(t.projectTemplates).concat(_.toArray(t.openshiftTemplates)) : [];
}
function s() {
<<<<<<< HEAD
t.loaded = t.projectTemplates && t.openshiftTemplates && t.projectImageStreams && t.openshiftImageStreams, a(), t.emptyCategory = _.isEmpty(c) && _.isEmpty(l), t.loaded && (r.log("templates", l), r.log("builder images", c));
=======
t.loaded = t.projectTemplates && t.openshiftTemplates && t.projectImageStreams && t.openshiftImageStreams, r(), t.emptyCategory = _.isEmpty(c) && _.isEmpty(l), t.loaded && (a.log("templates", l), a.log("builder images", c));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
var c = [], l = [];
t.filteredTemplates = [], t.filteredBuilderImages = [], t.loaded = !1, t.filter = {
keyword: ""
<<<<<<< HEAD
}, t.$watch("filter.keyword", a), t.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], function() {
=======
}, t.$watch("filter.keyword", r), t.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var n = e.categorizeImageStreams(o());
c = _.get(n, [ t.category.id ], []), s();
}), t.$watchGroup([ "openshiftTemplates", "projectTemplates" ], function() {
var n = e.categorizeTemplates(i());
l = _.get(n, [ t.category.id ], []), s();
});
}
};
} ]), angular.module("openshiftConsole").directive("catalogImage", [ "$filter", "CatalogService", function(e, t) {
return {
restrict: "E",
replace: !0,
scope: {
image: "=",
imageStream: "=",
project: "@",
isBuilder: "=?",
keywords: "="
},
templateUrl: "views/catalog/_image.html",
link: function(n) {
<<<<<<< HEAD
var r = e("imageStreamTagTags"), a = {};
n.referencedBy = {};
var o = _.get(n, "imageStream.spec.tags", []), i = {};
_.each(o, function(e) {
i[e.name] = r(n.imageStream, e.name), t.referencesSameImageStream(e) && (a[e.name] = !0, n.referencedBy[e.from.name] = n.referencedBy[e.from.name] || [], n.referencedBy[e.from.name].push(e.name));
=======
var a = e("imageStreamTagTags"), r = {};
n.referencedBy = {};
var o = _.get(n, "imageStream.spec.tags", []), i = {};
_.each(o, function(e) {
i[e.name] = a(n.imageStream, e.name), t.referencesSameImageStream(e) && (r[e.name] = !0, n.referencedBy[e.from.name] = n.referencedBy[e.from.name] || [], n.referencedBy[e.from.name].push(e.name));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
var s = function(e) {
var t = _.get(i, [ e ], []);
return _.includes(t, "builder") && !_.includes(t, "hidden");
};
n.$watch("imageStream.status.tags", function(e) {
n.tags = _.filter(e, function(e) {
<<<<<<< HEAD
return s(e.tag) && !a[e.tag];
=======
return s(e.tag) && !r[e.tag];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
var t = _.get(n, "is.tag.tag");
t && _.some(n.tags, {
tag: t
}) || _.set(n, "is.tag", _.head(n.tags));
});
}
};
} ]), angular.module("openshiftConsole").directive("catalogTemplate", function() {
return {
restrict: "E",
replace: !0,
scope: {
template: "=",
project: "@",
keywords: "="
},
templateUrl: "views/catalog/_template.html"
};
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("podMetrics", [ "$filter", "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", "usageValueFilter", "gettext", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
=======
}), angular.module("openshiftConsole").directive("podMetrics", [ "$filter", "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", "usageValueFilter", function(e, t, n, a, r, o, i, s, c, l, u, d) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
pod: "=",
includedMetrics: "=?",
stackDonut: "=?",
alerts: "=?"
},
templateUrl: "views/directives/pod-metrics.html",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
link: function(p) {
function g(e) {
if (!p.pod) return null;
var t = p.options.selectedContainer;
=======
=======
>>>>>>> Support EnvFrom in the Env Editors
link: function(m) {
function p(e) {
if (!m.pod) return null;
var t = m.options.selectedContainer;
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
link: function(p) {
function m(e) {
if (!p.pod) return null;
var t = p.options.selectedContainer;
>>>>>>> Updates for Service Instance & Bindings
=======
>>>>>>> Support EnvFrom in the Env Editors
switch (e) {
case "memory/usage":
var n = T(t);
if (n) return s.bytesToMiB(d(n));
break;

case "cpu/usage_rate":
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var r = D(t);
if (r) return d(r);
}
return null;
}
function f(e) {
var t = _.head(e.datasets);
if (t.total) {
var n, a = {
=======
var a = D(t);
=======
var a = N(t);
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
var a = D(t);
>>>>>>> Add bindings list to resource pages
=======
var a = N(t);
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
var a = I(t);
>>>>>>> Add notification-drawer to show curated list of events to user
=======
var a = N(t);
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
var a = N(t);
>>>>>>> Adjust events to show in the drawer
=======
var a = E(t);
>>>>>>> Quota Notifications
=======
var a = N(t);
>>>>>>> Support EnvFrom in the Env Editors
=======
var a = T(t);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var a = N(t);
>>>>>>> Update template service broker flag name
if (a) return d(a);
}
return null;
}
function f(e) {
var t = _.head(e.datasets);
if (t.total) {
var n, r = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "donut",
columns: [ [ "Used", t.used ], [ "Available", Math.max(t.available, 0) ] ],
colors: {
Used: t.available > 0 ? "#0088ce" : "#ec7a08",
Available: "#d1d1d1"
}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
T[t.id] ? T[t.id].load(a) : ((n = L(e)).data = a, r(function() {
=======
T[t.id] ? T[t.id].load(r) : ((n = A(e)).data = r, a(function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
T[t.id] ? T[t.id].load(r) : ((n = B(e)).data = r, a(function() {
>>>>>>> Improve YAML editor validation and feedback
=======
T[t.id] ? T[t.id].load(r) : ((n = A(e)).data = r, a(function() {
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
$ || (T[t.id] = c3.generate(n));
=======
E[t.id] ? E[t.id].load(r) : ((n = B(e)).data = r, a(function() {
$ || (E[t.id] = c3.generate(n));
>>>>>>> Add bindings list to resource pages
=======
T[t.id] ? T[t.id].load(r) : ((n = B(e)).data = r, a(function() {
$ || (T[t.id] = c3.generate(n));
>>>>>>> Add the ability to add a secret to an application
=======
I[t.id] ? I[t.id].load(r) : ((n = B(e)).data = r, a(function() {
<<<<<<< HEAD
$ || (I[t.id] = c3.generate(n));
>>>>>>> Updates for Service Instance & Bindings
=======
A || (I[t.id] = c3.generate(n));
>>>>>>> Let administrators disable "Copy Login Command"
=======
R[t.id] ? R[t.id].load(r) : ((n = B(e)).data = r, a(function() {
A || (R[t.id] = c3.generate(n));
>>>>>>> Add search catalog in project context
}));
}
}
<<<<<<< HEAD
<<<<<<< HEAD
function v(e) {
=======
function f(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
function g(e) {
>>>>>>> Patternfly vertical navigation and project bar
if (!_.some(e.datasets, function(e) {
return !e.data;
})) {
var t = {};
_.each(e.datasets, function(e) {
t[e.id] = e.data;
});
<<<<<<< HEAD
var n, a = c.getSparklineData(t), o = e.chartPrefix + "sparkline";
E[o] ? E[o].load(a) : ((n = x(e)).data = a, e.chartDataColors && (n.color = {
pattern: e.chartDataColors
}), r(function() {
=======
var n, r = c.getSparklineData(t), o = e.chartPrefix + "sparkline";
E[o] ? E[o].load(r) : ((n = L(e)).data = r, e.chartDataColors && (n.color = {
pattern: e.chartDataColors
}), a(function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
$ || (E[o] = c3.generate(n));
=======
$ || (T[o] = c3.generate(n));
>>>>>>> Add bindings list to resource pages
=======
$ || (E[o] = c3.generate(n));
>>>>>>> Add the ability to add a secret to an application
=======
$ || (I[o] = c3.generate(n));
>>>>>>> Enable new landing page experience by default
=======
$ || (T[o] = c3.generate(n));
>>>>>>> Updates for Service Instance & Bindings
=======
A || (T[o] = c3.generate(n));
>>>>>>> Let administrators disable "Copy Login Command"
=======
A || (E[o] = c3.generate(n));
>>>>>>> Support EnvFrom in the Env Editors
}));
}
}
<<<<<<< HEAD
function h() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return "-" + p.options.timeRange.value + "mn";
}
function y() {
return 60 * p.options.timeRange.value * 1e3;
}
function b() {
return Math.floor(y() / A) + "ms";
}
function S(e, t, n) {
var r, a = {
metric: t.id,
type: t.type,
bucketDuration: b()
};
return t.data && t.data.length ? (r = _.last(t.data), a.start = r.end) : a.start = n, p.pod ? _.assign(a, {
namespace: p.pod.metadata.namespace,
pod: p.pod,
containerName: e.containerMetric ? p.options.selectedContainer.name : "pod"
}) : null;
}
function C() {
$ || (V = 0, _.each(p.metrics, function(e) {
v(e), f(e);
}));
}
function w(e) {
if (!$) if (V++, p.noData) p.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(V < 2)) {
var t = "metrics-failed-" + p.uniqueID;
p.alerts[t] = {
type: "error",
message: "An error occurred updating metrics for pod " + _.get(p, "pod.metadata.name", "<unknown>") + ".",
=======
=======
function v() {
>>>>>>> Add SVG icons
return "-" + m.options.timeRange.value + "mn";
=======
return "-" + p.options.timeRange.value + "mn";
>>>>>>> Updates for Service Instance & Bindings
=======
return "-" + m.options.timeRange.value + "mn";
>>>>>>> Support EnvFrom in the Env Editors
}
function h() {
return 60 * m.options.timeRange.value * 1e3;
}
function y() {
return Math.floor(h() / D) + "ms";
}
function b(e, t, n) {
var a, r = {
metric: t.id,
type: t.type,
bucketDuration: y()
};
return t.data && t.data.length ? (a = _.last(t.data), r.start = a.end) : r.start = n, m.pod ? _.assign(r, {
namespace: m.pod.metadata.namespace,
pod: m.pod,
containerName: e.containerMetric ? m.options.selectedContainer.name : "pod"
}) : null;
}
function S() {
A || (U = 0, _.each(m.metrics, function(e) {
g(e), f(e);
}));
}
function C(e) {
if (!A) if (U++, m.noData) m.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(U < 2)) {
var t = "metrics-failed-" + m.uniqueID;
m.alerts[t] = {
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
message: "An error occurred updating metrics for pod " + _.get(m, "pod.metadata.name", "<unknown>") + ".",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "An error occurred updating metrics for pod " + _.get(p, "pod.metadata.name", "<unknown>") + ".",
>>>>>>> Updates for Service Instance & Bindings
=======
message: "An error occurred updating metrics for pod " + _.get(m, "pod.metadata.name", "<unknown>") + ".",
>>>>>>> Support EnvFrom in the Env Editors
links: [ {
href: "",
label: "Retry",
onClick: function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
delete p.alerts[t], V = 1, I();
=======
delete m.alerts[t], U = 1, R();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
delete m.alerts[t], U = 1, P();
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
delete p.alerts[t], U = 1, P();
>>>>>>> Updates for Service Instance & Bindings
=======
delete m.alerts[t], U = 1, P();
>>>>>>> Support EnvFrom in the Env Editors
=======
delete m.alerts[t], U = 1, j();
>>>>>>> Service instance details configuration and edit
=======
delete m.alerts[t], U = 1, P();
>>>>>>> Add product icons for service catalog
=======
delete m.alerts[t], U = 1, j();
>>>>>>> Handle displaying parameters when secrets are not available.
=======
delete m.alerts[t], U = 1, P();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
delete m.alerts[t], U = 1, j();
>>>>>>> Update template service broker flag name
}
<<<<<<< HEAD
} ]
=======
var k;
p.noProjectsCantCreate = !1;
var j = e("humanizeKind"), I = e("getErrorDetails");
d.clear(), p.$on("no-projects-cannot-create", function() {
p.noProjectsCantCreate = !0;
}), p.input = {
selectedProject: p.project
}, p.$watch("input.selectedProject.metadata.name", function() {
p.projectNameTaken = !1;
}), p.aceLoaded = function(e) {
(k = e.getSession()).setOption("tabSize", 2), k.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
};
var R = function(e) {
r.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
message: "We checked your application for potential problems. Please confirm you still want to create this application.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}
}
<<<<<<< HEAD
function P() {
return !(p.metricsError || V > 1) && (p.pod && _.get(p, "options.selectedContainer"));
}
function j(e, t, n) {
t.total = g(t.id), t.total && (p.hasLimits = !0);
var r = _.get(n, "usage.value");
isNaN(r) && (r = 0), e.convert && (r = e.convert(r)), t.used = d3.round(r, e.usagePrecision), t.total && (t.available = d3.round(t.total - r, e.usagePrecision)), e.totalUsed += t.used;
}
function k(e, t) {
p.noData = !1;
var n = _.initial(t.data);
e.data ? e.data = _.chain(e.data).takeRight(A).concat(n).value() : e.data = n;
}
function I() {
if (P()) {
var e = h(), t = [];
angular.forEach(p.metrics, function(n) {
var r = [];
n.totalUsed = 0, angular.forEach(n.datasets, function(a) {
var o = S(n, a, e);
if (o) {
var i = l.get(o);
r.push(i), g(a.id) && t.push(l.getCurrentUsage(o).then(function(e) {
j(n, a, e);
}));
}
}), t = t.concat(r), a.all(r).then(function(e) {
$ || angular.forEach(e, function(e) {
e && k(_.find(n.datasets, {
=======
function w() {
return !(m.metricsError || U > 1) && (m.pod && _.get(m, "options.selectedContainer"));
}
function P(e, t, n) {
t.total = p(t.id), t.total && (m.hasLimits = !0);
var a = _.get(n, "usage.value");
isNaN(a) && (a = 0), e.convert && (a = e.convert(a)), t.used = d3.round(a, e.usagePrecision), t.total && (t.available = d3.round(t.total - a, e.usagePrecision)), e.totalUsed += t.used;
}
function k(e, t) {
m.noData = !1;
var n = _.initial(t.data);
e.data ? e.data = _.chain(e.data).takeRight(D).concat(n).value() : e.data = n;
}
function j() {
if (w()) {
var e = v(), t = [];
angular.forEach(m.metrics, function(n) {
var a = [];
n.totalUsed = 0, angular.forEach(n.datasets, function(r) {
var o = b(n, r, e);
if (o) {
var i = l.get(o);
a.push(i), p(r.id) && t.push(l.getCurrentUsage(o).then(function(e) {
P(n, r, e);
}));
}
}), t = t.concat(a), r.all(a).then(function(e) {
A || angular.forEach(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e && j(_.find(n.datasets, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e && P(_.find(n.datasets, {
>>>>>>> Service instance details configuration and edit
=======
e && j(_.find(n.datasets, {
>>>>>>> Add product icons for service catalog
=======
e && P(_.find(n.datasets, {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
e && j(_.find(n.datasets, {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
e && P(_.find(n.datasets, {
>>>>>>> Update template service broker flag name
=======
e && k(_.find(n.datasets, {
>>>>>>> Fix for adding non-builder templates to a project
=======
e && k(_.find(n.datasets, {
>>>>>>> Update pod controller to use getPreferredVersion
id: e.metricID
}), e);
});
<<<<<<< HEAD
=======
}, N = function(e) {
T(), E = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
E = E.concat(t), _.filter(E, {
type: "error"
}).length ? (_.each(E, function(e) {
e.id = _.uniqueId("from-file-alert-"), c.addNotification(e);
}), p.disableInputs = !1) : E.length ? (R(E), p.disableInputs = !1) : y();
}, D = function() {
if (_.has(p.input.selectedProject, "metadata.uid")) return n.when(p.input.selectedProject);
var t = p.input.selectedProject.metadata.name, r = p.input.selectedProject.metadata.annotations["new-display-name"], a = e("description")(p.input.selectedProject);
return m.create(t, r, a);
};
<<<<<<< HEAD
p.create = function() {
if (delete p.error, f(p.resource) && (p.resourceKind = p.resource.kind, p.resourceKind.endsWith("List") ? p.isList = !0 : p.isList = !1, g(p.resource))) {
p.isList ? (p.resourceList = p.resource.items, p.resourceName = "") : (p.resourceList = [ p.resource ], p.resourceName = p.resource.metadata.name, "Template" === p.resourceKind && (p.templateOptions = {
process: !0,
add: !1
})), p.updateResources = [], p.createResources = [];
var e = [];
p.errorOccurred = !1, _.forEach(p.resourceList, function(t) {
if (!g(t)) return p.errorOccurred = !0, !1;
e.push(S(t));
}), D().then(function(t) {
p.input.selectedProject = t, n.all(e).then(function() {
p.errorOccurred || (1 === p.createResources.length && "Template" === p.resourceList[0].kind ? v() : _.isEmpty(p.updateResources) ? l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N) : (p.updateTemplate = 1 === p.updateResources.length && "Template" === p.updateResources[0].kind, p.updateTemplate ? v() : h()));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), a.all(t).then(C, w).finally(function() {
p.loaded = !0;
});
}
}
p.includedMetrics = p.includedMetrics || [ "cpu", "memory", "network" ];
var R, T = {}, E = {}, N = n("resources.limits.memory"), D = n("resources.limits.cpu"), A = 30, $ = !1;
p.uniqueID = c.uniqueID(), p.metrics = [], _.includes(p.includedMetrics, "memory") && p.metrics.push({
=======
}), r.all(t).then(C, S).finally(function() {
=======
}), r.all(t).then(S, C).finally(function() {
>>>>>>> Service instance details configuration and edit
=======
}), r.all(t).then(C, S).finally(function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), r.all(t).then(S, C).finally(function() {
>>>>>>> Adding label filter to ste secrets page
m.loaded = !0;
});
}
}
<<<<<<< HEAD
<<<<<<< HEAD
m.includedMetrics = m.includedMetrics || [ "cpu", "memory", "network" ];
var R, T = {}, I = {}, E = n("resources.limits.memory"), N = n("resources.limits.cpu"), D = 30, $ = !1;
m.uniqueID = c.uniqueID(), m.metrics = [], _.includes(m.includedMetrics, "memory") && m.metrics.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
p.includedMetrics = p.includedMetrics || [ "cpu", "memory", "network" ];
var R, I = {}, T = {}, N = n("resources.limits.memory"), E = n("resources.limits.cpu"), D = 30, A = !1;
p.uniqueID = c.uniqueID(), p.metrics = [], _.includes(p.includedMetrics, "memory") && p.metrics.push({
>>>>>>> Updates for Service Instance & Bindings
=======
m.includedMetrics = m.includedMetrics || [ "cpu", "memory", "network" ];
var I, R = {}, E = {}, T = n("resources.limits.memory"), N = n("resources.limits.cpu"), D = 30, A = !1;
m.uniqueID = c.uniqueID(), m.metrics = [], _.includes(m.includedMetrics, "memory") && m.metrics.push({
>>>>>>> Support EnvFrom in the Env Editors
label: "Memory",
units: "MiB",
chartPrefix: "memory-",
convert: s.bytesToMiB,
containerMetric: !0,
datasets: [ {
id: "memory/usage",
<<<<<<< HEAD
label: m("Memory"),
data: []
=======
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "APIService", "DataService", "NotificationsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a, o) {
var i = n.getPreferredVersion("serviceaccounts"), s = n.getPreferredVersion("secrets");
return {
restrict: "E",
scope: {
type: "=",
serviceAccountToLink: "=?",
namespace: "=",
onCreate: "&",
onCancel: "&"
},
templateUrl: "views/directives/create-secret.html",
link: function(c) {
c.nameValidation = o, c.secretAuthTypeMap = {
image: {
label: "Image Secret",
authTypes: [ {
id: "kubernetes.io/dockercfg",
label: "Image Registry Credentials"
}, {
id: "kubernetes.io/dockerconfigjson",
label: "Configuration File"
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
} ]
}), _.includes(p.includedMetrics, "cpu") && p.metrics.push({
=======
label: "Memory",
data: []
} ]
<<<<<<< HEAD
<<<<<<< HEAD
}), _.includes(m.includedMetrics, "cpu") && m.metrics.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), _.includes(p.includedMetrics, "cpu") && p.metrics.push({
>>>>>>> Updates for Service Instance & Bindings
=======
}), _.includes(m.includedMetrics, "cpu") && m.metrics.push({
>>>>>>> Support EnvFrom in the Env Editors
label: "CPU",
units: "cores",
chartPrefix: "cpu-",
convert: s.millicoresToCores,
usagePrecision: 3,
containerMetric: !0,
datasets: [ {
id: "cpu/usage_rate",
<<<<<<< HEAD
label: m("CPU"),
data: []
} ]
}), _.includes(p.includedMetrics, "network") && p.metrics.push({
label: m("Network"),
=======
label: "CPU",
data: []
} ]
}), _.includes(m.includedMetrics, "network") && m.metrics.push({
label: "Network",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
units: "KiB/s",
chartPrefix: "network-",
chartType: "spline",
convert: s.bytesToKiB,
datasets: [ {
id: "network/tx_rate",
<<<<<<< HEAD
label: m("Sent"),
data: []
}, {
id: "network/rx_rate",
label: m("Received"),
data: []
} ]
<<<<<<< HEAD
}), p.loaded = !1, p.noData = !0, p.showComputeUnitsHelp = function() {
u.showComputeUnitsHelp();
}, l.getMetricsURL().then(function(e) {
p.metricsURL = e;
}), p.options = {
rangeOptions: c.getTimeRangeOptions()
}, p.options.timeRange = _.head(p.options.rangeOptions);
var B = e("upperFirst"), L = function(e) {
var t = "#" + e.chartPrefix + p.uniqueID + "-donut";
=======
label: "Sent",
data: []
}, {
id: "network/rx_rate",
label: "Received",
data: []
} ]
}), m.loaded = !1, m.noData = !0, m.showComputeUnitsHelp = function() {
u.showComputeUnitsHelp();
}, l.getMetricsURL().then(function(e) {
m.metricsURL = e;
}), m.options = {
rangeOptions: c.getTimeRangeOptions()
<<<<<<< HEAD
}, p.options.timeRange = _.head(p.options.rangeOptions);
<<<<<<< HEAD
var A = e("upperFirst"), B = function(e) {
<<<<<<< HEAD
var t = "#" + e.chartPrefix + m.uniqueID + "-donut";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
var $ = e("upperFirst"), B = function(e) {
>>>>>>> Let administrators disable "Copy Login Command"
var t = "#" + e.chartPrefix + p.uniqueID + "-donut";
>>>>>>> Updates for Service Instance & Bindings
=======
}, m.options.timeRange = _.head(m.options.rangeOptions);
var $ = e("upperFirst"), B = function(e) {
var t = "#" + e.chartPrefix + m.uniqueID + "-donut";
>>>>>>> Support EnvFrom in the Env Editors
return {
bindto: t,
onrendered: function() {
i.updateDonutCenterText(t, e.datasets[0].used, $(e.units) + " Used");
},
<<<<<<< HEAD
donut: {
label: {
show: !1
},
width: 10
},
legend: {
show: !1
},
size: {
height: 175,
widht: 175
}
};
<<<<<<< HEAD
}, x = function(e) {
var t = e.chartPrefix + p.uniqueID + "-sparkline", n = c.getDefaultSparklineConfig(t, e.units);
return 1 === e.datasets.length && _.set(n, "legend.show", !1), n;
}, V = 0;
(window.OPENSHIFT_CONSTANTS.DISABLE_CUSTOM_METRICS ? a.when({}) : l.getCustomMetrics(p.pod).then(function(e) {
angular.forEach(e, function(e) {
var t = e.description || e.name, n = e.unit || "", r = "custom/" + e.id.replace(/.*\/custom\//, "");
p.metrics.push({
=======
}, L = function(e) {
var t = e.chartPrefix + m.uniqueID + "-sparkline", n = c.getDefaultSparklineConfig(t, e.units);
return 1 === e.datasets.length && _.set(n, "legend.show", !1), n;
}, U = 0;
(window.OPENSHIFT_CONSTANTS.DISABLE_CUSTOM_METRICS ? r.when({}) : l.getCustomMetrics(m.pod).then(function(e) {
angular.forEach(e, function(e) {
var t = e.description || e.name, n = e.unit || "", a = "custom/" + e.id.replace(/.*\/custom\//, "");
<<<<<<< HEAD
<<<<<<< HEAD
m.metrics.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
p.metrics.push({
>>>>>>> Updates for Service Instance & Bindings
=======
m.metrics.push({
>>>>>>> Support EnvFrom in the Env Editors
label: t,
units: n,
chartPrefix: "custom-" + _.uniqueId("custom-metric-"),
chartType: "spline",
datasets: [ {
<<<<<<< HEAD
id: r,
=======
id: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
label: t,
type: e.type,
data: []
} ]
=======
}
}, c.secretTypes = _.keys(c.secretAuthTypeMap), c.type ? c.newSecret = {
type: c.type,
authType: c.secretAuthTypeMap[c.type].authTypes[0].id,
data: {},
linkSecret: !_.isEmpty(c.serviceAccountToLink),
pickedServiceAccountToLink: c.serviceAccountToLink || ""
} : c.newSecret = {
type: "source",
authType: "kubernetes.io/basic-auth",
data: {},
linkSecret: !1,
pickedServiceAccountToLink: ""
}, c.add = {
gitconfig: !1,
cacert: !1
}, t.canI("serviceaccounts", "list") && t.canI("serviceaccounts", "update") && r.list(i, c, function(e) {
c.serviceAccounts = e.by("metadata.name"), c.serviceAccountsNames = _.keys(c.serviceAccounts);
});
var l = function(e, t) {
var n = {
apiVersion: "v1",
kind: "Secret",
metadata: {
name: c.newSecret.data.secretName
},
type: t,
data: {}
};
switch (t) {
case "kubernetes.io/basic-auth":
e.passwordToken ? n.data = {
password: window.btoa(e.passwordToken)
} : n.type = "Opaque", e.username && (n.data.username = window.btoa(e.username)), e.gitconfig && (n.data[".gitconfig"] = window.btoa(e.gitconfig)), e.cacert && (n.data["ca.crt"] = window.btoa(e.cacert));
break;

case "kubernetes.io/ssh-auth":
n.data = {
"ssh-privatekey": window.btoa(e.privateKey)
}, e.gitconfig && (n.data[".gitconfig"] = window.btoa(e.gitconfig));
break;

case "kubernetes.io/dockerconfigjson":
var r = window.btoa(e.dockerConfig);
JSON.parse(e.dockerConfig).auths ? n.data[".dockerconfigjson"] = r : (n.type = "kubernetes.io/dockercfg", n.data[".dockercfg"] = r);
break;

case "kubernetes.io/dockercfg":
var a = window.btoa(e.dockerUsername + ":" + e.dockerPassword), o = {};
o[e.dockerServer] = {
username: e.dockerUsername,
password: e.dockerPassword,
email: e.dockerMail,
auth: a
}, n.data[".dockercfg"] = window.btoa(JSON.stringify(o));
}
return n;
}, u = function() {
a.hideNotification("create-secret-error");
}, d = function(t) {
var o = angular.copy(c.serviceAccounts[c.newSecret.pickedServiceAccountToLink]), i = n.objectToResourceGroupVersion(o);
switch (c.newSecret.type) {
case "source":
o.secrets.push({
name: t.metadata.name
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
});
});
<<<<<<< HEAD
})).finally(function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
p.$watch("options", function() {
_.each(p.metrics, function(e) {
_.each(e.datasets, function(e) {
delete e.data;
});
}), delete p.metricsError, I();
}, !0), R = t(I, c.getDefaultUpdateInterval(), !1);
=======
m.$watch("options", function() {
_.each(m.metrics, function(e) {
_.each(e.datasets, function(e) {
delete e.data;
=======
}
r.update(i, c.newSecret.pickedServiceAccountToLink, o, c).then(function(e) {
a.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created and linked with service account " + e.metadata.name + "."
}), c.onCreate({
newSecret: t
});
}, function(n) {
a.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created."
}), c.serviceAccountToLink || a.addNotification({
id: "secret-sa-link-error",
type: "error",
message: "An error occurred while linking the secret with service account " + c.newSecret.pickedServiceAccountToLink + ".",
details: e("getErrorDetails")(n)
}), c.onCreate({
newSecret: t
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
});
<<<<<<< HEAD
<<<<<<< HEAD
}), delete m.metricsError, R();
}, !0), P = t(R, c.getDefaultUpdateInterval(), !1);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), delete m.metricsError, P();
=======
p.$watch("options", function() {
_.each(p.metrics, function(e) {
_.each(e.datasets, function(e) {
delete e.data;
});
<<<<<<< HEAD
}), delete p.metricsError, P();
>>>>>>> Updates for Service Instance & Bindings
=======
m.$watch("options", function() {
_.each(m.metrics, function(e) {
_.each(e.datasets, function(e) {
delete e.data;
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), delete m.metricsError, P();
>>>>>>> Support EnvFrom in the Env Editors
}, !0), R = t(P, c.getDefaultUpdateInterval(), !1);
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
}), delete m.metricsError, j();
}, !0), R = t(j, c.getDefaultUpdateInterval(), !1);
>>>>>>> Service instance details configuration and edit
=======
}), delete m.metricsError, P();
}, !0), R = t(P, c.getDefaultUpdateInterval(), !1);
>>>>>>> Add product icons for service catalog
=======
}), delete m.metricsError, j();
}, !0), R = t(j, c.getDefaultUpdateInterval(), !1);
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}), delete m.metricsError, P();
}, !0), R = t(P, c.getDefaultUpdateInterval(), !1);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), delete m.metricsError, j();
<<<<<<< HEAD
}, !0), R = t(j, c.getDefaultUpdateInterval(), !1);
>>>>>>> Update template service broker flag name
=======
}, !0), I = t(j, c.getDefaultUpdateInterval(), !1);
>>>>>>> Add search catalog in project context
});
var O = o.$on("metrics.charts.resize", function() {
c.redraw(R), c.redraw(E);
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
p.$on("$destroy", function() {
R && (t.cancel(R), R = null), O && (O(), O = null), angular.forEach(T, function(e) {
=======
m.$on("$destroy", function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
P && (t.cancel(P), P = null), O && (O(), O = null), angular.forEach(T, function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
P && (t.cancel(P), P = null), O && (O(), O = null), angular.forEach(E, function(e) {
>>>>>>> Add bindings list to resource pages
=======
R && (t.cancel(R), R = null), O && (O(), O = null), angular.forEach(E, function(e) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
R && (t.cancel(R), R = null), O && (O(), O = null), angular.forEach(T, function(e) {
>>>>>>> Add the ability to add a secret to an application
=======
p.$on("$destroy", function() {
=======
m.$on("$destroy", function() {
<<<<<<< HEAD
>>>>>>> Support EnvFrom in the Env Editors
R && (t.cancel(R), R = null), O && (O(), O = null), angular.forEach(I, function(e) {
>>>>>>> Updates for Service Instance & Bindings
=======
I && (t.cancel(I), I = null), O && (O(), O = null), angular.forEach(R, function(e) {
>>>>>>> Add search catalog in project context
e.destroy();
}), R = null, angular.forEach(E, function(e) {
e.destroy();
}), E = null, A = !0;
=======
templateUrl: "views/directives/osc-file-input.html",
link: function(t, n) {
function r(n) {
var r = new FileReader();
r.onloadend = function() {
t.$apply(function() {
t.fileName = n.name, t.model = r.result;
});
}, r.onerror = function(n) {
t.supportsFileUpload = !1, t.uploadError = !0, e.error("Could not read file", n);
}, r.readAsText(n);
}
function a() {
n.find(".drag-and-drop-zone").removeClass("show-drag-and-drop-zone highlight-drag-and-drop-zone");
}
var o = _.uniqueId("osc-file-input-");
t.dropMessageID = o + "-drop-message", t.helpID = o + "-help", t.supportsFileUpload = window.File && window.FileReader && window.FileList && window.Blob, t.uploadError = !1;
var i = "#" + t.dropMessageID, s = !1, c = !1, l = n.find("input[type=file]");
setTimeout(function() {
var e = n.find(".drag-and-drop-zone");
e.on("dragover", function() {
t.disabled || (e.addClass("highlight-drag-and-drop-zone"), s = !0);
}), n.find(".drag-and-drop-zone p").on("dragover", function() {
t.disabled || (s = !0);
}), e.on("dragleave", function() {
t.disabled || (s = !1, _.delay(function() {
s || e.removeClass("highlight-drag-and-drop-zone");
}, 200));
}), e.on("drop", function(e) {
if (!t.disabled) {
var n = _.get(e, "originalEvent.dataTransfer.files", []);
return n.length > 0 && (t.file = _.head(n), r(t.file)), a(), $(".drag-and-drop-zone").trigger("putDropZoneFront", !1), $(".drag-and-drop-zone").trigger("reset"), !1;
=======
}, m = _.debounce(function() {
try {
JSON.parse(c.newSecret.data.dockerConfig), c.invalidConfigFormat = !1;
} catch (e) {
c.invalidConfigFormat = !0;
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
}
});
<<<<<<< HEAD
var o = function(e, t) {
var n = t.offset(), r = t.outerWidth(), a = t.outerHeight();
e.css({
height: a + 6,
width: r + 6,
top: n.top,
left: n.left,
position: "fixed",
"z-index": 100
});
=======
c.aceChanged = m, c.nameChanged = function() {
c.nameTaken = !1;
}, c.create = function() {
u();
var n = l(c.newSecret.data, c.newSecret.authType);
r.create(s, null, n, c).then(function(e) {
c.newSecret.linkSecret && c.serviceAccountsNames.contains(c.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? d(e) : (a.addNotification({
type: "success",
message: "Secret " + n.metadata.name + " was created."
}), c.onCreate({
newSecret: e
}));
}, function(t) {
"AlreadyExists" !== (t.data || {}).reason ? a.addNotification({
id: "create-secret-error",
type: "error",
message: "An error occurred while creating the secret.",
details: e("getErrorDetails")(t)
}) : c.nameTaken = !0;
});
}, c.cancel = function() {
u(), c.onCancel();
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
};
e.on("putDropZoneFront", function(e, r) {
if (!t.disabled) {
var a, i = n.find(".drag-and-drop-zone");
return r ? (a = t.dropZoneId ? $("#" + t.dropZoneId) : n, o(i, a)) : i.css("z-index", "-1"), !1;
}
}), e.on("reset", function() {
if (!t.disabled) return c = !1, !1;
});
}), $(document).on("drop." + o, function() {
return a(), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !1), !1;
}), $(document).on("dragenter." + o, function() {
if (!t.disabled) return c = !0, n.find(".drag-and-drop-zone").addClass("show-drag-and-drop-zone"), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !0), !1;
}), $(document).on("dragover." + o, function() {
if (!t.disabled) return c = !0, n.find(".drag-and-drop-zone").addClass("show-drag-and-drop-zone"), !1;
}), $(document).on("dragleave." + o, function() {
return c = !1, _.delay(function() {
c || n.find(".drag-and-drop-zone").removeClass("show-drag-and-drop-zone");
}, 200), !1;
}), t.cleanInputValues = function() {
t.model = "", t.fileName = "", l[0].value = "";
}, l.change(function() {
r(l[0].files[0]);
}), t.$on("$destroy", function() {
$(i).off(), $(document).off("drop." + o).off("dragenter." + o).off("dragover." + o).off("dragleave." + o);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("deploymentMetrics", [ "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", function(e, t, n, r, a, o, i, s, c, l) {
=======
} ]), angular.module("openshiftConsole").directive("deploymentMetrics", [ "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", function(e, t, n, a, r, o, i, s, c, l) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
pods: "=",
containers: "=",
profile: "@",
alerts: "=?"
},
templateUrl: function(e, t) {
return "compact" === t.profile ? "views/directives/metrics-compact.html" : "views/directives/deployment-metrics.html";
},
link: function(t) {
<<<<<<< HEAD
function n(e) {
return null === e.value || void 0 === e.value;
=======
var n = e("isAbsoluteURL"), r = e("githubLink");
t.$watchGroup([ "uri", "ref", "contextDir" ], function() {
t.gitLink = r(t.uri, t.ref, t.contextDir), t.isLink = n(t.gitLink);
});
},
template: '<a ng-if="isLink" ng-href="{{gitLink}}" ng-transclude target="_blank"></a><span ng-if="!isLink" ng-transclude></span>'
};
} ]), angular.module("openshiftConsole").directive("oscImageSummary", function() {
return {
restrict: "E",
scope: {
resource: "=",
name: "=",
tag: "="
},
templateUrl: "views/directives/osc-image-summary.html"
};
}), angular.module("openshiftConsole").directive("oscRouting", [ "$filter", "Constants", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
return {
require: "^form",
restrict: "E",
scope: {
route: "=model",
services: "=",
showNameInput: "=",
routingDisabled: "=",
existingRoute: "="
},
templateUrl: "views/directives/osc-routing.html",
link: function(r, a, o, i) {
r.form = i, r.controls = {}, r.options = {
secureRoute: !1,
alternateServices: !1
};
var s = {
group: "route.openshift.io",
resource: "routes/custom-host"
};
r.canICreateCustomHosts = e("canI")(s, "create"), r.canIUpdateCustomHosts = e("canI")(s, "update");
var c = function() {
return r.existingRoute ? r.canIUpdateCustomHosts : r.canICreateCustomHosts;
};
r.isHostnameReadOnly = function() {
return !c();
}, r.disableWildcards = t.DISABLE_WILDCARD_ROUTES, r.areCertificateInputsReadOnly = function() {
return !c();
}, r.areCertificateInputsDisabled = function() {
var e = _.get(r, "route.tls.termination");
return !e || "passthrough" === e;
}, r.isDestinationCACertInputDisabled = function() {
return "reencrypt" !== _.get(r, "route.tls.termination");
}, r.insecureTrafficOptions = [ {
value: "",
label: "None"
}, {
value: "Allow",
label: "Allow"
}, {
value: "Redirect",
label: "Redirect"
} ], _.has(r, "route.tls.insecureEdgeTerminationPolicy") || _.set(r, "route.tls.insecureEdgeTerminationPolicy", "");
r.$watchGroup([ "route.tls.termination", "route.tls.insecureEdgeTerminationPolicy" ], function() {
var e = "passthrough" !== _.get(r, "route.tls.termination") || "Allow" !== _.get(r, "route.tls.insecureEdgeTerminationPolicy");
r.routeForm.insecureTraffic.$setValidity("passthrough", e);
}), r.nameValidation = n, r.disableWildcards ? r.hostnamePattern = n.pattern : r.hostnamePattern = /^(\*(\.[a-z0-9]([-a-z0-9]*[a-z0-9]))+|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$/, r.hostnameMaxLength = n.maxlength;
var l = function(e) {
if (e) {
var t = _.get(e, "spec.ports", []);
r.unnamedServicePort = 1 === t.length && !t[0].name, t.length && !r.unnamedServicePort ? r.route.portOptions = _.map(t, function(e) {
return {
port: e.name,
label: e.port + " → " + e.targetPort + " (" + e.protocol + ")"
};
}) : r.route.portOptions = [];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< HEAD
function r(e) {
var t, r = {}, a = [ "Date" ], o = [ t = w ? e.compactDatasetLabel || e.label : "Average Usage" ], i = [ a, o ], s = function(e) {
var t = "" + e.start;
return r[t] || (r[t] = {
total: 0,
count: 0
}), r[t];
};
<<<<<<< HEAD
return _.each(I[e.descriptor], function(e) {
=======
function a(e) {
var t, a = {}, r = [ "Date" ], o = [ t = w ? e.compactDatasetLabel || e.label : "Average Usage" ], i = [ r, o ], s = function(e) {
var t = "" + e.start;
return a[t] || (a[t] = {
total: 0,
count: 0
}), a[t];
};
<<<<<<< HEAD
<<<<<<< HEAD
return _.each(P[e.descriptor], function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return _.each(R[e.descriptor], function(e) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
return _.each(I[e.descriptor], function(e) {
>>>>>>> Add search catalog in project context
_.each(e, function(e) {
var t = s(e);
(!k || k < e.end) && (k = e.end), n(e) || (t.total += e.value, t.count = t.count + 1);
});
<<<<<<< HEAD
}), _.each(r, function(t, n) {
var r;
r = t.count ? t.total / t.count : null, a.push(Number(n)), o.push(e.convert ? e.convert(r) : r);
}), o.length > 1 && (e.lastValue = _.last(o) || 0), i;
}
function o(e, a) {
var o = [], i = {
type: "spline"
};
return t.showAverage ? (_.each(e[a.descriptor], function(e, t) {
h(a.descriptor, t, e);
}), i.type = "area-spline", w && a.compactType && (i.type = a.compactType), i.x = "Date", i.columns = r(a), i) : (_.each(e[a.descriptor], function(e, t) {
h(a.descriptor, t, e);
var r = t + "-dates";
_.set(i, [ "xs", t ], r);
var s = [ r ], c = [ t ];
o.push(s), o.push(c), _.each(I[a.descriptor][t], function(e) {
if (s.push(e.start), (!j || j < e.end) && (j = e.end), n(e)) c.push(e.value); else {
var t = a.convert ? a.convert(e.value) : e.value;
=======
}), _.each(a, function(t, n) {
var a;
a = t.count ? t.total / t.count : null, r.push(Number(n)), o.push(e.convert ? e.convert(a) : a);
}), o.length > 1 && (e.lastValue = _.last(o) || 0), i;
}
function o(e, r) {
var o = [], i = {
type: "spline"
};
return t.showAverage ? (_.each(e[r.descriptor], function(e, t) {
h(r.descriptor, t, e);
}), i.type = "area-spline", w && r.compactType && (i.type = r.compactType), i.x = "Date", i.columns = a(r), i) : (_.each(e[r.descriptor], function(e, t) {
h(r.descriptor, t, e);
var a = t + "-dates";
_.set(i, [ "xs", t ], a);
var s = [ a ], c = [ t ];
o.push(s), o.push(c), _.each(I[r.descriptor][t], function(e) {
if (s.push(e.start), (!k || k < e.end) && (k = e.end), n(e)) c.push(e.value); else {
var t = r.convert ? r.convert(e.value) : e.value;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
c.push(t);
}
=======
r.services && !r.route.service && (r.route.service = _.find(r.services)), r.servicesByName, r.services ? r.servicesByName = _.keyBy(r.services, "metadata.name") : r.servicesByName = {}, r.$watch("route.to.name", function(e, t) {
l(r.servicesByName[e]), e === t && r.route.targetPort || (r.route.targetPort = _.get(r, "route.portOptions[0].port")), r.services && (r.alternateServiceOptions = _.reject(r.services, function(t) {
return e === t.metadata.name;
}));
}), r.$watch("route.alternateServices", function(e) {
r.duplicateServices = _(e).map("name").filter(function(e, t, n) {
return _.includes(n, e, t + 1);
}).value(), i.$setValidity("duplicateServices", !r.duplicateServices.length), r.options.alternateServices = !_.isEmpty(e);
}, !0);
var u = function() {
return !!r.route.tls && ((!r.route.tls.termination || "passthrough" === r.route.tls.termination) && (r.route.tls.certificate || r.route.tls.key || r.route.tls.caCertificate || r.route.tls.destinationCACertificate));
};
r.$watch("route.tls.termination", function() {
r.options.secureRoute = !!_.get(r, "route.tls.termination"), r.showCertificatesNotUsedWarning = u();
});
var d;
r.$watch("options.secureRoute", function(e, t) {
if (e !== t) {
var n = _.get(r, "route.tls.termination");
!r.securetRoute && n && (d = n, delete r.route.tls.termination), r.options.secureRoute && !n && _.set(r, "route.tls.termination", d || "edge");
}
}), r.$watch("options.alternateServices", function(e, t) {
e !== t && (e || (r.route.alternateServices = []), e && _.isEmpty(r.route.alternateServices) && r.addAlternateService());
}), r.addAlternateService = function() {
r.route.alternateServices = r.route.alternateServices || [];
var e = _.find(r.services, function(e) {
return e.metadata.name !== r.route.to.service && !_.some(r.route.alternateServices, {
service: e.metadata.name
});
});
_.has(r, "route.to.weight") || _.set(r, "route.to.weight", 1), r.route.alternateServices.push({
service: e.metadata.name,
weight: 1
});
}, r.weightAsPercentage = function(e, t) {
e = e || 0;
var n = _.get(r, "route.to.weight", 0);
if (_.each(r.route.alternateServices, function(e) {
n += _.get(e, "weight", 0);
}), !n) return "";
var a = e / n * 100;
return t ? d3.round(a, 1) + "%" : a;
};
var m = !1;
r.$watch("route.alternateServices.length", function(e) {
if (0 === e && _.has(r, "route.to.weight") && delete r.route.to.weight, 1 === e) {
if (0 === r.route.to.weight && 0 === r.route.alternateServices[0].weight) return void (r.controls.hideSlider = !0);
m = !0, r.controls.rangeSlider = r.weightAsPercentage(r.route.to.weight);
}
<<<<<<< HEAD
}), r.$watch("controls.rangeSlider", function(e, t) {
m ? m = !1 : e !== t && (e = parseInt(e, 10), _.set(r, "route.to.weight", e), _.set(r, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), i.columns = _.sortBy(o, function(e) {
return e[0];
}), i);
}
<<<<<<< HEAD
function u(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
P || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var r, a = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (E[i].lastValue = (E[i].lastValue || 0) + n.lastValue)), S[i] ? (S[i].load(a), t.showAverage ? S[i].legend.hide() : S[i].legend.show()) : ((r = D(n)).data = a, S[i] = c3.generate(r));
=======
k || (D = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (N[i].lastValue = (N[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = I(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
k || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (D[i].lastValue = (D[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = I(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
k || (D = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (I[i].lastValue = (I[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = N(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Add bindings list to resource pages
=======
k || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (I[i].lastValue = (I[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
k || (I = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (N[i].lastValue = (N[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Add notification-drawer to show curated list of events to user
=======
k || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (I[i].lastValue = (I[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
k || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
<<<<<<< HEAD
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (I[i].lastValue = (I[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Adjust events to show in the drawer
=======
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (E[i].lastValue = (E[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Enable new landing page experience by default
=======
k || (E = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (N[i].lastValue = (N[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Quota Notifications
=======
k || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
<<<<<<< HEAD
<<<<<<< HEAD
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Support EnvFrom in the Env Editors
=======
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), S[i] ? (S[i].load(r), t.showAverage ? S[i].legend.hide() : S[i].legend.show()) : ((a = D(n)).data = r, S[i] = c3.generate(a));
>>>>>>> Service instance details configuration and edit
=======
k || (T = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (N[i].lastValue = (N[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
k || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
=======
P || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
>>>>>>> Fix for adding non-builder templates to a project
=======
P || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
>>>>>>> Update pod controller to use getPreferredVersion
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
>>>>>>> Update template service broker flag name
=======
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), S[i] ? (S[i].load(r), t.showAverage ? S[i].legend.hide() : S[i].legend.show()) : ((a = D(n)).data = r, S[i] = c3.generate(a));
>>>>>>> Adding label filter to ste secrets page
}));
=======
};
} ]).directive("oscRoutingService", function() {
return {
restrict: "E",
scope: {
model: "=",
serviceOptions: "=",
allServices: "=",
isAlternate: "=?",
showWeight: "=?",
warnUnnamedPort: "=?"
},
templateUrl: "views/directives/osc-routing-service.html",
link: function(e, t, n, r) {
e.form = r, e.id = _.uniqueId("osc-routing-service-"), e.$watchGroup([ "model.name", "serviceOptions" ], function() {
if (_.isEmpty(e.serviceOptions)) e.optionsNames = []; else {
var t = _.get(e, "model.name");
e.optionNames = [], e.selectedExists = !1, e.optionNames = _.map(e.serviceOptions, "metadata.name"), t && !e.allServices[t] && e.optionNames.push(t), t || _.set(e, "model.name", _.head(e.optionNames));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function d() {
return w ? "-15mn" : "-" + t.options.timeRange.value + "mn";
}
<<<<<<< HEAD
function m() {
return 60 * t.options.timeRange.value * 1e3;
}
<<<<<<< HEAD
<<<<<<< HEAD
function p() {
<<<<<<< HEAD
<<<<<<< HEAD
return w ? "1mn" : Math.floor(m() / C) + "ms";
=======
return w ? "1mn" : Math.floor(m() / S) + "ms";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
function m() {
return w ? "1mn" : Math.floor(p() / S) + "ms";
>>>>>>> Updates for Service Instance & Bindings
=======
function p() {
<<<<<<< HEAD
<<<<<<< HEAD
return w ? "1mn" : Math.floor(m() / S) + "ms";
>>>>>>> Support EnvFrom in the Env Editors
=======
return w ? "1mn" : Math.floor(m() / C) + "ms";
>>>>>>> Service instance details configuration and edit
=======
return w ? "1mn" : Math.floor(m() / S) + "ms";
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
return w ? "1mn" : Math.floor(m() / C) + "ms";
>>>>>>> Adding label filter to ste secrets page
}
function f() {
var e = _.find(t.pods, "metadata.namespace");
if (e) {
var n = {
pods: t.pods,
namespace: e.metadata.namespace,
bucketDuration: p()
};
return w || (n.containerName = t.options.selectedContainer.name), n.start = k || d(), n;
}
=======
};
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("oscPersistentVolumeClaim", [ "$filter", "APIService", "DataService", "LimitRangesService", "QuotaService", "ModalsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a, o, i) {
var s = t.getPreferredVersion("storageclasses"), c = t.getPreferredVersion("limitranges"), l = t.getPreferredVersion("resourcequotas"), u = t.getPreferredVersion("appliedclusterresourcequotas");
=======
}).directive("timeRemainingFromNow", function() {
return {
restrict: "E",
scope: {
endTimestamp: "="
},
template: '<span data-timestamp="{{endTimestamp}}" class="countdown">{{endTimestamp | countdownToTimestamp}}</span>'
};
}), angular.module("openshiftConsole").directive("deleteLink", [ "$uibModal", "$location", "$filter", "$q", "hashSizeFilter", "APIService", "DataService", "Navigate", "NotificationsService", "Logger", function(e, t, n, r, a, o, i, s, c, l) {
var u = o.getPreferredVersion("horizontalpodautoscalers");
>>>>>>> Configurable inactivity timeout in console
return {
restrict: "E",
scope: {
claim: "=model",
projectName: "="
},
templateUrl: "views/directives/osc-persistent-volume-claim.html",
link: function(t) {
var d = e("amountAndUnit"), m = e("usageValue");
t.nameValidation = i, t.storageClasses = [], t.defaultStorageClass = "", t.claim.unit = "Gi", t.units = [ {
value: "Mi",
label: "MiB"
}, {
value: "Gi",
label: "GiB"
}, {
value: "Ti",
label: "TiB"
}, {
value: "M",
label: "MB"
}, {
value: "G",
label: "GB"
}, {
value: "T",
label: "TB"
} ], t.claim.selectedLabels = [];
var p = [];
t.$watch("useLabels", function(e, n) {
e !== n && (e ? t.claim.selectedLabels = p : (p = t.claim.selectedLabels, t.claim.selectedLabels = []));
}), t.groupUnits = function(e) {
switch (e.value) {
case "Mi":
case "Gi":
case "Ti":
return "Binary Units";

case "M":
case "G":
case "T":
return "Decimal Units";
}
return "";
}, t.showComputeUnitsHelp = function() {
o.showComputeUnitsHelp();
};
var f = function() {
var e = t.claim.amount && m(t.claim.amount + t.claim.unit), n = _.has(t, "limits.min") && m(t.limits.min), r = _.has(t, "limits.max") && m(t.limits.max), a = !0, o = !0;
e && n && (a = e >= n), e && r && (o = e <= r), t.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMin", a), t.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMax", o);
}, g = function() {
var e = a.isAnyStorageQuotaExceeded(t.quotas, t.clusterQuotas), n = a.willRequestExceedQuota(t.quotas, t.clusterQuotas, "requests.storage", t.claim.amount + t.claim.unit);
t.persistentVolumeClaimForm.capacity.$setValidity("willExceedStorage", !n), t.persistentVolumeClaimForm.capacity.$setValidity("outOfClaims", !e);
};
n.list(s, {}, function(n) {
var r = n.by("metadata.name");
if (!_.isEmpty(r)) {
t.storageClasses = _.sortBy(r, "metadata.name");
var a = e("annotation");
if (t.defaultStorageClass = _.find(t.storageClasses, function(e) {
return "true" === a(e, "storageclass.beta.kubernetes.io/is-default-class");
}), t.defaultStorageClass) t.claim.storageClass = t.defaultStorageClass; else {
var o = {
metadata: {
name: "No Storage Class",
labels: {},
annotations: {
description: "No storage class will be assigned"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< HEAD
<<<<<<< HEAD
function f(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
if (!P) if (N++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(N < 2) && t.alerts) {
=======
if (!k) if (D++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(D < 2) && t.alerts) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
if (!k) if (N++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(N < 2) && t.alerts) {
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
if (!k) if (D++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(D < 2) && t.alerts) {
>>>>>>> Add bindings list to resource pages
=======
if (!k) if (N++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(N < 2) && t.alerts) {
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
if (!k) if (I++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(I < 2) && t.alerts) {
>>>>>>> Add notification-drawer to show curated list of events to user
=======
if (!k) if (N++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(N < 2) && t.alerts) {
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
=======
function g(e) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Patternfly vertical navigation and project bar
if (!k) if (N++, t.noData) t.metricsError = {
=======
if (!P) if (N++, t.noData) t.metricsError = {
>>>>>>> Fix for adding non-builder templates to a project
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(N < 2) && t.alerts) {
>>>>>>> Adjust events to show in the drawer
=======
if (!k) if (E++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(E < 2) && t.alerts) {
>>>>>>> Quota Notifications
=======
function g(e) {
if (!P) if (N++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
<<<<<<< HEAD
<<<<<<< HEAD
}; else if (!(N < 2) && t.alerts) {
>>>>>>> Support EnvFrom in the Env Editors
=======
}; else if (!(T < 2) && t.alerts) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}; else if (!(N < 2) && t.alerts) {
>>>>>>> Update template service broker flag name
var n = "metrics-failed-" + t.uniqueID;
t.alerts[n] = {
type: "error",
message: "An error occurred updating metrics.",
links: [ {
href: "",
label: "Retry",
onClick: function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
delete t.alerts[n], N = 1, y();
=======
delete t.alerts[n], D = 1, y();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
delete t.alerts[n], D = 1, y();
>>>>>>> Add bindings list to resource pages
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
delete t.alerts[n], I = 1, y();
>>>>>>> Add notification-drawer to show curated list of events to user
=======
delete t.alerts[n], N = 1, y();
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Adjust events to show in the drawer
=======
delete t.alerts[n], E = 1, y();
>>>>>>> Quota Notifications
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Support EnvFrom in the Env Editors
=======
delete t.alerts[n], T = 1, y();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Update template service broker flag name
}
} ]
};
}
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
function v() {
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && N < 2;
=======
}, {
errorNotification: !1
}), n.list(c, {
namespace: t.projectName
}, function(e) {
var n = e.by("metadata.name");
if (!_.isEmpty(n)) {
t.limits = r.getEffectiveLimitRange(n, "storage", "PersistentVolumeClaim");
var a;
t.limits.min && t.limits.max && m(t.limits.min) === m(t.limits.max) && (a = d(t.limits.max), t.claim.amount = Number(a[0]), t.claim.unit = a[1], t.capacityReadOnly = !0), t.$watchGroup([ "claim.amount", "claim.unit" ], f);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function h(e, n, r) {
t.noData = !1;
var a = _.initial(r), o = _.get(I, [ e, n ]);
if (o) {
var i = _.takeRight(o.concat(a), C);
_.set(I, [ e, n ], i);
} else _.set(I, [ e, n ], a);
}
<<<<<<< HEAD
function y() {
if (!R && v()) {
k = Date.now();
=======
function h() {
=======
function v() {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add SVG icons
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && N < 2;
=======
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && T < 2;
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && N < 2;
>>>>>>> Update template service broker flag name
}
function h(e, n, a) {
t.noData = !1;
var r = _.initial(a), o = _.get(I, [ e, n ]);
if (o) {
var i = _.takeRight(o.concat(r), C);
_.set(I, [ e, n ], i);
} else _.set(I, [ e, n ], r);
}
function y() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
if (!E && h()) {
<<<<<<< HEAD
R = Date.now();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
if (!T && h()) {
>>>>>>> Add the ability to add a secret to an application
=======
if (!I && h()) {
>>>>>>> Updates for Service Instance & Bindings
=======
if (!I && v()) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add SVG icons
P = Date.now();
<<<<<<< HEAD
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
var e = g();
c.getPodMetrics(e).then(u, f).finally(function() {
=======
=======
j = Date.now();
>>>>>>> Service instance details configuration and edit
=======
P = Date.now();
>>>>>>> Add product icons for service catalog
=======
j = Date.now();
>>>>>>> Handle displaying parameters when secrets are not available.
=======
P = Date.now();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
=======
if (!R && v()) {
>>>>>>> Add search catalog in project context
j = Date.now();
>>>>>>> Update template service broker flag name
var e = f();
c.getPodMetrics(e).then(u, g).finally(function() {
>>>>>>> Patternfly vertical navigation and project bar
t.loaded = !0;
=======
};
} ]), angular.module("openshiftConsole").directive("oscAutoscaling", [ "HPAService", "LimitRangesService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
return {
restrict: "E",
scope: {
autoscaling: "=model",
project: "=",
showNameInput: "=?",
nameReadOnly: "=?"
},
templateUrl: "views/directives/osc-autoscaling.html",
link: function(r) {
r.nameValidation = n, r.$watch("project", function() {
if (r.project) {
r.isRequestCalculated = t.isRequestCalculated("cpu", r.project);
var n = window.OPENSHIFT_CONSTANTS.DEFAULT_HPA_CPU_TARGET_PERCENT;
r.isRequestCalculated && (n = e.convertLimitPercentToRequest(n, r.project)), _.set(r, "autoscaling.defaultTargetCPU", n), r.defaultTargetCPUDisplayValue = window.OPENSHIFT_CONSTANTS.DEFAULT_HPA_CPU_TARGET_PERCENT;
var a = !1;
r.$watch("autoscaling.targetCPU", function(t) {
a ? a = !1 : (t && r.isRequestCalculated && (t = e.convertRequestPercentToLimit(t, r.project)), _.set(r, "targetCPUInput.percent", t));
});
var o = function(t) {
t && r.isRequestCalculated && (t = e.convertLimitPercentToRequest(t, r.project)), a = !0, _.set(r, "autoscaling.targetCPU", t);
};
r.$watch("targetCPUInput.percent", function(e, t) {
e !== t && o(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var b, S = {}, C = 30, w = "compact" === t.profile, P = !1;
t.uniqueID = s.uniqueID();
var j, k, I = {}, R = w, T = function(e) {
=======
var b, C = {}, S = 30, w = "compact" === t.profile, k = !1;
t.uniqueID = s.uniqueID();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var j, R, P = {}, T = w, E = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var j, R, P = {}, E = w, T = function(e) {
>>>>>>> Add bindings list to resource pages
=======
var j, P, R = {}, E = w, T = function(e) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
var j, P, R = {}, T = w, E = function(e) {
>>>>>>> Add the ability to add a secret to an application
=======
var j, P, R = {}, T = w, I = function(e) {
>>>>>>> Enable new landing page experience by default
=======
var j, P, R = {}, I = w, T = function(e) {
>>>>>>> Updates for Service Instance & Bindings
=======
var j, P, R = {}, I = w, E = function(e) {
>>>>>>> Support EnvFrom in the Env Editors
=======
var b, S = {}, C = 30, w = "compact" === t.profile, k = !1;
t.uniqueID = s.uniqueID();
<<<<<<< HEAD
<<<<<<< HEAD
var P, j, R = {}, I = w, E = function(e) {
>>>>>>> Service instance details configuration and edit
=======
var j, P, R = {}, I = w, E = function(e) {
>>>>>>> Add product icons for service catalog
=======
var P, j, R = {}, I = w, E = function(e) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var b, C = {}, S = 30, w = "compact" === t.profile, k = !1;
=======
var b, S = {}, C = 30, w = "compact" === t.profile, k = !1;
>>>>>>> Adding label filter to ste secrets page
t.uniqueID = s.uniqueID();
var j, P, R = {}, I = w, E = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var P, j, R = {}, I = w, E = function(e) {
>>>>>>> Update template service broker flag name
=======
var b, C = {}, S = 30, w = "compact" === t.profile, P = !1;
t.uniqueID = s.uniqueID();
var k, j, R = {}, I = w, E = function(e) {
>>>>>>> Fix for adding non-builder templates to a project
=======
var b, S = {}, C = 30, w = "compact" === t.profile, P = !1;
t.uniqueID = s.uniqueID();
<<<<<<< HEAD
var k, j, R = {}, I = w, E = function(e) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
var k, j, I = {}, R = w, E = function(e) {
>>>>>>> Add search catalog in project context
return e >= 1024;
};
<<<<<<< HEAD
t.metrics = [ {
label: "Memory",
units: "MiB",
convert: i.bytesToMiB,
formatUsage: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return T(e) && (e /= 1024), s.formatUsage(e);
},
usageUnits: function(e) {
return T(e) ? "GiB" : "MiB";
=======
return E(e) && (e /= 1024), s.formatUsage(e);
=======
} ]), angular.module("openshiftConsole").directive("oscSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, r, a) {
return {
restrict: "E",
scope: {
pickedSecrets: "=model",
secretsByType: "=",
namespace: "=",
displayType: "@",
type: "@",
alerts: "=",
disableInput: "=",
serviceAccountToLink: "@?",
allowMultipleSecrets: "=?"
},
templateUrl: "views/directives/osc-secrets.html",
link: function(t) {
t.secretsVersion = n.getPreferredVersion("secrets"), t.canAddSourceSecret = function() {
if (!t.allowMultipleSecrets) return !1;
var e = _.last(t.pickedSecrets);
return !!e && e.name;
}, t.setLastSecretsName = function(e) {
_.last(t.pickedSecrets).name = e;
}, t.addSourceSecret = function() {
t.pickedSecrets.push({
name: ""
});
}, t.removeSecret = function(e) {
1 === t.pickedSecrets.length ? t.pickedSecrets = [ {
name: ""
} ] : t.pickedSecrets.splice(e, 1), t.secretsForm.$setDirty();
}, t.openCreateSecretModal = function() {
t.newSecret = {}, e.open({
animation: !0,
backdrop: "static",
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
r.list(t.secretsVersion, {
namespace: t.namespace
}, function(n) {
var r = a.groupSecretsByType(n), o = _.mapValues(r, function(e) {
return _.map(e, "metadata.name");
});
t.secretsByType = _.each(o, function(e) {
e.unshift("");
}), t.setLastSecretsName(e.metadata.name), t.secretsForm.$setDirty();
});
});
};
}
};
} ]), angular.module("openshiftConsole").directive("oscSourceSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, r, a) {
return {
restrict: "E",
scope: {
pickedSecrets: "=model",
secretsByType: "=",
strategyType: "=",
type: "@",
displayType: "@",
namespace: "=",
alerts: "=",
serviceAccountToLink: "@?"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
usageUnits: function(e) {
return E(e) ? "GiB" : "MiB";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return T(e) && (e /= 1024), s.formatUsage(e);
},
usageUnits: function(e) {
return T(e) ? "GiB" : "MiB";
>>>>>>> Add bindings list to resource pages
=======
return E(e) && (e /= 1024), s.formatUsage(e);
},
usageUnits: function(e) {
return E(e) ? "GiB" : "MiB";
>>>>>>> Add the ability to add a secret to an application
=======
return I(e) && (e /= 1024), s.formatUsage(e);
},
usageUnits: function(e) {
return I(e) ? "GiB" : "MiB";
>>>>>>> Enable new landing page experience by default
=======
return T(e) && (e /= 1024), s.formatUsage(e);
},
<<<<<<< HEAD
usageUnits: function(e) {
return T(e) ? "GiB" : "MiB";
>>>>>>> Updates for Service Instance & Bindings
=======
return E(e) && (e /= 1024), s.formatUsage(e);
=======
destinationDir: ""
} ];
} else t.pickedSecrets.splice(e, 1);
t.secretsForm.$setDirty();
}, t.openCreateSecretModal = function() {
e.open({
animation: !0,
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
r.list(t.secretsVersion, {
namespace: t.namespace
}, function(n) {
var r = a.groupSecretsByType(n), o = _.mapValues(r, function(e) {
return _.map(e, "metadata.name");
});
t.secretsByType = _.each(o, function(e) {
e.unshift("");
}), t.setLastSecretsName(e.metadata.name);
});
});
};
}
};
} ]), angular.module("openshiftConsole").directive("replicas", function() {
return {
restrict: "E",
scope: {
status: "=?",
spec: "=",
disableScaling: "=?",
scaleFn: "&?",
deployment: "="
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
usageUnits: function(e) {
return E(e) ? "GiB" : "MiB";
>>>>>>> Support EnvFrom in the Env Editors
},
descriptor: "memory/usage",
type: "pod_container",
chartID: "memory-" + t.uniqueID
}, {
label: "CPU",
units: "cores",
convert: i.millicoresToCores,
formatUsage: s.formatUsage,
usageUnits: function() {
return "cores";
},
descriptor: "cpu/usage_rate",
type: "pod_container",
chartID: "cpu-" + t.uniqueID
}, {
label: "Network (Sent)",
units: "KiB/s",
convert: i.bytesToKiB,
formatUsage: s.formatUsage,
usageUnits: function() {
return "KiB/s";
},
descriptor: "network/tx_rate",
type: "pod",
compactLabel: "Network",
compactDatasetLabel: "Sent",
compactType: "spline",
chartID: "network-tx-" + t.uniqueID
}, {
label: "Network (Received)",
units: "KiB/s",
convert: i.bytesToKiB,
formatUsage: s.formatUsage,
usageUnits: function() {
return "KiB/s";
},
descriptor: "network/rx_rate",
type: "pod",
compactCombineWith: "network/tx_rate",
compactDatasetLabel: "Received",
compactType: "spline",
chartID: "network-rx-" + t.uniqueID
} ];
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var E = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
=======
var N = _.indexBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
<<<<<<< HEAD
var D = 0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var D = _.indexBy(t.metrics, "descriptor");
=======
var D = _.keyBy(t.metrics, "descriptor");
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
var I = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
=======
}), angular.module("openshiftConsole").directive("containerStatuses", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
pod: "=",
onDebugTerminal: "=?",
detailed: "=?"
},
templateUrl: "views/_container-statuses.html",
link: function(t) {
t.hasDebugTerminal = angular.isFunction(t.onDebugTerminal);
var n = e("isContainerTerminatedSuccessfully"), r = function(e) {
return _.every(e, n);
};
t.$watch("pod", function(e) {
t.initContainersTerminated = r(e.status.initContainerStatuses), !1 !== t.expandInitContainers && (t.expandInitContainers = !t.initContainersTerminated);
}), t.toggleInitContainer = function() {
t.expandInitContainers = !t.expandInitContainers;
}, t.showDebugAction = function(n) {
if ("Completed" === _.get(t.pod, "status.phase")) return !1;
if (e("annotation")(t.pod, "openshift.io/build.name")) return !1;
if (e("isDebugPod")(t.pod)) return !1;
var r = _.get(n, "state.waiting.reason");
return "ImagePullBackOff" !== r && "ErrImagePull" !== r && (!_.get(n, "state.running") || !n.ready);
}, t.debugTerminal = function(e) {
if (t.hasDebugTerminal) return t.onDebugTerminal.call(this, e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
var D = 0;
>>>>>>> Add bindings list to resource pages
=======
var N = 0;
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
var N = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var I = 0;
>>>>>>> Add notification-drawer to show curated list of events to user
=======
var I = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
var I = _.keyBy(t.metrics, "descriptor");
=======
var E = _.keyBy(t.metrics, "descriptor");
>>>>>>> Enable new landing page experience by default
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
>>>>>>> Adjust events to show in the drawer
=======
var N = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var E = 0;
>>>>>>> Quota Notifications
=======
var T = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
>>>>>>> Support EnvFrom in the Env Editors
=======
var N = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var T = 0;
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var T = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
>>>>>>> Update template service broker flag name
c.getMetricsURL().then(function(e) {
t.metricsURL = e;
}), t.options = {
rangeOptions: s.getTimeRangeOptions()
}, t.options.timeRange = _.head(t.options.rangeOptions), t.options.selectedContainer = _.head(t.containers);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var D = function(e) {
=======
var I = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var N = function(e) {
>>>>>>> Add bindings list to resource pages
=======
var D = function(e) {
>>>>>>> Bug 1481127 - More robust handling of large project lists
var n = s.getDefaultSparklineConfig(e.chartID, e.units, w);
return _.set(n, "legend.show", !w && !t.showAverage), n;
};
t.$watch("options", function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
I = {}, j = null, delete t.metricsError, y();
}, !0), b = e(y, s.getDefaultUpdateInterval(), !1), t.updateInView = function(e) {
R = !e, e && (!k || Date.now() > k + s.getDefaultUpdateInterval()) && y();
};
<<<<<<< HEAD
var A = a.$on("metrics.charts.resize", function() {
s.redraw(S);
=======
e.$watchGroup([ "hookParams", "action.type" ], function() {
e.hookParams && ("execNewPod" === e.action.type ? (e.hookParams.tagImages && (e.removedHookParams.tagImages = e.hookParams.tagImages, delete e.hookParams.tagImages), r()) : "tagImages" === e.action.type && (e.hookParams.execNewPod && (e.removedHookParams.execNewPod = e.hookParams.execNewPod, delete e.hookParams.execNewPod), r()));
}), e.valueFromObjects = [], e.$watchGroup([ "availableSecrets", "availableConfigMaps" ], function() {
var t = e.availableConfigMaps || [], n = e.availableSecrets || [];
e.valueFromObjects = t.concat(n);
}), e.$watch("istagHook.tagObject.tag", function() {
_.has(e.istagHook, [ "tagObject", "tag" ]) && (_.set(e.hookParams, "tagImages[0].to.kind", "ImageStreamTag"), _.set(e.hookParams, "tagImages[0].to.namespace", e.istagHook.namespace), _.set(e.hookParams, "tagImages[0].to.name", e.istagHook.imageStream + ":" + e.istagHook.tagObject.tag));
>>>>>>> Fix problems with env valueFrom for DC hooks
});
t.$on("$destroy", function() {
b && (e.cancel(b), b = null), A && (A(), A = null), angular.forEach(S, function(e) {
e.destroy();
}), S = null, P = !0;
});
}
};
} ]), angular.module("openshiftConsole").directive("logViewer", [ "$sce", "$timeout", "$window", "$filter", "$q", "AuthService", "APIService", "APIDiscovery", "DataService", "HTMLService", "ModalsService", "logLinks", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
var g = $(window), f = $('<tr class="log-line"><td class="log-line-number"></td><td class="log-line-text"></td></tr>').get(0), v = function(e, t) {
var n = f.cloneNode(!0);
n.firstChild.setAttribute("data-line-number", e);
var r = ansi_up.escape_for_html(t), a = ansi_up.ansi_to_html(r), o = l.linkify(a, "_blank", !0);
return n.lastChild.innerHTML = o, n;
};
return {
restrict: "AE",
transclude: !0,
templateUrl: "views/directives/logs/_log-viewer.html",
scope: {
followAffixTop: "=?",
object: "=",
fullLogUrl: "=?",
name: "=",
context: "=",
options: "=?",
fixedHeight: "=?",
chromeless: "=?",
empty: "=?",
run: "=?"
},
<<<<<<< HEAD
controller: [ "$scope", function(t) {
var l, u, f, h = document.documentElement;
t.logViewerID = _.uniqueId("log-viewer"), t.empty = !0;
var y, b;
"ReplicationController" === t.object.kind ? (y = "deploymentconfigs/log", b = r("annotation")(t.object, "deploymentConfig")) : (y = i.kindToResource(t.object.kind) + "/log", b = t.object.metadata.name);
var S, C = function() {
t.$apply(function() {
var e = l.getBoundingClientRect();
t.fixedHeight ? t.showScrollLinks = e && e.height > t.fixedHeight : t.showScrollLinks = e && (e.top < 0 || e.bottom > h.clientHeight);
=======
templateUrl: "views/directives/pods-table.html",
link: function(t) {
var n = e("orderObjectsByDate"), r = _.debounce(function(e) {
t.$evalAsync(function() {
t.sortedPods = n(e, !0);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
}, w = !1, P = function() {
w ? w = !1 : t.$evalAsync(function() {
t.autoScrollActive = !1;
=======
}
function y() {
var e = p.createResources.length, t = p.updateResources.length;
if (p.resourceKind.endsWith("List")) {
var r = [];
t > 0 && r.push(P()), e > 0 && r.push(w()), n.all(r).then(b);
} else C();
}
function b() {
var e, n;
E(), "Template" === p.resourceKind && p.templateOptions.process && !p.errorOccurred ? p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
template: p.resource
}) : (n = p.templateOptions.add || p.updateResources.length > 0 ? p.input.selectedProject.metadata.name : "", e = s.createFromTemplateURL(p.resource, p.input.selectedProject.metadata.name, {
namespace: n
}), t.url(e)) : p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
resource: p.resource,
isList: p.isList
}) : (e = s.projectOverviewURL(p.input.selectedProject.metadata.name), t.url(e));
}
function S(e) {
var t = a.objectToResourceGroupVersion(e);
return t ? a.apiInfo(t) ? i.get(t, e.metadata.name, {
namespace: p.input.selectedProject.metadata.name
}, {
errorNotification: !1
}).then(function(t) {
var n = angular.copy(e), r = angular.copy(t.metadata);
r.annotations = e.metadata.annotations, r.labels = e.metadata.labels, n.metadata = r, p.updateResources.push(n);
}, function() {
p.createResources.push(e);
}) : (p.errorOccurred = !0, void (p.error = {
message: a.unsupportedObjectKindOrVersion(e)
})) : (p.errorOccurred = !0, void (p.error = {
message: a.invalidObjectKindOrVersion(e)
}));
}
function C() {
var t;
_.isEmpty(p.createResources) ? (t = _.head(p.updateResources), i.update(a.kindToResource(t.kind), t.metadata.name, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = k(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully updated."
>>>>>>> Configurable inactivity timeout in console
});
<<<<<<< HEAD
}, j = function() {
u ? $(u).on("scroll", P) : g.on("scroll", P);
}, k = function() {
t.fixedHeight || f.affix({
target: window,
offset: {
top: t.followAffixTop || 0
=======
t.$watch("pods", r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
});
}, I = function() {
return $("#" + t.logViewerID + " .log-view-output");
}, R = function(e) {
var n = I(), r = n.offset().top;
if (!(r < 0)) {
var a = $(".ellipsis-pulser").outerHeight(!0), o = t.fixedHeight ? t.fixedHeight : Math.floor($(window).height() - r - a);
=======
P = {}, j = null, delete t.metricsError, y();
=======
R = {}, j = null, delete t.metricsError, y();
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
R = {}, P = null, delete t.metricsError, y();
>>>>>>> Service instance details configuration and edit
=======
R = {}, j = null, delete t.metricsError, y();
>>>>>>> Add product icons for service catalog
=======
R = {}, P = null, delete t.metricsError, y();
>>>>>>> Handle displaying parameters when secrets are not available.
=======
R = {}, j = null, delete t.metricsError, y();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
R = {}, P = null, delete t.metricsError, y();
>>>>>>> Update template service broker flag name
=======
R = {}, k = null, delete t.metricsError, y();
>>>>>>> Fix for adding non-builder templates to a project
=======
R = {}, k = null, delete t.metricsError, y();
>>>>>>> Update pod controller to use getPreferredVersion
=======
I = {}, k = null, delete t.metricsError, y();
>>>>>>> Add search catalog in project context
}, !0), b = e(y, s.getDefaultUpdateInterval(), !1), t.updateInView = function(e) {
R = !e, e && (!j || Date.now() > j + s.getDefaultUpdateInterval()) && y();
};
var A = r.$on("metrics.charts.resize", function() {
s.redraw(S);
});
t.$on("$destroy", function() {
b && (e.cancel(b), b = null), A && (A(), A = null), angular.forEach(S, function(e) {
e.destroy();
<<<<<<< HEAD
<<<<<<< HEAD
}), C = null, P = !0;
=======
}), S = null, k = !0;
>>>>>>> Adding label filter to ste secrets page
=======
}), S = null, P = !0;
>>>>>>> Update pod controller to use getPreferredVersion
});
}
};
} ]), angular.module("openshiftConsole").directive("logViewer", [ "$sce", "$timeout", "$window", "$filter", "$q", "AuthService", "APIService", "APIDiscovery", "DataService", "HTMLService", "ModalsService", "logLinks", "BREAKPOINTS", function(e, t, n, a, r, o, i, s, c, l, u, d) {
var m = $(window), p = $('<tr class="log-line"><td class="log-line-number"></td><td class="log-line-text"></td></tr>').get(0), f = function(e, t) {
var n = p.cloneNode(!0);
n.firstChild.setAttribute("data-line-number", e);
var a = ansi_up.escape_for_html(t), r = ansi_up.ansi_to_html(a), o = l.linkify(r, "_blank", !0);
return n.lastChild.innerHTML = o, n;
};
return {
restrict: "AE",
transclude: !0,
templateUrl: "views/directives/logs/_log-viewer.html",
scope: {
<<<<<<< HEAD
followAffixTop: "=?",
object: "=",
fullLogUrl: "=?",
name: "=",
context: "=",
options: "=?",
fixedHeight: "=?",
chromeless: "=?",
empty: "=?",
run: "=?"
},
controller: [ "$scope", function(t) {
var l, u, p, g = document.documentElement;
t.logViewerID = _.uniqueId("log-viewer"), t.empty = !0;
var v, h;
"ReplicationController" === t.object.kind ? (v = "deploymentconfigs/log", h = a("annotation")(t.object, "deploymentConfig")) : (v = i.kindToResource(t.object.kind) + "/log", h = t.object.metadata.name);
var y, b = function() {
t.$apply(function() {
var e = l.getBoundingClientRect();
t.fixedHeight ? t.showScrollLinks = e && e.height > t.fixedHeight : t.showScrollLinks = e && (e.top < 0 || e.bottom > g.clientHeight);
});
}, S = !1, C = function() {
S ? S = !1 : t.$evalAsync(function() {
t.autoScrollActive = !1;
=======
routes: "=",
services: "=",
portsByRoute: "=",
showNodePorts: "=?",
customNameHeader: "=?"
},
templateUrl: "views/directives/traffic-table.html"
};
}), angular.module("openshiftConsole").component("resourceServiceBindings", {
controller: [ "$filter", "APIService", "BindingService", "CatalogService", "DataService", ResourceServiceBindings ],
controllerAs: "$ctrl",
bindings: {
project: "<",
projectContext: "<",
apiObject: "<",
createBinding: "&"
},
templateUrl: "views/directives/resource-service-bindings.html"
}), angular.module("openshiftConsole").component("serviceInstanceBindings", {
controller: [ "$filter", "APIService", "BindingService", ServiceInstanceBindings ],
controllerAs: "$ctrl",
bindings: {
isOverview: "<?",
showHeader: "<?",
project: "<",
bindings: "<",
serviceInstance: "<",
serviceClass: "<",
servicePlan: "<"
},
templateUrl: "views/directives/service-instance-bindings.html"
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "$timeout", "$rootScope", "$routeParams", "AuthorizationService", "Constants", "HTMLService", function(e, t, n, r, a, o, i, s) {
var c = function(e, t) {
return e.href === t || _.some(e.prefixes, function(e) {
return _.startsWith(t, e);
});
};
return {
restrict: "E",
templateUrl: "views/_sidebar.html",
controller: [ "$scope", function(l) {
var u;
l.navItems = i.PROJECT_NAVIGATION, l.sidebar = {};
var d = function() {
l.projectName = a.project, _.set(l, "sidebar.secondaryOpen", !1), _.set(r, "nav.showMobileNav", !1), l.activeSecondary = null, l.activePrimary = _.find(l.navItems, function(t) {
return u = e.path().replace("/project/" + l.projectName, ""), c(t, u) ? (l.activeSecondary = null, !0) : _.some(t.secondaryNavSections, function(e) {
var t = _.find(e.items, function(e) {
return c(e, u);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}, w = function() {
<<<<<<< HEAD
u ? $(u).on("scroll", S) : m.on("scroll", S);
}, P = function() {
=======
u ? $(u).on("scroll", C) : m.on("scroll", C);
<<<<<<< HEAD
}, k = function() {
>>>>>>> Adding label filter to ste secrets page
=======
}, P = function() {
>>>>>>> Update pod controller to use getPreferredVersion
t.fixedHeight || p.affix({
target: window,
offset: {
top: t.followAffixTop || 0
}
});
}, k = function() {
return $("#" + t.logViewerID + " .log-view-output");
}, j = function(e) {
var n = k(), a = n.offset().top;
if (!(a < 0)) {
var r = $(".ellipsis-pulser").outerHeight(!0), o = t.fixedHeight ? t.fixedHeight : Math.floor($(window).height() - a - r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
t.chromeless || t.fixedHeight || (o -= 40), e ? n.animate({
"min-height": o + "px"
}, "fast") : n.css("min-height", o + "px"), t.fixedHeight && n.css("max-height", o);
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, T = function() {
=======
}, D = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, N = function() {
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
}, D = function() {
>>>>>>> Add bindings list to resource pages
=======
}, N = function() {
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
}, I = function() {
>>>>>>> Add notification-drawer to show curated list of events to user
=======
}, N = function() {
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
}, N = function() {
>>>>>>> Adjust events to show in the drawer
if (!S) {
=======
}, R = function() {
=======
}, I = function() {
>>>>>>> Add search catalog in project context
if (!y) {
>>>>>>> Patternfly vertical navigation and project bar
var e = function() {
clearInterval(y), y = null, t.$evalAsync(function() {
t.sized = !0;
});
}, n = 0;
<<<<<<< HEAD
S = setInterval(function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
n > 10 ? e() : (n++, I().is(":visible") && (R(), e()));
}, 100);
}
}, E = _.debounce(function() {
R(!0), C(), P();
}, 100);
g.on("resize", E);
var N, D = function() {
w = !0, d.scrollBottom(u);
}, A = document.createDocumentFragment(), B = _.debounce(function() {
l.appendChild(A), A = document.createDocumentFragment(), t.autoScrollActive && D(), t.showScrollLinks || C();
}, 100, {
maxWait: 300
}), L = function(e) {
var t = a.defer();
return N ? (N.onClose(function() {
t.resolve();
}), N.stop()) : t.resolve(), e || (B.cancel(), l && (l.innerHTML = ""), A = document.createDocumentFragment()), t.promise;
}, x = function() {
L().then(function() {
=======
n > 10 ? e() : (n++, E().is(":visible") && (N(), e()));
=======
n > 10 ? e() : (n++, E().is(":visible") && (D(), e()));
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
n > 10 ? e() : (n++, T().is(":visible") && (I(), e()));
>>>>>>> Add bindings list to resource pages
=======
n > 10 ? e() : (n++, T().is(":visible") && (N(), e()));
>>>>>>> Add notification-drawer to show curated list of events to user
=======
n > 10 ? e() : (n++, T().is(":visible") && (I(), e()));
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
n > 10 ? e() : (n++, T().is(":visible") && (I(), e()));
>>>>>>> Adjust events to show in the drawer
=======
y = setInterval(function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
n > 10 ? e() : (n++, j().is(":visible") && (P(), e()));
>>>>>>> Patternfly vertical navigation and project bar
=======
n > 10 ? e() : (n++, P().is(":visible") && (j(), e()));
>>>>>>> Service instance details configuration and edit
=======
n > 10 ? e() : (n++, j().is(":visible") && (P(), e()));
>>>>>>> Add product icons for service catalog
=======
n > 10 ? e() : (n++, P().is(":visible") && (j(), e()));
>>>>>>> Handle displaying parameters when secrets are not available.
=======
n > 10 ? e() : (n++, j().is(":visible") && (P(), e()));
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
n > 10 ? e() : (n++, P().is(":visible") && (j(), e()));
>>>>>>> Update template service broker flag name
=======
n > 10 ? e() : (n++, k().is(":visible") && (j(), e()));
>>>>>>> Fix for adding non-builder templates to a project
=======
n > 10 ? e() : (n++, k().is(":visible") && (j(), e()));
>>>>>>> Update pod controller to use getPreferredVersion
}, 100);
}
<<<<<<< HEAD
}, R = _.debounce(function() {
j(!0), b(), C();
}, 100);
m.on("resize", R);
var E, T = function() {
S = !0, d.scrollBottom(u);
}, N = document.createDocumentFragment(), D = _.debounce(function() {
l.appendChild(N), N = document.createDocumentFragment(), t.autoScrollActive && T(), t.showScrollLinks || b();
}, 100, {
maxWait: 300
}), A = function(e) {
var t = r.defer();
return E ? (E.onClose(function() {
t.resolve();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), A.stop()) : t.resolve(), e || (U.cancel(), l && (l.innerHTML = ""), L = document.createDocumentFragment()), t.promise;
}, x = function() {
O().then(function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), T.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
=======
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
>>>>>>> Add the ability to add a secret to an application
=======
}), I.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
>>>>>>> Enable new landing page experience by default
=======
}), T.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
>>>>>>> Updates for Service Instance & Bindings
=======
}), T.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), E = document.createDocumentFragment()), t.promise;
>>>>>>> Quota Notifications
=======
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
>>>>>>> Support EnvFrom in the Env Editors
=======
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), T = document.createDocumentFragment()), t.promise;
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
>>>>>>> Update template service broker flag name
}, B = function() {
A().then(function() {
>>>>>>> Patternfly vertical navigation and project bar
t.$evalAsync(function() {
if (t.run) {
angular.extend(t, {
loading: !0,
autoScrollActive: !0,
largeLog: !1,
limitReached: !1,
showScrollLinks: !1,
state: ""
});
var e = angular.extend({
follow: !0,
tailLines: 5e3,
limitBytes: 10485760
<<<<<<< HEAD
}, t.options), n = 0, r = function(e) {
n++, A.appendChild(v(n, e)), B();
=======
}).result.then(y);
}, T = {}, E = function() {
c.hideNotification("from-file-error"), _.each(T, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
});
}, N = function(e) {
E(), T = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
T = T.concat(t), _.filter(T, {
type: "error"
}).length ? (_.each(T, function(e) {
e.id = _.uniqueId("from-file-alert-"), c.addNotification(e);
}), p.disableInputs = !1) : T.length ? (R(T), p.disableInputs = !1) : y();
}, D = function() {
if (_.has(p.input.selectedProject, "metadata.uid")) return n.when(p.input.selectedProject);
var t = p.input.selectedProject.metadata.name, r = p.input.selectedProject.metadata.annotations["new-display-name"], a = e("description")(p.input.selectedProject);
return m.create(t, r, a);
>>>>>>> Configurable inactivity timeout in console
};
(N = c.createStream(y, b, t.context, e)).onMessage(function(a, o, i) {
t.$evalAsync(function() {
t.empty = !1, "logs" !== t.state && (t.state = "logs", T());
}), a && (e.limitBytes && i >= e.limitBytes && (t.$evalAsync(function() {
t.limitReached = !0, t.loading = !1;
}), L(!0)), r(a), !t.largeLog && n >= e.tailLines && t.$evalAsync(function() {
t.largeLog = !0;
}));
}), N.onClose(function() {
N = null, t.$evalAsync(function() {
t.loading = !1, t.autoScrollActive = !1, 0 !== n || t.emptyStateMessage || (t.state = "empty", t.emptyStateMessage = p.getString(m("The logs are no longer available or could not be loaded.")));
});
}), N.onError(function() {
N = null, t.$evalAsync(function() {
angular.extend(t, {
loading: !1,
autoScrollActive: !1
}), 0 === n ? (t.state = "empty", t.emptyStateMessage = p.getString(m("The logs are no longer available or could not be loaded."))) : t.errorWhileRunning = !0;
});
}), N.start();
=======
}, t.options), n = 0, a = function(e) {
n++, N.appendChild(f(n, e)), D();
};
<<<<<<< HEAD
(E = c.createStream(v, h, t.context, e)).onMessage(function(r, o, i) {
t.$evalAsync(function() {
t.empty = !1, "logs" !== t.state && (t.state = "logs", I());
}), r && (e.limitBytes && i >= e.limitBytes && (t.$evalAsync(function() {
t.limitReached = !0, t.loading = !1;
}), A(!0)), a(r), !t.largeLog && n >= e.tailLines && t.$evalAsync(function() {
t.largeLog = !0;
=======
l.isMobile = p();
var f = _.throttle(function() {
var e = p();
e !== l.isMobile && l.$evalAsync(function() {
l.isMobile = e, e || (_.set(r, "nav.showMobileNav", !1), _.each(l.navItems, function(e) {
e.mobileSecondary = !1;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
}), E.onClose(function() {
E = null, t.$evalAsync(function() {
t.loading = !1, t.autoScrollActive = !1, 0 !== n || t.emptyStateMessage || (t.state = "empty", t.emptyStateMessage = "The logs are no longer available or could not be loaded.");
});
}), E.onError(function() {
E = null, t.$evalAsync(function() {
angular.extend(t, {
loading: !1,
autoScrollActive: !1
}), 0 === n ? (t.state = "empty", t.emptyStateMessage = "The logs are no longer available or could not be loaded.") : t.errorWhileRunning = !0;
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), B.start();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), A.start();
>>>>>>> Improve YAML editor validation and feedback
=======
}), B.start();
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
}), A.start();
>>>>>>> Add bindings list to resource pages
=======
}), T.start();
>>>>>>> Patternfly vertical navigation and project bar
=======
}), E.start();
>>>>>>> Add the ability to add a secret to an application
=======
}), I.start();
>>>>>>> Enable new landing page experience by default
=======
}), T.start();
>>>>>>> Updates for Service Instance & Bindings
=======
}), E.start();
>>>>>>> Support EnvFrom in the Env Editors
}
});
});
};
<<<<<<< HEAD
<<<<<<< HEAD
if (s.getLoggingURL(t.context.project).then(function(a) {
var i = _.get(t.context, "project.metadata.name"), s = _.get(t.options, "container");
i && s && b && a && (angular.extend(t, {
=======
if (s.getLoggingURL().then(function(a) {
=======
if (s.getLoggingURL(t.context.project).then(function(a) {
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
var r = _.get(t.context, "project.metadata.name"), i = _.get(t.options, "container");
<<<<<<< HEAD
<<<<<<< HEAD
r && i && C && a && (angular.extend(t, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r && i && v && a && (angular.extend(t, {
>>>>>>> Patternfly vertical navigation and project bar
=======
r && i && h && a && (angular.extend(t, {
>>>>>>> Add SVG icons
kibanaAuthUrl: e.trustAsResourceUrl(URI(a).segment("auth").segment("token").normalizePathname().toString()),
access_token: o.UserStore().getToken()
}), t.$watchGroup([ "context.project.metadata.name", "options.container", "name" ], function() {
angular.extend(t, {
kibanaArchiveUrl: e.trustAsResourceUrl(d.archiveUri({
namespace: t.context.project.metadata.name,
namespaceUid: t.context.project.metadata.uid,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
podname: b,
containername: t.options.container,
backlink: URI.encode(n.location.href)
}, r("annotation")(t.context.project, "loggingDataPrefix")))
=======
} ]
};
} ]).directive("oscHeader", [ "$filter", "$location", "$q", "$rootScope", "$routeParams", "$timeout", "APIService", "AuthorizationService", "Catalog", "CatalogService", "Constants", "DataService", "NotificationsService", "ProjectsService", "projectOverviewURLFilter", "RecentlyViewedServiceItems", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g) {
var v = {}, h = [], y = e("displayName"), b = e("uniqueDisplayName"), S = i.getPreferredVersion("templates");
return {
<<<<<<< HEAD
restrict: "EA",
templateUrl: "views/directives/header/header.html",
link: function(o, i) {
o.currentProject = v[a.project];
var m = function(e, t) {
var n;
_.set(r, "nav.collapsed", e), t && (n = e ? "true" : "false", localStorage.setItem("openshift/vertical-nav-collapsed", n));
};
!function() {
var e = "true" === localStorage.getItem("openshift/vertical-nav-collapsed");
m(e);
}();
var C = function() {
return _.get(r, "nav.collapsed", !1);
}, w = function(e) {
_.set(r, "nav.showMobileNav", e);
};
o.toggleNav = function() {
var e = C();
m(!e, !0);
}, o.toggleMobileNav = function() {
var e = _.get(r, "nav.showMobileNav");
w(!e);
}, o.closeMobileNav = function() {
w(!1);
}, o.closeOrderingPanel = function() {
o.orderingPanelVisible = !1;
}, o.showOrderingPanel = function(e) {
o.orderingPanelVisible = !0, o.orderKind = e;
}, o.onSearchToggle = function(e) {
_.set(r, "view.hasProjectSearch", e);
}, o.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var P = i.find(".selectpicker"), k = [], j = function() {
var t = o.currentProjectName;
if (t) {
var n = function(e, n) {
var r = $("<option>").attr("value", e.metadata.name).attr("selected", e.metadata.name === t);
return n ? r.text(y(e)) : r.text(b(e, h)), r;
=======
}
}, p.cancel = function() {
E(), s.toProjectOverview(p.input.selectedProject.metadata.name);
};
var A = e("displayName");
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", E);
} ]
>>>>>>> Configurable inactivity timeout in console
};
_.size(v) <= 100 ? (h = e("orderByDisplayName")(v), k = _.map(h, function(e) {
return n(e, !1);
})) : k = [ n(v[t], !0) ], P.empty(), P.append(k), P.append($('<option data-divider="true"></option>')), P.append($('<option value="">View All Projects</option>')), P.selectpicker("refresh");
=======
restrict: "E",
scope: {
model: "=",
required: "<",
disabled: "<ngDisabled",
readonly: "<ngReadonly",
showTextArea: "<",
hideClear: "<?",
helpText: "@?",
dropZoneId: "@?",
onFileAdded: "<?"
},
templateUrl: "views/directives/osc-file-input.html",
link: function(t, n) {
function r(n) {
var r = new FileReader();
r.onloadend = function() {
t.$apply(function() {
t.fileName = n.name, t.model = r.result;
var e = t.onFileAdded;
_.isFunction(e) && e(r.result);
});
}, r.onerror = function(n) {
t.supportsFileUpload = !1, t.uploadError = !0, e.error("Could not read file", n);
}, r.readAsText(n);
>>>>>>> Bug 1526538 - Allow users to clear edits by uploading same file
}
}, I = function() {
return p.list().then(function(e) {
v = e.by("metadata.name");
});
}, R = function() {
var e = a.project;
o.currentProjectName !== e && (o.currentProjectName = e, o.chromeless = "chromeless" === a.view, e && !o.chromeless ? (_.set(r, "view.hasProject", !0), o.canIAddToProject = !1, s.getProjectRules(e).then(function() {
o.currentProjectName === e && (o.canIAddToProject = s.canIAddToProject(e), o.canIAddToProject && l.getCatalogItems().then(function(e) {
o.catalogItems = e;
}));
}), I().then(function() {
o.currentProjectName && v && (v[o.currentProjectName] || (v[o.currentProjectName] = {
metadata: {
name: o.currentProjectName
}
}), o.currentProject = v[o.currentProjectName], j());
})) : _.set(r, "view.hasProject", !1));
}, E = function() {
o.orderingPanelVisible && g.addItem(_.get(o.selectedItem, "resource.metadata.uid"));
}, T = function(e) {
return "PartialObjectMetadata" === e.kind;
}, N = function(e) {
return T(e) ? d.get(S, e.metadata.name, {
namespace: e.metadata.namespace
}) : n.when(e);
};
o.$on("open-overlay-panel", function(e, t) {
o.currentProjectName && (o.servicePlansForItem = null, o.orderKind = _.get(t, "kind"), "Template" !== o.orderKind ? "ClusterServiceClass" !== o.orderKind ? (o.selectedItem = t, o.orderingPanelVisible = !0) : c.getServicePlansForServiceClass(_.get(t, "resource.metadata.name")).then(function(e) {
o.servicePlansForItem = _.reject(e.by("metadata.name"), {
status: {
removedFromBrokerCatalog: !0
}
}), o.selectedItem = t, o.orderingPanelVisible = !0;
}) : N(t.resource).then(function(e) {
o.selectedItem = e, o.orderingPanelVisible = !0, o.orderKind = "Template";
}));
});
var D = r.$on("filter-catalog-items", function(e, n) {
if (o.currentProjectName) {
var r = {
filter: n.searchText
};
t.path("project/" + encodeURIComponent(o.currentProjectName) + "/project-browse-catalog").search(r);
}
});
<<<<<<< HEAD
o.closeOrderingPanel = function() {
g.addItem(_.get(o.selectedItem, "resource.metadata.uid")), o.orderingPanelVisible = !1;
}, R(), o.$on("$routeChangeSuccess", R), P.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : f(e);
o.$apply(function() {
t.url(n);
});
}), o.$on("$destroy", function() {
D(), E();
>>>>>>> Update directives/nav oscHeader to use getPreferredVersion
});
}));
}), this.cacheScrollableNode = function(e) {
u = e;
}, this.cacheLogNode = function(e) {
l = e;
}, this.cacheAffixable = function(e) {
f = $(e);
}, this.start = function() {
j(), k();
=======
podname: C,
=======
podname: v,
>>>>>>> Patternfly vertical navigation and project bar
=======
podname: h,
>>>>>>> Add SVG icons
containername: t.options.container,
backlink: URI.encode(n.location.href)
}))
});
<<<<<<< HEAD
}));
}), this.cacheScrollableNode = function(e) {
u = e;
}, this.cacheLogNode = function(e) {
l = e;
}, this.cacheAffixable = function(e) {
p = $(e);
}, this.start = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
w(), P(), T();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
w(), P(), E();
>>>>>>> Add bindings list to resource pages
=======
w(), R(), E();
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
w(), k();
>>>>>>> Patternfly vertical navigation and project bar
=======
w(), P();
>>>>>>> Fix for adding non-builder templates to a project
=======
w(), P();
>>>>>>> Update pod controller to use getPreferredVersion
}, angular.extend(t, {
ready: !0,
loading: !0,
autoScrollActive: !0,
state: !1,
onScrollBottom: function() {
<<<<<<< HEAD
<<<<<<< HEAD
d.scrollBottom(u);
},
onScrollTop: function() {
t.autoScrollActive = !1, d.scrollTop(u), $("#" + t.logViewerID + "-affixedFollow").affix("checkPosition");
},
toggleAutoScroll: function() {
<<<<<<< HEAD
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && D();
=======
d.scrollBottom(h);
=======
d.scrollBottom(u);
>>>>>>> Patternfly vertical navigation and project bar
},
onScrollTop: function() {
t.autoScrollActive = !1, d.scrollTop(u), $("#" + t.logViewerID + "-affixedFollow").affix("checkPosition");
},
toggleAutoScroll: function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && A();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && B();
>>>>>>> Improve YAML editor validation and feedback
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && A();
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && B();
>>>>>>> Add bindings list to resource pages
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && I();
>>>>>>> Patternfly vertical navigation and project bar
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && E();
>>>>>>> Enable new landing page experience by default
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && N();
>>>>>>> Quota Notifications
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && T();
>>>>>>> Support EnvFrom in the Env Editors
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && N();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && T();
>>>>>>> Update template service broker flag name
},
goChromeless: d.chromelessLink,
restartLogs: B
=======
}), $(document).on("drop." + o, function() {
return a(), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !1), !1;
}), $(document).on("dragenter." + o, function() {
if (!t.disabled) return c = !0, n.find(".drag-and-drop-zone").addClass("show-drag-and-drop-zone"), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !0), !1;
}), $(document).on("dragover." + o, function() {
if (!t.disabled) return c = !0, n.find(".drag-and-drop-zone").addClass("show-drag-and-drop-zone"), !1;
}), $(document).on("dragleave." + o, function() {
return c = !1, _.delay(function() {
c || n.find(".drag-and-drop-zone").removeClass("show-drag-and-drop-zone");
}, 200), !1;
}), t.cleanInputValues = function() {
t.model = "", t.fileName = "", l[0].value = "";
}, l.change(function() {
r(l[0].files[0]), l[0].value = "";
>>>>>>> Bug 1526538 - Allow users to clear edits by uploading same file
}), t.$on("$destroy", function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
L(), g.off("resize", E), g.off("scroll", P), u && $(u).off("scroll", P);
}), "deploymentconfigs/logs" === y && !b) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
t.$watchGroup([ "name", "options.container", "run" ], x);
} ],
require: "logViewer",
link: function(e, n, r, a) {
t(function() {
e.fixedHeight && a.cacheScrollableNode(document.getElementById(e.logViewerID + "-fixed-scrollable")), a.cacheLogNode(document.getElementById(e.logViewerID + "-logContent")), a.cacheAffixable(document.getElementById(e.logViewerID + "-affixedFollow")), a.start();
}, 0);
var o = function() {
var t = $(n).find(".log-line-text").text(), r = _.get(e, "object.metadata.name", "openshift") + ".log", a = new Blob([ t ], {
type: "text/plain;charset=utf-8"
});
saveAs(a, r);
=======
O(), p.off("resize", I), p.off("scroll", R), g.off("scroll", R);
=======
O(), p.off("resize", N), p.off("scroll", R), g.off("scroll", R);
>>>>>>> Add bindings list to resource pages
=======
O(), p.off("resize", N), p.off("scroll", P), g.off("scroll", P);
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
O(), p.off("resize", D), p.off("scroll", P), g.off("scroll", P);
>>>>>>> Bug 1481127 - More robust handling of large project lists
}), "deploymentconfigs/logs" === b && !C) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
t.$watchGroup([ "name", "options.container", "run" ], F);
=======
O(), p.off("resize", D), p.off("scroll", P), g.off("scroll", P);
}), "deploymentconfigs/logs" === b && !C) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
t.$watchGroup([ "name", "options.container", "run" ], x);
>>>>>>> Adjust events to show in the drawer
=======
A(), m.off("resize", E), m.off("scroll", S), u && $(u).off("scroll", S);
=======
A(), m.off("resize", T), m.off("scroll", S), u && $(u).off("scroll", S);
>>>>>>> Add the ability to add a secret to an application
=======
A(), p.off("resize", I), p.off("scroll", S), u && $(u).off("scroll", S);
>>>>>>> Updates for Service Instance & Bindings
=======
A(), m.off("resize", I), m.off("scroll", S), u && $(u).off("scroll", S);
<<<<<<< HEAD
>>>>>>> Support EnvFrom in the Env Editors
}), "deploymentconfigs/logs" === h && !v) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
=======
=======
A(), m.off("resize", I), m.off("scroll", C), u && $(u).off("scroll", C);
>>>>>>> Service instance details configuration and edit
=======
A(), m.off("resize", I), m.off("scroll", S), u && $(u).off("scroll", S);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
A(), m.off("resize", I), m.off("scroll", C), u && $(u).off("scroll", C);
>>>>>>> Adding label filter to ste secrets page
=======
A(), m.off("resize", R), m.off("scroll", C), u && $(u).off("scroll", C);
>>>>>>> Add search catalog in project context
}), "deploymentconfigs/logs" === v && !h) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
>>>>>>> Add SVG icons
t.$watchGroup([ "name", "options.container", "run" ], B);
>>>>>>> Patternfly vertical navigation and project bar
} ],
require: "logViewer",
link: function(e, n, a, r) {
t(function() {
e.fixedHeight && r.cacheScrollableNode(document.getElementById(e.logViewerID + "-fixed-scrollable")), r.cacheLogNode(document.getElementById(e.logViewerID + "-logContent")), r.cacheAffixable(document.getElementById(e.logViewerID + "-affixedFollow")), r.start();
}, 0);
var o = function() {
var t = $(n).find(".log-line-text").text(), a = _.get(e, "object.metadata.name", "openshift") + ".log", r = new Blob([ t ], {
type: "text/plain;charset=utf-8"
=======
}
};
} ]).directive("navbarUtility", function() {
return {
restrict: "E",
transclude: !0,
templateUrl: "views/directives/header/_navbar-utility.html",
controller: [ "$scope", "Constants", function(e, t) {
e.launcherApps = t.APP_LAUNCHER_NAVIGATION;
} ]
};
}).directive("navbarUtilityMobile", [ "$timeout", function(e) {
return {
restrict: "E",
transclude: !0,
templateUrl: "views/directives/header/_navbar-utility-mobile.html",
link: function(t, n) {
e(function() {
var e = n.find("li");
e.addClass("list-group-item");
var r = {};
e.each(function(e, t) {
var n = $(t).find("a");
n.each(function(e, n) {
n.href && (r[n.href] = t);
}), n.contents().filter(function() {
return 3 === this.nodeType && $.trim(this.nodeValue).length;
}).wrap('<span class="list-group-item-value"/>');
});
var a = function() {
e.removeClass("active");
var t = r[window.location.href];
t && $(t).addClass("active");
};
a(), t.$on("$routeChangeSuccess", a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
saveAs(r, a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
e.canSave = !!new Blob(), e.saveLog = function() {
e.largeLog ? u.confirmSaveLog(e.object).then(o) : o();
};
}
};
} ]), angular.module("openshiftConsole").directive("statusIcon", function() {
return {
restrict: "E",
templateUrl: "views/directives/_status-icon.html",
scope: {
status: "=",
disableAnimation: "@"
},
link: function(e, t, n) {
e.spinning = !angular.isDefined(n.disableAnimation);
}
};
}), angular.module("openshiftConsole").directive("ellipsisPulser", [ function() {
return {
restrict: "E",
scope: {
color: "@",
display: "@",
size: "@",
msg: "@"
},
templateUrl: "views/directives/_ellipsis-pulser.html"
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("podDonut", [ "$timeout", "isPullingImageFilter", "isTerminatingFilter", "podWarningsFilter", "numContainersReadyFilter", "Logger", "ChartsService", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c) {
=======
} ]), angular.module("openshiftConsole").directive("podDonut", [ "$timeout", "isPullingImageFilter", "isTerminatingFilter", "podWarningsFilter", "numContainersReadyFilter", "Logger", "ChartsService", function(e, t, n, a, r, o, i) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
pods: "=",
desired: "=?",
idled: "=?",
mini: "=?"
},
templateUrl: "views/directives/pod-donut.html",
link: function(e, o) {
<<<<<<< HEAD
function l() {
=======
function s() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var t = _.reject(e.pods, {
status: {
phase: "Failed"
}
}), n = _.size(t);
if (e.mini) e.$evalAsync(function() {
e.total = n;
}); else {
<<<<<<< HEAD
var r;
r = angular.isNumber(e.desired) && e.desired !== n ? c.getString(s("scaling to")) + " " + e.desired + "..." : 1 === n ? "pod" : "pods", e.idled ? i.updateDonutCenterText(o[0], "Idle") : i.updateDonutCenterText(o[0], n, r);
}
}
function u(e) {
return a(e) === _.size(e.spec.containers);
}
function d(e) {
if (n(e)) return c.getString(s("Terminating"));
var a = r(e);
return _.some(a, {
severity: "error"
}) ? c.getString(s("Error")) : _.isEmpty(a) ? t(e) ? c.getString(s("Pulling")) : "Running" !== e.status.phase || u(e) ? _.get(e, "status.phase", c.getString(s("Unknown"))) : c.getString(s("Not Ready")) : c.getString(s("Warning"));
}
var m, p, g = [ "Running", "Not Ready", "Warning", "Error", "Pulling", "Pending", "Succeeded", "Terminating", "Unknown" ];
e.chartId = _.uniqueId("pods-donut-chart-"), (p = {
=======
var a;
a = angular.isNumber(e.desired) && e.desired !== n ? "scaling to " + e.desired + "..." : 1 === n ? "pod" : "pods", e.idled ? i.updateDonutCenterText(o[0], "Idle") : i.updateDonutCenterText(o[0], n, a);
}
}
<<<<<<< HEAD
function c(e) {
return r(e) === _.size(e.spec.containers);
=======
function b() {
var e, n;
E(), "Template" === p.resourceKind && p.templateOptions.process && !p.errorOccurred ? p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
template: p.resource
}) : (n = p.templateOptions.add || p.updateResources.length > 0 ? p.input.selectedProject.metadata.name : "", e = s.createFromTemplateURL(p.resource, p.input.selectedProject.metadata.name, {
namespace: n
}), t.url(e)) : p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
resource: p.resource,
isList: p.isList
}) : (e = s.projectOverviewURL(p.input.selectedProject.metadata.name), t.url(e));
>>>>>>> Check for new templateServiceBrokerEnabled flag
}
function l(e) {
if (n(e)) return "Terminating";
var r = a(e);
return _.some(r, {
severity: "error"
}) ? "Error" : _.isEmpty(r) ? t(e) ? "Pulling" : "Running" !== e.status.phase || c(e) ? _.get(e, "status.phase", "Unknown") : "Not Ready" : "Warning";
}
var u, d, m = [ "Running", "Not Ready", "Warning", "Error", "Pulling", "Pending", "Succeeded", "Terminating", "Unknown" ];
e.chartId = _.uniqueId("pods-donut-chart-"), d = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "donut",
bindto: "#" + e.chartId,
donut: {
expand: !1,
label: {
show: !1
},
<<<<<<< HEAD
width: e.mini ? 5 : 10
=======
link: function(t) {
var n, r = "", a = e(t.pod);
for (n = 0; n < _.size(a); n++) r && (r += "<br>"), "error" === a[n].severity && (t.hasError = !0), r += a[n].message;
t.content = r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
size: {
height: e.mini ? 45 : 150,
width: e.mini ? 45 : 150
},
legend: {
show: !1
},
<<<<<<< HEAD
onrendered: l,
=======
onrendered: s,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
tooltip: {
format: {
value: function(e, t, n) {
if (e && "Empty" !== n) return e;
}
}
},
transition: {
duration: 350
},
<<<<<<< HEAD
data: {
type: "donut",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
groups: [ g ],
order: null,
colors: {},
=======
groups: [ m ],
=======
groups: [ p ],
>>>>>>> Updates for Service Instance & Bindings
=======
groups: [ m ],
>>>>>>> Support EnvFrom in the Env Editors
order: null,
colors: {
Empty: "#ffffff",
Running: "#00b9e4",
"Not Ready": "#beedf9",
Warning: "#f39d3c",
Error: "#d9534f",
Pulling: "#d1d1d1",
Pending: "#ededed",
Succeeded: "#3f9c35",
Terminating: "#00659c",
Unknown: "#f9d67a"
},
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
selection: {
enabled: !1
=======
templateUrl: "views/directives/_copy-to-clipboard.html",
controller: [ "$scope", function(e) {
e.id = _.uniqueId("clipboardJs");
} ],
link: function(e, t) {
var n = $("a", t), r = n.get(0);
e.inputText && (r = n.get(1));
var a = new Clipboard(r);
a.on("success", function(e) {
$(e.trigger).attr("title", "Copied!").tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle"), e.clearSelection();
}), a.on("error", function(e) {
var t = /Mac/i.test(navigator.userAgent) ? "Press ⌘C to copy" : "Press Ctrl-C to copy";
$(e.trigger).attr("title", t).tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle");
}), t.on("$destroy", function() {
a.destroy();
});
}
};
}).directive("copyLoginToClipboard", [ "NotificationsService", function(e) {
return {
restrict: "E",
replace: !0,
scope: {
clipboardText: "@"
},
template: '<a href="" data-clipboard-text="">Copy Login Command</a>',
link: function(t, n) {
var r = new Clipboard(n.get(0));
r.on("success", function() {
e.addNotification({
id: "copy-login-command-success",
type: "success",
message: "Login command copied."
});
e.addNotification({
id: "openshift/token-warning",
type: "warning",
message: "A token is a form of a password. Do not share your API token.",
links: [ {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return e.permanentlyHideNotification("openshift/token-warning"), !0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}
<<<<<<< HEAD
}).data.colors[c.getString(s("Empty"))] = "#ffffff", p.data.colors[c.getString(s("Running"))] = "#00b9e4", p.data.colors[c.getString(s("Not Ready"))] = "#beedf9", p.data.colors[c.getString(s("Warning"))] = "#f39d3c", p.data.colors[c.getString(s("Error"))] = "#d9534f", p.data.colors[c.getString(s("Pulling"))] = "#d1d1d1", p.data.colors[c.getString(s("Pending"))] = "#ededed", p.data.colors[c.getString(s("Succeeded"))] = "#00659c", p.data.colors[c.getString(s("Terminating"))] = "#3f9c35", p.data.colors[c.getString(s("Unknown"))] = "#f9d67a", e.mini && (p.padding = {
=======
}, e.mini && (d.padding = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
top: 0,
right: 0,
bottom: 0,
left: 0
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var f = _.debounce(function(t) {
var n = {
columns: []
};
angular.forEach(g, function(e) {
n.columns.push([ c.getString(e), t[e] || 0 ]);
}), _.isEmpty(t) ? n.columns.push([ "Empty", 1 ]) : n.unload = "Empty", m ? m.load(n) : (p.data.columns = n.columns, m = c3.generate(p)), e.podStatusData = n.columns;
=======
var p = _.debounce(function(t) {
=======
var m = _.debounce(function(t) {
>>>>>>> Updates for Service Instance & Bindings
=======
var p = _.debounce(function(t) {
>>>>>>> Support EnvFrom in the Env Editors
var n = {
columns: []
};
angular.forEach(m, function(e) {
n.columns.push([ e, t[e] || 0 ]);
}), _.isEmpty(t) ? n.columns.push([ "Empty", 1 ]) : n.unload = "Empty", u ? u.load(n) : (d.data.columns = n.columns, u = c3.generate(d)), e.podStatusData = n.columns;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, 350, {
maxWait: 500
});
e.$watch(function() {
var t = {};
return angular.forEach(e.pods, function(e) {
<<<<<<< HEAD
var n = d(e);
t[n] = (t[n] || 0) + 1;
}), t;
}, f, !0), e.$watchGroup([ "desired", "idled" ], l), e.$on("destroy", function() {
m && (m = m.destroy());
=======
var n = l(e);
t[n] = (t[n] || 0) + 1;
}), t;
}, p, !0), e.$watchGroup([ "desired", "idled" ], s), e.$on("destroy", function() {
u && (u = u.destroy());
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), r.on("error", function() {
e.addNotification({
id: "copy-login-command-error",
type: "error",
message: "Unable to copy the login command."
});
}), n.on("$destroy", function() {
r.destroy();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
};
} ]), angular.module("openshiftConsole").directive("routeServicePie", function() {
return {
restrict: "E",
scope: {
route: "="
},
template: '<div ng-show="totalWeight" ng-attr-id="{{chartId}}"></div>',
link: function(e) {
<<<<<<< HEAD
var t, n, r = window.matchMedia("(max-width: 400px)").matches;
=======
var t, n, a = window.matchMedia("(max-width: 400px)").matches;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
e.chartId = _.uniqueId("route-service-chart-"), n = {
bindto: "#" + e.chartId,
color: {
pattern: [ $.pfPaletteColors.blue, $.pfPaletteColors.orange, $.pfPaletteColors.green, $.pfPaletteColors.red ]
},
legend: {
show: !0,
<<<<<<< HEAD
position: r ? "bottom" : "right"
=======
position: a ? "bottom" : "right"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
pie: {
label: {
show: !1
}
},
size: {
<<<<<<< HEAD
height: r ? 150 : 115
=======
height: a ? 150 : 115
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
tooltip: {
format: {
name: function(e, t, n) {
return n;
}
}
},
data: {
type: "pie",
order: null,
selection: {
enabled: !1
}
}
};
<<<<<<< HEAD
var a, o = function(e) {
=======
var r, o = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return [ e.name, e.weight ];
}, i = function(e) {
return _.head(e);
}, s = function(e) {
var t = {};
_.each(e.columns, function(e) {
var n = i(e);
t[n] = !0;
});
<<<<<<< HEAD
var n = _.get(a, "columns", []);
=======
var n = _.get(r, "columns", []);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
e.unload = _.chain(n).reject(function(e) {
var n = i(e);
return _.has(t, [ n ]);
}).map(i).value();
};
e.$watch("route", function() {
<<<<<<< HEAD
var r = {
columns: [],
names: {}
};
<<<<<<< HEAD
e.route && (r.columns.push(o(e.route.spec.to)), r.names[e.route.spec.to.name] = _.truncate(e.route.spec.to.name, {
length: 30
}), e.totalWeight = e.route.spec.to.weight, _.each(e.route.spec.alternateBackends, function(t) {
r.columns.push(o(t)), r.names[t.name] = _.truncate(t.name, {
length: 30
}), e.totalWeight += t.weight;
})), e.totalWeight && (t ? (s(r), t.load(r)) : (n.data.columns = r.columns, t = c3.generate(n)), a = r);
=======
var a = {
columns: [],
names: {}
};
<<<<<<< HEAD
e.route && (a.columns.push(o(e.route.spec.to)), a.names[e.route.spec.to.name] = _.truncate(e.route.spec.to.name, {
length: 30
}), e.totalWeight = e.route.spec.to.weight, _.each(e.route.spec.alternateBackends, function(t) {
a.columns.push(o(t)), a.names[t.name] = _.truncate(t.name, {
length: 30
}), e.totalWeight += t.weight;
})), e.totalWeight && (t ? (s(a), t.load(a)) : (n.data.columns = a.columns, t = c3.generate(n)), r = a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}), e.$on("destroy", function() {
t && (t = t.destroy());
});
=======
}).directive("persistTabState", [ "$routeParams", "$location", function(e, t) {
=======
var R = function(e) {
r.open({
animation: !0,
backdrop: "static",
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
>>>>>>> Prohibit close of warning dialog by clicking on backdrop
return {
restrict: "A",
scope: !1,
link: function(n) {
n.selectedTab = n.selectedTab || {}, n.$watch(function() {
return e.tab;
}, function(e) {
e && (n.selectedTab[e] = !0);
}), n.$watch("selectedTab", function() {
var e = _.keys(_.pickBy(n.selectedTab, function(e) {
return e;
}));
if (1 === e.length) {
var r = t.search();
r.tab = e[0], t.replace().search(r);
}
}, !0);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< HEAD
};
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("deploymentDonut", [ "$filter", "$location", "$timeout", "$uibModal", "DeploymentsService", "HPAService", "QuotaService", "LabelFilter", "Navigate", "NotificationsService", "hashSizeFilter", "hasDeploymentConfigFilter", function(e, t, n, r, a, o, i, s, c, l, u, d) {
=======
}), angular.module("openshiftConsole").directive("deploymentDonut", [ "$filter", "$location", "$timeout", "$uibModal", "DeploymentsService", "HPAService", "QuotaService", "LabelFilter", "Navigate", "NotificationsService", "hashSizeFilter", "hasDeploymentConfigFilter", function(e, t, n, a, r, o, i, s, c, l, u, d) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
rc: "=",
deploymentConfig: "=",
deployment: "=",
scalable: "=",
hpa: "=?",
limitRanges: "=",
quotas: "=",
clusterQuotas: "=",
project: "=",
pods: "="
},
<<<<<<< HEAD
templateUrl: "views/directives/deployment-donut.html",
controller: [ "$scope", "$filter", "$q", function(e, t, n) {
var s = !1, u = t("humanizeKind");
e.$watch("rc.spec.replicas", function() {
s || (e.desiredReplicas = null);
});
var m = function() {
o.getHPAWarnings(e.rc, e.hpa, e.limitRanges, e.project).then(function(t) {
e.hpaWarnings = _.map(t, function(e) {
return _.escape(e.message);
}).join("<br>");
});
=======
templateUrl: "views/directives/labels.html",
link: function(r) {
r.filterAndNavigate = function(a, o) {
r.kind && r.projectName && (r.filterCurrentPage || e.url(r.navigateUrl || "/project/" + r.projectName + "/browse/" + r.kind), t(function() {
var e = {};
e[a] = o, n.setLabelSelector(new LabelSelector(e, !0));
}, 1));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}).result.then(y);
}, T = {}, E = function() {
c.hideNotification("from-file-error"), _.each(T, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
});
}, N = function(e) {
E(), T = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
T = T.concat(t), _.filter(T, {
type: "error"
}).length ? (_.each(T, function(e) {
e.id = _.uniqueId("from-file-alert-"), c.addNotification(e);
}), p.disableInputs = !1) : T.length ? (R(T), p.disableInputs = !1) : y();
}, D = function() {
if (_.has(p.input.selectedProject, "metadata.uid")) return n.when(p.input.selectedProject);
var t = p.input.selectedProject.metadata.name, r = p.input.selectedProject.metadata.annotations["new-display-name"], a = e("description")(p.input.selectedProject);
return m.create(t, r, a);
>>>>>>> Check for new templateServiceBrokerEnabled flag
};
e.$watchGroup([ "limitRanges", "hpa", "project" ], m), e.$watch("rc.spec.template.spec.containers", m, !0);
e.$watchGroup([ "rc.spec.replicas", "rc.status.replicas", "quotas", "clusterQuotas" ], function() {
if (_.get(e.rc, "spec.replicas", 1) > _.get(e.rc, "status.replicas", 0)) {
<<<<<<< HEAD
var t = i.filterQuotasForResource(e.rc, e.quotas), n = i.filterQuotasForResource(e.rc, e.clusterQuotas), r = function(t) {
return !_.isEmpty(i.getResourceLimitAlerts(e.rc, t));
};
<<<<<<< HEAD
e.showQuotaWarning = _.some(t, r) || _.some(n, r);
} else e.showQuotaWarning = !1;
});
var p = function() {
return e.deploymentConfig || e.deployment || e.rc;
}, g = function() {
if (s = !1, angular.isNumber(e.desiredReplicas)) {
<<<<<<< HEAD
var r = p();
return a.scale(r, e.desiredReplicas).then(_.noop, function(e) {
var a = u(r.kind);
=======
var a = p();
return r.scale(a, e.desiredReplicas).then(_.noop, function(e) {
var r = u(a.kind);
>>>>>>> Support EnvFrom in the Env Editors
return l.addNotification({
id: "deployment-scale-error",
type: "error",
message: "An error occurred scaling " + a + " " + r.metadata.name + ".",
details: t("getErrorDetails")(e)
}), n.reject(e);
});
}
<<<<<<< HEAD
}, f = _.debounce(g, 650);
e.viewPodsForDeployment = function(t) {
_.isEmpty(e.pods) || c.toPodsForDeployment(t, e.pods);
}, e.scaleUp = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), e.desiredReplicas++, f(), s = !0);
}, e.scaleDown = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), 0 !== e.desiredReplicas && (1 !== e.desiredReplicas ? (e.desiredReplicas--, f()) : r.open({
templateUrl: "views/modals/confirmScale.html",
controller: "ConfirmScaleController",
resolve: {
resource: function() {
return e.rc;
},
type: function() {
return d(e.rc) ? "deployment" : "replication controller";
}
=======
} ]).directive("labelEditor", function() {
function e(e) {
return !(e.length > o) && a.test(e);
}
function t(e) {
return !(e.length > r) && n.test(e);
}
var n = /^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$/, r = 63, a = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/, o = 253;
return {
restrict: "E",
scope: {
labels: "=",
expand: "=?",
canToggle: "=?",
helpText: "@?"
},
templateUrl: "views/directives/label-editor.html",
link: function(e, t, n) {
angular.isDefined(n.canToggle) || (e.canToggle = !0);
},
controller: [ "$scope", function(n) {
var r = {
test: function(n) {
var r = n.split("/");
switch (r.length) {
case 1:
return t(r[0]);

case 2:
return e(r[0]) && t(r[1]);
}
return !1;
}
};
angular.extend(n, {
validator: {
key: r,
value: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}).result.then(function() {
e.desiredReplicas = e.getDesiredReplicas() - 1, f(), s = !0;
})));
}, e.getDesiredReplicas = function() {
return angular.isDefined(e.desiredReplicas) && null !== e.desiredReplicas ? e.desiredReplicas : e.rc && e.rc.spec && angular.isDefined(e.rc.spec.replicas) ? e.rc.spec.replicas : 1;
}, e.$watch(function() {
return !_.get(e.rc, "spec.replicas") && !!(e.deploymentConfig ? t("annotation")(e.deploymentConfig, "idledAt") : t("annotation")(e.rc, "idledAt"));
}, function(t) {
e.isIdled = !!t;
}), e.unIdle = function() {
e.desiredReplicas = t("unidleTargetReplicas")(e.deploymentConfig || e.rc, e.hpa), g().then(function() {
e.isIdled = !1;
});
};
=======
}, p.cancel = function() {
E(), s.toProjectOverview(p.input.selectedProject.metadata.name);
};
var A = e("displayName");
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", E);
>>>>>>> Check for new templateServiceBrokerEnabled flag
} ]
};
} ]), angular.module("openshiftConsole").directive("quotaUsageChart", [ "$filter", "ChartsService", "gettext", "gettextCatalog", function(e, t, n, r) {
return {
restrict: "E",
scope: {
used: "=",
crossProjectUsed: "=?",
total: "=",
type: "@",
height: "=?",
width: "=?"
},
replace: !0,
templateUrl: "views/_quota-usage-chart.html",
link: function(a, o) {
var i = e("usageValue"), s = e("usageWithUnits"), c = e("amountAndUnit");
a.height = a.height || 200, a.width = a.width || 175;
var l = function(e) {
return e ? (100 * Number(e)).toFixed(1) + "%" : "0%";
};
<<<<<<< HEAD
a.chartID = _.uniqueId("quota-usage-chart-");
var u, d = {
type: "donut",
bindto: "#" + a.chartID,
donut: {
label: {
show: !1
},
width: 10
},
size: {
height: a.height,
width: a.width
},
legend: {
show: !0,
position: a.legendPosition || "bottom",
item: {
onclick: _.noop
=======
var t = {
command: [],
env: [],
volumes: [],
containerName: e.availableContainers[0] || ""
}, n = {
to: {},
containerName: e.availableContainers[0] || ""
}, r = function(t) {
var n = {};
if (_.isEmpty(t)) n = {
namespace: e.namespace,
imageStream: "",
tagObject: null
}; else {
var r = t.name.split(":");
n = {
namespace: t.namespace || e.namespace,
imageStream: r[0],
tagObject: {
tag: r[1]
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
},
onrendered: function() {
_.spread(function(e, n) {
t.updateDonutCenterText(o[0], e, n);
})(c(a.total, a.type, !0));
},
tooltip: {
position: function() {
return {
top: 0,
left: 0
};
},
contents: function(e, t, o, c) {
var u = $('<table class="c3-tooltip"></table>').css({
width: a.width + "px"
}), d = $("<tr/>").appendTo(u), m = $('<td class="name nowrap"></td>').appendTo(d);
$("<span/>").css({
<<<<<<< HEAD
"background-color": c(e[0].id)
}).appendTo(m), $("<span/>").text(e[0].name).appendTo(m);
var p;
p = a.total ? l(e[0].value / i(a.total)) + " " + r.getString(n("of")) + " " + s(a.total, a.type) : s(a.used, a.type);
var g = $("<tr/>").appendTo(u);
return $('<td class="value" style="text-align: left;"></td>').text(p).appendTo(g), u.get(0).outerHTML;
=======
var t = i.filterQuotasForResource(e.rc, e.quotas), n = i.filterQuotasForResource(e.rc, e.clusterQuotas), a = function(t) {
return !_.isEmpty(i.getResourceLimitAlerts(e.rc, t));
=======
"background-color": i(e[0].id)
}).appendTo(u), $("<span/>").text(e[0].name).appendTo(u);
var d;
d = n.total ? s(e[0].value / r(n.total)) + " of " + o(n.total, n.type) : o(n.used, n.type);
var m = $("<tr/>").appendTo(c);
return $('<td class="value" style="text-align: left;"></td>').text(d).appendTo(m), c.get(0).outerHTML;
}
<<<<<<< HEAD
},
data: {
type: "donut",
order: null
}
<<<<<<< HEAD
};
n.$watchGroup([ "used", "total", "crossProjectUsed" ], _.debounce(function() {
var e = void 0 !== n.crossProjectUsed, t = r(n.used) || 0, a = Math.max((r(n.crossProjectUsed) || 0) - t, 0), o = Math.max(r(n.total) - (a + t), 0), i = {
columns: [ [ "used", t ], [ "available", o ] ],
colors: {
used: o ? "#0088ce" : "#ec7a08",
other: o ? "#7dc3e8" : "#f7bd7f",
available: "#d1d1d1"
},
names: {
used: e ? "Used - This Project" : "Used",
other: "Used - Other Projects",
available: "Available"
}
>>>>>>> Support EnvFrom in the Env Editors
};
e.showQuotaWarning = _.some(t, a) || _.some(n, a);
} else e.showQuotaWarning = !1;
=======
function w() {
return !(m.metricsError || U > 1) && (m.pod && _.get(m, "options.selectedContainer"));
}
function k(e, t, n) {
t.total = p(t.id), t.total && (m.hasLimits = !0);
var a = _.get(n, "usage.value");
isNaN(a) && (a = 0), e.convert && (a = e.convert(a)), t.used = d3.round(a, e.usagePrecision), t.total && (t.available = d3.round(t.total - a, e.usagePrecision)), e.totalUsed += t.used;
}
function P(e, t) {
m.noData = !1;
var n = _.initial(t.data);
e.data ? e.data = _.chain(e.data).takeRight(D).concat(n).value() : e.data = n;
}
function j() {
if (w()) {
var e = v(), t = [];
angular.forEach(m.metrics, function(n) {
var a = [];
n.totalUsed = 0, angular.forEach(n.datasets, function(r) {
var o = b(n, r, e);
if (o) {
var i = l.get(o);
a.push(i), p(r.id) && t.push(l.getCurrentUsage(o).then(function(e) {
k(n, r, e);
}));
}
}), t = t.concat(a), r.all(a).then(function(e) {
A || angular.forEach(e, function(e) {
e && P(_.find(n.datasets, {
id: e.metricID
}), e);
});
>>>>>>> Bug 1505281 - Improve import YAML results message
});
var m = function() {
return e.deploymentConfig || e.deployment || e.rc;
}, f = function() {
if (s = !1, angular.isNumber(e.desiredReplicas)) {
var a = m();
return r.scale(a, e.desiredReplicas).then(_.noop, function(e) {
var r = u(a.kind);
return l.addNotification({
id: "deployment-scale-error",
type: "error",
message: "An error occurred scaling " + r + " " + a.metadata.name + ".",
details: t("getErrorDetails")(e)
}), n.reject(e);
});
}
}, g = _.debounce(f, 650);
e.viewPodsForDeployment = function(t) {
_.isEmpty(e.pods) || c.toPodsForDeployment(t, e.pods);
}, e.scaleUp = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), e.desiredReplicas++, g(), s = !0);
}, e.scaleDown = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), 0 !== e.desiredReplicas && (1 !== e.desiredReplicas ? (e.desiredReplicas--, g()) : a.open({
animation: !0,
templateUrl: "views/modals/confirmScale.html",
controller: "ConfirmScaleController",
resolve: {
resource: function() {
return e.rc;
},
type: function() {
return d(e.rc) ? "deployment" : "replication controller";
}
}
}).result.then(function() {
e.desiredReplicas = e.getDesiredReplicas() - 1, g(), s = !0;
})));
}, e.getDesiredReplicas = function() {
return angular.isDefined(e.desiredReplicas) && null !== e.desiredReplicas ? e.desiredReplicas : e.rc && e.rc.spec && angular.isDefined(e.rc.spec.replicas) ? e.rc.spec.replicas : 1;
}, e.$watch(function() {
return !_.get(e.rc, "spec.replicas") && !!(e.deploymentConfig ? t("annotation")(e.deploymentConfig, "idledAt") : t("annotation")(e.rc, "idledAt"));
}, function(t) {
e.isIdled = !!t;
}), e.unIdle = function() {
e.desiredReplicas = t("unidleTargetReplicas")(e.deploymentConfig || e.rc, e.hpa), f().then(function() {
e.isIdled = !1;
=======
return n;
}, a = function() {
"execNewPod" === e.action.type ? (_.has(e.removedHookParams, "execNewPod") ? e.hookParams.execNewPod = e.removedHookParams.execNewPod : e.hookParams.execNewPod = _.get(e, "hookParams.execNewPod", {}), e.hookParams.execNewPod = _.merge(angular.copy(t), e.hookParams.execNewPod)) : (_.has(e.removedHookParams, "tagImages") ? e.hookParams.tagImages = e.removedHookParams.tagImages : e.hookParams.tagImages = _.get(e, "hookParams.tagImages", [ {} ]), e.hookParams.tagImages = [ _.merge(angular.copy(n), e.hookParams.tagImages[0]) ], e.istagHook = r(_.head(e.hookParams.tagImages).to)), e.hookParams.failurePolicy = _.get(e.hookParams, "failurePolicy", "Abort");
};
e.addHook = function() {
_.isEmpty(e.removedHookParams) ? (e.hookParams = {}, a()) : e.hookParams = e.removedHookParams;
}, e.removeHook = function() {
e.removedHookParams = e.hookParams, delete e.hookParams, e.editForm.$setDirty();
};
e.$watchGroup([ "hookParams", "action.type" ], function() {
e.hookParams && ("execNewPod" === e.action.type ? (e.hookParams.tagImages && (e.removedHookParams.tagImages = e.hookParams.tagImages, delete e.hookParams.tagImages), a()) : "tagImages" === e.action.type && (e.hookParams.execNewPod && (e.removedHookParams.execNewPod = e.hookParams.execNewPod, delete e.hookParams.execNewPod), a()));
}), e.valueFromObjects = [], e.$watchGroup([ "availableSecrets", "availableConfigMaps" ], function() {
var t = e.availableConfigMaps || [], n = e.availableSecrets || [];
e.valueFromObjects = t.concat(n);
}), e.$watch("istagHook.tagObject.tag", function() {
_.has(e.istagHook, [ "tagObject", "tag" ]) && (_.set(e.hookParams, "tagImages[0].to.kind", "ImageStreamTag"), _.set(e.hookParams, "tagImages[0].to.namespace", e.istagHook.namespace), _.set(e.hookParams, "tagImages[0].to.name", e.istagHook.imageStream + ":" + e.istagHook.tagObject.tag));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
};
} ]
};
} ]), angular.module("openshiftConsole").directive("quotaUsageChart", [ "$filter", "ChartsService", function(e, t) {
return {
<<<<<<< HEAD
restrict: "E",
scope: {
used: "=",
crossProjectUsed: "=?",
total: "=",
type: "@",
height: "=?",
width: "=?"
},
replace: !0,
templateUrl: "views/_quota-usage-chart.html",
link: function(n, a) {
var r = e("usageValue"), o = e("usageWithUnits"), i = e("amountAndUnit");
n.height = n.height || 200, n.width = n.width || 175;
var s = function(e) {
return e ? (100 * Number(e)).toFixed(1) + "%" : "0%";
};
n.chartID = _.uniqueId("quota-usage-chart-");
var c, l = {
type: "donut",
bindto: "#" + n.chartID,
donut: {
label: {
show: !1
},
width: 10
},
size: {
height: n.height,
width: n.width
},
legend: {
show: !0,
position: n.legendPosition || "bottom",
item: {
onclick: _.noop
}
},
onrendered: function() {
_.spread(function(e, n) {
t.updateDonutCenterText(a[0], e, n);
})(i(n.total, n.type, !0));
},
tooltip: {
position: function() {
return {
top: 0,
left: 0
};
<<<<<<< HEAD
},
contents: function(e, t, a, i) {
var c = $('<table class="c3-tooltip"></table>').css({
width: n.width + "px"
}), l = $("<tr/>").appendTo(c), u = $('<td class="name nowrap"></td>').appendTo(l);
$("<span/>").css({
"background-color": i(e[0].id)
}).appendTo(u), $("<span/>").text(e[0].name).appendTo(u);
var d;
d = n.total ? s(e[0].value / r(n.total)) + " of " + o(n.total, n.type) : o(n.used, n.type);
<<<<<<< HEAD
var m = $("<tr/>").appendTo(c);
return $('<td class="value" style="text-align: left;"></td>').text(d).appendTo(m), c.get(0).outerHTML;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var p = $("<tr/>").appendTo(c);
return $('<td class="value" style="text-align: left;"></td>').text(d).appendTo(p), c.get(0).outerHTML;
>>>>>>> Updates for Service Instance & Bindings
=======
}), function() {
angular.module("openshiftConsole").component("addConfigToApplication", {
controller: [ "$filter", "$scope", "APIService", "ApplicationsService", "DataService", "Navigate", "NotificationsService", "StorageService", function(e, t, n, r, a, o, i, s) {
var c = this, l = e("humanizeKind"), u = function(e) {
var t = c.apiObject.metadata.name;
return "ConfigMap" === c.apiObject.kind ? _.some(e.envFrom, {
configMapRef: {
name: t
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
},
data: {
type: "donut",
order: null
=======
restrict: "EA",
templateUrl: "views/directives/header/header.html",
link: function(i, p) {
i.currentProject = h[a.project];
var w = function(e, t) {
var n;
_.set(r, "nav.collapsed", e), t && (n = e ? "true" : "false", localStorage.setItem("openshift/vertical-nav-collapsed", n));
};
!function() {
var e = "true" === localStorage.getItem("openshift/vertical-nav-collapsed");
w(e);
}();
var P = function() {
return _.get(r, "nav.collapsed", !1);
}, j = function(e) {
_.set(r, "nav.showMobileNav", e);
};
i.toggleNav = function() {
var e = P();
w(!e, !0);
}, i.toggleMobileNav = function() {
var e = _.get(r, "nav.showMobileNav");
j(!e);
}, i.closeMobileNav = function() {
j(!1);
}, i.closeOrderingPanel = function() {
i.orderingPanelVisible = !1;
}, i.showOrderingPanel = function(e) {
i.orderingPanelVisible = !0, i.orderKind = e;
}, i.onSearchToggle = function(e) {
_.set(r, "view.hasProjectSearch", e);
}, i.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var k = p.find(".selectpicker"), I = [], R = function() {
var t = i.currentProjectName;
if (t) {
var n = function(e, n) {
var r = $("<option>").attr("value", e.metadata.name).attr("selected", e.metadata.name === t);
return n ? r.text(b(e)) : r.text(S(e, y)), r;
};
_.size(h) <= 100 ? (y = e("orderByDisplayName")(h), I = _.map(y, function(e) {
return n(e, !1);
})) : I = [ n(h[t], !0) ], k.empty(), k.append(I), k.append($('<option data-divider="true"></option>')), k.append($('<option value="">View All Projects</option>')), k.selectpicker("refresh");
}
}, E = function() {
return f.list().then(function(e) {
h = e.by("metadata.name");
});
}, T = function() {
var e = a.project;
i.currentProjectName !== e && (i.currentProjectName = e, i.chromeless = "chromeless" === a.view, e && !i.chromeless ? (_.set(r, "view.hasProject", !0), i.canIAddToProject = !1, s.getProjectRules(e).then(function() {
i.currentProjectName === e && (i.canIAddToProject = s.canIAddToProject(e), i.canIAddToProject && l.getCatalogItems().then(function(e) {
i.catalogItems = e;
}));
}), E().then(function() {
i.currentProjectName && h && (h[i.currentProjectName] || (h[i.currentProjectName] = {
metadata: {
name: i.currentProjectName
}
}), i.currentProject = h[i.currentProjectName], R());
})) : _.set(r, "view.hasProject", !1));
}, N = function() {
i.orderingPanelVisible && v.addItem(_.get(i.selectedItem, "resource.metadata.uid"));
}, D = function(e) {
return "PartialObjectMetadata" === e.kind;
}, A = function(e) {
return D(e) ? d.get(C, e.metadata.name, {
namespace: e.metadata.namespace
}) : n.when(e);
};
i.$on("open-overlay-panel", function(e, t) {
i.currentProjectName && (i.servicePlansForItem = null, i.orderKind = _.get(t, "kind"), "Template" !== i.orderKind ? "ClusterServiceClass" !== i.orderKind ? o(function() {
i.selectedItem = t, i.orderingPanelVisible = !0;
}) : c.getServicePlansForServiceClass(_.get(t, "resource.metadata.name")).then(function(e) {
i.servicePlansForItem = _.reject(e.by("metadata.name"), {
status: {
removedFromBrokerCatalog: !0
}
}), i.selectedItem = t, i.orderingPanelVisible = !0;
}) : A(t.resource).then(function(e) {
i.selectedItem = e, i.orderingPanelVisible = !0, i.orderKind = "Template";
}));
});
var B = r.$on("filter-catalog-items", function(e, t) {
if (i.currentProjectName) {
var n = {
filter: t.searchText
};
m.toProjectCatalog(i.currentProjectName, n);
>>>>>>> Fix flicker showing builder dialog
}
<<<<<<< HEAD
=======
});
<<<<<<< HEAD
};
c.checkApplicationContainersRefs = function(e) {
var t = _.get(e, "spec.template.spec.containers");
c.canAddRefToApplication = !_.every(t, u);
};
var d = function() {
var e = {
namespace: c.project.metadata.name
};
r.getApplications(e).then(function(e) {
c.applications = e, c.updating = !1;
});
<<<<<<< HEAD
};
c.$onInit = function() {
c.addType = "env", c.disableInputs = !1, d(), c.canAddRefToApplication = !0;
var e = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
c.hasInvalidEnvVars = _.some(c.apiObject.data, function(t, n) {
return !e.test(n);
=======
i.closeOrderingPanel = function() {
v.addItem(_.get(i.selectedItem, "resource.metadata.uid")), i.orderingPanelVisible = !1;
}, T(), i.$on("$routeChangeSuccess", T), k.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : g(e);
i.$apply(function() {
t.url(n);
=======
}, t.removeSecret = function(e) {
1 === t.pickedSecrets.length ? t.pickedSecrets = [ {
name: ""
} ] : t.pickedSecrets.splice(e, 1), t.secretsForm.$setDirty();
}, t.openCreateSecretModal = function() {
t.newSecret = {}, e.open({
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
r.list(t.secretsVersion, {
namespace: t.namespace
}, function(n) {
var r = a.groupSecretsByType(n), o = _.mapValues(r, function(e) {
return _.map(e, "metadata.name");
>>>>>>> Update modals to align with PatternFly standard
});
}), i.$on("$destroy", function() {
B(), N();
>>>>>>> Fix flicker showing builder dialog
});
};
var m = function(e) {
return c.attachAllContainers || c.attachContainers[e.name];
};
c.$postLink = function() {
t.$watch(function() {
return c.application;
}, function() {
var e = _.get(c.application, "spec.template");
c.existingMountPaths = s.getMountPaths(e), c.attachAllContainers = !0;
});
}, c.groupByKind = function(e) {
return l(e.kind);
}, c.addToApplication = function() {
var t = angular.copy(c.application), r = _.get(t, "spec.template");
if (c.disableInputs = !0, "env" === c.addType) {
var s = {};
switch (c.apiObject.kind) {
case "Secret":
s.secretRef = {
name: c.apiObject.metadata.name
};
break;

case "ConfigMap":
s.configMapRef = {
name: c.apiObject.metadata.name
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
a.$watchGroup([ "used", "total", "crossProjectUsed" ], _.debounce(function() {
var e = void 0 !== a.crossProjectUsed, t = i(a.used) || 0, o = Math.max((i(a.crossProjectUsed) || 0) - t, 0), s = Math.max(i(a.total) - (o + t), 0), c = {
columns: [ [ "used", t ], [ "available", s ] ],
colors: {
used: s ? "#0088ce" : "#ec7a08",
other: s ? "#7dc3e8" : "#f7bd7f",
available: "#d1d1d1"
},
names: {
used: e ? r.getString(n("Used - This Project")) : r.getString(n("Used")),
other: r.getString(n("Used - Other Projects")),
available: r.getString(n("Available"))
}
<<<<<<< HEAD
=======
c.envPrefix && (s.prefix = c.envPrefix), _.each(r.spec.containers, function(e) {
m(e) && !u(e) && (e.envFrom = e.envFrom || [], e.envFrom.push(s));
});
} else {
var l = e("generateName")(c.apiObject.metadata.name + "-"), d = {
name: l,
mountPath: c.mountVolume,
readOnly: !0
};
_.each(r.spec.containers, function(e) {
m(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(d));
=======
}), r.$watch("controls.hideSlider", function(e) {
e || 1 !== r.route.alternateServices.length || (m = !0, r.controls.rangeSlider = r.weightAsPercentage(r.route.to.weight));
}), r.$watch("controls.rangeSlider", function(e, t) {
m ? m = !1 : e !== t && (e = parseInt(e, 10), _.set(r, "route.to.weight", e), _.set(r, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Add link to re-enable percentage slider when editing service weights on the create route page
});
var p = {
name: l
};
switch (c.apiObject.kind) {
case "Secret":
p.secret = {
secretName: c.apiObject.metadata.name
};
break;

case "ConfigMap":
p.configMap = {
name: c.apiObject.metadata.name
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
e && c.columns.splice(1, 0, [ "other", o ]), u ? u.load(c) : (_.assign(d.data, c), u = c3.generate(d));
}, 300));
}
<<<<<<< HEAD
};
} ]), angular.module("openshiftConsole").directive("buildTrendsChart", [ "$filter", "$location", "$rootScope", "$timeout", "BuildsService", function(e, t, n, r, a) {
=======
n.$watchGroup([ "used", "total", "crossProjectUsed" ], _.debounce(function() {
var e = void 0 !== n.crossProjectUsed, t = r(n.used) || 0, a = Math.max((r(n.crossProjectUsed) || 0) - t, 0), o = Math.max(r(n.total) - (a + t), 0), i = {
columns: [ [ "used", t ], [ "available", o ] ],
colors: {
used: o ? "#0088ce" : "#ec7a08",
other: o ? "#7dc3e8" : "#f7bd7f",
available: "#d1d1d1"
},
<<<<<<< HEAD
names: {
used: e ? "Used - This Project" : "Used",
other: "Used - Other Projects",
available: "Available"
=======
r.spec.volumes = r.spec.volumes || [], r.spec.volumes.push(p);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
};
<<<<<<< HEAD
e && i.columns.splice(1, 0, [ "other", a ]), c ? c.load(i) : (_.assign(l.data, i), c = c3.generate(l));
}, 300));
}
=======
a.update(n.kindToResource(t.kind), t.metadata.name, t, h).then(function() {
i.addNotification({
type: "success",
message: "Successfully added " + g + " " + c.apiObject.metadata.name + " to " + v + " " + t.metadata.name + ".",
links: [ {
href: o.resourceURL(t),
label: "View " + f(t.kind, !0)
} ]
}), angular.isFunction(c.onComplete) && c.onComplete();
=======
destinationDir: ""
} ];
} else t.pickedSecrets.splice(e, 1);
t.secretsForm.$setDirty();
}, t.openCreateSecretModal = function() {
e.open({
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
r.list(t.secretsVersion, {
namespace: t.namespace
>>>>>>> Update modals to align with PatternFly standard
}, function(n) {
var r = e("getErrorDetails");
i.addNotification({
type: "error",
message: "An error occurred  adding " + g + " " + c.apiObject.metadata.name + " to " + v + " " + t.metadata.name + ". " + r(n)
});
}).finally(function() {
c.disableInputs = !1;
});
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("buildTrendsChart", [ "$filter", "$location", "$rootScope", "$timeout", "BuildsService", function(e, t, n, a, r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
builds: "="
},
<<<<<<< HEAD
templateUrl: "views/_build-trends-chart.html",
link: function(o) {
var i, s = [ "Complete", "Failed", "Cancelled", "Error" ];
o.minBuilds = _.constant(4);
var c = function(e) {
<<<<<<< HEAD
var t = [], n = moment.duration(e), r = Math.floor(n.asHours()), a = n.minutes(), o = n.seconds();
return r || a || o ? (r && t.push(r + "h"), a && t.push(a + "m"), r || t.push(o + "s"), t.join(" ")) : "";
=======
var t = [], n = moment.duration(e), a = Math.floor(n.asHours()), r = n.minutes(), o = n.seconds();
return a || r || o ? (a && t.push(a + "h"), r && t.push(r + "m"), a || t.push(o + "s"), t.join(" ")) : "";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
o.chartID = _.uniqueId("build-trends-chart-");
var l, u, d = _.constant(350), m = {
bindto: "#" + o.chartID,
padding: {
right: 30,
left: 80
},
axis: {
x: {
fit: !0,
label: {
text: "Build Number",
position: "outer-right"
},
tick: {
culling: !0,
format: function(e) {
return "#" + i.json[e].buildNumber;
},
width: 30
},
type: "category"
},
y: {
label: {
text: "Duration",
position: "outer-top"
},
min: 0,
padding: {
bottom: 0
},
tick: {
format: c
}
=======
link: function(t) {
function n(e) {
return null === e.value || void 0 === e.value;
=======
} ]), angular.module("openshiftConsole").directive("oscAutoscaling", [ "Constants", "HPAService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
return {
restrict: "E",
scope: {
autoscaling: "=model",
showNameInput: "=?",
nameReadOnly: "=?"
},
templateUrl: "views/directives/osc-autoscaling.html",
link: function(t) {
t.nameValidation = n;
var r = e.DEFAULT_HPA_CPU_TARGET_PERCENT, a = _.get(t, "autoscaling.targetCPU");
_.isNil(a) && r && _.set(t, "autoscaling.targetCPU", r);
>>>>>>> Use new clusterResourceOverridesEnabled flag
}
function a(e) {
var t, a = {}, r = [ "Date" ], o = [ t = w ? e.compactDatasetLabel || e.label : "Average Usage" ], i = [ r, o ], s = function(e) {
var t = "" + e.start;
return a[t] || (a[t] = {
total: 0,
count: 0
}), a[t];
=======
} ]), angular.module("openshiftConsole").component("alerts", {
bindings: {
alerts: "=",
filter: "<?",
hideCloseButton: "<?"
},
templateUrl: "components/alerts/alerts.html",
controller: function() {
var e = this;
e.close = function(e) {
e.hidden = !0, _.isFunction(e.onClose) && e.onClose();
}, e.onClick = function(t, n) {
_.isFunction(n.onClick) && n.onClick() && e.close(t);
>>>>>>> Convert alerts directive to component and add spec test.
};
return _.each(R[e.descriptor], function(e) {
_.each(e, function(e) {
var t = s(e);
(!P || P < e.end) && (P = e.end), n(e) || (t.total += e.value, t.count = t.count + 1);
});
}), _.each(a, function(t, n) {
var a;
a = t.count ? t.total / t.count : null, r.push(Number(n)), o.push(e.convert ? e.convert(a) : a);
}), o.length > 1 && (e.lastValue = _.last(o) || 0), i;
}
<<<<<<< HEAD
function o(e, r) {
var o = [], i = {
type: "spline"
};
<<<<<<< HEAD
return t.showAverage ? (_.each(e[r.descriptor], function(e, t) {
h(r.descriptor, t, e);
}), i.type = "area-spline", w && r.compactType && (i.type = r.compactType), i.x = "Date", i.columns = a(r), i) : (_.each(e[r.descriptor], function(e, t) {
h(r.descriptor, t, e);
var a = t + "-dates";
_.set(i, [ "xs", t ], a);
var s = [ a ], c = [ t ];
o.push(s), o.push(c), _.each(R[r.descriptor][t], function(e) {
if (s.push(e.start), (!P || P < e.end) && (P = e.end), n(e)) c.push(e.value); else {
var t = r.convert ? r.convert(e.value) : e.value;
c.push(t);
}
=======
}), angular.module("openshiftConsole").directive("catalog", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, r) {
=======
}), angular.module("openshiftConsole").directive("parseError", function() {
>>>>>>> Convert alerts directive to component and add spec test.
return {
restrict: "E",
scope: {
projectImageStreams: "=",
openshiftImageStreams: "=",
projectTemplates: "=",
openshiftTemplates: "=",
projectName: "=",
parentCategory: "=category"
},
templateUrl: "views/catalog/catalog.html",
link: function(a) {
function o() {
var t = a.keywords = n.generateKeywords(a.filter.keyword);
if (_.isEmpty(t)) return a.filterActive = !1, a.filteredBuildersByCategory = a.buildersByCategory, void (a.filteredTemplatesByCategory = a.templatesByCategory);
a.filterActive = !0, a.filteredBuildersByCategory = {}, _.each(a.buildersByCategory, function(n, r) {
var o = e.getCategoryItem(r), i = _.reject(t, function(e) {
return e.test(o.label);
});
a.filteredBuildersByCategory[r] = e.filterImageStreams(n, i);
}), a.filteredBuildersNoSubcategory = e.filterImageStreams(a.buildersNoSubcategory, t), a.filteredTemplatesByCategory = {}, _.each(a.templatesByCategory, function(n, r) {
var o = e.getCategoryItem(r), i = _.reject(t, function(e) {
return e.test(o.label);
});
a.filteredTemplatesByCategory[r] = e.filterTemplates(n, i);
}), a.filteredTemplatesNoSubcategory = e.filterTemplates(a.templatesNoSubcategory, t);
}
function i(e) {
var t = _.get(a, "parentCategory.subcategories", []);
if (_.isEmpty(t)) return [];
var n = {};
_.each(t, function(t) {
_.each(t.items, function(t) {
_.each(e[t.id], function(e) {
var t = _.get(e, "metadata.uid");
n[t] = !0;
});
});
});
var r = a.parentCategory.id;
return _.reject(e[r], function(e) {
var t = _.get(e, "metadata.uid");
return !!n[t];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), i.columns = _.sortBy(o, function(e) {
return e[0];
}), i);
}
<<<<<<< HEAD
function u(e) {
k || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var a, r = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), C[i] ? (C[i].load(r), t.showAverage ? C[i].legend.hide() : C[i].legend.show()) : ((a = D(n)).data = r, C[i] = c3.generate(a));
}));
>>>>>>> Bug 1505281 - Improve import YAML results message
}
},
bar: {
width: {
max: 50
}
},
legend: {
item: {
onclick: _.noop
}
},
size: {
height: 250
},
tooltip: {
format: {
title: function(e) {
<<<<<<< HEAD
var t = i.json[e], n = a.getStartTimestsamp(t.build);
=======
var t = i.json[e], n = r.getStartTimestsamp(t.build);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return "#" + t.buildNumber + " (" + moment(n).fromNow() + ")";
}
<<<<<<< HEAD
=======
function f() {
var e = _.find(t.pods, "metadata.namespace");
if (e) {
var n = {
pods: t.pods,
namespace: e.metadata.namespace,
bucketDuration: p()
};
return w || (n.containerName = t.options.selectedContainer.name), n.start = P || d(), n;
>>>>>>> Bug 1505281 - Improve import YAML results message
}
},
transition: {
duration: d()
},
data: {
colors: {
Cancelled: "#d1d1d1",
Complete: "#00b9e4",
Error: "#393f44",
Failed: "#cc0000"
},
empty: {
label: {
text: "No Completed Builds"
=======
function s() {
a.noFilterMatches = !0, u = [];
var e = {};
_.each(a.filteredBuildersByCategory, function(t, n) {
e[n] = _.size(t);
}), _.each(a.filteredTemplatesByCategory, function(t, n) {
e[n] = (e[n] || 0) + _.size(t);
}), a.allContentHidden = !0, _.each(a.categories, function(t) {
var n = !1;
_.each(t.items, function(t) {
e[t.id] && (u.push(t), n = !0);
}), _.set(a, [ "hasContent", t.id ], n), n && (a.allContentHidden = !1);
}), a.countByCategory = e, a.hasItemsNoSubcategory = !_.isEmpty(a.buildersNoSubcategory) || !_.isEmpty(a.templatesNoSubcategory), a.countFilteredNoSubcategory = _.size(a.filteredBuildersNoSubcategory) + _.size(a.filteredTemplatesNoSubcategory), a.countFilteredNoSubcategory && (a.allContentHidden = !1);
}
function c() {
return !!a.parentCategory && (1 === u.length && !a.hasItemsNoSubcategory);
}
function l() {
a.loaded = a.projectTemplates && a.openshiftTemplates && a.projectImageStreams && a.openshiftImageStreams, o(), s(), a.loaded && (c() && (a.singleCategory = _.head(u)), r.log("templates by category", a.templatesByCategory), r.log("builder images", a.buildersByCategory));
}
a.categories = _.get(a, "parentCategory.subcategories", t.CATALOG_CATEGORIES), a.loaded = !1, a.emptyCatalog = !0, a.filter = {
keyword: ""
}, a.$watch("filter.keyword", _.debounce(function() {
a.$apply(function() {
o(), s();
});
}, 200, {
maxWait: 1e3,
trailing: !0
}));
var u;
a.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], function() {
if (a.projectImageStreams && a.openshiftImageStreams) {
var t = _.toArray(a.projectImageStreams).concat(_.toArray(a.openshiftImageStreams));
a.buildersByCategory = e.categorizeImageStreams(t), a.buildersNoSubcategory = i(a.buildersByCategory), a.emptyCatalog = a.emptyCatalog && _.every(a.buildersByCategory, _.isEmpty) && _.isEmpty(a.buildersNoSubcategory), l();
}
}), a.$watchGroup([ "openshiftTemplates", "projectTemplates" ], function() {
if (a.projectTemplates && a.openshiftTemplates) {
var t = _.toArray(a.projectTemplates).concat(_.toArray(a.openshiftTemplates));
a.templatesByCategory = e.categorizeTemplates(t), a.templatesNoSubcategory = i(a.templatesByCategory), a.emptyCatalog = a.emptyCatalog && _.every(a.templatesByCategory, _.isEmpty) && _.isEmpty(a.templatesNoSubcategory), l();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< HEAD
},
<<<<<<< HEAD
onclick: function(r) {
var a = i.json[r.x].build, o = e("navigateResourceURL")(a);
=======
onclick: function(a) {
var r = i.json[a.x].build, o = e("navigateResourceURL")(r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
o && n.$apply(function() {
t.path(o);
});
},
selection: {
enabled: !0
},
<<<<<<< HEAD
order: null,
type: "bar"
=======
function g(e) {
if (!k) if (N++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(N < 2) && t.alerts) {
var n = "metrics-failed-" + t.uniqueID;
t.alerts[n] = {
type: "error",
message: "An error occurred updating metrics.",
links: [ {
href: "",
label: "Retry",
onClick: function() {
delete t.alerts[n], N = 1, y();
>>>>>>> Bug 1505281 - Improve import YAML results message
}
}, p = function() {
o.completeBuilds = [];
var t = e("isIncompleteBuild");
angular.forEach(o.builds, function(e) {
t(e) || o.completeBuilds.push(e);
});
}, f = !1, g = function() {
u && f ? l.ygrids([ {
value: u,
class: "build-trends-avg-line"
} ]) : l.ygrids.remove();
};
<<<<<<< HEAD
o.toggleAvgLine = function() {
f = !f, g();
};
o.$watch(function() {
return p(), o.completeBuilds.length;
}, function() {
i = {
json: [],
keys: {
x: "buildNumber"
=======
} ]), angular.module("openshiftConsole").directive("categoryContent", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, r) {
return {
restrict: "E",
scope: {
projectImageStreams: "=",
openshiftImageStreams: "=",
projectTemplates: "=",
openshiftTemplates: "=",
projectName: "=",
category: "="
},
templateUrl: "views/catalog/category-content.html",
link: function(t) {
function a() {
var r = t.keywords = n.generateKeywords(t.filter.keyword);
t.filteredBuilderImages = e.filterImageStreams(c, r), t.filteredTemplates = e.filterTemplates(l, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
};
var e = 0, t = 0;
angular.forEach(o.completeBuilds, function(n) {
var r = a.getBuildNumber(n);
if (r) {
var o = a.getDuration(n);
e += o, t++;
var s = {
buildNumber: r,
=======
type: "bar"
}
<<<<<<< HEAD
}, p = function() {
o.completeBuilds = [];
var t = e("isIncompleteBuild");
angular.forEach(o.builds, function(e) {
t(e) || o.completeBuilds.push(e);
});
}, g = !1, f = function() {
u && g ? l.ygrids([ {
value: u,
class: "build-trends-avg-line"
} ]) : l.ygrids.remove();
};
o.toggleAvgLine = function() {
g = !g, f();
};
<<<<<<< HEAD
o.$watch(function() {
return p(), o.completeBuilds.length;
}, function() {
i = {
json: [],
keys: {
x: "buildNumber"
=======
}, T = function() {
=======
_.size(h) <= 100 ? (y = e("orderByDisplayName")(h), I = _.map(y, function(e) {
return n(e, !1);
})) : I = [ n(h[t], !0) ], k.empty(), k.append(I), k.append($('<option data-divider="true"></option>')), k.append($('<option value="">View All Projects</option>')), k.selectpicker("refresh");
}
}, E = function() {
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
return f.list().then(function(e) {
h = e.by("metadata.name");
});
}, T = function() {
var e = a.project;
i.currentProjectName !== e && (i.currentProjectName = e, i.chromeless = "chromeless" === a.view, e && !i.chromeless ? (_.set(r, "view.hasProject", !0), i.canIAddToProject = !1, s.getProjectRules(e).then(function() {
i.currentProjectName === e && (i.canIAddToProject = s.canIAddToProject(e), i.canIAddToProject && l.getCatalogItems().then(function(e) {
i.catalogItems = e;
}));
}), E().then(function() {
i.currentProjectName && h && (h[i.currentProjectName] || (h[i.currentProjectName] = {
metadata: {
name: i.currentProjectName
>>>>>>> Configurable inactivity timeout in console
}
<<<<<<< HEAD
};
<<<<<<< HEAD
var e = 0, t = 0;
angular.forEach(o.completeBuilds, function(n) {
var a = r.getBuildNumber(n);
if (a) {
var o = r.getDuration(n);
e += o, t++;
var s = {
buildNumber: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
phase: n.status.phase,
build: n
=======
} ]).directive("podTemplate", function() {
return {
restrict: "E",
scope: {
podTemplate: "=",
imagesByDockerReference: "=",
builds: "=",
detailed: "=?",
addHealthCheckUrl: "@?"
},
templateUrl: "views/_pod-template.html"
};
}).directive("podTemplateContainer", function() {
return {
restrict: "E",
scope: {
container: "=podTemplateContainer",
imagesByDockerReference: "=",
builds: "=",
detailed: "=?"
},
templateUrl: "views/_pod-template-container.html"
};
}).directive("annotations", function() {
return {
restrict: "E",
scope: {
annotations: "="
},
templateUrl: "views/directives/annotations.html",
link: function(e) {
e.expandAnnotations = !1, e.toggleAnnotations = function() {
e.expandAnnotations = !e.expandAnnotations;
>>>>>>> Remove redundant "Container" heading at mobile on overview
};
s[n.status.phase] = o, i.json.push(s);
}
}), i.json.sort(function(e, t) {
return e.buildNumber - t.buildNumber;
}), i.json.length > 50 && (i.json = i.json.slice(i.json.length - 50));
var n = {};
angular.forEach(i.json, function(e) {
n[e.phase] = !0;
}), t ? (u = e / t, o.averageDurationText = c(u)) : (u = null, o.averageDurationText = null);
var p = [], f = [];
angular.forEach(s, function(e) {
n[e] ? p.push(e) : f.push(e);
}), i.keys.value = p, i.groups = [ p ], l ? (i.unload = f, i.done = function() {
setTimeout(function() {
l.flush();
}, d() + 25);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, l.load(i), f()) : (m.data = angular.extend(i, m.data), r(function() {
=======
}, l.load(i), f()) : (m.data = angular.extend(i, m.data), a(function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
l = c3.generate(m), f();
=======
}, l.load(i), g()) : (m.data = angular.extend(i, m.data), a(function() {
l = c3.generate(m), g();
>>>>>>> Patternfly vertical navigation and project bar
=======
}, l.load(i), g()) : (p.data = angular.extend(i, p.data), a(function() {
l = c3.generate(p), g();
>>>>>>> Updates for Service Instance & Bindings
=======
}, l.load(i), g()) : (m.data = angular.extend(i, m.data), a(function() {
l = c3.generate(m), g();
>>>>>>> Support EnvFrom in the Env Editors
}));
}), o.$on("destroy", function() {
l && (l = l.destroy());
=======
function s() {
t.loaded = t.projectTemplates && t.openshiftTemplates && t.projectImageStreams && t.openshiftImageStreams, a(), t.emptyCategory = _.isEmpty(c) && _.isEmpty(l), t.loaded && (r.log("templates", l), r.log("builder images", c));
}
var c = [], l = [];
t.filteredTemplates = [], t.filteredBuilderImages = [], t.loaded = !1, t.filter = {
keyword: ""
}, t.$watch("filter.keyword", a), t.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], function() {
var n = e.categorizeImageStreams(o());
c = _.get(n, [ t.category.id ], []), s();
}), t.$watchGroup([ "openshiftTemplates", "projectTemplates" ], function() {
var n = e.categorizeTemplates(i());
l = _.get(n, [ t.category.id ], []), s();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
<<<<<<< HEAD
=======
}
var b, C = {}, S = 30, w = "compact" === t.profile, k = !1;
t.uniqueID = s.uniqueID();
var P, j, R = {}, I = w, E = function(e) {
return e >= 1024;
>>>>>>> Bug 1505281 - Improve import YAML results message
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("computeResource", [ "$filter", "gettext", "gettextCatalog", function(e, t, n) {
=======
} ]), angular.module("openshiftConsole").directive("computeResource", [ "$filter", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
require: "ngModel",
scope: {
label: "@",
type: "@",
description: "@",
defaultValue: "=",
limitRangeMin: "=",
limitRangeMax: "=",
maxLimitRequestRatio: "=",
request: "="
},
<<<<<<< HEAD
templateUrl: "views/_compute-resource.html",
<<<<<<< HEAD
link: function(r, a, o, i) {
var s = e("usageValue"), c = e("amountAndUnit"), l = e("humanizeUnit");
r.id = _.uniqueId("compute-resource-"), r.input = {};
var u = function(e) {
_.some(r.units, {
value: e
}) || r.units.push({
value: e,
label: n.getString(l(e, r.type))
=======
templateUrl: "views/catalog/_image.html",
link: function(n) {
var r = e("imageStreamTagTags"), a = {};
n.referencedBy = {};
var o = _.get(n, "imageStream.spec.tags", []), i = {};
_.each(o, function(e) {
i[e.name] = r(n.imageStream, e.name), t.referencesSameImageStream(e) && (a[e.name] = !0, n.referencedBy[e.from.name] = n.referencedBy[e.from.name] || [], n.referencedBy[e.from.name].push(e.name));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< HEAD
};
<<<<<<< HEAD
switch (r.$watch("defaultValue", function(e) {
var t = _.spread(function(e, t) {
r.placeholder = e, u(t), r.input.amount || (r.input.unit = t);
=======
n.$watch("imageStream.status.tags", function(e) {
n.tags = _.filter(e, function(e) {
return s(e.tag) && !a[e.tag];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
i.closeOrderingPanel = function() {
v.addItem(_.get(i.selectedItem, "resource.metadata.uid")), i.orderingPanelVisible = !1;
}, T(), i.$on("$routeChangeSuccess", T), k.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : g(e);
i.$apply(function() {
t.url(n);
>>>>>>> Configurable inactivity timeout in console
});
e && t(c(e, r.type));
}), r.type) {
case "cpu":
r.input.unit = "m", r.units = [ {
value: "m",
label: n.getString(t("millicores"))
}, {
value: "",
label: n.getString(t("cores"))
=======
link: function(t, n, a, r) {
var o = e("usageValue"), i = e("amountAndUnit"), s = e("humanizeUnit");
t.id = _.uniqueId("compute-resource-"), t.input = {};
var c = function(e) {
_.some(t.units, {
value: e
}) || t.units.push({
value: e,
label: s(e, t.type)
});
};
switch (t.$watch("defaultValue", function(e) {
var n = _.spread(function(e, n) {
t.placeholder = e, c(n), t.input.amount || (t.input.unit = n);
});
<<<<<<< HEAD
e && n(i(e, t.type));
}), t.type) {
case "cpu":
t.input.unit = "m", t.units = [ {
value: "m",
label: "millicores"
=======
}
};
} ]), angular.module("openshiftConsole").component("alerts", {
bindings: {
alerts: "=",
filter: "<?",
hideCloseButton: "<?"
},
templateUrl: "components/alerts/alerts.html",
controller: function() {
var e = this;
e.close = function(e) {
e.hidden = !0, _.isFunction(e.onClose) && e.onClose();
}, e.onClick = function(t, n) {
_.isFunction(n.onClick) && n.onClick() && e.close(t);
};
}
}), function() {
angular.module("openshiftConsole").component("oscWebhookTriggers", {
controller: [ "$scope", "$uibModal", "$filter", "APIService", function(e, t, n, r) {
var a = this;
a.$onInit = function() {
e.namespace = a.namespace, e.type = a.type, a.secretsVersion = r.getPreferredVersion("secrets"), a.webhookTypesOptions = [ {
type: "github",
label: "GitHub"
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
}, {
value: "",
label: "cores"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ];
break;

case "memory":
<<<<<<< HEAD
r.input.unit = "Mi", r.units = [ {
=======
t.input.unit = "Mi", t.units = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
value: "Mi",
label: "MiB"
}, {
value: "Gi",
label: "GiB"
<<<<<<< HEAD
} ];
}
r.groupUnits = function(e) {
=======
}, {
value: "M",
label: "MB"
}, {
value: "G",
label: "GB"
} ];
}
t.groupUnits = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
switch (e.value) {
case "Mi":
case "Gi":
return n.getString(t("Binary Units"));

case "M":
case "G":
return n.getString(t("Decimal Units"));
}
return "";
};
<<<<<<< HEAD
<<<<<<< HEAD
var d = function() {
var e = r.input.amount && s(r.input.amount + r.input.unit), t = r.limitRangeMin && s(r.limitRangeMin), n = r.limitRangeMax && s(r.limitRangeMax), a = !0, o = !0;
e && t && (a = e >= t), e && n && (o = e <= n), r.form.amount.$setValidity("limitRangeMin", a), r.form.amount.$setValidity("limitRangeMax", o);
}, m = function() {
var e, t = r.request && s(r.request), n = !0, a = !0;
r.input.amount ? e = s(r.input.amount + r.input.unit) : r.defaultValue && (e = s(r.defaultValue)), t && e && (n = e >= t, r.maxLimitRequestRatio && (a = e / t <= r.maxLimitRequestRatio)), t && !e && r.maxLimitRequestRatio && (a = !1), r.form.amount.$setValidity("limitLargerThanRequest", n), r.form.amount.$setValidity("limitWithinRatio", a);
};
i.$render = function() {
_.spread(function(e, t) {
e ? (r.input.amount = Number(e), r.input.unit = t, u(t)) : r.input.amount = null;
})(c(i.$viewValue, r.type));
}, r.$watchGroup([ "input.amount", "input.unit" ], function() {
d(), m(), r.input.amount ? i.$setViewValue(r.input.amount + r.input.unit) : i.$setViewValue(void 0);
}), r.$watchGroup([ "limitRangeMin", "limitRangeMax" ], d), r.$watch("request", m);
=======
var l = function() {
var e = t.input.amount && o(t.input.amount + t.input.unit), n = t.limitRangeMin && o(t.limitRangeMin), a = t.limitRangeMax && o(t.limitRangeMax), r = !0, i = !0;
e && n && (r = e >= n), e && a && (i = e <= a), t.form.amount.$setValidity("limitRangeMin", r), t.form.amount.$setValidity("limitRangeMax", i);
}, u = function() {
var e, n = t.request && o(t.request), a = !0, r = !0;
t.input.amount ? e = o(t.input.amount + t.input.unit) : t.defaultValue && (e = o(t.defaultValue)), n && e && (a = e >= n, t.maxLimitRequestRatio && (r = e / n <= t.maxLimitRequestRatio)), n && !e && t.maxLimitRequestRatio && (r = !1), t.form.amount.$setValidity("limitLargerThanRequest", a), t.form.amount.$setValidity("limitWithinRatio", r);
};
r.$render = function() {
_.spread(function(e, n) {
e ? (t.input.amount = Number(e), t.input.unit = n, c(n)) : t.input.amount = null;
})(i(r.$viewValue, t.type));
}, t.$watchGroup([ "input.amount", "input.unit" ], function() {
l(), u(), t.input.amount ? r.$setViewValue(t.input.amount + t.input.unit) : r.$setViewValue(void 0);
}), t.$watchGroup([ "limitRangeMin", "limitRangeMax" ], l), t.$watch("request", u);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.$watch("options", function() {
R = {}, P = null, delete t.metricsError, y();
}, !0), b = e(y, s.getDefaultUpdateInterval(), !1), t.updateInView = function(e) {
I = !e, e && (!j || Date.now() > j + s.getDefaultUpdateInterval()) && y();
};
<<<<<<< HEAD
var A = r.$on("metrics.charts.resize", function() {
s.redraw(C);
});
t.$on("$destroy", function() {
b && (e.cancel(b), b = null), A && (A(), A = null), angular.forEach(C, function(e) {
e.destroy();
}), C = null, k = !0;
});
>>>>>>> Bug 1505281 - Improve import YAML results message
}
};
} ]).directive("editRequestLimit", [ "$filter", "LimitRangesService", "ModalsService", function(e, t, n) {
=======
} ],
controllerAs: "$ctrl",
bindings: {
webhookSecrets: "<",
namespace: "<",
type: "@",
webhookTriggers: "=",
form: "="
},
templateUrl: "components/osc-webhook-triggers/osc-webhook-triggers.html"
});
}(), angular.module("openshiftConsole").directive("parseError", function() {
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
return {
restrict: "E",
scope: {
resources: "=",
type: "@",
limitRanges: "=",
project: "="
},
templateUrl: "views/_edit-request-limit.html",
link: function(e) {
e.showComputeUnitsHelp = function() {
n.showComputeUnitsHelp();
}, e.$watch("limitRanges", function() {
e.limits = t.getEffectiveLimitRange(e.limitRanges, e.type, "Container", e.project), e.requestCalculated = t.isRequestCalculated(e.type, e.project), e.limitCalculated = t.isLimitCalculated(e.type, e.project);
}, !0);
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("editProbe", function() {
=======
}), angular.module("openshiftConsole").directive("podMetrics", [ "$filter", "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", "usageValueFilter", function(e, t, n, r, a, o, i, s, c, l, u, d) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
probe: "=",
exposedPorts: "="
},
<<<<<<< HEAD
templateUrl: "views/directives/_edit-probe.html",
link: function(e) {
e.id = _.uniqueId("edit-probe-"), e.probe = e.probe || {}, e.types = [ {
id: "httpGet",
label: "HTTP GET"
}, {
id: "exec",
label: "Container Command"
}, {
id: "tcpSocket",
label: "TCP Socket"
} ], e.previousProbes = {}, e.tcpPorts = _.filter(e.exposedPorts, {
protocol: "TCP"
});
<<<<<<< HEAD
var t = _.get(e, "probe.httpGet.port") || _.get(e, "probe.exec.port");
t && !_.some(e.tcpPorts, {
containerPort: t
}) && (e.tcpPorts = [ {
containerPort: t,
protocol: "TCP"
} ].concat(e.tcpPorts)), e.portOptions = e.tcpPorts;
<<<<<<< HEAD
var n, r = function(t, n) {
if (e.probe = e.probe || {}, e.previousProbes[n] = e.probe[n], delete e.probe[n], e.probe[t] = e.previousProbes[t], !e.probe[t]) switch (t) {
case "httpGet":
case "tcpSocket":
var r = _.head(e.tcpPorts);
e.probe[t] = {
port: r ? r.containerPort : ""
=======
var n, a = function(t, n) {
if (e.probe = e.probe || {}, e.previousProbes[n] = e.probe[n], delete e.probe[n], e.probe[t] = e.previousProbes[t], !e.probe[t]) switch (t) {
case "httpGet":
case "tcpSocket":
var a = _.head(e.tcpPorts);
e.probe[t] = {
port: a ? a.containerPort : ""
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
break;

case "exec":
e.probe = {
exec: {
command: []
<<<<<<< HEAD
=======
templateUrl: "views/directives/pod-metrics.html",
link: function(m) {
function p(e) {
if (!m.pod) return null;
var t = m.options.selectedContainer;
switch (e) {
case "memory/usage":
var n = T(t);
if (n) return s.bytesToMiB(d(n));
break;

case "cpu/usage_rate":
var r = N(t);
if (r) return d(r);
}
return null;
}
function f(e) {
var t = _.head(e.datasets);
if (t.total) {
var n, a = {
type: "donut",
columns: [ [ "Used", t.used ], [ "Available", Math.max(t.available, 0) ] ],
colors: {
Used: t.available > 0 ? "#0088ce" : "#ec7a08",
Available: "#d1d1d1"
}
};
R[t.id] ? R[t.id].load(a) : ((n = B(e)).data = a, r(function() {
A || (R[t.id] = c3.generate(n));
}));
}
<<<<<<< HEAD
<<<<<<< HEAD
}
function g(e) {
if (!_.some(e.datasets, function(e) {
return !e.data;
})) {
var t = {};
_.each(e.datasets, function(e) {
t[e.id] = e.data;
});
var n, a = c.getSparklineData(t), o = e.chartPrefix + "sparkline";
E[o] ? E[o].load(a) : ((n = L(e)).data = a, e.chartDataColors && (n.color = {
pattern: e.chartDataColors
}), r(function() {
A || (E[o] = c3.generate(n));
}));
=======
}, E = function() {
=======
}, T = function() {
>>>>>>> Check for new templateServiceBrokerEnabled flag
return f.list().then(function(e) {
h = e.by("metadata.name");
});
}, E = function() {
var e = a.project;
i.currentProjectName !== e && (i.currentProjectName = e, i.chromeless = "chromeless" === a.view, e && !i.chromeless ? (_.set(r, "view.hasProject", !0), i.canIAddToProject = !1, s.getProjectRules(e).then(function() {
i.currentProjectName === e && (i.canIAddToProject = s.canIAddToProject(e), i.canIAddToProject && l.getCatalogItems().then(function(e) {
i.catalogItems = e;
}));
}), T().then(function() {
i.currentProjectName && h && (h[i.currentProjectName] || (h[i.currentProjectName] = {
metadata: {
name: i.currentProjectName
>>>>>>> Use new clusterResourceOverridesEnabled flag
}
}
function v() {
return "-" + m.options.timeRange.value + "mn";
}
function h() {
return 60 * m.options.timeRange.value * 1e3;
}
function y() {
return Math.floor(h() / D) + "ms";
}
function b(e, t, n) {
var r, a = {
metric: t.id,
type: t.type,
bucketDuration: y()
};
return t.data && t.data.length ? (r = _.last(t.data), a.start = r.end) : a.start = n, m.pod ? _.assign(a, {
namespace: m.pod.metadata.namespace,
pod: m.pod,
containerName: e.containerMetric ? m.options.selectedContainer.name : "pod"
}) : null;
}
function S() {
A || (U = 0, _.each(m.metrics, function(e) {
g(e), f(e);
}));
}
<<<<<<< HEAD
function C(e) {
if (!A) if (U++, m.noData) m.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(U < 2)) {
var t = "metrics-failed-" + m.uniqueID;
m.alerts[t] = {
type: "error",
message: "An error occurred updating metrics for pod " + _.get(m, "pod.metadata.name", "<unknown>") + ".",
links: [ {
href: "",
label: "Retry",
onClick: function() {
delete m.alerts[t], U = 1, j();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
});
i.closeOrderingPanel = function() {
v.addItem(_.get(i.selectedItem, "resource.metadata.uid")), i.orderingPanelVisible = !1;
}, T(), i.$on("$routeChangeSuccess", T), k.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : g(e);
i.$apply(function() {
t.url(n);
});
}), i.$on("$destroy", function() {
B(), N();
});
>>>>>>> Use new clusterResourceOverridesEnabled flag
}
};
}
<<<<<<< HEAD
};
e.probe.httpGet ? n = "httpGet" : e.probe.exec ? n = "exec" : e.probe.tcpSocket ? n = "tcpSocket" : (n = "httpGet", r("httpGet")), _.set(e, "selected.type", n), e.$watch("selected.type", function(e, t) {
e !== t && r(e, t);
}), e.refreshPorts = function(t) {
if (/^\d+$/.test(t)) {
var n = e.tcpPorts;
(t = parseInt(t, 10)) && !_.some(n, {
containerPort: t
}) && (n = [ {
containerPort: t,
protocol: "TCP"
} ].concat(n)), e.portOptions = _.uniq(n);
=======
}, w = function() {
u ? $(u).on("scroll", S) : m.on("scroll", S);
}, k = function() {
t.fixedHeight || p.affix({
target: window,
offset: {
top: t.followAffixTop || 0
}
<<<<<<< HEAD
=======
function w() {
return !(m.metricsError || U > 1) && (m.pod && _.get(m, "options.selectedContainer"));
}
function P(e, t, n) {
t.total = p(t.id), t.total && (m.hasLimits = !0);
var r = _.get(n, "usage.value");
isNaN(r) && (r = 0), e.convert && (r = e.convert(r)), t.used = d3.round(r, e.usagePrecision), t.total && (t.available = d3.round(t.total - r, e.usagePrecision)), e.totalUsed += t.used;
}
function k(e, t) {
m.noData = !1;
var n = _.initial(t.data);
e.data ? e.data = _.chain(e.data).takeRight(D).concat(n).value() : e.data = n;
=======
});
i.closeOrderingPanel = function() {
v.addItem(_.get(i.selectedItem, "resource.metadata.uid")), i.orderingPanelVisible = !1;
}, E(), i.$on("$routeChangeSuccess", E), k.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : g(e);
i.$apply(function() {
t.url(n);
});
}), i.$on("$destroy", function() {
B(), N();
});
>>>>>>> Check for new templateServiceBrokerEnabled flag
}
function j() {
if (w()) {
var e = v(), t = [];
angular.forEach(m.metrics, function(n) {
var r = [];
n.totalUsed = 0, angular.forEach(n.datasets, function(a) {
var o = b(n, a, e);
if (o) {
var i = l.get(o);
r.push(i), p(a.id) && t.push(l.getCurrentUsage(o).then(function(e) {
P(n, a, e);
}));
}
}), t = t.concat(r), a.all(r).then(function(e) {
A || angular.forEach(e, function(e) {
e && k(_.find(n.datasets, {
id: e.metricID
}), e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}, P = function() {
return $("#" + t.logViewerID + " .log-view-output");
}, j = function(e) {
var n = P(), a = n.offset().top;
if (!(a < 0)) {
var r = $(".ellipsis-pulser").outerHeight(!0), o = t.fixedHeight ? t.fixedHeight : Math.floor($(window).height() - a - r);
t.chromeless || t.fixedHeight || (o -= 40), e ? n.animate({
"min-height": o + "px"
}, "fast") : n.css("min-height", o + "px"), t.fixedHeight && n.css("max-height", o);
}
}, R = function() {
if (!y) {
var e = function() {
clearInterval(y), y = null, t.$evalAsync(function() {
t.sized = !0;
});
<<<<<<< HEAD
}, n = 0;
y = setInterval(function() {
n > 10 ? e() : (n++, P().is(":visible") && (j(), e()));
}, 100);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}), a.all(t).then(S, C).finally(function() {
m.loaded = !0;
});
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
};
<<<<<<< HEAD
}
=======
} ]).directive("setHomePage", [ "$uibModal", function(e) {
return {
restrict: "E",
replace: !0,
template: '<a href="">Set Home Page</a>',
link: function(t, n) {
n.bind("click", function() {
e.open({
animation: !0,
templateUrl: "views/modals/set-home-page-modal.html",
controller: "SetHomePageModalController"
});
<<<<<<< HEAD
=======
}
};
} ]), angular.module("openshiftConsole").component("alerts", {
bindings: {
alerts: "=",
filter: "<?",
hideCloseButton: "<?"
},
templateUrl: "components/alerts/alerts.html",
controller: function() {
var e = this;
e.close = function(e) {
e.hidden = !0, _.isFunction(e.onClose) && e.onClose();
}, e.onClick = function(t, n) {
_.isFunction(n.onClick) && n.onClick() && e.close(t);
};
}
}), angular.module("openshiftConsole").component("oscWebhookTriggers", {
bindings: {
webhookSecrets: "=",
namespace: "=",
type: "@",
webhookTriggers: "=",
form: "="
},
templateUrl: "components/osc-webhook-triggers/osc-webhook-triggers.html",
controller: function(e, t, n, r) {
var a = this;
a.$onInit = function() {
e.namespace = a.namespace, e.type = a.type, a.secretsVersion = r.getPreferredVersion("secrets"), a.webhookTypesOptions = [ {
type: "github",
label: "GitHub"
}, {
type: "gitlab",
label: "GitLab"
}, {
type: "bitbucket",
label: "Bitbucket"
}, {
type: "generic",
label: "Generic"
} ];
}, a.isDeprecated = function(e) {
var t = n("getWebhookSecretData")(e);
return _.has(t, "secret") && !_.has(t, "secretReference.name");
}, a.toggleSecretInputType = function(e) {
e.secretInputType = "password" === e.secretInputType ? "text" : "password";
};
var o = function(e) {
var t = _.filter(a.webhookTriggers, function(t) {
return _.isEqual(t.data, e.data);
});
_.each(t, function(e, t) {
var n = 0 === t;
e.isDuplicate = !n;
});
};
a.removeWebhookTrigger = function(e, t) {
var n = _.clone(e);
if (1 === a.webhookTriggers.length) {
var r = _.first(a.webhookTriggers);
r.lastTriggerType = "", r.data = {
type: ""
};
} else a.webhookTriggers.splice(t, 1);
a.form.$setDirty(), o(n);
}, a.triggerTypeChange = function(e) {
var t = _.toLower(e.lastTriggerType), n = _.toLower(e.data.type);
e.data[n] = e.data[t], delete e.data[t], e.lastTriggerType = e.data.type, o(e);
}, a.triggerSecretChange = function(e) {
o(e);
};
var i = function() {
a.webhookTriggers.push({
lastTriggerType: "",
data: {
type: ""
}
});
};
a.checkLastAndAddNew = function() {
var e = _.last(a.webhookTriggers), t = n("getWebhookSecretData")(e);
e.data.type && (_.has(t, "secret") || _.has(t, "secretReference.name")) && i();
}, _.isEmpty(a.webhookTriggers) ? i() : _.each(a.webhookTriggers, function(e) {
a.isDeprecated(e) && (e.secretInputType = "password"), e.isDuplicate || o(e);
}), a.openCreateWebhookSecretModal = function() {
t.open({
<<<<<<< HEAD
animation: !0,
=======
>>>>>>> Update modals to align with PatternFly standard
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: e
}).result.then(function(e) {
a.webhookSecrets.push(e);
<<<<<<< HEAD
=======
});
};
} ],
controllerAs: "$ctrl",
bindings: {
webhookSecrets: "<",
namespace: "<",
type: "@",
webhookTriggers: "=",
form: "="
},
templateUrl: "components/osc-webhook-triggers/osc-webhook-triggers.html"
});
}(), angular.module("openshiftConsole").directive("parseError", function() {
return {
restrict: "E",
scope: {
error: "="
},
templateUrl: "views/_parse-error.html",
link: function(e) {
e.$watch("error", function() {
e.hidden = !1;
});
}
};
}), angular.module("openshiftConsole").directive("podWarnings", [ "podWarningsFilter", function(e) {
return {
restrict: "E",
scope: {
pod: "="
},
link: function(t) {
var n, r = "", a = e(t.pod);
for (n = 0; n < _.size(a); n++) r && (r += "<br>"), "error" === a[n].severity && (t.hasError = !0), r += a[n].message;
t.content = r;
},
templateUrl: "views/directives/_warnings-popover.html"
};
} ]).directive("routeWarnings", [ "RoutesService", function(e) {
return {
restrict: "E",
scope: {
route: "=",
services: "="
},
link: function(t) {
t.$watchGroup([ "route", "services" ], function() {
var n = e.getRouteWarnings(t.route, t.services);
t.content = _.map(n, _.escape).join("<br>");
});
},
templateUrl: "views/directives/_warnings-popover.html"
};
} ]), angular.module("openshiftConsole").directive("takeFocus", [ "$timeout", function(e) {
return {
restrict: "A",
link: function(t, n) {
e(function() {
$(n).focus();
}, 300);
}
};
} ]).directive("selectOnFocus", function() {
return {
restrict: "A",
link: function(e, t) {
$(t).focus(function() {
$(this).select();
});
}
};
}).directive("focusWhen", [ "$timeout", function(e) {
return {
restrict: "A",
scope: {
trigger: "@focusWhen"
},
link: function(t, n) {
t.$watch("trigger", function(t) {
t && e(function() {
$(n).focus();
});
});
}
};
} ]).directive("clickToReveal", function() {
return {
restrict: "A",
transclude: !0,
scope: {
linkText: "@"
},
templateUrl: "views/directives/_click-to-reveal.html",
link: function(e, t) {
$(".reveal-contents-link", t).click(function() {
$(this).hide(), $(".reveal-contents", t).show();
});
}
};
}).directive("copyToClipboard", function() {
return {
restrict: "E",
scope: {
clipboardText: "=",
isDisabled: "=?",
displayWide: "=?",
inputText: "=?",
multiline: "=?"
},
templateUrl: "views/directives/_copy-to-clipboard.html",
controller: [ "$scope", function(e) {
e.id = _.uniqueId("clipboardJs");
} ],
link: function(e, t) {
var n = $("a", t), r = n.get(0);
e.inputText && (r = n.get(1));
var a = new Clipboard(r);
a.on("success", function(e) {
$(e.trigger).attr("title", "Copied!").tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle"), e.clearSelection();
}), a.on("error", function(e) {
var t = /Mac/i.test(navigator.userAgent) ? "Press ⌘C to copy" : "Press Ctrl-C to copy";
$(e.trigger).attr("title", t).tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle");
}), t.on("$destroy", function() {
a.destroy();
});
}
};
}).directive("copyLoginToClipboard", [ "NotificationsService", function(e) {
return {
restrict: "E",
replace: !0,
scope: {
clipboardText: "@"
},
template: '<a href="" data-clipboard-text="">Copy Login Command</a>',
link: function(t, n) {
var r = new Clipboard(n.get(0));
r.on("success", function() {
e.addNotification({
id: "copy-login-command-success",
type: "success",
message: "Login command copied."
});
e.addNotification({
id: "openshift/token-warning",
type: "warning",
message: "A token is a form of a password. Do not share your API token.",
links: [ {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return e.permanentlyHideNotification("openshift/token-warning"), !0;
}
} ]
});
}), r.on("error", function() {
e.addNotification({
id: "copy-login-command-error",
type: "error",
message: "Unable to copy the login command."
});
}), n.on("$destroy", function() {
r.destroy();
});
}
};
} ]).directive("setHomePage", [ "$uibModal", function(e) {
return {
restrict: "E",
replace: !0,
template: '<a href="">Set Home Page</a>',
link: function(t, n) {
n.bind("click", function() {
e.open({
templateUrl: "views/modals/set-home-page-modal.html",
controller: "SetHomePageModalController"
});
});
}
};
} ]).directive("shortId", function() {
return {
restrict: "E",
scope: {
id: "@"
},
template: '<code class="short-id" title="{{id}}">{{id.substring(0, 6)}}</code>'
};
}).directive("customIcon", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
resource: "=",
kind: "@",
tag: "=?"
},
controller: [ "$scope", function(t) {
t.$watchGroup([ "resource", "tag" ], function() {
t.tag ? t.icon = e("imageStreamTagAnnotation")(t.resource, "icon", t.tag) : t.icon = e("annotation")(t.resource, "icon"), t.icon && 0 === t.icon.indexOf("data:") ? t.image = t.icon : (t.tag ? t.icon = e("imageStreamTagIconClass")(t.resource, t.tag) : t.icon = e("iconClass")(t.resource, t.kind), t.image = e("imageForIconClass")(t.icon));
});
} ],
templateUrl: "views/directives/_custom-icon.html"
};
} ]).directive("bottomOfWindow", function() {
return {
restrict: "A",
link: function(e, t) {
function n() {
var e = $(window).height() - t[0].getBoundingClientRect().top;
t.css("height", e - 10 + "px");
}
$(window).on("resize", n), n(), t.on("$destroy", function() {
$(window).off("resize", n);
});
}
};
}).directive("onEnter", function() {
return function(e, t, n) {
t.bind("keydown keypress", function(t) {
13 === t.which && (e.$apply(function() {
e.$eval(n.onEnter);
}), t.preventDefault());
});
};
}).directive("onEsc", function() {
return function(e, t, n) {
t.bind("keydown keypress", function(t) {
27 === t.which && (e.$apply(function() {
e.$eval(n.onEsc);
}), t.preventDefault());
>>>>>>> Update modals to align with PatternFly standard
});
};
}
}), angular.module("openshiftConsole").component("copyWebhookUrl", {
bindings: {
buildConfigName: "=",
triggerType: "=",
projectName: "=",
secret: "=",
webhookSecrets: "="
},
templateUrl: "components/copy-webhook-url/copy-webhook-url.html",
controller: function() {
var e = this;
e.showSecretsWarning = function() {
return _.get(e.secret, "secretReference.name") && !e.webhookSecrets;
};
}
}), angular.module("openshiftConsole").directive("parseError", function() {
return {
restrict: "E",
scope: {
error: "="
},
templateUrl: "views/_parse-error.html",
link: function(e) {
e.$watch("error", function() {
e.hidden = !1;
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
});
}
};
} ]).directive("shortId", function() {
return {
restrict: "E",
scope: {
id: "@"
},
template: '<code class="short-id" title="{{id}}">{{id.substring(0, 6)}}</code>'
>>>>>>> Set Home Page Preference
};
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("editCommand", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
args: "=",
type: "@",
placeholder: "@",
description: "=",
isRequired: "="
=======
if (s.getLoggingURL(t.context.project).then(function(a) {
var r = _.get(t.context, "project.metadata.name"), i = _.get(t.options, "container");
r && i && h && a && (angular.extend(t, {
kibanaAuthUrl: e.trustAsResourceUrl(URI(a).segment("auth").segment("token").normalizePathname().toString()),
access_token: o.UserStore().getToken()
}), t.$watchGroup([ "context.project.metadata.name", "options.container", "name" ], function() {
angular.extend(t, {
kibanaArchiveUrl: e.trustAsResourceUrl(d.archiveUri({
namespace: t.context.project.metadata.name,
namespaceUid: t.context.project.metadata.uid,
podname: h,
containername: t.options.container,
backlink: URI.encode(n.location.href)
}))
});
}));
}), this.cacheScrollableNode = function(e) {
u = e;
}, this.cacheLogNode = function(e) {
l = e;
}, this.cacheAffixable = function(e) {
p = $(e);
}, this.start = function() {
w(), k();
}, angular.extend(t, {
ready: !0,
loading: !0,
autoScrollActive: !0,
state: !1,
onScrollBottom: function() {
d.scrollBottom(u);
},
onScrollTop: function() {
t.autoScrollActive = !1, d.scrollTop(u), $("#" + t.logViewerID + "-affixedFollow").affix("checkPosition");
>>>>>>> Bug 1505281 - Improve import YAML results message
},
<<<<<<< HEAD
templateUrl: "views/directives/_edit-command.html",
link: function(t) {
t.id = _.uniqueId("edit-command-"), t.input = {};
var n, r, a = e("isMultiline");
t.$watch("args", function() {
r ? r = !1 : _.isEmpty(t.args) || (t.input.args = _.map(t.args, function(e) {
return {
value: e,
multiline: a(e)
};
}), n = !0);
}, !0), t.$watch("input.args", function(e, a) {
n ? n = !1 : e !== a && (r = !0, t.args = _.map(t.input.args, function(e) {
return e.value;
}), t.form.command.$setDirty());
}, !0), t.addArg = function() {
t.nextArg && (t.input.args = t.input.args || [], t.input.args.push({
value: t.nextArg,
multiline: a(t.nextArg)
}), t.nextArg = "");
}, t.removeArg = function(e) {
t.input.args.splice(e, 1), _.isEmpty(t.input.args) && (t.input.args = null);
}, t.clear = function() {
t.input.args = null;
};
}
};
} ]), angular.module("openshiftConsole").directive("buildPipeline", [ "$filter", "Logger", function(e, t) {
=======
size: {
height: 175,
widht: 175
}
};
}, L = function(e) {
var t = e.chartPrefix + m.uniqueID + "-sparkline", n = c.getDefaultSparklineConfig(t, e.units);
return 1 === e.datasets.length && _.set(n, "legend.show", !1), n;
}, U = 0;
(window.OPENSHIFT_CONSTANTS.DISABLE_CUSTOM_METRICS ? a.when({}) : l.getCustomMetrics(m.pod).then(function(e) {
angular.forEach(e, function(e) {
var t = e.description || e.name, n = e.unit || "", r = "custom/" + e.id.replace(/.*\/custom\//, "");
m.metrics.push({
label: t,
units: n,
chartPrefix: "custom-" + _.uniqueId("custom-metric-"),
chartType: "spline",
datasets: [ {
id: r,
label: t,
type: e.type,
data: []
} ]
});
});
})).finally(function() {
m.$watch("options", function() {
_.each(m.metrics, function(e) {
_.each(e.datasets, function(e) {
delete e.data;
});
}), delete m.metricsError, j();
}, !0), I = t(j, c.getDefaultUpdateInterval(), !1);
});
var O = o.$on("metrics.charts.resize", function() {
c.redraw(R), c.redraw(E);
});
m.$on("$destroy", function() {
I && (t.cancel(I), I = null), O && (O(), O = null), angular.forEach(R, function(e) {
e.destroy();
}), R = null, angular.forEach(E, function(e) {
e.destroy();
}), E = null, A = !0;
});
}
};
} ]), angular.module("openshiftConsole").directive("deploymentMetrics", [ "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
build: "=",
expandOnlyRunning: "=?",
collapsePending: "=?",
buildConfigNameOnExpanded: "=?"
},
replace: !0,
templateUrl: "views/directives/build-pipeline.html",
link: function(n) {
var r = e("annotation");
n.$watch(function() {
return r(n.build, "jenkinsStatus");
}, function(e) {
if (e) try {
n.jenkinsStatus = JSON.parse(e);
} catch (n) {
t.error("Could not parse Jenkins status as JSON", e);
}
<<<<<<< HEAD
});
var a = e("buildConfigForBuild");
n.$watch(function() {
return a(n.build);
=======
}
};
=======
function r(e) {
var t, r = {}, a = [ "Date" ], o = [ t = w ? e.compactDatasetLabel || e.label : "Average Usage" ], i = [ a, o ], s = function(e) {
var t = "" + e.start;
return r[t] || (r[t] = {
total: 0,
count: 0
}), r[t];
};
return _.each(I[e.descriptor], function(e) {
_.each(e, function(e) {
var t = s(e);
(!k || k < e.end) && (k = e.end), n(e) || (t.total += e.value, t.count = t.count + 1);
});
}), _.each(r, function(t, n) {
var r;
r = t.count ? t.total / t.count : null, a.push(Number(n)), o.push(e.convert ? e.convert(r) : r);
}), o.length > 1 && (e.lastValue = _.last(o) || 0), i;
}
function o(e, a) {
var o = [], i = {
type: "spline"
};
return t.showAverage ? (_.each(e[a.descriptor], function(e, t) {
h(a.descriptor, t, e);
}), i.type = "area-spline", w && a.compactType && (i.type = a.compactType), i.x = "Date", i.columns = r(a), i) : (_.each(e[a.descriptor], function(e, t) {
h(a.descriptor, t, e);
var r = t + "-dates";
_.set(i, [ "xs", t ], r);
var s = [ r ], c = [ t ];
o.push(s), o.push(c), _.each(I[a.descriptor][t], function(e) {
if (s.push(e.start), (!k || k < e.end) && (k = e.end), n(e)) c.push(e.value); else {
var t = a.convert ? a.convert(e.value) : e.value;
c.push(t);
}
});
}), i.columns = _.sortBy(o, function(e) {
return e[0];
}), i);
}
function u(e) {
P || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var r, a = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), S[i] ? (S[i].load(a), t.showAverage ? S[i].legend.hide() : S[i].legend.show()) : ((r = D(n)).data = a, S[i] = c3.generate(r));
}));
}
function d() {
return w ? "-15mn" : "-" + t.options.timeRange.value + "mn";
}
function m() {
return 60 * t.options.timeRange.value * 1e3;
}
function p() {
return w ? "1mn" : Math.floor(m() / C) + "ms";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
};
e.probe.httpGet ? n = "httpGet" : e.probe.exec ? n = "exec" : e.probe.tcpSocket ? n = "tcpSocket" : (n = "httpGet", a("httpGet")), _.set(e, "selected.type", n), e.$watch("selected.type", function(e, t) {
e !== t && a(e, t);
}), e.refreshPorts = function(t) {
if (/^\d+$/.test(t)) {
var n = e.tcpPorts;
(t = parseInt(t, 10)) && !_.some(n, {
containerPort: t
}) && (n = [ {
containerPort: t,
protocol: "TCP"
} ].concat(n)), e.portOptions = _.uniq(n);
}
};
}
<<<<<<< HEAD
=======
}
function v() {
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && N < 2;
}
function h(e, n, r) {
t.noData = !1;
var a = _.initial(r), o = _.get(I, [ e, n ]);
if (o) {
var i = _.takeRight(o.concat(a), C);
_.set(I, [ e, n ], i);
} else _.set(I, [ e, n ], a);
}
function y() {
if (!R && v()) {
j = Date.now();
var e = f();
c.getPodMetrics(e).then(u, g).finally(function() {
t.loaded = !0;
});
}
}
var b, S = {}, C = 30, w = "compact" === t.profile, P = !1;
t.uniqueID = s.uniqueID();
var k, j, I = {}, R = w, E = function(e) {
return e >= 1024;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}), angular.module("openshiftConsole").directive("editCommand", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
args: "=",
type: "@",
placeholder: "@",
description: "=",
isRequired: "="
},
templateUrl: "views/directives/_edit-command.html",
link: function(t) {
t.id = _.uniqueId("edit-command-"), t.input = {};
var n, a, r = e("isMultiline");
t.$watch("args", function() {
a ? a = !1 : _.isEmpty(t.args) || (t.input.args = _.map(t.args, function(e) {
return {
value: e,
multiline: r(e)
};
}), n = !0);
}, !0), t.$watch("input.args", function(e, r) {
n ? n = !1 : e !== r && (a = !0, t.args = _.map(t.input.args, function(e) {
return e.value;
}), t.form.command.$setDirty());
}, !0), t.addArg = function() {
t.nextArg && (t.input.args = t.input.args || [], t.input.args.push({
value: t.nextArg,
multiline: r(t.nextArg)
}), t.nextArg = "");
}, t.removeArg = function(e) {
t.input.args.splice(e, 1), _.isEmpty(t.input.args) && (t.input.args = null);
}, t.clear = function() {
t.input.args = null;
};
}
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("buildPipeline", [ "$filter", "Logger", function(e, t) {
return {
restrict: "E",
scope: {
build: "=",
expandOnlyRunning: "=?",
collapsePending: "=?",
buildConfigNameOnExpanded: "=?"
},
replace: !0,
templateUrl: "views/directives/build-pipeline.html",
link: function(n) {
var a = e("annotation");
n.$watch(function() {
return a(n.build, "jenkinsStatus");
}, function(e) {
if (e) try {
n.jenkinsStatus = JSON.parse(e);
} catch (n) {
t.error("Could not parse Jenkins status as JSON", e);
}
=======
var A = a.$on("metrics.charts.resize", function() {
s.redraw(S);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var r = e("buildConfigForBuild");
n.$watch(function() {
return r(n.build);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, function(e) {
n.buildConfigName = e;
});
}
};
<<<<<<< HEAD
} ]).directive("pipelineStatus", function() {
return {
restrict: "E",
scope: {
status: "="
},
templateUrl: "views/directives/pipeline-status.html"
=======
} ]), angular.module("openshiftConsole").directive("logViewer", [ "$sce", "$timeout", "$window", "$filter", "$q", "AuthService", "APIService", "APIDiscovery", "DataService", "HTMLService", "ModalsService", "logLinks", "BREAKPOINTS", function(e, t, n, r, a, o, i, s, c, l, u, d) {
var m = $(window), p = $('<tr class="log-line"><td class="log-line-number"></td><td class="log-line-text"></td></tr>').get(0), f = function(e, t) {
var n = p.cloneNode(!0);
n.firstChild.setAttribute("data-line-number", e);
var r = ansi_up.escape_for_html(t), a = ansi_up.ansi_to_html(r), o = l.linkify(a, "_blank", !0);
return n.lastChild.innerHTML = o, n;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}), angular.module("openshiftConsole").directive("buildStatus", function() {
return {
restrict: "E",
scope: {
build: "="
},
<<<<<<< HEAD
templateUrl: "views/directives/build-status.html"
};
}), function() {
angular.module("openshiftConsole").component("routeServiceBarChart", {
controller: function() {
var e = this, t = function(t, n) {
return t.name === e.highlightService ? -1 : n.name === e.highlightService ? 1 : n.weight === t.weight ? t.name.localeCompare(n.name) : n.weight - t.weight;
}, n = function(t) {
e.total += t.weight, e.max = Math.max(t.weight, e.max || 0), e.backends.push({
name: t.name,
weight: t.weight
=======
controller: [ "$scope", function(t) {
var l, u, p, g = document.documentElement;
t.logViewerID = _.uniqueId("log-viewer"), t.empty = !0;
var v, h;
"ReplicationController" === t.object.kind ? (v = "deploymentconfigs/log", h = r("annotation")(t.object, "deploymentConfig")) : (v = i.kindToResource(t.object.kind) + "/log", h = t.object.metadata.name);
var y, b = function() {
t.$apply(function() {
var e = l.getBoundingClientRect();
t.fixedHeight ? t.showScrollLinks = e && e.height > t.fixedHeight : t.showScrollLinks = e && (e.top < 0 || e.bottom > g.clientHeight);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
};
e.$onChanges = function() {
if (e.backends = [], e.total = 0, e.route) {
n(e.route.spec.to);
<<<<<<< HEAD
var r = _.get(e, "route.spec.alternateBackends", []);
_.each(r, n), e.backends.sort(t);
}
}, e.getPercentage = function(t) {
var n = e.total || 100, r = t.weight / n * 100;
return _.round(r) + "%";
=======
var a = _.get(e, "route.spec.alternateBackends", []);
_.each(a, n), e.backends.sort(t);
}
}, e.getPercentage = function(t) {
var n = e.total || 100, a = t.weight / n * 100;
return _.round(a) + "%";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, e.barWidth = function(t) {
var n = e.max || 100;
return t.weight / n * 100 + "%";
};
},
controllerAs: "routeServices",
bindings: {
route: "<",
highlightService: "<"
},
templateUrl: "views/directives/route-service-bar-chart.html"
});
}(), function() {
angular.module("openshiftConsole").component("bindService", {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", "$filter", "APIService", "ApplicationsService", "BindingService", "Catalog", "DataService", "ServiceInstancesService", function(e, t, n, r, a, o, i, s) {
var c, l, u, d, m, p, g = this, f = t("statusCondition"), v = t("enableTechPreviewFeature"), h = n.getPreferredVersion("serviceinstances"), y = n.getPreferredVersion("clusterserviceclasses"), b = n.getPreferredVersion("clusterserviceplans"), S = function() {
var e, t;
_.each(g.serviceInstances, function(n) {
var r = "True" === _.get(f(n, "Ready"), "status");
r && (!e || n.metadata.creationTimestamp > e.metadata.creationTimestamp) && (e = n), r || t && !(n.metadata.creationTimestamp > t.metadata.creationTimestamp) || (t = n);
}), g.serviceToBind = e || t;
}, C = function() {
g.serviceClasses && g.serviceInstances && g.servicePlans && (g.serviceInstances = a.filterBindableServiceInstances(g.serviceInstances, g.serviceClasses, g.servicePlans), g.orderedServiceInstances = a.sortServiceInstances(g.serviceInstances, g.serviceClasses), g.serviceToBind || S());
}, w = function() {
var e = {
namespace: _.get(g.target, "metadata.namespace")
};
r.getApplications(e).then(function(e) {
g.applications = e, g.bindType = g.applications.length ? "application" : "secret-only";
});
}, P = function() {
var e = {
namespace: _.get(g.target, "metadata.namespace")
};
<<<<<<< HEAD
i.list(h, e).then(function(e) {
g.serviceInstances = e.by("metadata.name"), C();
}), i.list(y, {}).then(function(e) {
g.serviceClasses = e.by("metadata.name"), C();
}), i.list(b, {}).then(function(e) {
g.servicePlans = e.by("metadata.name"), C();
=======
c.list("deploymentconfigs", a).then(function(a) {
g = _.toArray(a.by("metadata.name")), p();
}), c.list("replicationcontrollers", a).then(function(a) {
i = _.reject(a.by("metadata.name"), b("hasDeploymentConfig")), p();
}), c.list({
group:"apps",
resource:"deployments"
}, a).then(function(a) {
h = _.toArray(a.by("metadata.name")), p();
}), c.list({
group:"extensions",
resource:"replicasets"
}, a).then(function(a) {
j = _.reject(a.by("metadata.name"), b("hasDeployment")), p();
}), c.list({
group:"apps",
resource:"statefulsets"
}, a).then(function(a) {
k = _.toArray(a.by("metadata.name")), p();
>>>>>>> Use `apps` API group for deployments
});
};
c = {
id: "bindForm",
label: "Binding",
view: "views/directives/bind-service/bind-service-form.html",
valid: !1,
allowClickNav: !0,
onShow: function() {
g.nextTitle = l.hidden ? "Bind" : "Next >", g.podPresets && !d && (d = e.$watch("ctrl.selectionForm.$valid", function(e) {
c.valid = e;
}));
}
<<<<<<< HEAD
}, l = {
id: "bindParameters",
label: "Parameters",
view: "views/directives/bind-service/bind-parameters.html",
hidden: !0,
onShow: function() {
g.nextTitle = "Bind", m || (m = e.$watch("ctrl.parametersForm.$valid", function(e) {
l.valid = e;
}));
=======
});
}, k = function() {
return $("#" + t.logViewerID + " .log-view-output");
}, j = function(e) {
var n = k(), r = n.offset().top;
if (!(r < 0)) {
var a = $(".ellipsis-pulser").outerHeight(!0), o = t.fixedHeight ? t.fixedHeight : Math.floor($(window).height() - r - a);
t.chromeless || t.fixedHeight || (o -= 40), e ? n.animate({
"min-height": o + "px"
}, "fast") : n.css("min-height", o + "px"), t.fixedHeight && n.css("max-height", o);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}, u = {
id: "results",
label: "Results",
view: "views/directives/bind-service/results.html",
valid: !0,
onShow: function() {
d && (d(), d = void 0), m && (m(), m = void 0), g.nextTitle = "Close", g.wizardComplete = !0, g.bindService();
}
<<<<<<< HEAD
};
e.$watch("ctrl.serviceToBind", function() {
g.serviceToBind && s.fetchServiceClassForInstance(g.serviceToBind).then(function(e) {
g.serviceClass = e;
var t = s.getServicePlanNameForInstance(g.serviceToBind);
i.get(b, t, {}).then(function(e) {
g.plan = e, g.parameterSchema = _.get(g.plan, "spec.serviceBindingCreateParameterSchema"), g.parameterFormDefinition = _.get(g.plan, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition"), l.hidden = !_.has(g.parameterSchema, "properties"), g.nextTitle = l.hidden ? "Bind" : "Next >", g.hideBack = l.hidden, c.valid = !0;
});
});
}), g.$onInit = function() {
g.serviceSelection = {}, g.projectDisplayName = t("displayName")(g.project), g.podPresets = v("pod_presets"), g.parameterData = {}, g.steps = [ c, l, u ], "ServiceInstance" === g.target.kind ? (g.bindType = "secret-only", g.appToBind = null, g.serviceToBind = g.target, g.podPresets && w()) : (g.bindType = "application", g.appToBind = g.target, P());
}, g.$onChanges = function(e) {
e.project && !e.project.isFirstChange() && (g.projectDisplayName = t("displayName")(g.project));
}, g.$onDestroy = function() {
d && (d(), d = void 0), m && (m(), m = void 0), p && i.unwatch(p);
}, g.bindService = function() {
var e = "ServiceInstance" === g.target.kind ? g.target : g.serviceToBind, t = "application" === g.bindType ? g.appToBind : void 0, n = {
namespace: _.get(e, "metadata.namespace")
}, r = a.getServiceClassForInstance(e, g.serviceClasses);
a.bindService(e, t, r, g.parameterData).then(function(e) {
g.binding = e, g.error = null, p = i.watchObject(a.bindingResource, _.get(g.binding, "metadata.name"), n, function(e) {
g.binding = e;
});
}, function(e) {
g.error = e;
});
}, g.closeWizard = function() {
_.isFunction(g.onClose) && g.onClose();
};
=======
controller: [ "$scope", "$filter", "DataService", "BindingService", function(e, t, n, a) {
var r, o, i, s, c, l, u, d, m, p, f, g = this, h = t("statusCondition"), v = t("enableTechPreviewFeature"), y = function() {
=======
controller: [ "$scope", "$filter", "ApplicationsService", "DataService", "BindingService", function(e, t, n, a, r) {
<<<<<<< HEAD
<<<<<<< HEAD
var o, i, s, c, l, u, d = this, m = t("statusCondition"), p = t("enableTechPreviewFeature"), f = function() {
>>>>>>> Use new ApplicationsService.getApplications utility
=======
var o, i, s, c, l, u, d = this, p = t("statusCondition"), m = t("enableTechPreviewFeature"), f = function() {
>>>>>>> Updates for Service Instance & Bindings
=======
var o, i, s, c, l, u, d = this, m = t("statusCondition"), p = t("enableTechPreviewFeature"), f = function() {
>>>>>>> Support EnvFrom in the Env Editors
=======
controller: [ "$scope", "$filter", "APIService", "ApplicationsService", "BindingService", "DataService", "ServiceInstancesService", function(e, t, n, a, r, o, i) {
<<<<<<< HEAD
var s, c, l, u, d, m, p = this, f = t("statusCondition"), g = t("enableTechPreviewFeature"), h = function() {
>>>>>>> Adopt service catalog API changes
=======
var s, c, l, u, d, m, p = this, f = t("statusCondition"), g = t("enableTechPreviewFeature"), v = function() {
>>>>>>> Add SVG icons
var e, t;
_.each(p.serviceInstances, function(n) {
var a = "True" === _.get(f(n, "Ready"), "status");
a && (!e || n.metadata.creationTimestamp > e.metadata.creationTimestamp) && (e = n), a || t && !(n.metadata.creationTimestamp > t.metadata.creationTimestamp) || (t = n);
}), p.serviceToBind = e || t;
}, h = function() {
p.serviceClasses && p.serviceInstances && (p.serviceInstances = r.filterBindableServiceInstances(p.serviceInstances, p.serviceClasses, p.servicePlans), p.orderedServiceInstances = r.sortServiceInstances(p.serviceInstances, p.serviceClasses), p.serviceToBind || v());
}, y = function() {
var e = {
namespace: _.get(p.target, "metadata.namespace")
};
a.getApplications(e).then(function(e) {
p.applications = e, p.bindType = p.applications.length ? "application" : "secret-only";
});
}, b = function() {
var e = {
namespace: _.get(p.target, "metadata.namespace")
}, t = n.getPreferredVersion("serviceinstances");
o.list(t, e).then(function(e) {
p.serviceInstances = e.by("metadata.name"), h();
});
};
s = {
id: "bindForm",
label: "Binding",
view: "views/directives/bind-service/bind-service-form.html",
valid: !0,
onShow: function() {
p.nextTitle = c.hidden ? "Bind" : "Next >", p.podPresets && !u && (u = e.$watch("ctrl.selectionForm.$valid", function(e) {
s.valid = e;
}));
}
}, c = {
id: "bindParameters",
label: "Parameters",
view: "views/directives/bind-service/bind-parameters.html",
hidden: !0,
onShow: function() {
p.nextTitle = "Bind", d || (d = e.$watch("ctrl.parametersForm.$valid", function(e) {
c.valid = e;
}));
}
}, l = {
id: "results",
label: "Results",
view: "views/directives/bind-service/results.html",
valid: !0,
onShow: function() {
u && (u(), u = void 0), d && (d(), d = void 0), p.nextTitle = "Close", p.wizardComplete = !0, p.bindService();
}
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var y = function() {
if (d.serviceClasses) {
var e = "ServiceInstance" === d.target.kind ? d.target : d.serviceToBind;
e && (d.serviceClass = d.serviceClasses[e.spec.serviceClassName], d.serviceClassName = e.spec.serviceClassName, d.plan = r.getPlanForInstance(e, d.serviceClass), d.parameterSchema = _.get(d.plan, "alphaServiceInstanceCredentialCreateParameterSchema"), i.hidden = !_.has(d.parameterSchema, "properties"), d.nextTitle = i.hidden ? "Bind" : "Next >");
}
};
e.$watch("ctrl.serviceToBind", y), d.$onInit = function() {
<<<<<<< HEAD
d.serviceSelection = {}, d.projectDisplayName = t("displayName")(d.project), d.podPresets = m("pod_presets"), d.parameterData = {}, d.steps = [ o, i, s ], a.list({
=======
d.serviceSelection = {}, d.projectDisplayName = t("displayName")(d.project), d.podPresets = p("pod_presets"), d.parameterData = {}, d.steps = [ o, i, s ], d.hideBack = i.hidden, a.list({
>>>>>>> Support EnvFrom in the Env Editors
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
}, {}).then(function(e) {
d.serviceClasses = e.by("metadata.name"), y(), g();
}), "ServiceInstance" === d.target.kind ? (d.bindType = "secret-only", d.appToBind = null, d.serviceToBind = d.target, d.podPresets && h()) : (d.bindType = "application", d.appToBind = d.target, v());
}, d.$onChanges = function(e) {
e.project && !e.project.isFirstChange() && (d.projectDisplayName = t("displayName")(d.project));
}, d.$onDestroy = function() {
c && (c(), c = void 0), l && (l(), l = void 0), u && a.unwatch(u);
}, d.bindService = function() {
var e = "ServiceInstance" === d.target.kind ? d.target : d.serviceToBind, t = "application" === d.bindType ? d.appToBind : void 0, n = {
=======
var C = function() {
=======
var S = function() {
>>>>>>> Service instance details configuration and edit
=======
var C = function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var S = function() {
>>>>>>> Adding label filter to ste secrets page
if (p.serviceClasses && p.servicePlans) {
var e = "ServiceInstance" === p.target.kind ? p.target : p.serviceToBind;
if (e) {
var t = i.getServiceClassNameForInstance(e);
p.serviceClass = p.serviceClasses[t];
var n = i.getServicePlanNameForInstance(e);
p.plan = p.servicePlans[n], p.parameterSchema = _.get(p.plan, "spec.serviceBindingCreateParameterSchema"), p.parameterFormDefinition = _.get(p.plan, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition"), c.hidden = !_.has(p.parameterSchema, "properties"), p.nextTitle = c.hidden ? "Bind" : "Next >", p.hideBack = c.hidden;
}
}
};
e.$watch("ctrl.serviceToBind", S), p.$onInit = function() {
p.serviceSelection = {}, p.projectDisplayName = t("displayName")(p.project), p.podPresets = g("pod_presets"), p.parameterData = {}, p.steps = [ s, c, l ], p.hideBack = c.hidden;
var e = n.getPreferredVersion("clusterserviceclasses");
o.list(e, {}).then(function(e) {
p.serviceClasses = e.by("metadata.name"), S(), h();
=======
}, R = _.debounce(function() {
j(!0), b(), C();
}, 100);
m.on("resize", R);
var E, T = function() {
S = !0, d.scrollBottom(u);
}, N = document.createDocumentFragment(), D = _.debounce(function() {
l.appendChild(N), N = document.createDocumentFragment(), t.autoScrollActive && T(), t.showScrollLinks || b();
}, 100, {
maxWait: 300
}), A = function(e) {
var t = a.defer();
return E ? (E.onClose(function() {
t.resolve();
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
}, B = function() {
A().then(function() {
t.$evalAsync(function() {
if (t.run) {
angular.extend(t, {
loading: !0,
autoScrollActive: !0,
largeLog: !1,
limitReached: !1,
showScrollLinks: !1,
state: ""
});
var e = angular.extend({
follow: !0,
tailLines: 5e3,
limitBytes: 10485760
}, t.options), n = 0, r = function(e) {
n++, N.appendChild(f(n, e)), D();
};
(E = c.createStream(v, h, t.context, e)).onMessage(function(a, o, i) {
t.$evalAsync(function() {
t.empty = !1, "logs" !== t.state && (t.state = "logs", I());
}), a && (e.limitBytes && i >= e.limitBytes && (t.$evalAsync(function() {
t.limitReached = !0, t.loading = !1;
}), A(!0)), r(a), !t.largeLog && n >= e.tailLines && t.$evalAsync(function() {
t.largeLog = !0;
}));
}), E.onClose(function() {
E = null, t.$evalAsync(function() {
t.loading = !1, t.autoScrollActive = !1, 0 !== n || t.emptyStateMessage || (t.state = "empty", t.emptyStateMessage = "The logs are no longer available or could not be loaded.");
});
}), E.onError(function() {
E = null, t.$evalAsync(function() {
angular.extend(t, {
loading: !1,
autoScrollActive: !1
}), 0 === n ? (t.state = "empty", t.emptyStateMessage = "The logs are no longer available or could not be loaded.") : t.errorWhileRunning = !0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var a = n.getPreferredVersion("clusterserviceplans");
o.list(a, {}).then(function(e) {
p.servicePlans = e.by("metadata.name"), S();
}), "ServiceInstance" === p.target.kind ? (p.bindType = "secret-only", p.appToBind = null, p.serviceToBind = p.target, p.podPresets && y()) : (p.bindType = "application", p.appToBind = p.target, b());
}, p.$onChanges = function(e) {
e.project && !e.project.isFirstChange() && (p.projectDisplayName = t("displayName")(p.project));
}, p.$onDestroy = function() {
u && (u(), u = void 0), d && (d(), d = void 0), m && o.unwatch(m);
}, p.bindService = function() {
var e = "ServiceInstance" === p.target.kind ? p.target : p.serviceToBind, t = "application" === p.bindType ? p.appToBind : void 0, n = {
>>>>>>> Adopt service catalog API changes
namespace: _.get(e, "metadata.namespace")
}, a = r.getServiceClassForInstance(e, p.serviceClasses);
r.bindService(e, t, a, p.parameterData).then(function(e) {
p.binding = e, p.error = null, m = o.watchObject(r.bindingResource, _.get(p.binding, "metadata.name"), n, function(e) {
p.binding = e;
});
}, function(e) {
p.error = e;
});
}, p.closeWizard = function() {
_.isFunction(p.onClose) && p.onClose();
};
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ],
controllerAs: "ctrl",
bindings: {
target: "<",
project: "<",
onClose: "<"
},
templateUrl: "views/directives/bind-service.html"
});
}(), function() {
angular.module("openshiftConsole").component("unbindService", {
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", "$filter", "APIService", "DataService", function(e, t, n, r) {
var a, o, i = this, s = t("enableTechPreviewFeature"), c = t("serviceInstanceDisplayName"), l = n.getPreferredVersion("servicebindings"), u = function() {
var e = i.selectedBinding.metadata.name;
i.unboundApps = i.appsForBinding(e), r.delete(l, e, o, {
propagationPolicy: null
}).then(_.noop, function(e) {
i.error = e;
});
}, d = function() {
var t = _.head(i.steps);
t.valid = !1, a = e.$watch("ctrl.selectedBinding", function(e) {
t.valid = !!e;
});
}, m = function() {
a && (a(), a = void 0);
}, p = function() {
i.nextTitle = "Delete", d();
}, g = function() {
i.nextTitle = "Close", i.wizardComplete = !0, u(), m();
=======
if (s.getLoggingURL(t.context.project).then(function(r) {
var a = _.get(t.context, "project.metadata.name"), i = _.get(t.options, "container");
a && i && h && r && (angular.extend(t, {
kibanaAuthUrl: e.trustAsResourceUrl(URI(r).segment("auth").segment("token").normalizePathname().toString()),
access_token: o.UserStore().getToken()
}), t.$watchGroup([ "context.project.metadata.name", "options.container", "name" ], function() {
angular.extend(t, {
kibanaArchiveUrl: e.trustAsResourceUrl(d.archiveUri({
namespace: t.context.project.metadata.name,
namespaceUid: t.context.project.metadata.uid,
podname: h,
containername: t.options.container,
backlink: URI.encode(n.location.href)
}))
});
}));
}), this.cacheScrollableNode = function(e) {
u = e;
}, this.cacheLogNode = function(e) {
l = e;
}, this.cacheAffixable = function(e) {
p = $(e);
}, this.start = function() {
w(), P();
}, angular.extend(t, {
ready: !0,
loading: !0,
autoScrollActive: !0,
state: !1,
onScrollBottom: function() {
d.scrollBottom(u);
},
onScrollTop: function() {
t.autoScrollActive = !1, d.scrollTop(u), $("#" + t.logViewerID + "-affixedFollow").affix("checkPosition");
},
toggleAutoScroll: function() {
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && T();
},
goChromeless: d.chromelessLink,
restartLogs: B
}), t.$on("$destroy", function() {
A(), m.off("resize", R), m.off("scroll", C), u && $(u).off("scroll", C);
}), "deploymentconfigs/logs" === v && !h) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
t.$watchGroup([ "name", "options.container", "run" ], B);
} ],
require: "logViewer",
link: function(e, n, r, a) {
t(function() {
e.fixedHeight && a.cacheScrollableNode(document.getElementById(e.logViewerID + "-fixed-scrollable")), a.cacheLogNode(document.getElementById(e.logViewerID + "-logContent")), a.cacheAffixable(document.getElementById(e.logViewerID + "-affixedFollow")), a.start();
}, 0);
var o = function() {
var t = $(n).find(".log-line-text").text(), r = _.get(e, "object.metadata.name", "openshift") + ".log", a = new Blob([ t ], {
type: "text/plain;charset=utf-8"
});
saveAs(a, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
i.$onInit = function() {
var e;
e = "ServiceInstance" === i.target.kind ? s("pod_presets") ? "Applications" : "Bindings" : "Services", i.displayName = c(i.target, i.serviceClass), i.steps = [ {
id: "deleteForm",
label: e,
view: "views/directives/bind-service/delete-binding-select-form.html",
onShow: p
}, {
id: "results",
label: "Results",
view: "views/directives/bind-service/delete-binding-result.html",
onShow: g
} ], o = {
namespace: _.get(i.target, "metadata.namespace")
};
}, i.appsForBinding = function(e) {
return _.get(i.applicationsByBinding, e);
}, i.closeWizard = function() {
_.isFunction(i.onClose) && i.onClose();
}, i.$onDestroy = function() {
m();
};
=======
controller: [ "$scope", "$filter", "DataService", function(e, t, n) {
var a, r, o = this, i = t("serviceInstanceDisplayName"), s = function() {
var e = o.selectedBinding.metadata.name;
o.unboundApps = o.appsForBinding(e), n.delete({
group: "servicecatalog.k8s.io",
resource: "serviceinstancecredentials"
}, e, r, {
=======
controller: [ "$scope", "$filter", "APIService", "DataService", function(e, t, n, a) {
var r, o, i = this, s = t("enableTechPreviewFeature"), c = t("serviceInstanceDisplayName"), l = n.getPreferredVersion("servicebindings"), u = function() {
var e = i.selectedBinding.metadata.name;
i.unboundApps = i.appsForBinding(e), a.delete(l, e, o, {
>>>>>>> Adopt service catalog API changes
propagationPolicy: null
}).then(_.noop, function(e) {
i.error = e;
});
<<<<<<< HEAD
}, c = function() {
var t = _.head(o.steps);
t.valid = !1, a = e.$watch("ctrl.selectedBinding", function(e) {
t.valid = !!e;
});
}, l = function() {
a && (a(), a = void 0);
}, u = function() {
o.nextTitle = "Delete", c();
}, d = function() {
<<<<<<< HEAD
o.nextTitle = "Close", o.wizardComplete = !0, s(), l();
=======
o.nextTitle = "Delete", l();
}, m = function() {
o.nextTitle = "Close", o.wizardComplete = !0, c(), u();
>>>>>>> Updates for Service Instance & Bindings
};
o.$onInit = function() {
var e = "ServiceInstance" === o.target.kind ? "Applications" : "Services";
o.displayName = i(o.target), o.steps = [ {
id: "deleteForm",
label: e,
view: "views/directives/bind-service/delete-binding-select-form.html",
onShow: u
=======
}, d = function() {
var t = _.head(i.steps);
t.valid = !1, r = e.$watch("ctrl.selectedBinding", function(e) {
t.valid = !!e;
});
}, m = function() {
r && (r(), r = void 0);
}, p = function() {
i.nextTitle = "Delete", d();
}, f = function() {
i.nextTitle = "Close", i.wizardComplete = !0, u(), m();
};
<<<<<<< HEAD
<<<<<<< HEAD
i.$onInit = function() {
var e;
e = "ServiceInstance" === i.target.kind ? s("pod_presets") ? "Applications" : "Bindings" : "Services", i.displayName = c(i.target, i.serviceClass), i.steps = [ {
id: "deleteForm",
label: e,
view: "views/directives/bind-service/delete-binding-select-form.html",
onShow: p
>>>>>>> Adopt service catalog API changes
}, {
id: "results",
label: "Results",
view: "views/directives/bind-service/delete-binding-result.html",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
onShow: d
=======
onShow: p
>>>>>>> Updates for Service Instance & Bindings
=======
onShow: m
>>>>>>> Support EnvFrom in the Env Editors
} ], r = {
namespace: _.get(o.target, "metadata.namespace")
};
}, o.appsForBinding = function(e) {
return _.get(o.applicationsByBinding, e);
}, o.closeWizard = function() {
_.isFunction(o.onClose) && o.onClose();
}, o.$onDestroy = function() {
l();
=======
onShow: f
} ], o = {
namespace: _.get(i.target, "metadata.namespace")
=======
}), angular.module("openshiftConsole").directive("podMetrics", [ "$filter", "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", "usageValueFilter", function(e, t, n, r, a, o, i, s, c, l, u, d) {
return {
restrict: "E",
scope: {
pod: "=",
includedMetrics: "=?",
stackDonut: "=?",
alerts: "=?"
},
templateUrl: "views/directives/pod-metrics.html",
link: function(m) {
function p(e) {
if (!m.pod) return null;
var t = m.options.selectedContainer;
switch (e) {
case "memory/usage":
var n = T(t);
if (n) return s.bytesToMiB(d(n));
break;

case "cpu/usage_rate":
var r = N(t);
if (r) return d(r);
}
return null;
}
function f(e) {
var t = _.head(e.datasets);
if (t.total) {
var n, a = {
type: "donut",
columns: [ [ "Used", t.used ], [ "Available", Math.max(t.available, 0) ] ],
colors: {
Used: t.available > 0 ? "#0088ce" : "#ec7a08",
Available: "#d1d1d1"
}
>>>>>>> Configurable inactivity timeout in console
};
}, i.appsForBinding = function(e) {
return _.get(i.applicationsByBinding, e);
}, i.closeWizard = function() {
_.isFunction(i.onClose) && i.onClose();
}, i.$onDestroy = function() {
m();
>>>>>>> Adopt service catalog API changes
};
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ],
controllerAs: "ctrl",
bindings: {
target: "<",
bindings: "<",
applicationsByBinding: "<",
<<<<<<< HEAD
<<<<<<< HEAD
onClose: "<",
serviceClass: "<"
=======
onClose: "<"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
onClose: "<",
serviceClass: "<"
>>>>>>> Correct binding name
=======
} ]), angular.module("openshiftConsole").directive("podDonut", [ "$timeout", "isPullingImageFilter", "isTerminatingFilter", "podWarningsFilter", "numContainersReadyFilter", "Logger", "ChartsService", function(e, t, n, r, a, o, i) {
return {
restrict: "E",
scope: {
pods: "=",
desired: "=?",
idled: "=?",
mini: "=?"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
templateUrl: "views/directives/unbind-service.html"
});
<<<<<<< HEAD
}(), function() {
angular.module("openshiftConsole").component("processTemplate", {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$filter", "$q", "$scope", "$uibModal", "APIService", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f) {
function v(e) {
var t = /^helplink\.(.*)\.title$/, n = /^helplink\.(.*)\.url$/, r = {};
for (var a in e.annotations) {
var o, i = a.match(t);
i ? ((o = r[i[1]] || {}).title = e.annotations[a], r[i[1]] = o) : (i = a.match(n)) && ((o = r[i[1]] || {}).url = e.annotations[a], r[i[1]] = o);
=======
var n, a = c.getSparklineData(t), o = e.chartPrefix + "sparkline";
E[o] ? E[o].load(a) : ((n = L(e)).data = a, e.chartDataColors && (n.color = {
pattern: e.chartDataColors
}), r(function() {
A || (E[o] = c3.generate(n));
}));
}
>>>>>>> Configurable inactivity timeout in console
}
return r;
}
<<<<<<< HEAD
function h() {
<<<<<<< HEAD
b.prefillParameters && _.each(b.template.parameters, function(e) {
b.prefillParameters[e.name] && (e.value = b.prefillParameters[e.name]);
}), b.labels = _.map(b.template.labels, function(e, t) {
=======
controller: [ "$filter", "$q", "$scope", "$uibModal", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d) {
function m(e) {
=======
controller: [ "$filter", "$q", "$scope", "$uibModal", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
function p(e) {
>>>>>>> Updated processTemplate to call ProjectServices.create(...)
=======
controller: [ "$filter", "$q", "$scope", "$uibModal", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, p) {
function m(e) {
>>>>>>> Updates for Service Instance & Bindings
=======
controller: [ "$filter", "$q", "$scope", "$uibModal", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
function p(e) {
>>>>>>> Support EnvFrom in the Env Editors
var t = /^helplink\.(.*)\.title$/, n = /^helplink\.(.*)\.url$/, a = {};
for (var r in e.annotations) {
var o, i = r.match(t);
i ? ((o = a[i[1]] || {}).title = e.annotations[r], a[i[1]] = o) : (i = r.match(n)) && ((o = a[i[1]] || {}).url = e.annotations[r], a[i[1]] = o);
=======
}), n = _.size(t);
if (e.mini) e.$evalAsync(function() {
e.total = n;
}); else {
var r;
r = angular.isNumber(e.desired) && e.desired !== n ? "scaling to " + e.desired + "..." : 1 === n ? "pod" : "pods", e.idled ? i.updateDonutCenterText(o[0], "Idle") : i.updateDonutCenterText(o[0], n, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
return a;
=======
return 60 * m.options.timeRange.value * 1e3;
}
function y() {
return Math.floor(h() / D) + "ms";
}
function b(e, t, n) {
var r, a = {
metric: t.id,
type: t.type,
bucketDuration: y()
};
return t.data && t.data.length ? (r = _.last(t.data), a.start = r.end) : a.start = n, m.pod ? _.assign(a, {
namespace: m.pod.metadata.namespace,
pod: m.pod,
containerName: e.containerMetric ? m.options.selectedContainer.name : "pod"
}) : null;
}
function S() {
A || (V = 0, _.each(m.metrics, function(e) {
g(e), f(e);
}));
}
function C(e) {
if (!A) if (V++, m.noData) m.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(V < 2)) {
var t = "metrics-failed-" + m.uniqueID;
m.alerts[t] = {
type: "error",
message: "An error occurred updating metrics for pod " + _.get(m, "pod.metadata.name", "<unknown>") + ".",
links: [ {
href: "",
label: "Retry",
onClick: function() {
delete m.alerts[t], V = 1, k();
}
} ]
};
}
}
function w() {
<<<<<<< HEAD
<<<<<<< HEAD
return !(m.metricsError || U > 1) && (m.pod && _.get(m, "options.selectedContainer"));
>>>>>>> Set Home Page Preference
=======
return !(m.metricsError || V > 1) && (m.pod && _.get(m, "options.selectedContainer"));
>>>>>>> Update directives/processTemplate to use getPreferredVersion
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
function p() {
f.prefillParameters && _.each(f.template.parameters, function(e) {
f.prefillParameters[e.name] && (e.value = f.prefillParameters[e.name]);
<<<<<<< HEAD
}), f.systemLabels = _.map(f.template.labels, function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), f.labels = _.map(f.template.labels, function(e, t) {
>>>>>>> Let users edit app label directly for "add to project"
=======
function g() {
=======
function f() {
<<<<<<< HEAD
>>>>>>> Patternfly vertical navigation and project bar
h.prefillParameters && _.each(h.template.parameters, function(e) {
h.prefillParameters[e.name] && (e.value = h.prefillParameters[e.name]);
}), h.labels = _.map(h.template.labels, function(e, t) {
>>>>>>> Updated processTemplate to call ProjectServices.create(...)
=======
v.prefillParameters && _.each(v.template.parameters, function(e) {
v.prefillParameters[e.name] && (e.value = v.prefillParameters[e.name]);
}), v.labels = _.map(v.template.labels, function(e, t) {
>>>>>>> Add SVG icons
return {
name: t,
value: e
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), N() && b.labels.push({
name: "app",
value: b.template.metadata.name
});
=======
return !(m.metricsError || V > 1) && (m.pod && _.get(m, "options.selectedContainer"));
>>>>>>> Fix potential API mismatch in BuildsService
}
var y, b = this, S = e("displayName"), C = e("humanize");
b.noProjectsCantCreate = !1, b.$onInit = function() {
b.labels = [], b.template = angular.copy(b.template), b.templateDisplayName = S(b.template), b.selectedProject = b.project, n.$watch("$ctrl.selectedProject.metadata.name", function() {
b.projectNameTaken = !1;
}), n.$on("no-projects-cannot-create", function() {
b.noProjectsCantCreate = !0;
}), h();
};
var w, P = function() {
var e = {
started: f.getString(g("Creating")) + " " + b.templateDisplayName + " " + f.getString(g("in project ")) + " " + S(b.selectedProject),
success: f.getString(g("Created")) + " " + b.templateDisplayName + " " + f.getString(g("in project")) + " " + S(b.selectedProject),
failure: f.getString(g("Failed to create")) + " " + b.templateDisplayName + " " + f.getString(g("in project")) + " " + S(b.selectedProject)
}, r = v(b.template);
m.clear(), m.add(e, r, b.selectedProject.metadata.name, function() {
var e = t.defer();
return o.batch(w, y).then(function(t) {
var n = [], r = !1;
t.failure.length > 0 ? (r = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot create " + C(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
=======
}), R() && f.systemLabels.push({
=======
}), R() && f.labels.push({
>>>>>>> Let users edit app label directly for "add to project"
=======
}), P() && h.labels.push({
>>>>>>> Updated processTemplate to call ProjectServices.create(...)
=======
}), R() && h.labels.push({
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
}), R() && v.labels.push({
>>>>>>> Add SVG icons
=======
}), I() && v.labels.push({
>>>>>>> Add search catalog in project context
name: "app",
value: v.template.metadata.name
});
=======
function c(e) {
return a(e) === _.size(e.spec.containers);
}
function l(e) {
if (n(e)) return "Terminating";
var a = r(e);
return _.some(a, {
severity: "error"
}) ? "Error" : _.isEmpty(a) ? t(e) ? "Pulling" : "Running" !== e.status.phase || c(e) ? _.get(e, "status.phase", "Unknown") : "Not Ready" : "Warning";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
var g, v = this, h = e("displayName"), y = e("humanize");
v.noProjectsCantCreate = !1, v.$onInit = function() {
v.labels = [], v.template = angular.copy(v.template), v.templateDisplayName = h(v.template), v.selectedProject = v.project, n.$on("no-projects-cannot-create", function() {
v.noProjectsCantCreate = !0;
}), f();
};
var b, S = function() {
var e = {
started: "Creating " + v.templateDisplayName + " in project " + h(v.selectedProject),
success: "Created " + v.templateDisplayName + " in project " + h(v.selectedProject),
failure: "Failed to create " + v.templateDisplayName + " in project " + h(v.selectedProject)
}, a = p(v.template);
d.clear(), d.add(e, a, v.selectedProject.metadata.name, function() {
var e = t.defer();
return r.batch(b, g).then(function(t) {
var n = [], a = !1;
t.failure.length > 0 ? (a = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
<<<<<<< HEAD
message: "Cannot create " + v(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "Cannot create " + y(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
>>>>>>> Updated processTemplate to call ProjectServices.create(...)
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
<<<<<<< HEAD
<<<<<<< HEAD
message: "Created " + C(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})) : n.push({
type: "success",
message: f.getString(g("All items in template {{templateDisplayName}} were created successfully."), {
templateDisplayName: b.templateDisplayName
})
}), e.resolve({
alerts: n,
hasErrors: r
});
<<<<<<< HEAD
}), e.promise;
}), b.isDialog ? n.$emit("templateInstantiated", {
project: b.selectedProject,
template: b.template
}) : i.toNextSteps(b.templateDisplayName, b.selectedProject.metadata.name);
}, j = function(e) {
r.open({
=======
message: "Created " + v(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
=======
message: "Created " + y(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Updated processTemplate to call ProjectServices.create(...)
});
})) : n.push({
type: "success",
message: "All items in template " + v.templateDisplayName + " were created successfully."
}), e.resolve({
alerts: n,
hasErrors: a
});
}), e.promise;
}), v.isDialog ? n.$emit("templateInstantiated", {
project: v.selectedProject,
template: v.template
}) : o.toNextSteps(v.templateDisplayName, v.selectedProject.metadata.name);
}, C = function(e) {
a.open({
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
<<<<<<< HEAD
title: f.getString(g("Confirm Creation")),
details: f.getString(g("We checked your application for potential problems. Please confirm you still want to create this application.")),
okButtonText: f.getString(g("Create Anyway")),
okButtonClass: "btn-danger",
cancelButtonText: f.getString(g("Cancel"))
=======
}
}
m.includedMetrics = m.includedMetrics || [ "cpu", "memory", "network" ];
var I, R = {}, E = {}, T = n("resources.limits.memory"), N = n("resources.limits.cpu"), D = 30, A = !1;
m.uniqueID = c.uniqueID(), m.metrics = [], _.includes(m.includedMetrics, "memory") && m.metrics.push({
label: "Memory",
units: "MiB",
chartPrefix: "memory-",
convert: s.bytesToMiB,
containerMetric: !0,
datasets: [ {
id: "memory/usage",
label: "Memory",
data: []
} ]
}), _.includes(m.includedMetrics, "cpu") && m.metrics.push({
label: "CPU",
units: "cores",
chartPrefix: "cpu-",
convert: s.millicoresToCores,
usagePrecision: 3,
containerMetric: !0,
datasets: [ {
id: "cpu/usage_rate",
label: "CPU",
data: []
} ]
}), _.includes(m.includedMetrics, "network") && m.metrics.push({
label: "Network",
units: "KiB/s",
chartPrefix: "network-",
chartType: "spline",
convert: s.bytesToKiB,
datasets: [ {
id: "network/tx_rate",
label: "Sent",
data: []
}, {
id: "network/rx_rate",
label: "Received",
data: []
} ]
}), m.loaded = !1, m.noData = !0, m.showComputeUnitsHelp = function() {
u.showComputeUnitsHelp();
}, l.getMetricsURL().then(function(e) {
m.metricsURL = e;
}), m.options = {
rangeOptions: c.getTimeRangeOptions()
}, m.options.timeRange = _.head(m.options.rangeOptions);
var $ = e("upperFirst"), B = function(e) {
var t = "#" + e.chartPrefix + m.uniqueID + "-donut";
return {
bindto: t,
onrendered: function() {
i.updateDonutCenterText(t, e.datasets[0].used, $(e.units) + " Used");
},
donut: {
label: {
show: !1
},
width: 10
},
legend: {
show: !1
},
size: {
height: 175,
widht: 175
}
>>>>>>> Configurable inactivity timeout in console
};
<<<<<<< HEAD
}
}
}).result.then(P);
}, k = {}, I = function() {
s.hideNotification("process-template-error"), _.each(k, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || s.hideNotification(e.id);
=======
}, L = function(e) {
var t = e.chartPrefix + m.uniqueID + "-sparkline", n = c.getDefaultSparklineConfig(t, e.units);
return 1 === e.datasets.length && _.set(n, "legend.show", !1), n;
}, V = 0;
(window.OPENSHIFT_CONSTANTS.DISABLE_CUSTOM_METRICS ? a.when({}) : l.getCustomMetrics(m.pod).then(function(e) {
angular.forEach(e, function(e) {
var t = e.description || e.name, n = e.unit || "", r = "custom/" + e.id.replace(/.*\/custom\//, "");
m.metrics.push({
label: t,
units: n,
chartPrefix: "custom-" + _.uniqueId("custom-metric-"),
chartType: "spline",
datasets: [ {
id: r,
label: t,
type: e.type,
data: []
} ]
>>>>>>> Set Home Page Preference
});
}, R = function(e) {
I(), k = d.getSecurityAlerts(w, b.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
k = k.concat(t), _.filter(k, {
type: "error"
}).length ? (b.disableInputs = !1, _.each(k, function(e) {
e.id = _.uniqueId("process-template-alert-"), s.addNotification(e);
})) : k.length ? (j(k), b.disableInputs = !1) : P();
}, T = function() {
if (_.has(b.selectedProject, "metadata.uid")) return t.when(b.selectedProject);
var n = b.selectedProject.metadata.name, r = b.selectedProject.metadata.annotations["new-display-name"], a = e("description")(b.selectedProject);
return l.create(n, r, a);
}, E = function(e) {
var t = a.objectToResourceGroupVersion(e);
return t.resource = "processedtemplates", t;
};
b.createFromTemplate = function() {
b.disableInputs = !0, T().then(function(e) {
b.selectedProject = e, y = {
namespace: b.selectedProject.metadata.name
}, b.template.labels = p.mapEntries(p.compactEntries(b.labels));
var t = E(b.template);
o.create(t, null, b.template, y).then(function(e) {
c.setTemplateData(e.parameters, b.template.parameters, e.message), w = e.objects, u.getLatestQuotaAlerts(w, y).then(R);
}, function(e) {
b.disableInputs = !1;
var t;
e.data && e.data.message && (t = e.data.message), s.addNotification({
=======
message: "We checked your application for potential problems. Please confirm you still want to create this application.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
<<<<<<< HEAD
}).result.then(C);
}, w = {}, P = function() {
=======
}).result.then(S);
<<<<<<< HEAD
}, w = {}, k = function() {
>>>>>>> Adding label filter to ste secrets page
=======
}, w = {}, P = function() {
>>>>>>> Update pod controller to use getPreferredVersion
i.hideNotification("process-template-error"), _.each(w, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || i.hideNotification(e.id);
});
}, k = function(e) {
P(), w = u.getSecurityAlerts(b, v.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
w = w.concat(t), _.filter(w, {
type: "error"
}).length ? (v.disableInputs = !1, _.each(w, function(e) {
e.id = _.uniqueId("process-template-alert-"), i.addNotification(e);
})) : w.length ? (C(w), v.disableInputs = !1) : S();
}, j = function() {
if (_.has(v.selectedProject, "metadata.uid")) return t.when(v.selectedProject);
var n = v.selectedProject.metadata.name, a = v.selectedProject.metadata.annotations["new-display-name"], r = e("description")(v.selectedProject);
return c.create(n, a, r);
};
v.createFromTemplate = function() {
v.disableInputs = !0, j().then(function(e) {
v.selectedProject = e, g = {
namespace: v.selectedProject.metadata.name
}, v.template.labels = m.mapEntries(m.compactEntries(v.labels)), r.create("processedtemplates", null, v.template, g).then(function(e) {
s.setTemplateData(e.parameters, v.template.parameters, e.message), b = e.objects, l.getLatestQuotaAlerts(b, g).then(k);
}, function(e) {
v.disableInputs = !1;
var t;
e.data && e.data.message && (t = e.data.message), i.addNotification({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
id: "process-template-error",
type: "error",
message: "An error occurred processing the template.",
details: t
});
<<<<<<< HEAD
});
<<<<<<< HEAD
<<<<<<< HEAD
}, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
if (b.disableInputs = !1, "AlreadyExists" === e.data.reason) b.projectNameTaken = !0; else {
var t;
e.data && e.data.message && (t = e.data.message), s.addNotification({
=======
f.disableInputs = !1;
=======
h.disableInputs = !1;
>>>>>>> Updated processTemplate to call ProjectServices.create(...)
=======
v.disableInputs = !1;
>>>>>>> Add SVG icons
var t;
e.data && e.data.message && (t = e.data.message), i.addNotification({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
id: "process-template-error",
type: "error",
message: "An error occurred creating the project.",
details: t
=======
var V = o.$on("metrics.charts.resize", function() {
c.redraw(R), c.redraw(E);
=======
var U = o.$on("metrics.charts.resize", function() {
=======
var V = o.$on("metrics.charts.resize", function() {
>>>>>>> Set Home Page Preference
c.redraw(R), c.redraw(T);
>>>>>>> Configurable inactivity timeout in console
});
m.$on("$destroy", function() {
I && (t.cancel(I), I = null), V && (V(), V = null), angular.forEach(R, function(e) {
e.destroy();
}), R = null, angular.forEach(T, function(e) {
e.destroy();
<<<<<<< HEAD
}), E = null, A = !0;
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
});
<<<<<<< HEAD
}
});
}, b.cancel = function() {
I(), i.toProjectOverview(b.project.metadata.name);
}, n.$on("instantiateTemplate", b.createFromTemplate), n.$on("$destroy", I);
var N = function() {
return !_.get(b.template, "labels.app") && !_.some(b.template.objects, "metadata.labels.app");
=======
});
<<<<<<< HEAD
<<<<<<< HEAD
}, f.cancel = function() {
w(), o.toProjectOverview(f.project.metadata.name);
}, n.$on("instantiateTemplate", f.createFromTemplate), n.$on("$destroy", w);
var R = function() {
return !_.get(f.template, "labels.app") && !_.some(f.template.objects, "metadata.labels.app");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, h.cancel = function() {
k(), o.toProjectOverview(h.project.metadata.name);
}, n.$on("instantiateTemplate", h.createFromTemplate), n.$on("$destroy", k);
var R = function() {
return !_.get(h.template, "labels.app") && !_.some(h.template.objects, "metadata.labels.app");
>>>>>>> Updated processTemplate to call ProjectServices.create(...)
=======
}, v.cancel = function() {
P(), o.toProjectOverview(v.project.metadata.name);
}, n.$on("instantiateTemplate", v.createFromTemplate), n.$on("$destroy", P);
var I = function() {
return !_.get(v.template, "labels.app") && !_.some(v.template.objects, "metadata.labels.app");
>>>>>>> Add SVG icons
=======
}), T = null, A = !0;
});
}
>>>>>>> Configurable inactivity timeout in console
};
<<<<<<< HEAD
} ],
controllerAs: "$ctrl",
bindings: {
template: "<",
project: "<",
<<<<<<< HEAD
<<<<<<< HEAD
onProjectSelected: "<",
availableProjects: "<",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
onProjectSelected: "<",
availableProjects: "<",
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
prefillParameters: "<",
isDialog: "<"
=======
} ]), angular.module("openshiftConsole").directive("routeServicePie", function() {
return {
restrict: "E",
scope: {
route: "="
},
template: '<div ng-show="totalWeight" ng-attr-id="{{chartId}}"></div>',
link: function(e) {
var t, n, r = window.matchMedia("(max-width: 400px)").matches;
e.chartId = _.uniqueId("route-service-chart-"), n = {
bindto: "#" + e.chartId,
color: {
pattern: [ $.pfPaletteColors.blue, $.pfPaletteColors.orange, $.pfPaletteColors.green, $.pfPaletteColors.red ]
},
legend: {
show: !0,
position: r ? "bottom" : "right"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
templateUrl: "views/directives/process-template.html"
});
}(), function() {
angular.module("openshiftConsole").component("processTemplateDialog", {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", "$filter", "$routeParams", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u) {
function d() {
var e = _.get(w, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
<<<<<<< HEAD
function m() {
var e = _.get(w, "template.metadata.annotations.iconClass", "fa fa-clone");
return P(e);
=======
},
size: {
height: r ? 150 : 115
},
tooltip: {
format: {
name: function(e, t, n) {
return n;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function p() {
w.steps || (w.steps = [ w.selectStep, w.infoStep, w.configStep, w.resultsStep ]);
}
function g() {
C && (C(), C = void 0);
}
function f() {
e.$broadcast("instantiateTemplate");
}
<<<<<<< HEAD
function v(e, t) {
return o.filterForKeywords(t, [ "name", "tags" ], o.generateKeywords(e));
}
function h(e) {
w.filterConfig.appliedFilters = e, y();
}
function y() {
w.filteredItems = w.catalogItems, w.filterConfig.appliedFilters && w.filterConfig.appliedFilters.length > 0 && _.each(w.filterConfig.appliedFilters, function(e) {
w.filteredItems = v(e.value, w.filteredItems);
}), _.includes(w.filteredItems, w.selectedTemplate) || w.templateSelected(), b();
}
function b() {
w.filterConfig.resultsCount = w.filteredItems.length, w.totalCount <= 1 ? $(".filter-pf.filter-fields input").attr("disabled", "") : $(".filter-pf.filter-fields input").removeAttr("disabled");
}
function S() {
w.unfilteredProjects || s.list().then(function(e) {
w.unfilteredProjects = _.toArray(e.by("metadata.name"));
}, function() {
w.unfilteredProjects = [];
}).finally(function() {
k();
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}
var C, w = this, P = t("imageForIconClass"), j = t("annotation");
w.selectStep = {
=======
controller: [ "$scope", "$filter", "$routeParams", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", function(e, t, n, a, r, o, i, s, c) {
function l() {
var e = _.get(b, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
=======
};
var a, o = function(e) {
return [ e.name, e.weight ];
}, i = function(e) {
return _.head(e);
}, s = function(e) {
var t = {};
_.each(e.columns, function(e) {
var n = i(e);
t[n] = !0;
=======
=======
>>>>>>> Fix potential API mismatch in BuildsService
var U = o.$on("metrics.charts.resize", function() {
c.redraw(R), c.redraw(T);
>>>>>>> Update directives/processTemplate to use getPreferredVersion
=======
var O = o.$on("metrics.charts.resize", function() {
<<<<<<< HEAD
<<<<<<< HEAD
c.redraw(R), c.redraw(E);
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
c.redraw(R), c.redraw(T);
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
c.redraw(R), c.redraw(E);
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
});
<<<<<<< HEAD
var n = _.get(a, "columns", []);
e.unload = _.chain(n).reject(function(e) {
var n = i(e);
return _.has(t, [ n ]);
}).map(i).value();
};
e.$watch("route", function() {
var r = {
columns: [],
names: {}
};
e.route && (r.columns.push(o(e.route.spec.to)), r.names[e.route.spec.to.name] = _.truncate(e.route.spec.to.name, {
length: 30
}), e.totalWeight = e.route.spec.to.weight, _.each(e.route.spec.alternateBackends, function(t) {
r.columns.push(o(t)), r.names[t.name] = _.truncate(t.name, {
length: 30
}), e.totalWeight += t.weight;
})), e.totalWeight && (t ? (s(r), t.load(r)) : (n.data.columns = r.columns, t = c3.generate(n)), a = r);
}), e.$on("destroy", function() {
t && (t = t.destroy());
=======
m.$on("$destroy", function() {
I && (t.cancel(I), I = null), O && (O(), O = null), angular.forEach(R, function(e) {
e.destroy();
}), R = null, angular.forEach(E, function(e) {
e.destroy();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), T = null, A = !0;
>>>>>>> Set Home Page Preference
=======
}), E = null, A = !0;
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
}), T = null, A = !0;
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
}), E = null, A = !0;
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
});
}
};
}), angular.module("openshiftConsole").directive("deploymentDonut", [ "$filter", "$location", "$timeout", "$uibModal", "DeploymentsService", "HPAService", "QuotaService", "LabelFilter", "Navigate", "NotificationsService", "hashSizeFilter", "hasDeploymentConfigFilter", function(e, t, n, r, a, o, i, s, c, l, u, d) {
return {
restrict: "E",
scope: {
rc: "=",
deploymentConfig: "=",
deployment: "=",
scalable: "=",
hpa: "=?",
limitRanges: "=",
quotas: "=",
clusterQuotas: "=",
project: "=",
pods: "="
},
templateUrl: "views/directives/deployment-donut.html",
controller: [ "$scope", "$filter", "$q", function(e, t, n) {
var s = !1, u = t("humanizeKind");
e.$watch("rc.spec.replicas", function() {
s || (e.desiredReplicas = null);
});
var m = function() {
o.getHPAWarnings(e.rc, e.hpa, e.limitRanges, e.project).then(function(t) {
e.hpaWarnings = _.map(t, function(e) {
return _.escape(e.message);
}).join("<br>");
});
};
e.$watchGroup([ "limitRanges", "hpa", "project" ], m), e.$watch("rc.spec.template.spec.containers", m, !0);
e.$watchGroup([ "rc.spec.replicas", "rc.status.replicas", "quotas", "clusterQuotas" ], function() {
if (_.get(e.rc, "spec.replicas", 1) > _.get(e.rc, "status.replicas", 0)) {
var t = i.filterQuotasForResource(e.rc, e.quotas), n = i.filterQuotasForResource(e.rc, e.clusterQuotas), r = function(t) {
return !_.isEmpty(i.getResourceLimitAlerts(e.rc, t));
};
e.showQuotaWarning = _.some(t, r) || _.some(n, r);
} else e.showQuotaWarning = !1;
});
var p = function() {
return e.deploymentConfig || e.deployment || e.rc;
}, f = function() {
if (s = !1, angular.isNumber(e.desiredReplicas)) {
var r = p();
return a.scale(r, e.desiredReplicas).then(_.noop, function(e) {
var a = u(r.kind);
return l.addNotification({
id: "deployment-scale-error",
type: "error",
message: "An error occurred scaling " + a + " " + r.metadata.name + ".",
details: t("getErrorDetails")(e)
}), n.reject(e);
});
}
<<<<<<< HEAD
}, g = _.debounce(f, 650);
e.viewPodsForDeployment = function(t) {
_.isEmpty(e.pods) || c.toPodsForDeployment(t, e.pods);
}, e.scaleUp = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), e.desiredReplicas++, g(), s = !0);
}, e.scaleDown = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), 0 !== e.desiredReplicas && (1 !== e.desiredReplicas ? (e.desiredReplicas--, g()) : r.open({
animation: !0,
templateUrl: "views/modals/confirmScale.html",
controller: "ConfirmScaleController",
resolve: {
resource: function() {
return e.rc;
},
type: function() {
return d(e.rc) ? "deployment" : "replication controller";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function u() {
var e = _.get(b, "template.metadata.annotations.iconClass", "fa fa-clone");
return S(e);
=======
function u(e) {
P || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var r, a = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), S[i] ? (S[i].load(a), t.showAverage ? S[i].legend.hide() : S[i].legend.show()) : ((r = D(n)).data = a, S[i] = c3.generate(r));
}));
>>>>>>> Configurable inactivity timeout in console
}
function d() {
b.steps || (b.steps = [ b.selectStep, b.infoStep, b.configStep, b.resultsStep ]);
}
function m() {
y && (y(), y = void 0);
}
function p() {
e.$broadcast("instantiateTemplate");
}
function f(e, t) {
return o.filterForKeywords(t, [ "name", "tags" ], o.generateKeywords(e));
}
function g(e) {
b.filterConfig.appliedFilters = e, v();
}
function v() {
b.filteredItems = b.catalogItems, b.filterConfig.appliedFilters && b.filterConfig.appliedFilters.length > 0 && _.each(b.filterConfig.appliedFilters, function(e) {
b.filteredItems = f(e.value, b.filteredItems);
}), b.filterConfig.resultsCount = b.filteredItems.length, _.includes(b.filteredItems, b.selectedTemplate) || b.templateSelected();
}
function h() {
b.unfilteredProjects || s.list().then(function(e) {
b.unfilteredProjects = _.toArray(e.by("metadata.name"));
}, function() {
b.unfilteredProjects = [];
}).finally(function() {
S();
});
}
<<<<<<< HEAD
<<<<<<< HEAD
var y, b = this, C = t("imageForIconClass");
=======
var y, b = this, S = t("imageForIconClass"), C = t("annotation");
>>>>>>> Service instance details configuration and edit
=======
var y, b = this, C = t("imageForIconClass"), S = t("annotation");
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
b.selectStep = {
>>>>>>> Add SVG icons
id: "projectTemplates",
label: u.getString(l("Selection")),
view: "views/directives/process-template-dialog/process-template-select.html",
<<<<<<< HEAD
hidden: !0 !== w.useProjectTemplate,
=======
hidden: !0 !== b.useProjectTemplate,
>>>>>>> Add SVG icons
allowed: !0,
valid: !1,
allowClickNav: !0,
onShow: function() {
<<<<<<< HEAD
w.infoStep.selected = !1, w.selectStep.selected = !0, w.configStep.selected = !1, w.resultsStep.selected = !1, w.nextTitle = u.getString(l("Next")) + " >", g(), S();
}
}, w.infoStep = {
=======
b.infoStep.selected = !1, b.selectStep.selected = !0, b.configStep.selected = !1, b.resultsStep.selected = !1, b.nextTitle = "Next >", m(), h();
}
}, b.infoStep = {
>>>>>>> Add SVG icons
id: "info",
label: u.getString(l("Information")),
view: "views/directives/process-template-dialog/process-template-info.html",
allowed: !0,
valid: !0,
allowClickNav: !0,
onShow: function() {
<<<<<<< HEAD
w.infoStep.selected = !0, w.selectStep.selected = !1, w.configStep.selected = !1, w.resultsStep.selected = !1, w.nextTitle = u.getString(l("Next")) + " >", g();
}
}, w.configStep = {
=======
b.infoStep.selected = !0, b.selectStep.selected = !1, b.configStep.selected = !1, b.resultsStep.selected = !1, b.nextTitle = "Next >", m();
}
}, b.configStep = {
>>>>>>> Add SVG icons
id: "configuration",
label: u.getString(l("Configuration")),
view: "views/directives/process-template-dialog/process-template-config.html",
valid: !1,
allowed: !0,
allowClickNav: !0,
onShow: function() {
<<<<<<< HEAD
w.infoStep.selected = !1, w.selectStep.selected = !1, w.configStep.selected = !0, w.resultsStep.selected = !1, w.nextTitle = u.getString(l("Create")), w.resultsStep.allowed = w.configStep.valid, C = e.$watch("$ctrl.form.$valid", function(e) {
w.configStep.valid = e && !w.noProjectsCantCreate && w.selectedProject, w.resultsStep.allowed = e;
});
<<<<<<< HEAD
}
<<<<<<< HEAD
}, w.resultsStep = {
id: "results",
label: u.getString(l("Results")),
=======
controller: [ "$scope", "DataService", function(e, t) {
function n() {
var e = _.get(s, "template.metadata.annotations.iconClass", "fa fa-clone");
=======
controller: [ "$scope", "$filter", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", function(e, t, n, a, r, o, i, s) {
function c() {
var e = _.get(y, "template.metadata.annotations.iconClass", "fa fa-clone");
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
=======
};
} ]
};
} ]), angular.module("openshiftConsole").directive("quotaUsageChart", [ "$filter", "ChartsService", function(e, t) {
return {
restrict: "E",
scope: {
used: "=",
crossProjectUsed: "=?",
total: "=",
type: "@",
height: "=?",
width: "=?"
},
replace: !0,
templateUrl: "views/_quota-usage-chart.html",
link: function(n, r) {
var a = e("usageValue"), o = e("usageWithUnits"), i = e("amountAndUnit");
n.height = n.height || 200, n.width = n.width || 175;
var s = function(e) {
return e ? (100 * Number(e)).toFixed(1) + "%" : "0%";
};
n.chartID = _.uniqueId("quota-usage-chart-");
var c, l = {
type: "donut",
bindto: "#" + n.chartID,
donut: {
label: {
show: !1
=======
var b, S = {}, C = 30, w = "compact" === t.profile, P = !1;
t.uniqueID = s.uniqueID();
var j, k, I = {}, R = w, E = function(e) {
return e >= 1024;
};
t.metrics = [ {
label: "Memory",
units: "MiB",
convert: i.bytesToMiB,
formatUsage: function(e) {
return E(e) && (e /= 1024), s.formatUsage(e);
},
usageUnits: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return T(e) ? "GiB" : "MiB";
>>>>>>> Configurable inactivity timeout in console
=======
return E(e) ? "GiB" : "MiB";
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
return T(e) ? "GiB" : "MiB";
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
return E(e) ? "GiB" : "MiB";
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
},
width: 10
},
size: {
height: n.height,
width: n.width
},
legend: {
show: !0,
position: n.legendPosition || "bottom",
item: {
onclick: _.noop
}
},
<<<<<<< HEAD
onrendered: function() {
_.spread(function(e, n) {
t.updateDonutCenterText(r[0], e, n);
})(i(n.total, n.type, !0));
},
tooltip: {
position: function() {
return {
top: 0,
left: 0
=======
descriptor: "network/rx_rate",
type: "pod",
compactCombineWith: "network/tx_rate",
compactDatasetLabel: "Received",
compactType: "spline",
chartID: "network-rx-" + t.uniqueID
} ];
var T = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
c.getMetricsURL().then(function(e) {
t.metricsURL = e;
}), t.options = {
rangeOptions: s.getTimeRangeOptions()
}, t.options.timeRange = _.head(t.options.rangeOptions), t.options.selectedContainer = _.head(t.containers);
var D = function(e) {
var n = s.getDefaultSparklineConfig(e.chartID, e.units, w);
return _.set(n, "legend.show", !w && !t.showAverage), n;
>>>>>>> Configurable inactivity timeout in console
};
},
contents: function(e, t, r, i) {
var c = $('<table class="c3-tooltip"></table>').css({
width: n.width + "px"
}), l = $("<tr/>").appendTo(c), u = $('<td class="name nowrap"></td>').appendTo(l);
$("<span/>").css({
"background-color": i(e[0].id)
}).appendTo(u), $("<span/>").text(e[0].name).appendTo(u);
var d;
d = n.total ? s(e[0].value / a(n.total)) + " of " + o(n.total, n.type) : o(n.used, n.type);
var m = $("<tr/>").appendTo(c);
return $('<td class="value" style="text-align: left;"></td>').text(d).appendTo(m), c.get(0).outerHTML;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function l() {
<<<<<<< HEAD
y.steps || (y.steps = [ y.selectStep, y.configStep, y.resultsStep ]);
=======
v.steps || (v.steps = [ v.selectStep, v.infoStep, v.configStep, v.resultsStep ]);
>>>>>>> Changing overlay layout to a single column
}
<<<<<<< HEAD
function u() {
v && (v(), v = void 0);
=======
controller: [ "$scope", "$filter", "$routeParams", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", function(e, t, n, a, r, o, i, s, c) {
function l() {
var e = _.get(y, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
function u() {
y.steps || (y.steps = [ y.selectStep, y.infoStep, y.configStep, y.resultsStep ]);
>>>>>>> Making next steps/results messaging consistent
}
function d() {
v && (v(), v = void 0);
=======
};
n.$watchGroup([ "used", "total", "crossProjectUsed" ], _.debounce(function() {
var e = void 0 !== n.crossProjectUsed, t = a(n.used) || 0, r = Math.max((a(n.crossProjectUsed) || 0) - t, 0), o = Math.max(a(n.total) - (r + t), 0), i = {
columns: [ [ "used", t ], [ "available", o ] ],
colors: {
used: o ? "#0088ce" : "#ec7a08",
other: o ? "#7dc3e8" : "#f7bd7f",
available: "#d1d1d1"
},
names: {
used: e ? "Used - This Project" : "Used",
other: "Used - Other Projects",
available: "Available"
}
};
e && i.columns.splice(1, 0, [ "other", r ]), c ? c.load(i) : (_.assign(l.data, i), c = c3.generate(l));
}, 300));
}
};
} ]), angular.module("openshiftConsole").directive("buildTrendsChart", [ "$filter", "$location", "$rootScope", "$timeout", "BuildsService", function(e, t, n, r, a) {
return {
restrict: "E",
scope: {
builds: "="
},
templateUrl: "views/_build-trends-chart.html",
link: function(o) {
var i, s = [ "Complete", "Failed", "Cancelled", "Error" ];
o.minBuilds = _.constant(4);
var c = function(e) {
var t = [], n = moment.duration(e), r = Math.floor(n.asHours()), a = n.minutes(), o = n.seconds();
return r || a || o ? (r && t.push(r + "h"), a && t.push(a + "m"), r || t.push(o + "s"), t.join(" ")) : "";
};
o.chartID = _.uniqueId("build-trends-chart-");
var l, u, d = _.constant(350), m = {
bindto: "#" + o.chartID,
padding: {
right: 30,
left: 80
},
axis: {
x: {
fit: !0,
label: {
text: "Build Number",
position: "outer-right"
},
tick: {
culling: !0,
format: function(e) {
return "#" + i.json[e].buildNumber;
},
width: 30
},
type: "category"
},
y: {
label: {
text: "Duration",
position: "outer-top"
},
min: 0,
padding: {
bottom: 0
},
tick: {
format: c
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function m() {
e.$broadcast("instantiateTemplate");
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
function p(e) {
y.filterConfig.appliedFilters = e, f();
}
function f() {
y.filteredItems = y.catalogItems, y.filterConfig.appliedFilters && y.filterConfig.appliedFilters.length > 0 && _.each(y.filterConfig.appliedFilters, function(e) {
y.filteredItems = m(e.value, y.filteredItems);
}), _.includes(y.filteredItems, y.selectedTemplate) || y.templateSelected(), g();
=======
function m(e) {
=======
function p(e) {
>>>>>>> Support EnvFrom in the Env Editors
v.filterConfig.appliedFilters = e, f();
}
<<<<<<< HEAD
function f() {
v.filteredItems = v.catalogItems, v.filterConfig.appliedFilters && v.filterConfig.appliedFilters.length > 0 && _.each(v.filterConfig.appliedFilters, function(e) {
v.filteredItems = m(e.value, v.filteredItems);
}), v.filterConfig.resultsCount = v.filteredItems.length, _.includes(v.filteredItems, v.selectedTemplate) || v.templateSelected();
>>>>>>> Updates for Service Instance & Bindings
=======
},
size: {
height: 250
},
tooltip: {
format: {
title: function(e) {
var t = i.json[e], n = a.getStartTimestsamp(t.build);
return "#" + t.buildNumber + " (" + moment(n).fromNow() + ")";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function g() {
y.filterConfig.resultsCount = y.filteredItems.length, y.totalCount <= 1 ? $(".filter-pf.filter-fields input").attr("disabled", "") : $(".filter-pf.filter-fields input").removeAttr("disabled");
}
function h() {
y.unfilteredProjects || i.list().then(function(e) {
=======
function p(e, t) {
return o.filterForKeywords(t, [ "name", "tags" ], o.generateKeywords(e));
}
<<<<<<< HEAD
function f(e) {
y.filterConfig.appliedFilters = e, g();
}
function g() {
y.filteredItems = y.catalogItems, y.filterConfig.appliedFilters && y.filterConfig.appliedFilters.length > 0 && _.each(y.filterConfig.appliedFilters, function(e) {
y.filteredItems = p(e.value, y.filteredItems);
}), y.filterConfig.resultsCount = y.filteredItems.length, _.includes(y.filteredItems, y.selectedTemplate) || y.templateSelected();
}
function h() {
y.unfilteredProjects || s.list().then(function(e) {
>>>>>>> Making next steps/results messaging consistent
y.unfilteredProjects = _.toArray(e.by("metadata.name"));
}, function() {
y.unfilteredProjects = [];
}).finally(function() {
b();
});
}
<<<<<<< HEAD
var v, y = this;
y.selectStep = {
=======
var y, b = this, S = t("imageForIconClass"), C = t("annotation");
b.selectStep = {
>>>>>>> Adding label filter to ste secrets page
id: "projectTemplates",
label: "Selection",
view: "views/directives/process-template-dialog/process-template-select.html",
hidden: !0 !== y.useProjectTemplate,
allowed: !0,
valid: !1,
onShow: function() {
<<<<<<< HEAD
<<<<<<< HEAD
y.selectStep.selected = !0, y.configStep.selected = !1, y.resultsStep.selected = !1, y.nextTitle = "Next >", u(), h();
=======
v.infoStep.selected = !1, v.selectStep.selected = !0, v.configStep.selected = !1, v.resultsStep.selected = !1, v.nextTitle = "Next >", u(), g();
=======
y.infoStep.selected = !1, y.selectStep.selected = !0, y.configStep.selected = !1, y.resultsStep.selected = !1, y.nextTitle = "Next >", d(), h();
>>>>>>> Making next steps/results messaging consistent
}
}, y.infoStep = {
id: "info",
label: "Information",
view: "views/directives/process-template-dialog/process-template-info.html",
allowed: !0,
valid: !0,
allowClickNav: !0,
onShow: function() {
<<<<<<< HEAD
v.infoStep.selected = !0, v.selectStep.selected = !1, v.configStep.selected = !1, v.resultsStep.selected = !1, v.nextTitle = "Next >", u();
>>>>>>> Changing overlay layout to a single column
=======
y.infoStep.selected = !0, y.selectStep.selected = !1, y.configStep.selected = !1, y.resultsStep.selected = !1, y.nextTitle = "Next >", d();
>>>>>>> Making next steps/results messaging consistent
}
}, y.configStep = {
id: "configuration",
label: "Configuration",
view: "views/directives/process-template-dialog/process-template-config.html",
valid: !1,
allowed: !0,
onShow: function() {
<<<<<<< HEAD
<<<<<<< HEAD
y.selectStep.selected = !1, y.configStep.selected = !0, y.resultsStep.selected = !1, y.nextTitle = "Create", y.resultsStep.allowed = y.configStep.valid, v = e.$watch("$ctrl.form.$valid", function(e) {
y.configStep.valid = e && y.selectedProject, y.resultsStep.allowed = e;
=======
v.infoStep.selected = !1, v.selectStep.selected = !1, v.configStep.selected = !0, v.resultsStep.selected = !1, v.nextTitle = "Create", v.resultsStep.allowed = v.configStep.valid, h = e.$watch("$ctrl.form.$valid", function(e) {
v.configStep.valid = e && v.selectedProject, v.resultsStep.allowed = e;
>>>>>>> Changing overlay layout to a single column
=======
y.infoStep.selected = !1, y.selectStep.selected = !1, y.configStep.selected = !0, y.resultsStep.selected = !1, y.nextTitle = "Create", y.resultsStep.allowed = y.configStep.valid, v = e.$watch("$ctrl.form.$valid", function(e) {
y.configStep.valid = e && y.selectedProject, y.resultsStep.allowed = e;
>>>>>>> Making next steps/results messaging consistent
});
}
}, y.resultsStep = {
=======
b.infoStep.selected = !1, b.selectStep.selected = !1, b.configStep.selected = !0, b.resultsStep.selected = !1, b.nextTitle = "Create", b.resultsStep.allowed = b.configStep.valid, y = e.$watch("$ctrl.form.$valid", function(e) {
b.configStep.valid = e && !b.noProjectsCantCreate && b.selectedProject, b.resultsStep.allowed = e;
});
}
<<<<<<< HEAD
}, b.resultsStep = {
>>>>>>> Add SVG icons
id: "results",
label: "Results",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
view: "views/directives/process-template-dialog/process-template-results.html",
valid: !0,
allowed: !1,
prevEnabled: !1,
<<<<<<< HEAD
allowClickNav: !1,
onShow: function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
w.infoStep.selected = !1, w.selectStep.selected = !1, w.configStep.selected = !1, w.resultsStep.selected = !0, w.nextTitle = u.getString(l("Close")), g(), w.wizardDone = !0;
=======
v.infoStep.selected = !1, v.selectStep.selected = !1, v.configStep.selected = !1, v.resultsStep.selected = !0, v.nextTitle = "Close", u(), v.wizardDone = !0;
>>>>>>> Changing overlay layout to a single column
}
}, w.$onInit = function() {
w.loginBaseUrl = a.openshiftAPIBaseUrl(), w.preSelectedProject = w.selectedProject = w.project, w.useProjectTemplate && (w.project && (w.templateProject = w.project, w.templateProjectChange()), S()), w.noProjectsCantCreate = !1, e.$on("no-projects-cannot-create", function() {
w.noProjectsCantCreate = !0;
}), w.projectEmptyState = {
icon: "pficon pficon-info",
title: u.getString(l("No Project Selected")),
info: u.getString(l("Please select a project from the dropdown to load Templates from that project."))
}, w.templatesEmptyState = {
icon: "pficon pficon-info",
title: u.getString(l("No Templates")),
info: u.getString(l("The selected project has no templates available to import."))
}, w.filterConfig = {
=======
y.infoStep.selected = !1, y.selectStep.selected = !1, y.configStep.selected = !1, y.resultsStep.selected = !0, y.nextTitle = "Close", d(), y.wizardDone = !0;
=======
b.infoStep.selected = !1, b.selectStep.selected = !1, b.configStep.selected = !1, b.resultsStep.selected = !0, b.nextTitle = "Close", m(), b.wizardDone = !0;
>>>>>>> Add SVG icons
}
}, b.$onInit = function() {
<<<<<<< HEAD
<<<<<<< HEAD
b.loginBaseUrl = r.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, h(), b.projectEmptyState = {
icon: "pficon pficon-info",
=======
b.loginBaseUrl = r.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, b.project && (b.templateProject = b.project, b.templateProjectChange()), h(), b.projectEmptyState = {
>>>>>>> Preselect current project in 'Select from Project'
=======
b.loginBaseUrl = r.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, b.project && (b.templateProject = b.project, b.templateProjectChange()), h(), b.noProjectsCantCreate = !1, e.$on("no-projects-cannot-create", function() {
b.noProjectsCantCreate = !0;
}), b.projectEmptyState = {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
title: "No Project Selected",
info: "Please select a project from the dropdown to load Templates from that project."
}, b.templatesEmptyState = {
icon: "pficon pficon-info",
title: "No Templates",
info: "The selected project has no templates available to import."
<<<<<<< HEAD
}, y.filterConfig = {
>>>>>>> Making next steps/results messaging consistent
fields: [ {
id: "keyword",
title: "Keyword",
placeholder: u.getString(l("Filter by Keyword")),
filterType: "text"
} ],
inlineResults: !0,
showTotalCountResults: !0,
itemsLabel: "Item",
itemsLabelPlural: "Items",
resultsCount: 0,
appliedFilters: [],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
onFilterChange: h
}, n.project || (w.showProjectName = !0);
}, w.$onChanges = function(e) {
e.template && w.template && (p(), w.iconClass = d(), w.image = m(), w.docUrl = j(w.template, "template.openshift.io/documentation-url"), w.supportUrl = j(w.template, "template.openshift.io/support-url"), w.vendor = j(w.template, "template.openshift.io/provider-display-name")), e.useProjectTemplate && p();
=======
onFilterChange: p
};
}, v.$onChanges = function(e) {
e.template && v.template && (l(), v.iconClass = c()), e.useProjectTemplate && l();
>>>>>>> Support EnvFrom in the Env Editors
=======
onFilterChange: g
}, n.project || (b.showProjectName = !0);
}, b.$onChanges = function(e) {
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = S(b.template, "openshift.io/documentation-url"), b.supportUrl = S(b.template, "openshift.io/support-url"), b.vendor = S(b.template, "openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
}, e.$on("templateInstantiated", function(e, t) {
w.selectedProject = t.project, w.currentStep = w.resultsStep.label;
}), w.$onDestroy = function() {
g();
}, w.next = function(e) {
return e.stepId === w.configStep.id ? (f(), !1) : e.stepId !== w.resultsStep.id || (w.close(), !1);
}, w.close = function() {
var e = w.onDialogClosed();
_.isFunction(e) && e();
<<<<<<< HEAD
<<<<<<< HEAD
}, w.onProjectSelected = function(t) {
w.selectedProject = t, w.configStep.valid = e.$ctrl.form.$valid && w.selectedProject;
}, w.templateSelected = function(e) {
w.selectedTemplate = e, w.template = _.get(e, "resource"), w.selectStep.valid = !!e, w.iconClass = d(), w.image = m(), w.docUrl = j(w.template, "template.openshift.io/documentation-url"), w.supportUrl = j(w.template, "template.openshift.io/support-url"), w.vendor = j(w.template, "template.openshift.io/provider-display-name");
}, w.templateProjectChange = function() {
w.templateProjectName = _.get(w.templateProject, "metadata.name"), w.catalogItems = {}, w.templateSelected(), r.getProjectCatalogItems(w.templateProjectName, !1, !0).then(_.spread(function(e, t) {
w.catalogItems = e, w.totalCount = w.catalogItems.length, y(), t && i.addNotification({
type: "error",
message: t
});
}));
};
var k = function() {
var e = _.reject(w.unfilteredProjects, "metadata.deletionTimestamp"), n = _.sortBy(e, t("displayName"));
w.searchEnabled = !_.isEmpty(e), w.templateProjects = c.orderByMostRecentlyViewed(n);
=======
onShow: function() {
y.selectStep.selected = !1, y.configStep.selected = !1, y.resultsStep.selected = !0, y.nextTitle = "Close", u(), y.wizardDone = !0;
=======
}, R = _.debounce(function() {
k(!0), b(), C();
}, 100);
m.on("resize", R);
var E, T = function() {
S = !0, d.scrollBottom(u);
}, N = document.createDocumentFragment(), D = _.debounce(function() {
l.appendChild(N), N = document.createDocumentFragment(), t.autoScrollActive && T(), t.showScrollLinks || b();
}, 100, {
maxWait: 300
}), A = function(e) {
var t = a.defer();
return E ? (E.onClose(function() {
t.resolve();
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
}, B = function() {
A().then(function() {
t.$evalAsync(function() {
if (t.run) {
angular.extend(t, {
loading: !0,
autoScrollActive: !0,
largeLog: !1,
limitReached: !1,
showScrollLinks: !1,
state: ""
});
var e = angular.extend({
follow: !0,
tailLines: 5e3,
limitBytes: 10485760
}, t.options), n = 0, r = function(e) {
n++, N.appendChild(f(n, e)), D();
};
(E = c.createStream(v, h, t.context, e)).onMessage(function(a, o, i) {
t.$evalAsync(function() {
t.empty = !1, "logs" !== t.state && (t.state = "logs", I());
}), a && (e.limitBytes && i >= e.limitBytes && (t.$evalAsync(function() {
t.limitReached = !0, t.loading = !1;
}), A(!0)), r(a), !t.largeLog && n >= e.tailLines && t.$evalAsync(function() {
t.largeLog = !0;
}));
}), E.onClose(function() {
E = null, t.$evalAsync(function() {
t.loading = !1, t.autoScrollActive = !1, 0 !== n || t.emptyStateMessage || (t.state = "empty", t.emptyStateMessage = "The logs are no longer available or could not be loaded.");
});
}), E.onError(function() {
E = null, t.$evalAsync(function() {
angular.extend(t, {
loading: !1,
autoScrollActive: !1
}), 0 === n ? (t.state = "empty", t.emptyStateMessage = "The logs are no longer available or could not be loaded.") : t.errorWhileRunning = !0;
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}), T.start();
>>>>>>> Configurable inactivity timeout in console
}
<<<<<<< HEAD
}, y.$onInit = function() {
y.loginBaseUrl = a.openshiftAPIBaseUrl(), y.preSelectedProject = y.selectedProject = y.project, h(), y.projectEmptyState = {
icon: "pficon pficon-info",
=======
}, b.$onInit = function() {
b.loginBaseUrl = r.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, b.useProjectTemplate && (b.project && (b.templateProject = b.project, b.templateProjectChange()), h()), b.noProjectsCantCreate = !1, e.$on("no-projects-cannot-create", function() {
b.noProjectsCantCreate = !0;
}), b.noProjectsEmptyState = {
title: "No Available Projects",
info: "There are no projects available from which to load templates."
}, b.projectEmptyState = {
>>>>>>> Fix for adding non-builder templates to a project
title: "No Project Selected",
info: "Please select a project from the dropdown to load Templates from that project."
}, y.templatesEmptyState = {
icon: "pficon pficon-info",
title: "No Templates",
info: "The selected project has no templates available to import."
}, y.filterConfig = {
=======
}, b.filterConfig = {
>>>>>>> Add SVG icons
fields: [ {
id: "keyword",
title: "Keyword",
placeholder: "Filter by Keyword",
filterType: "text"
=======
}), E.start();
=======
}), T.start();
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
}), E.start();
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
}
});
});
};
if (s.getLoggingURL(t.context.project).then(function(a) {
var i = _.get(t.context, "project.metadata.name"), s = _.get(t.options, "container");
i && s && h && a && (angular.extend(t, {
kibanaAuthUrl: e.trustAsResourceUrl(URI(a).segment("auth").segment("token").normalizePathname().toString()),
access_token: o.UserStore().getToken()
}), t.$watchGroup([ "context.project.metadata.name", "options.container", "name" ], function() {
angular.extend(t, {
kibanaArchiveUrl: e.trustAsResourceUrl(d.archiveUri({
namespace: t.context.project.metadata.name,
namespaceUid: t.context.project.metadata.uid,
podname: h,
containername: t.options.container,
backlink: URI.encode(n.location.href)
}, r("annotation")(t.context.project, "loggingDataPrefix")))
});
}));
}), this.cacheScrollableNode = function(e) {
u = e;
}, this.cacheLogNode = function(e) {
l = e;
}, this.cacheAffixable = function(e) {
p = $(e);
}, this.start = function() {
w(), P();
}, angular.extend(t, {
ready: !0,
loading: !0,
autoScrollActive: !0,
state: !1,
onScrollBottom: function() {
d.scrollBottom(u);
},
onScrollTop: function() {
t.autoScrollActive = !1, d.scrollTop(u), $("#" + t.logViewerID + "-affixedFollow").affix("checkPosition");
},
toggleAutoScroll: function() {
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && T();
},
goChromeless: d.chromelessLink,
restartLogs: B
}), t.$on("$destroy", function() {
A(), m.off("resize", R), m.off("scroll", C), u && $(u).off("scroll", C);
}), "deploymentconfigs/logs" === v && !h) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
t.$watchGroup([ "name", "options.container", "run" ], B);
>>>>>>> Use new clusterResourceOverridesEnabled flag
} ],
inlineResults: !0,
showTotalCountResults: !0,
itemsLabel: "Item",
itemsLabelPlural: "Items",
resultsCount: 0,
appliedFilters: [],
<<<<<<< HEAD
onFilterChange: m
};
}, y.$onChanges = function(e) {
e.template && y.template && (l(), y.iconClass = c()), e.useProjectTemplate && l();
}, e.$on("templateInstantiated", function(e, t) {
y.selectedProject = t.project, y.currentStep = y.resultsStep.label;
}), y.$onDestroy = function() {
u();
}, y.next = function(e) {
return e.stepId === y.configStep.id ? (d(), !1) : e.stepId !== y.resultsStep.id || (y.close(), !1);
}, y.close = function() {
var e = y.onDialogClosed();
_.isFunction(e) && e();
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, y.onProjectSelected = function(t) {
y.selectedProject = t, y.configStep.valid = e.$ctrl.form.$valid && y.selectedProject;
}, y.templateSelected = function(e) {
y.selectedTemplate = e, y.template = _.get(e, "resource"), y.selectStep.valid = !!e;
}, y.templateProjectChange = function() {
y.templateProjectName = _.get(y.templateProject, "metadata.name"), y.catalogItems = {}, y.templateSelected(), n.getProjectCatalogItems(y.templateProjectName, !1, !0).then(_.spread(function(e, t) {
y.catalogItems = e, y.totalCount = y.catalogItems.length, f(), t && o.addNotification({
=======
}, v.onProjectSelected = function(t) {
v.selectedProject = t, v.configStep.valid = e.$ctrl.form.$valid && v.selectedProject;
}, v.templateSelected = function(e) {
v.selectedTemplate = e, v.template = _.get(e, "resource"), v.selectStep.valid = !!e;
=======
}, v.onProjectSelected = function(t) {
v.selectedProject = t, v.configStep.valid = e.$ctrl.form.$valid && v.selectedProject;
}, v.templateSelected = function(e) {
v.selectedTemplate = e, v.template = _.get(e, "resource"), v.selectStep.valid = !!e, v.iconClass = c();
>>>>>>> Changing overlay layout to a single column
}, v.templateProjectChange = function() {
v.templateProjectName = _.get(v.templateProject, "metadata.name"), v.catalogItems = {}, v.templateSelected(), n.getProjectCatalogItems(v.templateProjectName, !1, !0).then(_.spread(function(e, t) {
<<<<<<< HEAD
v.catalogItems = e, v.totalCount = v.catalogItems.length, m(), t && o.addNotification({
>>>>>>> Updates for Service Instance & Bindings
=======
v.catalogItems = e, v.totalCount = v.catalogItems.length, p(), t && o.addNotification({
>>>>>>> Support EnvFrom in the Env Editors
=======
onFilterChange: f
}, n.project || (y.showProjectName = !0);
}, y.$onChanges = function(e) {
e.template && y.template && (u(), y.iconClass = l()), e.useProjectTemplate && u();
=======
onFilterChange: g
}, n.project || (b.showProjectName = !0);
}, b.$onChanges = function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e.template && b.template && (d(), b.iconClass = l(), b.image = u()), e.useProjectTemplate && d();
>>>>>>> Add SVG icons
=======
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = S(b.template, "template.openshift.io/documentation-url"), b.supportUrl = S(b.template, "template.openshift.io/support-url"), b.vendor = S(b.template, "template.openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Adding vendor to info screens, adding docUrl and supportUrl to info screens that lacked it
=======
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "template.openshift.io/documentation-url"), b.supportUrl = C(b.template, "template.openshift.io/support-url"), b.vendor = C(b.template, "template.openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Service instance details configuration and edit
=======
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Adding label filter to ste secrets page
}, e.$on("templateInstantiated", function(e, t) {
b.selectedProject = t.project, b.currentStep = b.resultsStep.label;
}), b.$onDestroy = function() {
m();
}, b.next = function(e) {
return e.stepId === b.configStep.id ? (p(), !1) : e.stepId !== b.resultsStep.id || (b.close(), !1);
}, b.close = function() {
var e = b.onDialogClosed();
_.isFunction(e) && e();
<<<<<<< HEAD
}, y.onProjectSelected = function(t) {
y.selectedProject = t, y.configStep.valid = e.$ctrl.form.$valid && y.selectedProject;
}, y.templateSelected = function(e) {
y.selectedTemplate = e, y.template = _.get(e, "resource"), y.selectStep.valid = !!e, y.iconClass = l();
}, y.templateProjectChange = function() {
y.templateProjectName = _.get(y.templateProject, "metadata.name"), y.catalogItems = {}, y.templateSelected(), a.getProjectCatalogItems(y.templateProjectName, !1, !0).then(_.spread(function(e, t) {
y.catalogItems = e, y.totalCount = y.catalogItems.length, f(), t && i.addNotification({
>>>>>>> Making next steps/results messaging consistent
=======
}, b.onProjectSelected = function(t) {
b.selectedProject = t, b.configStep.valid = e.$ctrl.form.$valid && b.selectedProject;
}, b.templateSelected = function(e) {
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "template.openshift.io/documentation-url"), b.supportUrl = C(b.template, "template.openshift.io/support-url"), b.vendor = C(b.template, "template.openshift.io/provider-display-name");
=======
}, b.onProjectSelected = function(t) {
b.selectedProject = t, b.configStep.valid = e.$ctrl.form.$valid && b.selectedProject;
}, b.templateSelected = function(e) {
<<<<<<< HEAD
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = S(b.template, "openshift.io/documentation-url"), b.supportUrl = S(b.template, "openshift.io/support-url"), b.vendor = S(b.template, "openshift.io/provider-display-name");
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name");
>>>>>>> Adding label filter to ste secrets page
}, b.templateProjectChange = function() {
b.templateProjectName = _.get(b.templateProject, "metadata.name"), b.catalogItems = {}, b.templateSelected(), a.getProjectCatalogItems(b.templateProjectName, !1, !0).then(_.spread(function(e, t) {
b.catalogItems = e, b.totalCount = b.catalogItems.length, g(), t && i.addNotification({
>>>>>>> Add SVG icons
type: "error",
message: t
=======
},
onclick: function(r) {
var a = i.json[r.x].build, o = e("navigateResourceURL")(a);
o && n.$apply(function() {
t.path(o);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}));
<<<<<<< HEAD
};
<<<<<<< HEAD
var b = function() {
var e = _.reject(y.unfilteredProjects, "metadata.deletionTimestamp"), n = _.sortBy(e, t("displayName"));
<<<<<<< HEAD
y.searchEnabled = !_.isEmpty(e), y.templateProjects = s.orderByMostRecentlyViewed(n);
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
=======
y.searchEnabled = !_.isEmpty(e), y.templateProjects = c.orderByMostRecentlyViewed(n);
>>>>>>> Making next steps/results messaging consistent
=======
var S = function() {
var e = _.reject(b.unfilteredProjects, "metadata.deletionTimestamp"), n = _.sortBy(e, t("displayName"));
b.searchEnabled = !_.isEmpty(e), b.templateProjects = c.orderByMostRecentlyViewed(n);
>>>>>>> Add SVG icons
};
} ],
controllerAs: "$ctrl",
bindings: {
template: "<",
<<<<<<< HEAD
<<<<<<< HEAD
project: "<",
useProjectTemplate: "<",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
project: "<",
useProjectTemplate: "<",
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
onDialogClosed: "&"
=======
}), this.cacheScrollableNode = function(e) {
u = e;
}, this.cacheLogNode = function(e) {
l = e;
}, this.cacheAffixable = function(e) {
p = $(e);
}, this.start = function() {
w(), P();
}, angular.extend(t, {
ready: !0,
loading: !0,
autoScrollActive: !0,
state: !1,
onScrollBottom: function() {
d.scrollBottom(u);
},
onScrollTop: function() {
t.autoScrollActive = !1, d.scrollTop(u), $("#" + t.logViewerID + "-affixedFollow").affix("checkPosition");
},
toggleAutoScroll: function() {
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && E();
>>>>>>> Configurable inactivity timeout in console
},
templateUrl: "views/directives/process-template-dialog.html"
});
}(), function() {
angular.module("openshiftConsole").component("deployImageDialog", {
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", "$routeParams", "DataService", "gettext", "gettextCatalog", function(e, t, n, r, a) {
var o = this;
o.$onInit = function() {
o.loginBaseUrl = n.openshiftAPIBaseUrl(), o.currentStep = a.getString(r("Image")), t.project || (o.showProjectName = !0), e.$on("no-projects-cannot-create", function() {
o.deployForm.$setValidity("required", !1), o.deployImageNewAppCreated = !1;
});
}, o.deployImage = function() {
e.$broadcast("newAppFromDeployImage");
}, e.$on("deployImageNewAppCreated", function(e, t) {
o.selectedProject = t.project, o.appName = t.appName, o.deployImageNewAppCreated = !0, o.currentStep = a.getString(r("Results"));
}), o.close = function() {
var e = o.onDialogClosed();
return _.isFunction(e) && e(), o.wizardDone = !1, !0;
}, o.stepChanged = function(e) {
"results" === e.stepId ? (o.nextButtonTitle = a.getString(r("Close")), o.wizardDone = !0) : o.nextButtonTitle = a.getString(r("Deploy"));
}, o.nextCallback = function(e) {
return "image" === e.stepId ? (o.deployImage(), !1) : "results" !== e.stepId || (o.close(), !1);
=======
controller: [ "$scope", "DataService", function(e, t) {
var n = this;
n.$onInit = function() {
n.loginBaseUrl = t.openshiftAPIBaseUrl(), n.currentStep = "Image";
}, n.deployImage = function() {
e.$broadcast("newAppFromDeployImage");
}, e.$on("deployImageNewAppCreated", function(e, t) {
n.selectedProject = t.project, n.deployImageNewAppCreated = !0, n.currentStep = "Results";
}), n.close = function() {
var e = n.onDialogClosed();
return _.isFunction(e) && e(), n.wizardDone = !1, !0;
}, e.$on("wizard:stepChanged", function(e, t) {
"results" === t.step.stepId ? (n.nextButtonTitle = "Close", n.wizardDone = !0) : n.nextButtonTitle = "Deploy";
}), n.nextCallback = function(e) {
return "image" === e.stepId ? (n.deployImage(), !1) : ("results" === e.stepId && n.close(), !0);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
controller: [ "$scope", "$routeParams", "DataService", function(e, t, n) {
var a = this;
a.$onInit = function() {
a.loginBaseUrl = n.openshiftAPIBaseUrl(), a.currentStep = "Image", t.project || (a.showProjectName = !0), e.$on("no-projects-cannot-create", function() {
a.deployForm.$setValidity("required", !1), a.deployImageNewAppCreated = !1;
});
}, a.deployImage = function() {
e.$broadcast("newAppFromDeployImage");
}, e.$on("deployImageNewAppCreated", function(e, t) {
a.selectedProject = t.project, a.appName = t.appName, a.deployImageNewAppCreated = !0, a.currentStep = "Results";
}), a.close = function() {
var e = a.onDialogClosed();
return _.isFunction(e) && e(), a.wizardDone = !1, !0;
}, a.stepChanged = function(e) {
"results" === e.stepId ? (a.nextButtonTitle = "Close", a.wizardDone = !0) : a.nextButtonTitle = "Deploy";
}, a.nextCallback = function(e) {
return "image" === e.stepId ? (a.deployImage(), !1) : "results" !== e.stepId || (a.close(), !1);
>>>>>>> Making next steps/results messaging consistent
};
} ],
controllerAs: "$ctrl",
bindings: {
<<<<<<< HEAD
<<<<<<< HEAD
=======
visible: "<",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
project: "<",
context: "<",
onDialogClosed: "&"
},
templateUrl: "views/directives/deploy-image-dialog.html"
});
}(), function() {
angular.module("openshiftConsole").component("fromFileDialog", {
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$scope", "$timeout", "$routeParams", "$filter", "DataService", function(e, t, n, r, a) {
function o() {
var e = _.get(s, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
<<<<<<< HEAD
function i() {
var e = _.get(s, "template.metadata.annotations.iconClass", "fa fa-clone");
return l(e);
}
var s = this, c = r("annotation"), l = r("imageForIconClass");
s.$onInit = function() {
s.alerts = {}, s.loginBaseUrl = a.openshiftAPIBaseUrl(), n.project || (s.showProjectName = !0), e.$on("no-projects-cannot-create", function() {
s.importForm.$setValidity("required", !1);
=======
};
var e = 0, t = 0;
angular.forEach(o.completeBuilds, function(n) {
var r = a.getBuildNumber(n);
if (r) {
var o = a.getDuration(n);
e += o, t++;
var s = {
buildNumber: r,
phase: n.status.phase,
build: n
};
s[n.status.phase] = o, i.json.push(s);
}
}), i.json.sort(function(e, t) {
return e.buildNumber - t.buildNumber;
}), i.json.length > 50 && (i.json = i.json.slice(i.json.length - 50));
var n = {};
angular.forEach(i.json, function(e) {
n[e.phase] = !0;
}), t ? (u = e / t, o.averageDurationText = c(u)) : (u = null, o.averageDurationText = null);
var p = [], f = [];
angular.forEach(s, function(e) {
n[e] ? p.push(e) : f.push(e);
}), i.keys.value = p, i.groups = [ p ], l ? (i.unload = f, i.done = function() {
setTimeout(function() {
l.flush();
}, d() + 25);
}, l.load(i), g()) : (m.data = angular.extend(i, m.data), r(function() {
l = c3.generate(m), g();
}));
}), o.$on("destroy", function() {
l && (l = l.destroy());
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}, s.importFile = function() {
e.$broadcast("importFileFromYAMLOrJSON");
}, s.instantiateTemplate = function() {
e.$broadcast("instantiateTemplate");
}, e.$on("fileImportedFromYAMLOrJSON", function(e, n) {
s.selectedProject = n.project, s.template = n.template, s.iconClass = o(), s.image = i(), s.vendor = c(n.template, "openshift.io/provider-display-name"), s.docUrl = c(s.template, "openshift.io/documentation-url"), s.supportUrl = c(s.template, "openshift.io/support-url"), s.actionLabel = "imported", n.isList ? (s.kind = null, s.name = "YAML / JSON") : n.resource && (s.kind = n.resource.kind, s.name = n.resource.metadata.name), t(function() {
s.currentStep = s.template ? "Template Configuration" : "Results";
}, 0);
}), e.$on("templateInstantiated", function(e, t) {
s.selectedProject = t.project, s.name = r("displayName")(s.template), s.actionLabel = null, s.kind = null, s.currentStep = "Results";
}), s.close = function() {
s.template = null;
var e = s.onDialogClosed();
return _.isFunction(e) && e(), s.wizardDone = !1, !0;
}, s.stepChanged = function(e) {
s.currentStep = e.title, "results" === e.stepId ? (s.nextButtonTitle = "Close", s.wizardDone = !0) : s.nextButtonTitle = "Create";
}, s.currentStep = "YAML / JSON", s.nextCallback = function(e) {
return "file" === e.stepId ? (s.importFile(), !1) : "template" === e.stepId ? (s.instantiateTemplate(), !1) : "results" !== e.stepId || (s.close(), !1);
=======
controller: [ "$scope", "$timeout", "DataService", function(e, t, n) {
function a() {
var e = _.get(r, "template.metadata.annotations.iconClass", "fa fa-clone");
=======
controller: [ "$scope", "$timeout", "$routeParams", "$filter", "DataService", function(e, t, n, a, r) {
function o() {
<<<<<<< HEAD
var e = _.get(i, "template.metadata.annotations.iconClass", "fa fa-clone");
>>>>>>> Making next steps/results messaging consistent
=======
var e = _.get(s, "template.metadata.annotations.iconClass", "fa fa-clone");
>>>>>>> Adding vendor to info screens, adding docUrl and supportUrl to info screens that lacked it
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
<<<<<<< HEAD
function i() {
var e = _.get(s, "template.metadata.annotations.iconClass", "fa fa-clone");
return l(e);
}
var s = this, c = a("annotation"), l = a("imageForIconClass");
s.$onInit = function() {
s.alerts = {}, s.loginBaseUrl = r.openshiftAPIBaseUrl(), n.project || (s.showProjectName = !0), e.$on("no-projects-cannot-create", function() {
s.importForm.$setValidity("required", !1);
=======
};
} ]), angular.module("openshiftConsole").directive("computeResource", [ "$filter", function(e) {
return {
restrict: "E",
require: "ngModel",
scope: {
label: "@",
type: "@",
description: "@",
defaultValue: "=",
limitRangeMin: "=",
limitRangeMax: "=",
maxLimitRequestRatio: "=",
request: "="
},
templateUrl: "views/_compute-resource.html",
link: function(t, n, r, a) {
var o = e("usageValue"), i = e("amountAndUnit"), s = e("humanizeUnit");
t.id = _.uniqueId("compute-resource-"), t.input = {};
var c = function(e) {
_.some(t.units, {
value: e
}) || t.units.push({
value: e,
label: s(e, t.type)
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}, s.importFile = function() {
e.$broadcast("importFileFromYAMLOrJSON");
}, s.instantiateTemplate = function() {
e.$broadcast("instantiateTemplate");
}, e.$on("fileImportedFromYAMLOrJSON", function(e, n) {
s.selectedProject = n.project, s.template = n.template, s.iconClass = o(), s.image = i(), s.vendor = c(n.template, "template.openshift.io/provider-display-name"), s.docUrl = c(s.template, "template.openshift.io/documentation-url"), s.supportUrl = c(s.template, "template.openshift.io/support-url"), s.name = "YAML / JSON", t(function() {
s.currentStep = s.template ? "Template Configuration" : "Results";
}, 0);
}), e.$on("templateInstantiated", function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
r.selectedProject = t.project, r.currentStep = "Results";
}), r.close = function() {
r.template = null;
var e = r.onDialogClosed();
return _.isFunction(e) && e(), r.wizardDone = !1, !0;
}, e.$on("wizard:stepChanged", function(e, t) {
"results" === t.step.stepId ? (r.nextButtonTitle = "Close", r.wizardDone = !0) : r.nextButtonTitle = "Create";
}), r.currentStep = "JSON / YAML", r.nextCallback = function(e) {
return "file" === e.stepId ? (r.importFile(), !1) : "template" === e.stepId ? (r.instantiateTemplate(), !1) : "results" !== e.stepId || (r.close(), !1);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i.selectedProject = t.project, i.name = a("displayName")(i.template), i.currentStep = "Results";
}), i.close = function() {
i.template = null;
var e = i.onDialogClosed();
return _.isFunction(e) && e(), i.wizardDone = !1, !0;
}, i.stepChanged = function(e) {
"results" === e.stepId ? (i.nextButtonTitle = "Close", i.wizardDone = !0) : i.nextButtonTitle = "Create";
}, i.currentStep = "YAML / JSON", i.nextCallback = function(e) {
return "file" === e.stepId ? (i.importFile(), !1) : "template" === e.stepId ? (i.instantiateTemplate(), !1) : "results" !== e.stepId || (i.close(), !1);
>>>>>>> Making next steps/results messaging consistent
=======
s.selectedProject = t.project, s.name = a("displayName")(s.template), s.currentStep = "Results";
}), s.close = function() {
s.template = null;
var e = s.onDialogClosed();
return _.isFunction(e) && e(), s.wizardDone = !1, !0;
}, s.stepChanged = function(e) {
"results" === e.stepId ? (s.nextButtonTitle = "Close", s.wizardDone = !0) : s.nextButtonTitle = "Create";
}, s.currentStep = "YAML / JSON", s.nextCallback = function(e) {
return "file" === e.stepId ? (s.importFile(), !1) : "template" === e.stepId ? (s.instantiateTemplate(), !1) : "results" !== e.stepId || (s.close(), !1);
>>>>>>> Adding vendor to info screens, adding docUrl and supportUrl to info screens that lacked it
};
<<<<<<< HEAD
} ],
controllerAs: "$ctrl",
bindings: {
<<<<<<< HEAD
<<<<<<< HEAD
=======
visible: "<",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
project: "<",
context: "<",
onDialogClosed: "&"
=======
e.$watchGroup([ "limitRanges", "hpa", "project" ], m), e.$watch("rc.spec.template.spec.containers", m, !0);
e.$watchGroup([ "rc.spec.replicas", "rc.status.replicas", "quotas", "clusterQuotas" ], function() {
if (_.get(e.rc, "spec.replicas", 1) > _.get(e.rc, "status.replicas", 0)) {
var t = i.filterQuotasForResource(e.rc, e.quotas), n = i.filterQuotasForResource(e.rc, e.clusterQuotas), r = function(t) {
return !_.isEmpty(i.getResourceLimitAlerts(e.rc, t));
};
e.showQuotaWarning = _.some(t, r) || _.some(n, r);
} else e.showQuotaWarning = !1;
});
var p = function() {
return e.deploymentConfig || e.deployment || e.rc;
}, f = function() {
if (s = !1, angular.isNumber(e.desiredReplicas)) {
var r = p();
return a.scale(r, e.desiredReplicas).then(_.noop, function(e) {
var a = u(r.kind);
return l.addNotification({
id: "deployment-scale-error",
type: "error",
message: "An error occurred scaling " + a + " " + r.metadata.name + ".",
details: t("getErrorDetails")(e)
}), n.reject(e);
});
}
}, g = _.debounce(f, 650);
e.viewPodsForDeployment = function(t) {
_.isEmpty(e.pods) || c.toPodsForDeployment(t, e.pods);
}, e.scaleUp = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), e.desiredReplicas++, g(), s = !0);
}, e.scaleDown = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), 0 !== e.desiredReplicas && (1 !== e.desiredReplicas ? (e.desiredReplicas--, g()) : r.open({
templateUrl: "views/modals/confirmScale.html",
controller: "ConfirmScaleController",
resolve: {
resource: function() {
return e.rc;
>>>>>>> Update modals to align with PatternFly standard
},
templateUrl: "views/directives/from-file-dialog.html"
});
}(), function() {
angular.module("openshiftConsole").component("nextSteps", {
controller: [ "ProcessedTemplateService", "Navigate", function(e, t) {
function n(e) {
var t = [];
return angular.forEach(e, function(e) {
"completed" !== e.status && t.push(e);
}), t;
}
<<<<<<< HEAD
function r(e) {
=======
function a(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var t = [];
return angular.forEach(e, function(e) {
e.hasErrors && t.push(e);
}), t;
}
<<<<<<< HEAD
<<<<<<< HEAD
var a = this;
a.showParamsTable = !1, a.actionLabel = a.actionLabel || "created";
var o = e.getTemplateData();
a.parameters = o.params, a.templateMessage = o.message, e.clearTemplateData();
var i = function(e) {
var t = _.get(a, "createdBuildConfig.spec.triggers", []);
=======
var r = this;
r.showParamsTable = !1;
var o = e.getTemplateData();
r.parameters = o.params, r.templateMessage = o.message, e.clearTemplateData();
var i = function(e) {
var t = _.get(r, "createdBuildConfig.spec.triggers", []);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return _.some(t, {
type: e
});
};
<<<<<<< HEAD
a.createdBuildConfigWithGitHubTrigger = function() {
return i("GitHub");
}, a.createdBuildConfigWithConfigChangeTrigger = function() {
return i("ConfigChange");
}, a.allTasksSuccessful = function(e) {
return !n(e).length && !r(e).length;
}, a.erroredTasks = r, a.pendingTasks = n, a.goToOverview = function() {
_.isFunction(a.onContinue) && a.onContinue(), t.toProjectOverview(a.projectName);
}, a.toggleParamsTable = function() {
a.showParamsTable = !a.showParamsTable;
=======
return "";
};
var l = function() {
var e = t.input.amount && o(t.input.amount + t.input.unit), n = t.limitRangeMin && o(t.limitRangeMin), r = t.limitRangeMax && o(t.limitRangeMax), a = !0, i = !0;
e && n && (a = e >= n), e && r && (i = e <= r), t.form.amount.$setValidity("limitRangeMin", a), t.form.amount.$setValidity("limitRangeMax", i);
}, u = function() {
var e, n = t.request && o(t.request), r = !0, a = !0;
t.input.amount ? e = o(t.input.amount + t.input.unit) : t.defaultValue && (e = o(t.defaultValue)), n && e && (r = e >= n, t.maxLimitRequestRatio && (a = e / n <= t.maxLimitRequestRatio)), n && !e && t.maxLimitRequestRatio && (a = !1), t.form.amount.$setValidity("limitLargerThanRequest", r), t.form.amount.$setValidity("limitWithinRatio", a);
};
a.$render = function() {
_.spread(function(e, n) {
e ? (t.input.amount = Number(e), t.input.unit = n, c(n)) : t.input.amount = null;
})(i(a.$viewValue, t.type));
}, t.$watchGroup([ "input.amount", "input.unit" ], function() {
l(), u(), t.input.amount ? a.$setViewValue(t.input.amount + t.input.unit) : a.$setViewValue(void 0);
}), t.$watchGroup([ "limitRangeMin", "limitRangeMax" ], l), t.$watch("request", u);
}
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ],
bindings: {
project: "<",
projectName: "<",
loginBaseUrl: "<",
fromSampleRepo: "<",
createdBuildConfig: "<",
onContinue: "<",
showProjectName: "<",
kind: "<?",
name: "<",
actionLabel: "<?"
},
templateUrl: "views/directives/next-steps.html"
});
}(), angular.module("openshiftConsole").directive("imageNames", [ "$filter", "PodsService", function(e, t) {
return {
restrict: "E",
scope: {
podTemplate: "=",
pods: "="
},
templateUrl: "views/_image-names.html",
link: function(n) {
var r = e("imageSHA");
n.$watchGroup([ "podTemplate", "pods" ], function() {
var e = _.get(n, "podTemplate.spec.containers[0]");
if (e) {
var a = r(e.image);
n.imageIDs = a ? [ a ] : t.getImageIDs(n.pods, e.name);
}
});
}
};
} ]), function() {
angular.module("openshiftConsole").component("serviceBinding", {
controller: [ "APIService", "AuthorizationService", "DataService", "Logger", "SecretsService", "ServiceInstancesService", function(e, t, n, r, a, o) {
var i = this;
i.serviceBindingsVersion = e.getPreferredVersion("servicebindings"), i.secretsVersion = e.getPreferredVersion("secrets"), i.showParameterValues = !1;
var s = {
namespace: i.namespace
}, c = function() {
i.allowParametersReveal = t.canI("secrets", "get", i.namespace), i.parameterData = {}, i.opaqueParameterKeys = [];
var e = i.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(i.bindParameterSchema, "properties")), function(t) {
i.parameterData[t] = e;
});
var o = _.get(i.binding, "status.externalProperties.parameters", {});
_.each(_.keys(o), function(e) {
"<redacted>" === o[e] ? i.parameterData[e] = "*****" : (i.parameterData[e] = o[e], i.opaqueParameterKeys.push(e));
}), i.allowParametersReveal && _.each(_.get(i.binding, "spec.parametersFrom"), function(e) {
n.get(i.secretsVersion, _.get(e, "secretKeyRef.name"), s).then(function(t) {
try {
var n = JSON.parse(a.decodeSecretData(t.data)[e.secretKeyRef.key]);
_.extend(i.parameterData, n);
} catch (t) {
r.warn("Unable to load parameters from secret " + _.get(e, "secretKeyRef.name"), t);
=======
r.createdBuildConfigWithGitHubTrigger = function() {
return i("GitHub");
}, r.createdBuildConfigWithConfigChangeTrigger = function() {
return i("ConfigChange");
}, r.allTasksSuccessful = function(e) {
return !n(e).length && !a(e).length;
}, r.erroredTasks = a, r.pendingTasks = n, r.goToOverview = function() {
_.isFunction(r.onContinue) && r.onContinue(), t.toProjectOverview(r.projectName);
}, r.toggleParamsTable = function() {
r.showParamsTable = !r.showParamsTable;
};
} ],
bindings: {
project: "<",
projectName: "<",
loginBaseUrl: "<",
fromSampleRepo: "<",
createdBuildConfig: "<",
onContinue: "<",
showProjectName: "<",
name: "<"
},
templateUrl: "views/directives/next-steps.html"
});
}(), angular.module("openshiftConsole").directive("imageNames", [ "$filter", "PodsService", function(e, t) {
return {
restrict: "E",
scope: {
podTemplate: "=",
pods: "="
},
templateUrl: "views/_image-names.html",
link: function(n) {
var a = e("imageSHA");
n.$watchGroup([ "podTemplate", "pods" ], function() {
var e = _.get(n, "podTemplate.spec.containers[0]");
if (e) {
var r = a(e.image);
n.imageIDs = r ? [ r ] : t.getImageIDs(n.pods, e.name);
}
});
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var t = _.get(e, "probe.httpGet.port") || _.get(e, "probe.exec.port");
t && !_.some(e.tcpPorts, {
containerPort: t
}) && (e.tcpPorts = [ {
containerPort: t,
protocol: "TCP"
} ].concat(e.tcpPorts)), e.portOptions = e.tcpPorts;
var n, r = function(t, n) {
if (e.probe = e.probe || {}, e.previousProbes[n] = e.probe[n], delete e.probe[n], e.probe[t] = e.previousProbes[t], !e.probe[t]) switch (t) {
case "httpGet":
case "tcpSocket":
var r = _.head(e.tcpPorts);
e.probe[t] = {
port: r ? r.containerPort : ""
};
break;

case "exec":
e.probe = {
exec: {
command: []
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
});
});
}, l = function() {
var t = e.getPreferredVersion("clusterserviceplans");
n.get(t, _.get(i.serviceInstance, "spec.clusterServicePlanRef.name"), s).then(function(e) {
i.bindParameterFormDefinition = angular.copy(_.get(e, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition")), i.bindParameterSchema = _.get(e, "spec.serviceBindingCreateParameterSchema"), c();
});
}, u = function() {
if ("ServiceInstance" !== _.get(i.refApiObject, "kind")) {
var e = _.get(i.binding, "spec.instanceRef.name");
i.serviceInstance = _.get(i.serviceInstances, [ e ]);
} else i.serviceInstance = i.refApiObject;
var t = o.getServiceClassNameForInstance(i.serviceInstance);
i.serviceClass = _.get(i.serviceClasses, [ t ]);
};
this.$onChanges = function(e) {
(e.binding || e.serviceInstances || e.serviceClasses) && (u(), l());
}, i.toggleShowParameterValues = function() {
i.showParameterValues = !i.showParameterValues;
};
<<<<<<< HEAD
<<<<<<< HEAD
} ],
controllerAs: "$ctrl",
bindings: {
namespace: "<",
binding: "<",
refApiObject: "<?",
serviceClasses: "<",
serviceInstances: "<",
isOverview: "<?"
},
templateUrl: "views/directives/_service-binding.html"
});
}(), function() {
angular.module("openshiftConsole").component("buildCounts", {
controller: [ "$scope", "BuildsService", function(e, t) {
var n = this;
n.interestingPhases = [ "Pending", "Running", "Failed", "Error" ];
var r = function(e) {
var t = _.get(e, "status.phase");
return _.includes(n.interestingPhases, t);
};
n.$onChanges = _.debounce(function() {
e.$apply(function() {
var e = _.groupBy(n.builds, "status.phase");
if (n.countByPhase = _.mapValues(e, _.size), n.show = _.some(n.builds, r), n.showRunningStage && 1 === n.countByPhase.Running) {
var a = _.head(e.Running);
n.currentStage = t.getCurrentStage(a);
} else n.currentStage = null;
});
=======
} ]), function() {
angular.module("openshiftConsole").component("serviceBinding", {
controller: [ "APIService", "AuthorizationService", "DataService", "Logger", "SecretsService", "ServiceInstancesService", function(e, t, n, a, r, o) {
var i = this;
i.serviceBindingsVersion = e.getPreferredVersion("servicebindings"), i.secretsVersion = e.getPreferredVersion("secrets"), i.showParameterValues = !1;
var s = {
namespace: i.namespace
}, c = function() {
i.allowParametersReveal = t.canI("secrets", "get", i.namespace), i.parameterData = {}, i.opaqueParameterKeys = [];
var e = i.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(i.bindParameterSchema, "properties")), function(t) {
i.parameterData[t] = e;
});
var o = _.get(i.binding, "status.externalProperties.parameters", {});
_.each(_.keys(o), function(e) {
"<redacted>" === o[e] ? i.parameterData[e] = "*****" : (i.parameterData[e] = o[e], i.opaqueParameterKeys.push(e));
}), i.allowParametersReveal && _.each(_.get(i.binding, "spec.parametersFrom"), function(e) {
n.get(i.secretsVersion, _.get(e, "secretKeyRef.name"), s).then(function(t) {
try {
var n = JSON.parse(r.decodeSecretData(t.data)[e.secretKeyRef.key]);
_.extend(i.parameterData, n);
} catch (t) {
a.warn("Unable to load parameters from secret " + _.get(e, "secretKeyRef.name"), t);
=======
e.probe.httpGet ? n = "httpGet" : e.probe.exec ? n = "exec" : e.probe.tcpSocket ? n = "tcpSocket" : (n = "httpGet", r("httpGet")), _.set(e, "selected.type", n), e.$watch("selected.type", function(e, t) {
e !== t && r(e, t);
}), e.refreshPorts = function(t) {
if (/^\d+$/.test(t)) {
var n = e.tcpPorts;
(t = parseInt(t, 10)) && !_.some(n, {
containerPort: t
}) && (n = [ {
containerPort: t,
protocol: "TCP"
} ].concat(n)), e.portOptions = _.uniq(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
});
});
}, l = function() {
var t = e.getPreferredVersion("clusterserviceplans");
n.get(t, _.get(i.serviceInstance, "spec.clusterServicePlanRef.name"), s).then(function(e) {
i.bindParameterFormDefinition = angular.copy(_.get(e, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition")), i.bindParameterSchema = _.get(e, "spec.serviceBindingCreateParameterSchema"), c();
});
}, u = function() {
if ("ServiceInstance" !== _.get(i.refApiObject, "kind")) {
var e = _.get(i.binding, "spec.instanceRef.name");
i.serviceInstance = _.get(i.serviceInstances, [ e ]);
} else i.serviceInstance = i.refApiObject;
var t = o.getServiceClassNameForInstance(i.serviceInstance);
i.serviceClass = _.get(i.serviceClasses, [ t ]);
};
this.$onChanges = function(e) {
(e.binding || e.serviceInstances || e.serviceClasses) && (u(), l());
}, i.toggleShowParameterValues = function() {
i.showParameterValues = !i.showParameterValues;
};
} ],
controllerAs: "$ctrl",
bindings: {
namespace: "<",
binding: "<",
refApiObject: "<?",
serviceClasses: "<",
serviceInstances: "<",
isOverview: "<?"
},
<<<<<<< HEAD
templateUrl: "views/directives/_service-binding.html"
});
}(), function() {
angular.module("openshiftConsole").component("buildCounts", {
controller: [ "$scope", "BuildsService", function(e, t) {
var n = this;
n.interestingPhases = [ "Pending", "Running", "Failed", "Error" ];
var a = function(e) {
var t = _.get(e, "status.phase");
return _.includes(n.interestingPhases, t);
=======
templateUrl: "views/directives/_edit-command.html",
link: function(t) {
t.id = _.uniqueId("edit-command-"), t.input = {};
var n, r, a = e("isMultiline");
t.$watch("args", function() {
r ? r = !1 : _.isEmpty(t.args) || (t.input.args = _.map(t.args, function(e) {
return {
value: e,
multiline: a(e)
};
}), n = !0);
}, !0), t.$watch("input.args", function(e, a) {
n ? n = !1 : e !== a && (r = !0, t.args = _.map(t.input.args, function(e) {
return e.value;
}), t.form.command.$setDirty());
}, !0), t.addArg = function() {
t.nextArg && (t.input.args = t.input.args || [], t.input.args.push({
value: t.nextArg,
multiline: a(t.nextArg)
}), t.nextArg = "");
}, t.removeArg = function(e) {
t.input.args.splice(e, 1), _.isEmpty(t.input.args) && (t.input.args = null);
}, t.clear = function() {
t.input.args = null;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
n.$onChanges = _.debounce(function() {
e.$apply(function() {
var e = _.groupBy(n.builds, "status.phase");
if (n.countByPhase = _.mapValues(e, _.size), n.show = _.some(n.builds, a), n.showRunningStage && 1 === n.countByPhase.Running) {
var r = _.head(e.Running);
n.currentStage = t.getCurrentStage(r);
} else n.currentStage = null;
});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, 200);
} ],
controllerAs: "buildCounts",
bindings: {
builds: "<",
showRunningStage: "<",
label: "@"
},
templateUrl: "views/overview/_build-counts.html"
});
}(), function() {
angular.module("openshiftConsole").component("metricsSummary", {
<<<<<<< HEAD
controller: [ "$interval", "ConversionService", "MetricsCharts", "MetricsService", function(e, t, n, r) {
var a, o = this, i = !0, s = function(e) {
=======
controller: [ "$interval", "ConversionService", "MetricsCharts", "MetricsService", function(e, t, n, a) {
var r, o = this, i = !0, s = function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return e >= 1024;
};
o.metrics = [ {
label: "Memory",
convert: t.bytesToMiB,
formatUsage: function(e) {
return s(e) && (e /= 1024), n.formatUsage(e);
},
<<<<<<< HEAD
usageUnits: function(e) {
return s(e) ? "GiB" : "MiB";
},
datasets: [ "memory/usage" ],
type: "pod_container"
}, {
label: "CPU",
convert: t.millicoresToCores,
usageUnits: function() {
return "cores";
},
formatUsage: function(e) {
return e < .01 ? "< 0.01" : n.formatUsage(e);
},
datasets: [ "cpu/usage_rate" ],
type: "pod_container"
}, {
label: "Network",
units: "KiB/s",
convert: t.bytesToKiB,
formatUsage: function(e) {
return e < .01 ? "< 0.01" : n.formatUsage(e);
},
usageUnits: function() {
return "KiB/s";
},
datasets: [ "network/tx_rate", "network/rx_rate" ],
type: "pod"
} ];
var c = function() {
var e = _.find(o.pods, "metadata.namespace");
return e ? {
pods: o.pods,
namespace: e.metadata.namespace,
start: "-1mn",
bucketDuration: "1mn"
} : null;
}, l = function(e) {
return null === e.value || void 0 === e.value;
}, u = function(e, t) {
<<<<<<< HEAD
var n = null, r = {};
_.each(e.datasets, function(a) {
_.each(t[a], function(t, a) {
var o = _.last(t);
if (!l(o)) {
r[a] = !0;
=======
var n = null, a = {};
_.each(e.datasets, function(r) {
_.each(t[r], function(t, r) {
var o = _.last(t);
if (!l(o)) {
a[r] = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var i = e.convert(o.value);
n = (n || 0) + i;
}
});
<<<<<<< HEAD
}), null === n ? delete e.currentUsage : e.currentUsage = n / _.size(r);
=======
}), null === n ? delete e.currentUsage : e.currentUsage = n / _.size(a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, d = function(e) {
_.each(o.metrics, function(t) {
u(t, e);
=======
replace: !0,
templateUrl: "views/directives/build-pipeline.html",
link: function(n) {
var r = e("annotation");
n.$watch(function() {
return r(n.build, "jenkinsStatus");
}, function(e) {
if (e) try {
n.jenkinsStatus = JSON.parse(e);
} catch (n) {
t.error("Could not parse Jenkins status as JSON", e);
}
});
var a = e("buildConfigForBuild");
n.$watch(function() {
return a(n.build);
}, function(e) {
n.buildConfigName = e;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}, m = function() {
o.error = !0;
}, p = function() {
if (!o.error && !i) {
var e = c();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
e && (a = Date.now(), r.getPodMetrics(e).then(d, m));
}
};
o.updateInView = function(e) {
i = !e, e && (!a || Date.now() > a + n.getDefaultUpdateInterval()) && p();
};
var g;
o.$onInit = function() {
g = e(p, n.getDefaultUpdateInterval(), !1), p();
}, o.$onDestroy = function() {
g && (e.cancel(g), g = null);
};
<<<<<<< HEAD
=======
e && (r = Date.now(), a.getPodMetrics(e).then(d, m));
=======
e && (r = Date.now(), a.getPodMetrics(e).then(d, p));
>>>>>>> Updates for Service Instance & Bindings
=======
e && (r = Date.now(), a.getPodMetrics(e).then(d, m));
>>>>>>> Support EnvFrom in the Env Editors
}
};
o.updateInView = function(e) {
i = !e, e && (!r || Date.now() > r + n.getDefaultUpdateInterval()) && p();
};
var f;
o.$onInit = function() {
f = e(p, n.getDefaultUpdateInterval(), !1), p();
}, o.$onDestroy = function() {
f && (e.cancel(f), f = null);
};
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ],
controllerAs: "metricsSummary",
bindings: {
pods: "<",
containers: "<"
},
templateUrl: "views/overview/_metrics-summary.html"
=======
e.$onChanges = function() {
if (e.backends = [], e.total = 0, e.route) {
n(e.route.spec.to);
var r = _.get(e, "route.spec.alternateBackends", []);
_.each(r, n), e.backends.sort(t);
}
}, e.getPercentage = function(t) {
var n = e.total || 100, r = t.weight / n * 100;
return _.round(r) + "%";
}, e.barWidth = function(t) {
var n = e.max || 100;
return t.weight / n * 100 + "%";
};
},
controllerAs: "routeServices",
bindings: {
route: "<",
highlightService: "<"
},
<<<<<<< HEAD
templateUrl: "views/directives/route-service-bar-chart.html"
=======
order: null,
type: "bar"
}
}, p = function() {
o.completeBuilds = [];
var t = e("isIncompleteBuild");
angular.forEach(o.builds, function(e) {
t(e) || o.completeBuilds.push(e);
>>>>>>> Add order: null option to build chart config to prevent legend from reordering on update
});
}(), function() {
angular.module("openshiftConsole").component("bindService", {
controller: [ "$scope", "$filter", "APIService", "ApplicationsService", "BindingService", "DataService", "ServiceInstancesService", function(e, t, n, r, a, o, i) {
var s, c, l, u, d, m, p = this, f = t("statusCondition"), g = t("enableTechPreviewFeature"), v = function() {
var e, t;
_.each(p.serviceInstances, function(n) {
var r = "True" === _.get(f(n, "Ready"), "status");
r && (!e || n.metadata.creationTimestamp > e.metadata.creationTimestamp) && (e = n), r || t && !(n.metadata.creationTimestamp > t.metadata.creationTimestamp) || (t = n);
}), p.serviceToBind = e || t;
}, h = function() {
p.serviceClasses && p.serviceInstances && (p.serviceInstances = a.filterBindableServiceInstances(p.serviceInstances, p.serviceClasses, p.servicePlans), p.orderedServiceInstances = a.sortServiceInstances(p.serviceInstances, p.serviceClasses), p.serviceToBind || v());
}, y = function() {
var e = {
namespace: _.get(p.target, "metadata.namespace")
};
r.getApplications(e).then(function(e) {
p.applications = e, p.bindType = p.applications.length ? "application" : "secret-only";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}(), function() {
angular.module("openshiftConsole").component("miniLog", {
controllerAs: "miniLog",
<<<<<<< HEAD
controller: [ "$scope", "$filter", "APIService", "DataService", "HTMLService", function(e, t, n, r, a) {
=======
controller: [ "$scope", "$filter", "APIService", "DataService", "HTMLService", function(e, t, n, a, r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
var o, i, s, c = this, l = t("annotation"), u = c.numLines || 7, d = [];
c.lines = [];
var m = _.throttle(function() {
e.$evalAsync(function() {
c.lines = _.clone(d);
});
<<<<<<< HEAD
}, 200), p = 0, f = function(e) {
=======
};
s = {
id: "bindForm",
label: "Binding",
view: "views/directives/bind-service/bind-service-form.html",
valid: !0,
allowClickNav: !0,
onShow: function() {
p.nextTitle = c.hidden ? "Bind" : "Next >", p.podPresets && !u && (u = e.$watch("ctrl.selectionForm.$valid", function(e) {
s.valid = e;
}));
}
}, c = {
id: "bindParameters",
label: "Parameters",
view: "views/directives/bind-service/bind-parameters.html",
hidden: !0,
allowClickNav: !0,
onShow: function() {
p.nextTitle = "Bind", d || (d = e.$watch("ctrl.parametersForm.$valid", function(e) {
c.valid = e;
}));
}
}, l = {
id: "results",
label: "Results",
view: "views/directives/bind-service/results.html",
valid: !0,
allowClickNav: !1,
onShow: function() {
u && (u(), u = void 0), d && (d(), d = void 0), p.nextTitle = "Close", p.wizardComplete = !0, p.bindService();
}
};
var S = function() {
if (p.serviceClasses && p.servicePlans) {
var e = "ServiceInstance" === p.target.kind ? p.target : p.serviceToBind;
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
if (e) {
<<<<<<< HEAD
var t = ansi_up.escape_for_html(e), n = ansi_up.ansi_to_html(t), r = a.linkify(n, "_blank", !0);
p++, d.push({
markup: r,
=======
var t = ansi_up.escape_for_html(e), n = ansi_up.ansi_to_html(t), a = r.linkify(n, "_blank", !0);
p++, d.push({
markup: a,
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
id: p
}), d.length > u && (d = _.takeRight(d, u)), m();
=======
id: m
}), d.length > u && (d = _.takeRight(d, u)), p();
>>>>>>> Updates for Service Instance & Bindings
=======
id: p
}), d.length > u && (d = _.takeRight(d, u)), m();
>>>>>>> Support EnvFrom in the Env Editors
}
}, g = function() {
s && (s.stop(), s = null);
<<<<<<< HEAD
<<<<<<< HEAD
}, v = function() {
=======
}, h = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, v = function() {
>>>>>>> Add SVG icons
var e = {
follow: !0,
tailLines: u
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
(s = r.createStream(i, o, c.context, e)).start(), s.onMessage(g), s.onClose(function() {
=======
(s = a.createStream(i, o, c.context, e)).start(), s.onMessage(g), s.onClose(function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
(s = a.createStream(i, o, c.context, e)).start(), s.onMessage(f), s.onClose(function() {
>>>>>>> Patternfly vertical navigation and project bar
s = null;
=======
e.$watch("ctrl.serviceToBind", S), p.$onInit = function() {
p.serviceSelection = {}, p.projectDisplayName = t("displayName")(p.project), p.podPresets = g("pod_presets"), p.parameterData = {}, p.steps = [ s, c, l ], p.hideBack = c.hidden;
var e = n.getPreferredVersion("clusterserviceclasses");
o.list(e, {}).then(function(e) {
p.serviceClasses = e.by("metadata.name"), S(), h();
});
var r = n.getPreferredVersion("clusterserviceplans");
o.list(r, {}).then(function(e) {
p.servicePlans = e.by("metadata.name"), S();
}), "ServiceInstance" === p.target.kind ? (p.bindType = "secret-only", p.appToBind = null, p.serviceToBind = p.target, p.podPresets && y()) : (p.bindType = "application", p.appToBind = p.target, b());
}, p.$onChanges = function(e) {
e.project && !e.project.isFirstChange() && (p.projectDisplayName = t("displayName")(p.project));
}, p.$onDestroy = function() {
u && (u(), u = void 0), d && (d(), d = void 0), m && o.unwatch(m);
}, p.bindService = function() {
var e = "ServiceInstance" === p.target.kind ? p.target : p.serviceToBind, t = "application" === p.bindType ? p.appToBind : void 0, n = {
namespace: _.get(e, "metadata.namespace")
}, r = a.getServiceClassForInstance(e, p.serviceClasses);
a.bindService(e, t, r, p.parameterData).then(function(e) {
p.binding = e, p.error = null, m = o.watchObject(a.bindingResource, _.get(p.binding, "metadata.name"), n, function(e) {
p.binding = e;
});
}, function(e) {
p.error = e;
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
});
};
c.$onInit = function() {
<<<<<<< HEAD
<<<<<<< HEAD
"ReplicationController" === c.apiObject.kind ? (i = "deploymentconfigs/log", o = l(c.apiObject, "deploymentConfig")) : (i = n.kindToResource(c.apiObject.kind) + "/log", o = c.apiObject.metadata.name), v();
=======
"ReplicationController" === c.apiObject.kind ? (i = "deploymentconfigs/log", o = l(c.apiObject, "deploymentConfig")) : (i = n.kindToResource(c.apiObject.kind) + "/log", o = c.apiObject.metadata.name), h();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
"ReplicationController" === c.apiObject.kind ? (i = "deploymentconfigs/log", o = l(c.apiObject, "deploymentConfig")) : (i = n.kindToResource(c.apiObject.kind) + "/log", o = c.apiObject.metadata.name), v();
>>>>>>> Add SVG icons
}, c.$onDestroy = function() {
g();
};
} ],
bindings: {
apiObject: "<",
numLines: "<",
context: "<"
},
templateUrl: "views/overview/_mini-log.html"
});
}(), function() {
<<<<<<< HEAD
angular.module("openshiftConsole").component("notificationIcon", {
controller: [ "$scope", function(e) {
var t = this;
t.$onChanges = _.debounce(function() {
e.$apply(function() {
var e = _.groupBy(t.alerts, "type");
t.countByType = _.mapValues(e, _.size), t.byType = _.mapValues(e, function(e) {
return _.map(e, function(e) {
return _.escape(e.message);
}).join("<br>");
});
});
}, 200);
=======
angular.module("openshiftConsole").component("unbindService", {
controller: [ "$scope", "$filter", "APIService", "DataService", function(e, t, n, r) {
var a, o, i = this, s = t("enableTechPreviewFeature"), c = t("serviceInstanceDisplayName"), l = n.getPreferredVersion("servicebindings"), u = function() {
var e = i.selectedBinding.metadata.name;
i.unboundApps = i.appsForBinding(e), r.delete(l, e, o, {
propagationPolicy: null
}).then(_.noop, function(e) {
i.error = e;
});
}, d = function() {
var t = _.head(i.steps);
t.valid = !1, a = e.$watch("ctrl.selectedBinding", function(e) {
t.valid = !!e;
});
}, m = function() {
a && (a(), a = void 0);
}, p = function() {
i.nextTitle = "Delete", d();
}, f = function() {
i.nextTitle = "Close", i.wizardComplete = !0, u(), m();
};
i.$onInit = function() {
var e;
e = "ServiceInstance" === i.target.kind ? s("pod_presets") ? "Applications" : "Bindings" : "Services", i.displayName = c(i.target, i.serviceClass), i.steps = [ {
id: "deleteForm",
label: e,
view: "views/directives/bind-service/delete-binding-select-form.html",
onShow: p
}, {
id: "results",
label: "Results",
view: "views/directives/bind-service/delete-binding-result.html",
onShow: f
} ], o = {
namespace: _.get(i.target, "metadata.namespace")
};
}, i.appsForBinding = function(e) {
return _.get(i.applicationsByBinding, e);
}, i.closeWizard = function() {
_.isFunction(i.onClose) && i.onClose();
}, i.$onDestroy = function() {
m();
};
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} ],
controllerAs: "notification",
bindings: {
alerts: "<"
},
templateUrl: "views/overview/_notification-icon.html"
});
}(), function() {
<<<<<<< HEAD
angular.module("openshiftConsole").component("overviewBuilds", {
controller: [ "$filter", function(e) {
var t, n = e("canI");
this.$onInit = function() {
t = n("builds/log", "get");
}, this.showLogs = function(e) {
if (this.hideLog) return !1;
if (!t) return !1;
if (!_.get(e, "status.startTimestamp")) return !1;
if ("Complete" !== _.get(e, "status.phase")) return !0;
var n = _.get(e, "status.completionTimestamp");
if (!n) return !1;
<<<<<<< HEAD
var r = moment().subtract(3, "m");
return moment(n).isAfter(r);
=======
var a = moment().subtract(3, "m");
return moment(n).isAfter(a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
angular.module("openshiftConsole").component("processTemplate", {
controller: [ "$filter", "$q", "$scope", "$uibModal", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
function p(e) {
var t = /^helplink\.(.*)\.title$/, n = /^helplink\.(.*)\.url$/, r = {};
for (var a in e.annotations) {
var o, i = a.match(t);
i ? ((o = r[i[1]] || {}).title = e.annotations[a], r[i[1]] = o) : (i = a.match(n)) && ((o = r[i[1]] || {}).url = e.annotations[a], r[i[1]] = o);
}
return r;
}
function f() {
v.prefillParameters && _.each(v.template.parameters, function(e) {
v.prefillParameters[e.name] && (e.value = v.prefillParameters[e.name]);
}), v.labels = _.map(v.template.labels, function(e, t) {
return {
name: t,
value: e
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ],
controllerAs: "overviewBuilds",
bindings: {
buildConfigs: "<",
recentBuildsByBuildConfig: "<",
context: "<",
hideLog: "<"
},
templateUrl: "views/overview/_builds.html"
});
}(), function() {
angular.module("openshiftConsole").component("overviewListRow", {
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$filter", "$uibModal", "APIService", "BuildsService", "CatalogService", "DeploymentsService", "ListRowUtils", "Navigate", "NotificationsService", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u) {
var d = this;
_.extend(d, i.ui);
var m = e("canI"), p = e("deploymentIsInProgress"), g = e("isBinaryBuild"), f = e("enableTechPreviewFeature");
d.serviceBindingsVersion = n.getPreferredVersion("servicebindings");
var v = function(e) {
var t = _.get(e, "spec.triggers");
_.isEmpty(t) || (d.imageChangeTriggers = _.filter(t, function(e) {
return "ImageChange" === e.type && _.get(e, "imageChangeParams.automatic");
}));
<<<<<<< HEAD
}, h = function(e) {
e && !d.current && "DeploymentConfig" !== e.kind && "Deployment" !== e.kind && (d.current = e);
}, y = function(e) {
d.rgv = n.objectToResourceGroupVersion(e), h(e), v(e);
};
<<<<<<< HEAD
d.$onChanges = function(e) {
e.apiObject && y(e.apiObject.currentValue);
};
var b = [], S = function(e) {
if (!d.state.hpaByResource) return null;
var t = _.get(e, "kind"), n = _.get(e, "metadata.name");
return _.get(d.state.hpaByResource, [ t, n ], b);
};
d.showBindings = a.SERVICE_CATALOG_ENABLED && f("pod_presets"), d.$doCheck = function() {
d.notifications = i.getNotifications(d.apiObject, d.state), d.hpa = S(d.apiObject), d.current && _.isEmpty(d.hpa) && (d.hpa = S(d.current));
var e = _.get(d, "apiObject.metadata.uid");
e && (d.services = _.get(d, [ "state", "servicesByObjectUID", e ]), d.buildConfigs = _.get(d, [ "state", "buildConfigsByObjectUID", e ]), d.bindings = _.get(d, [ "state", "bindingsByApplicationUID", e ]));
var t;
"DeploymentConfig" === _.get(d, "apiObject.kind") && (t = _.get(d, "apiObject.metadata.name"), d.pipelines = _.get(d, [ "state", "pipelinesByDeploymentConfig", t ]), d.recentBuilds = _.get(d, [ "state", "recentBuildsByDeploymentConfig", t ]), d.recentPipelines = _.get(d, [ "state", "recentPipelinesByDeploymentConfig", t ]));
}, d.getPods = function(e) {
var t = _.get(e, "metadata.uid");
return _.get(d, [ "state", "podsByOwnerUID", t ]);
}, d.firstPod = function(e) {
var t = d.getPods(e);
return _.find(t);
}, d.isScalable = function() {
return !!_.isEmpty(d.hpa) && !d.isDeploymentInProgress();
}, d.isDeploymentInProgress = function() {
return !(!d.current || !d.previous) || p(d.current);
}, d.canIDoAny = function() {
var e = _.get(d, "apiObject.kind"), t = _.get(d, "apiObject.metadata.uid"), n = _.get(d.state.deleteableBindingsByApplicationUID, t);
switch (e) {
case "DeploymentConfig":
return !!m("deploymentconfigs/instantiate", "create") || !!m("deploymentconfigs", "update") || !(!d.current || !m("deploymentconfigs/log", "get")) || !(!f("pod_presets") || _.isEmpty(d.state.bindableServiceInstances) || !m(d.serviceBindingsVersion, "create")) || !(!f("pod_presets") || _.isEmpty(n) || !m(d.serviceBindingsVersion, "delete")) || d.showStartPipelineAction() || d.showStartBuildAction();

case "Pod":
return !!m("pods/log", "get") || !!m("pods", "update");

default:
return !((!d.firstPod(d.current) || !m("pods/log", "get")) && !m(d.rgv, "update") && (!f("pod_presets") || _.isEmpty(d.state.bindableServiceInstances) || !m(d.serviceBindingsVersion, "create")) && (!f("pod_presets") || _.isEmpty(n) || !m(d.serviceBindingsVersion, "delete")));
}
}, d.showStartBuildAction = function() {
if (!_.isEmpty(d.pipelines)) return !1;
if (!m("buildconfigs/instantiate", "create")) return !1;
if (1 !== _.size(d.buildConfigs)) return !1;
var e = _.head(d.buildConfigs);
return !g(e);
}, d.showStartPipelineAction = function() {
return m("buildconfigs/instantiate", "create") && 1 === _.size(d.pipelines);
}, d.startBuild = r.startBuild, d.canDeploy = function() {
return !(!d.apiObject || d.apiObject.metadata.deletionTimestamp || d.deploymentInProgress || d.apiObject.spec.paused);
}, d.isPaused = function() {
return d.apiObject.spec.paused;
}, d.startDeployment = function() {
o.startLatestDeployment(d.apiObject, {
namespace: d.apiObject.metadata.namespace
});
}, d.cancelDeployment = function() {
var e = d.current;
if (e) {
var n, r = e.metadata.name, a = _.get(d, "apiObject.status.latestVersion");
n = 1 === a ? u.getString(l("This will attempt to stop the in-progress deployment. It may take some time to complete.")) : u.getString(l("This will attempt to stop the in-progress deployment and rollback to the last successful deployment. It may take some time to complete.")), t.open({
=======
controller: [ "$filter", "$uibModal", "APIService", "BuildsService", "DeploymentsService", "ListRowUtils", "Navigate", "NotificationsService", function(e, t, n, a, r, o, i, s) {
var c = this;
_.extend(c, o.ui);
var l = e("canI"), u = e("deploymentIsInProgress"), d = e("isBinaryBuild"), m = e("enableTechPreviewFeature"), p = function(e) {
=======
controller: [ "$filter", "$uibModal", "APIService", "BuildsService", "CatalogService", "DeploymentsService", "ListRowUtils", "Navigate", "NotificationsService", function(e, t, n, a, r, o, i, s, c) {
var l = this;
_.extend(l, i.ui);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var u = e("canI"), d = e("deploymentIsInProgress"), m = e("isBinaryBuild"), p = e("enableTechPreviewFeature"), g = function(e) {
>>>>>>> Add bindings list to resource pages
=======
var u = e("canI"), d = e("deploymentIsInProgress"), m = e("isBinaryBuild"), p = e("enableTechPreviewFeature"), f = function(e) {
>>>>>>> Patternfly vertical navigation and project bar
=======
var u = e("canI"), d = e("deploymentIsInProgress"), p = e("isBinaryBuild"), m = e("enableTechPreviewFeature"), f = function(e) {
>>>>>>> Updates for Service Instance & Bindings
=======
var u = e("canI"), d = e("deploymentIsInProgress"), m = e("isBinaryBuild"), p = e("enableTechPreviewFeature"), f = function(e) {
>>>>>>> Support EnvFrom in the Env Editors
=======
var u = e("canI"), d = e("deploymentIsInProgress"), m = e("isBinaryBuild"), p = e("enableTechPreviewFeature");
l.serviceBindingsVersion = n.getPreferredVersion("servicebindings");
var f = function(e) {
>>>>>>> Adopt more service catalog API changes
var t = _.get(e, "spec.triggers");
_.isEmpty(t) || (l.imageChangeTriggers = _.filter(t, function(e) {
return "ImageChange" === e.type && _.get(e, "imageChangeParams.automatic");
}));
}, g = function(e) {
e && !l.current && "DeploymentConfig" !== e.kind && "Deployment" !== e.kind && (l.current = e);
}, h = function(e) {
l.rgv = n.objectToResourceGroupVersion(e), g(e), f(e);
};
l.$onChanges = function(e) {
e.apiObject && h(e.apiObject.currentValue);
};
var v = [], y = function(e) {
=======
}, g = function(e) {
e && !l.current && "DeploymentConfig" !== e.kind && "Deployment" !== e.kind && (l.current = e);
}, v = function(e) {
l.rgv = n.objectToResourceGroupVersion(e), g(e), f(e);
};
l.$onChanges = function(e) {
e.apiObject && v(e.apiObject.currentValue);
};
var h = [], y = function(e) {
>>>>>>> Add SVG icons
if (!l.state.hpaByResource) return null;
var t = _.get(e, "kind"), n = _.get(e, "metadata.name");
return _.get(l.state.hpaByResource, [ t, n ], h);
};
l.showBindings = r.SERVICE_CATALOG_ENABLED && p("pod_presets"), l.$doCheck = function() {
l.notifications = i.getNotifications(l.apiObject, l.state), l.hpa = y(l.apiObject), l.current && _.isEmpty(l.hpa) && (l.hpa = y(l.current));
var e = _.get(l, "apiObject.metadata.uid");
e && (l.services = _.get(l, [ "state", "servicesByObjectUID", e ]), l.buildConfigs = _.get(l, [ "state", "buildConfigsByObjectUID", e ]), l.bindings = _.get(l, [ "state", "bindingsByApplicationUID", e ]));
var t;
"DeploymentConfig" === _.get(l, "apiObject.kind") && (t = _.get(l, "apiObject.metadata.name"), l.pipelines = _.get(l, [ "state", "pipelinesByDeploymentConfig", t ]), l.recentBuilds = _.get(l, [ "state", "recentBuildsByDeploymentConfig", t ]), l.recentPipelines = _.get(l, [ "state", "recentPipelinesByDeploymentConfig", t ]));
}, l.getPods = function(e) {
var t = _.get(e, "metadata.uid");
return _.get(l, [ "state", "podsByOwnerUID", t ]);
}, l.firstPod = function(e) {
var t = l.getPods(e);
return _.find(t);
}, l.isScalable = function() {
return !!_.isEmpty(l.hpa) && !l.isDeploymentInProgress();
}, l.isDeploymentInProgress = function() {
return !(!l.current || !l.previous) || d(l.current);
}, l.canIDoAny = function() {
var e = _.get(l, "apiObject.kind"), t = _.get(l, "apiObject.metadata.uid"), n = _.get(l.state.deleteableBindingsByApplicationUID, t);
switch (e) {
case "DeploymentConfig":
return !!u("deploymentconfigs/instantiate", "create") || !!u("deploymentconfigs", "update") || !(!l.current || !u("deploymentconfigs/log", "get")) || !(!p("pod_presets") || _.isEmpty(l.state.bindableServiceInstances) || !u(l.serviceBindingsVersion, "create")) || !(!p("pod_presets") || _.isEmpty(n) || !u(l.serviceBindingsVersion, "delete")) || l.showStartPipelineAction() || l.showStartBuildAction();

case "Pod":
return !!u("pods/log", "get") || !!u("pods", "update");

default:
return !((!l.firstPod(l.current) || !u("pods/log", "get")) && !u(l.rgv, "update") && (!p("pod_presets") || _.isEmpty(l.state.bindableServiceInstances) || !u(l.serviceBindingsVersion, "create")) && (!p("pod_presets") || _.isEmpty(n) || !u(l.serviceBindingsVersion, "delete")));
}
}, l.showStartBuildAction = function() {
if (!_.isEmpty(l.pipelines)) return !1;
if (!u("buildconfigs/instantiate", "create")) return !1;
if (1 !== _.size(l.buildConfigs)) return !1;
var e = _.head(l.buildConfigs);
return !m(e);
}, l.showStartPipelineAction = function() {
return u("buildconfigs/instantiate", "create") && 1 === _.size(l.pipelines);
}, l.startBuild = a.startBuild, l.canDeploy = function() {
return !(!l.apiObject || l.apiObject.metadata.deletionTimestamp || l.deploymentInProgress || l.apiObject.spec.paused);
}, l.isPaused = function() {
return l.apiObject.spec.paused;
}, l.startDeployment = function() {
o.startLatestDeployment(l.apiObject, {
namespace: l.apiObject.metadata.namespace
});
}, l.cancelDeployment = function() {
var e = l.current;
if (e) {
var n, a = e.metadata.name, r = _.get(l, "apiObject.status.latestVersion");
n = 1 === r ? "This will attempt to stop the in-progress deployment. It may take some time to complete." : "This will attempt to stop the in-progress deployment and rollback to the last successful deployment. It may take some time to complete.", t.open({
=======
var b, S = function() {
var e = {
started: "Creating " + v.templateDisplayName + " in project " + h(v.selectedProject),
success: "Created " + v.templateDisplayName + " in project " + h(v.selectedProject),
failure: "Failed to create " + v.templateDisplayName + " in project " + h(v.selectedProject)
}, r = p(v.template);
d.clear(), d.add(e, r, v.selectedProject.metadata.name, function() {
var e = t.defer();
return a.batch(b, g).then(function(t) {
var n = [], r = !1;
t.failure.length > 0 ? (r = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot create " + y(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
<<<<<<< HEAD
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Created " + y(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})) : n.push({
type: "success",
message: "All items in template " + v.templateDisplayName + " were created successfully."
}), e.resolve({
alerts: n,
hasErrors: a
});
}), e.promise;
}), v.isDialog ? n.$emit("templateInstantiated", {
project: v.selectedProject,
template: v.template
}) : o.toNextSteps(v.templateDisplayName, v.selectedProject.metadata.name);
}, C = function(e) {
a.open({
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
<<<<<<< HEAD
title: u.getString(l("Cancel deployment {{rcName}}?"), {
rcName: r
}),
details: n,
okButtonText: u.getString(l("Yes, cancel")),
okButtonClass: "btn-danger",
cancelButtonText: u.getString(l("No, don't cancel"))
};
=======
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Created " + y(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})) : n.push({
type: "success",
message: "All items in template " + v.templateDisplayName + " were created successfully."
}), e.resolve({
alerts: n,
hasErrors: r
});
}), e.promise;
}), v.isDialog ? n.$emit("templateInstantiated", {
project: v.selectedProject,
template: v.template
}) : o.toNextSteps(v.templateDisplayName, v.selectedProject.metadata.name);
}, C = function(e) {
r.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
message: "We checked your application for potential problems. Please confirm you still want to create this application.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
}).result.then(S);
}, w = {}, P = function() {
i.hideNotification("process-template-error"), _.each(w, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || i.hideNotification(e.id);
});
}, k = function(e) {
P(), w = u.getSecurityAlerts(b, v.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
w = w.concat(t), _.filter(w, {
type: "error"
}).length ? (v.disableInputs = !1, _.each(w, function(e) {
e.id = _.uniqueId("process-template-alert-"), i.addNotification(e);
})) : w.length ? (C(w), v.disableInputs = !1) : S();
}, j = function() {
if (_.has(v.selectedProject, "metadata.uid")) return t.when(v.selectedProject);
var n = v.selectedProject.metadata.name, r = v.selectedProject.metadata.annotations["new-display-name"], a = e("description")(v.selectedProject);
return c.create(n, r, a);
};
v.createFromTemplate = function() {
v.disableInputs = !0, j().then(function(e) {
v.selectedProject = e, g = {
namespace: v.selectedProject.metadata.name
}, v.template.labels = m.mapEntries(m.compactEntries(v.labels)), a.create("processedtemplates", null, v.template, g).then(function(e) {
s.setTemplateData(e.parameters, v.template.parameters, e.message), b = e.objects, l.getLatestQuotaAlerts(b, g).then(k);
}, function(e) {
v.disableInputs = !1;
var t;
e.data && e.data.message && (t = e.data.message), i.addNotification({
id: "process-template-error",
type: "error",
message: "An error occurred processing the template.",
details: t
});
});
}, function(e) {
if (v.disableInputs = !1, "AlreadyExists" === e.data.reason) v.projectNameTaken = !0; else {
var t;
e.data && e.data.message && (t = e.data.message), i.addNotification({
id: "process-template-error",
type: "error",
message: "An error occurred creating the project.",
details: t
});
}
});
}, v.cancel = function() {
P(), o.toProjectOverview(v.project.metadata.name);
}, n.$on("instantiateTemplate", v.createFromTemplate), n.$on("$destroy", P);
var I = function() {
return !_.get(v.template, "labels.app") && !_.some(v.template.objects, "metadata.labels.app");
};
} ],
controllerAs: "$ctrl",
bindings: {
template: "<",
project: "<",
onProjectSelected: "<",
availableProjects: "<",
prefillParameters: "<",
isDialog: "<"
},
templateUrl: "views/directives/process-template.html"
});
}(), function() {
<<<<<<< HEAD
angular.module("openshiftConsole").component("processTemplateDialog", {
controller: [ "$scope", "$filter", "$routeParams", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", function(e, t, n, r, a, o, i, s, c) {
function l() {
var e = _.get(b, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
function u() {
var e = _.get(b, "template.metadata.annotations.iconClass", "fa fa-clone");
return S(e);
}
function d() {
b.steps || (b.steps = [ b.selectStep, b.infoStep, b.configStep, b.resultsStep ]);
}
function m() {
y && (y(), y = void 0);
}
function p() {
e.$broadcast("instantiateTemplate");
}
function f(e, t) {
return o.filterForKeywords(t, [ "name", "tags" ], o.generateKeywords(e));
}
function g(e) {
b.filterConfig.appliedFilters = e, v();
}
function v() {
b.filteredItems = b.catalogItems, b.filterConfig.appliedFilters && b.filterConfig.appliedFilters.length > 0 && _.each(b.filterConfig.appliedFilters, function(e) {
b.filteredItems = f(e.value, b.filteredItems);
}), b.filterConfig.resultsCount = b.filteredItems.length, _.includes(b.filteredItems, b.selectedTemplate) || b.templateSelected();
}
function h() {
b.unfilteredProjects || s.list().then(function(e) {
b.unfilteredProjects = _.toArray(e.by("metadata.name"));
}, function() {
b.unfilteredProjects = [];
}).finally(function() {
w();
});
}
var y, b = this, S = t("imageForIconClass"), C = t("annotation");
b.selectStep = {
id: "projectTemplates",
label: "Selection",
view: "views/directives/process-template-dialog/process-template-select.html",
hidden: !0 !== b.useProjectTemplate,
allowed: !0,
valid: !1,
allowClickNav: !0,
onShow: function() {
b.infoStep.selected = !1, b.selectStep.selected = !0, b.configStep.selected = !1, b.resultsStep.selected = !1, b.nextTitle = "Next >", m(), h();
}
}, b.infoStep = {
id: "info",
label: "Information",
view: "views/directives/process-template-dialog/process-template-info.html",
allowed: !0,
valid: !0,
allowClickNav: !0,
onShow: function() {
b.infoStep.selected = !0, b.selectStep.selected = !1, b.configStep.selected = !1, b.resultsStep.selected = !1, b.nextTitle = "Next >", m();
}
}, b.configStep = {
id: "configuration",
label: "Configuration",
view: "views/directives/process-template-dialog/process-template-config.html",
valid: !1,
allowed: !0,
allowClickNav: !0,
onShow: function() {
b.infoStep.selected = !1, b.selectStep.selected = !1, b.configStep.selected = !0, b.resultsStep.selected = !1, b.nextTitle = "Create", b.resultsStep.allowed = b.configStep.valid, y = e.$watch("$ctrl.form.$valid", function(e) {
b.configStep.valid = e && !b.noProjectsCantCreate && b.selectedProject, b.resultsStep.allowed = e;
});
}
}, b.resultsStep = {
=======
angular.module("openshiftConsole").component("bindService", {
controller: [ "$scope", "$filter", "APIService", "ApplicationsService", "BindingService", "Catalog", "DataService", "ServiceInstancesService", function(e, t, n, r, a, o, i, s) {
var c, l, u, d, m, p, f = this, g = t("statusCondition"), v = t("enableTechPreviewFeature"), h = n.getPreferredVersion("serviceinstances"), y = n.getPreferredVersion("clusterserviceclasses"), b = n.getPreferredVersion("clusterserviceplans"), S = function() {
var e, t;
_.each(f.serviceInstances, function(n) {
var r = "True" === _.get(g(n, "Ready"), "status");
r && (!e || n.metadata.creationTimestamp > e.metadata.creationTimestamp) && (e = n), r || t && !(n.metadata.creationTimestamp > t.metadata.creationTimestamp) || (t = n);
}), f.serviceToBind = e || t;
}, C = function() {
f.serviceClasses && f.serviceInstances && f.servicePlans && (f.serviceInstances = a.filterBindableServiceInstances(f.serviceInstances, f.serviceClasses, f.servicePlans), f.orderedServiceInstances = a.sortServiceInstances(f.serviceInstances, f.serviceClasses), f.serviceToBind || S());
}, w = function() {
var e = {
namespace: _.get(f.target, "metadata.namespace")
};
r.getApplications(e).then(function(e) {
f.applications = e, f.bindType = f.applications.length ? "application" : "secret-only";
});
}, P = function() {
var e = {
namespace: _.get(f.target, "metadata.namespace")
};
i.list(h, e).then(function(e) {
f.serviceInstances = e.by("metadata.name"), C();
}), i.list(y, {}).then(function(e) {
f.serviceClasses = e.by("metadata.name"), C();
}), i.list(b, {}).then(function(e) {
f.servicePlans = e.by("metadata.name"), C();
});
};
c = {
id: "bindForm",
label: "Binding",
view: "views/directives/bind-service/bind-service-form.html",
valid: !1,
allowClickNav: !0,
onShow: function() {
f.nextTitle = l.hidden ? "Bind" : "Next >", f.podPresets && !d && (d = e.$watch("ctrl.selectionForm.$valid", function(e) {
c.valid = e;
}));
}
}, l = {
id: "bindParameters",
label: "Parameters",
view: "views/directives/bind-service/bind-parameters.html",
hidden: !0,
allowClickNav: !0,
onShow: function() {
f.nextTitle = "Bind", m || (m = e.$watch("ctrl.parametersForm.$valid", function(e) {
l.valid = e;
}));
}
}, u = {
>>>>>>> Bug 1520828 - Do not enable Bind button until data fetched
id: "results",
label: "Results",
view: "views/directives/process-template-dialog/process-template-results.html",
valid: !0,
allowed: !1,
prevEnabled: !1,
allowClickNav: !1,
onShow: function() {
<<<<<<< HEAD
b.infoStep.selected = !1, b.selectStep.selected = !1, b.configStep.selected = !1, b.resultsStep.selected = !0, b.nextTitle = "Close", m(), b.wizardDone = !0;
}
}, b.$onInit = function() {
b.loginBaseUrl = a.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, b.useProjectTemplate && (b.project && (b.templateProject = b.project, b.templateProjectChange()), h()), b.noProjectsCantCreate = !1, e.$on("no-projects-cannot-create", function() {
b.noProjectsCantCreate = !0;
}), b.noProjectsEmptyState = {
title: "No Available Projects",
info: "There are no projects available from which to load templates."
}, b.projectEmptyState = {
title: "No Project Selected",
info: "Please select a project from the dropdown to load templates from that project."
}, b.templatesEmptyState = {
title: "No Templates",
info: "The selected project has no templates available to import."
}, b.filterConfig = {
fields: [ {
id: "keyword",
title: "Keyword",
placeholder: "Filter by Keyword",
filterType: "text"
} ],
inlineResults: !0,
showTotalCountResults: !0,
itemsLabel: "Item",
itemsLabelPlural: "Items",
resultsCount: 0,
appliedFilters: [],
onFilterChange: g
}, n.project || (b.showProjectName = !0);
}, b.$onChanges = function(e) {
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name")), e.useProjectTemplate && d();
}, e.$on("templateInstantiated", function(e, t) {
b.selectedProject = t.project, b.currentStep = b.resultsStep.label;
}), b.$onDestroy = function() {
m();
}, b.next = function(e) {
return e.stepId === b.configStep.id ? (p(), !1) : e.stepId !== b.resultsStep.id || (b.close(), !1);
}, b.close = function() {
var e = b.onDialogClosed();
_.isFunction(e) && e();
}, b.onProjectSelected = function(t) {
b.selectedProject = t, b.configStep.valid = e.$ctrl.form.$valid && b.selectedProject;
}, b.templateSelected = function(e) {
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name");
}, b.templateProjectChange = function() {
b.templateProjectName = _.get(b.templateProject, "metadata.name"), b.catalogItems = {}, b.templateSelected(), r.getProjectCatalogItems(b.templateProjectName, !1, !0).then(_.spread(function(e, t) {
b.catalogItems = e, b.totalCount = b.catalogItems.length, g(), t && i.addNotification({
type: "error",
message: t
});
}));
}, b.groupChoicesBy = function(e) {
return c.isRecentlyViewed(e.metadata.uid) ? "Recently Viewed" : "Other Projects";
};
var w = function() {
var e = _.reject(b.unfilteredProjects, "metadata.deletionTimestamp"), n = _.sortBy(e, t("displayName"));
b.searchEnabled = !_.isEmpty(e), b.templateProjects = c.orderByMostRecentlyViewed(n), b.numTemplateProjects = _.size(b.templateProjects), 1 === b.numTemplateProjects && (b.templateProject = _.head(b.templateProjects), b.templateProjectChange());
=======
d && (d(), d = void 0), m && (m(), m = void 0), f.nextTitle = "Close", f.wizardComplete = !0, f.bindService();
}
};
e.$watch("ctrl.serviceToBind", function() {
f.serviceToBind && s.fetchServiceClassForInstance(f.serviceToBind).then(function(e) {
f.serviceClass = e;
var t = s.getServicePlanNameForInstance(f.serviceToBind);
i.get(b, t, {}).then(function(e) {
f.plan = e, f.parameterSchema = _.get(f.plan, "spec.serviceBindingCreateParameterSchema"), f.parameterFormDefinition = _.get(f.plan, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition"), l.hidden = !_.has(f.parameterSchema, "properties"), f.nextTitle = l.hidden ? "Bind" : "Next >", f.hideBack = l.hidden, c.valid = !0;
});
});
}), f.$onInit = function() {
f.serviceSelection = {}, f.projectDisplayName = t("displayName")(f.project), f.podPresets = v("pod_presets"), f.parameterData = {}, f.steps = [ c, l, u ], f.hideBack = l.hidden, "ServiceInstance" === f.target.kind ? (f.bindType = "secret-only", f.appToBind = null, f.serviceToBind = f.target, f.podPresets && w()) : (f.bindType = "application", f.appToBind = f.target, P());
}, f.$onChanges = function(e) {
e.project && !e.project.isFirstChange() && (f.projectDisplayName = t("displayName")(f.project));
}, f.$onDestroy = function() {
d && (d(), d = void 0), m && (m(), m = void 0), p && i.unwatch(p);
}, f.bindService = function() {
var e = "ServiceInstance" === f.target.kind ? f.target : f.serviceToBind, t = "application" === f.bindType ? f.appToBind : void 0, n = {
namespace: _.get(e, "metadata.namespace")
}, r = a.getServiceClassForInstance(e, f.serviceClasses);
a.bindService(e, t, r, f.parameterData).then(function(e) {
f.binding = e, f.error = null, p = i.watchObject(a.bindingResource, _.get(f.binding, "metadata.name"), n, function(e) {
f.binding = e;
});
}, function(e) {
f.error = e;
});
}, f.closeWizard = function() {
_.isFunction(f.onClose) && f.onClose();
>>>>>>> Bug 1520828 - Do not enable Bind button until data fetched
};
} ],
controllerAs: "$ctrl",
bindings: {
template: "<",
project: "<",
useProjectTemplate: "<",
onDialogClosed: "&"
},
templateUrl: "views/directives/process-template-dialog.html"
});
}(), function() {
angular.module("openshiftConsole").component("deployImageDialog", {
controller: [ "$scope", "$routeParams", "DataService", function(e, t, n) {
var r = this;
r.$onInit = function() {
r.loginBaseUrl = n.openshiftAPIBaseUrl(), r.currentStep = "Image", t.project || (r.showProjectName = !0), e.$on("no-projects-cannot-create", function() {
r.deployForm.$setValidity("required", !1), r.deployImageNewAppCreated = !1;
});
}, r.deployImage = function() {
e.$broadcast("newAppFromDeployImage");
}, e.$on("deployImageNewAppCreated", function(e, t) {
r.selectedProject = t.project, r.appName = t.appName, r.deployImageNewAppCreated = !0, r.currentStep = "Results";
}), r.close = function() {
var e = r.onDialogClosed();
return _.isFunction(e) && e(), r.wizardDone = !1, !0;
}, r.stepChanged = function(e) {
"results" === e.stepId ? (r.nextButtonTitle = "Close", r.wizardDone = !0) : r.nextButtonTitle = "Deploy";
}, r.nextCallback = function(e) {
return "image" === e.stepId ? (r.deployImage(), !1) : "results" !== e.stepId || (r.close(), !1);
};
} ],
controllerAs: "$ctrl",
bindings: {
project: "<",
context: "<",
onDialogClosed: "&"
},
templateUrl: "views/directives/deploy-image-dialog.html"
});
}(), function() {
angular.module("openshiftConsole").component("fromFileDialog", {
controller: [ "$scope", "$timeout", "$routeParams", "$filter", "DataService", function(e, t, n, r, a) {
function o() {
var e = _.get(s, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}
<<<<<<< HEAD
}).result.then(function() {
e.metadata.uid === d.current.metadata.uid ? (e = d.current, p(e) ? o.cancelRunningDeployment(e, {
namespace: e.metadata.namespace
}) : c.addNotification({
type: "error",
message: "Deployment " + r + " is no longer in progress."
})) : c.addNotification({
type: "error",
message: "Deployment #" + a + " is no longer the latest."
});
});
}
}, d.urlForImageChangeTrigger = function(t) {
var n = e("stripTag")(_.get(t, "imageChangeParams.from.name")), r = _.get(d, "apiObject.metadata.namespace"), a = _.get(t, "imageChangeParams.from.namespace", r);
return s.resourceURL(n, "ImageStream", a);
}, d.navigateToPods = function() {
var e = d.getPods(d.current);
_.isEmpty(e) || s.toPodsForDeployment(d.current, e);
}, d.closeOverlayPanel = function() {
_.set(d, "overlay.panelVisible", !1);
}, d.showOverlayPanel = function(e, t) {
_.set(d, "overlay.panelVisible", !0), _.set(d, "overlay.panelName", e), _.set(d, "overlay.state", t);
};
=======
message: "Cancel deployment " + a + "?",
details: n,
okButtonText: "Yes, cancel",
okButtonClass: "btn-danger",
cancelButtonText: "No, don't cancel"
};
}
=======
var s = this, c = r("annotation"), l = r("imageForIconClass");
s.$onInit = function() {
s.alerts = {}, s.loginBaseUrl = a.openshiftAPIBaseUrl(), n.project || (s.showProjectName = !0), e.$on("no-projects-cannot-create", function() {
s.importForm.$setValidity("required", !1);
});
}, s.importFile = function() {
e.$broadcast("importFileFromYAMLOrJSON");
}, s.instantiateTemplate = function() {
e.$broadcast("instantiateTemplate");
}, e.$on("fileImportedFromYAMLOrJSON", function(e, n) {
s.selectedProject = n.project, s.template = n.template, s.iconClass = o(), s.image = i(), s.vendor = c(n.template, "openshift.io/provider-display-name"), s.docUrl = c(s.template, "openshift.io/documentation-url"), s.supportUrl = c(s.template, "openshift.io/support-url"), s.actionLabel = "imported", n.isList ? (s.kind = null, s.name = "YAML / JSON") : n.resource && (s.kind = n.resource.kind, s.name = n.resource.metadata.name), t(function() {
s.currentStep = s.template ? "Template Configuration" : "Results";
}, 0);
}), e.$on("templateInstantiated", function(e, t) {
s.selectedProject = t.project, s.name = r("displayName")(s.template), s.actionLabel = null, s.kind = null, s.currentStep = "Results";
}), s.close = function() {
s.template = null;
var e = s.onDialogClosed();
return _.isFunction(e) && e(), s.wizardDone = !1, !0;
}, s.stepChanged = function(e) {
"results" === e.stepId ? (s.nextButtonTitle = "Close", s.wizardDone = !0) : s.nextButtonTitle = "Create";
}, s.currentStep = "YAML / JSON", s.nextCallback = function(e) {
return "file" === e.stepId ? (s.importFile(), !1) : "template" === e.stepId ? (s.instantiateTemplate(), !1) : "results" !== e.stepId || (s.close(), !1);
};
} ],
controllerAs: "$ctrl",
bindings: {
project: "<",
context: "<",
onDialogClosed: "&"
},
templateUrl: "views/directives/from-file-dialog.html"
});
}(), function() {
<<<<<<< HEAD
angular.module("openshiftConsole").component("nextSteps", {
controller: [ "ProcessedTemplateService", "Navigate", function(e, t) {
function n(e) {
var t = [];
return angular.forEach(e, function(e) {
"completed" !== e.status && t.push(e);
}), t;
=======
angular.module("openshiftConsole").component("processTemplate", {
controller: [ "$filter", "$q", "$scope", "$uibModal", "APIService", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
function f(e) {
var t = /^helplink\.(.*)\.title$/, n = /^helplink\.(.*)\.url$/, r = {};
for (var a in e.annotations) {
var o, i = a.match(t);
i ? ((o = r[i[1]] || {}).title = e.annotations[a], r[i[1]] = o) : (i = a.match(n)) && ((o = r[i[1]] || {}).url = e.annotations[a], r[i[1]] = o);
>>>>>>> Update directives/processTemplate to use getPreferredVersion
}
function r(e) {
var t = [];
return angular.forEach(e, function(e) {
e.hasErrors && t.push(e);
}), t;
}
<<<<<<< HEAD
var a = this;
a.showParamsTable = !1, a.actionLabel = a.actionLabel || "created";
var o = e.getTemplateData();
a.parameters = o.params, a.templateMessage = o.message, e.clearTemplateData();
var i = function(e) {
var t = _.get(a, "createdBuildConfig.spec.triggers", []);
return _.some(t, {
type: e
});
};
a.createdBuildConfigWithGitHubTrigger = function() {
return i("GitHub");
}, a.createdBuildConfigWithConfigChangeTrigger = function() {
return i("ConfigChange");
}, a.allTasksSuccessful = function(e) {
return !n(e).length && !r(e).length;
}, a.erroredTasks = r, a.pendingTasks = n, a.goToOverview = function() {
_.isFunction(a.onContinue) && a.onContinue(), t.toProjectOverview(a.projectName);
}, a.toggleParamsTable = function() {
a.showParamsTable = !a.showParamsTable;
};
} ],
bindings: {
project: "<",
projectName: "<",
loginBaseUrl: "<",
fromSampleRepo: "<",
createdBuildConfig: "<",
onContinue: "<",
showProjectName: "<",
kind: "<?",
name: "<",
actionLabel: "<?"
},
templateUrl: "views/directives/next-steps.html"
=======
function g() {
h.prefillParameters && _.each(h.template.parameters, function(e) {
h.prefillParameters[e.name] && (e.value = h.prefillParameters[e.name]);
}), h.labels = _.map(h.template.labels, function(e, t) {
return {
name: t,
value: e
};
}), E() && h.labels.push({
name: "app",
value: h.template.metadata.name
});
}
var v, h = this, y = e("displayName"), b = e("humanize");
h.noProjectsCantCreate = !1, h.$onInit = function() {
h.labels = [], h.template = angular.copy(h.template), h.templateDisplayName = y(h.template), h.selectedProject = h.project, n.$watch("$ctrl.selectedProject.metadata.name", function() {
h.projectNameTaken = !1;
}), n.$on("no-projects-cannot-create", function() {
h.noProjectsCantCreate = !0;
}), g();
};
var S, C = function() {
var e = {
started: "Creating " + h.templateDisplayName + " in project " + y(h.selectedProject),
success: "Created " + h.templateDisplayName + " in project " + y(h.selectedProject),
failure: "Failed to create " + h.templateDisplayName + " in project " + y(h.selectedProject)
}, r = f(h.template);
m.clear(), m.add(e, r, h.selectedProject.metadata.name, function() {
var e = t.defer();
return o.batch(S, v).then(function(t) {
var n = [], r = !1;
t.failure.length > 0 ? (r = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot create " + b(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Created " + b(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})) : n.push({
type: "success",
message: "All items in template " + h.templateDisplayName + " were created successfully."
}), e.resolve({
alerts: n,
hasErrors: r
>>>>>>> Update directives/processTemplate to use getPreferredVersion
});
<<<<<<< HEAD
}(), angular.module("openshiftConsole").directive("imageNames", [ "$filter", "PodsService", function(e, t) {
=======
}), e.promise;
}), h.isDialog ? n.$emit("templateInstantiated", {
project: h.selectedProject,
template: h.template
}) : i.toNextSteps(h.templateDisplayName, h.selectedProject.metadata.name);
}, w = function(e) {
r.open({
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
>>>>>>> Prohibit close of warning dialog by clicking on backdrop
return {
<<<<<<< HEAD
restrict: "E",
scope: {
podTemplate: "=",
pods: "="
},
templateUrl: "views/_image-names.html",
link: function(n) {
var r = e("imageSHA");
n.$watchGroup([ "podTemplate", "pods" ], function() {
var e = _.get(n, "podTemplate.spec.containers[0]");
if (e) {
var a = r(e.image);
n.imageIDs = a ? [ a ] : t.getImageIDs(n.pods, e.name);
}
});
=======
alerts: e,
title: "Confirm Creation",
details: "We checked your application for potential problems. Please confirm you still want to create this application.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
>>>>>>> Update modals to align with PatternFly standard
}
};
} ]), function() {
angular.module("openshiftConsole").component("serviceBinding", {
controller: [ "APIService", "AuthorizationService", "DataService", "Logger", "SecretsService", "ServiceInstancesService", function(e, t, n, r, a, o) {
var i = this;
i.serviceBindingsVersion = e.getPreferredVersion("servicebindings"), i.secretsVersion = e.getPreferredVersion("secrets"), i.showParameterValues = !1;
var s = {
namespace: i.namespace
}, c = function() {
i.allowParametersReveal = t.canI("secrets", "get", i.namespace), i.parameterData = {}, i.opaqueParameterKeys = [];
var e = i.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(i.bindParameterSchema, "properties")), function(t) {
i.parameterData[t] = e;
});
var o = _.get(i.binding, "status.externalProperties.parameters", {});
_.each(_.keys(o), function(e) {
"<redacted>" === o[e] ? i.parameterData[e] = "*****" : (i.parameterData[e] = o[e], i.opaqueParameterKeys.push(e));
}), i.allowParametersReveal && _.each(_.get(i.binding, "spec.parametersFrom"), function(e) {
n.get(i.secretsVersion, _.get(e, "secretKeyRef.name"), s).then(function(t) {
try {
var n = JSON.parse(a.decodeSecretData(t.data)[e.secretKeyRef.key]);
_.extend(i.parameterData, n);
} catch (t) {
r.warn("Unable to load parameters from secret " + _.get(e, "secretKeyRef.name"), t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}).result.then(function() {
e.metadata.uid === l.current.metadata.uid ? (e = l.current, d(e) ? o.cancelRunningDeployment(e, {
namespace: e.metadata.namespace
}) : c.addNotification({
=======
}).result.then(C);
=======
}).result.then(S);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
}, w = {}, k = function() {
i.hideNotification("process-template-error"), _.each(w, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || i.hideNotification(e.id);
});
<<<<<<< HEAD
}, P = function(e) {
k(), w = u.getSecurityAlerts(b, v.selectedProject.metadata.name);
=======
}, j = function(e) {
P(), w = u.getSecurityAlerts(b, v.selectedProject.metadata.name);
>>>>>>> Add Browse Catalog to Project context view.
=======
}).result.then(C);
}, P = {}, j = function() {
s.hideNotification("process-template-error"), _.each(P, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || s.hideNotification(e.id);
});
}, k = function(e) {
j(), P = d.getSecurityAlerts(S, h.selectedProject.metadata.name);
>>>>>>> Update directives/processTemplate to use getPreferredVersion
var t = e.quotaAlerts || [];
P = P.concat(t), _.filter(P, {
type: "error"
<<<<<<< HEAD
}).length ? (v.disableInputs = !1, _.each(w, function(e) {
e.id = _.uniqueId("process-template-alert-"), i.addNotification(e);
})) : w.length ? (C(w), v.disableInputs = !1) : S();
}, k = function() {
if (_.has(v.selectedProject, "metadata.uid")) return t.when(v.selectedProject);
var n = v.selectedProject.metadata.name, a = v.selectedProject.metadata.annotations["new-display-name"], r = e("description")(v.selectedProject);
return c.create(n, a, r);
};
v.createFromTemplate = function() {
v.disableInputs = !0, k().then(function(e) {
v.selectedProject = e, g = {
namespace: v.selectedProject.metadata.name
<<<<<<< HEAD
}, v.template.labels = m.mapEntries(m.compactEntries(v.labels)), r.create("processedtemplates", null, v.template, g).then(function(e) {
s.setTemplateData(e.parameters, v.template.parameters, e.message), b = e.objects, l.getLatestQuotaAlerts(b, g).then(P);
=======
}, v.template.labels = m.mapEntries(m.compactEntries(v.labels)), a.create("processedtemplates", null, v.template, g).then(function(e) {
s.setTemplateData(e.parameters, v.template.parameters, e.message), b = e.objects, l.getLatestQuotaAlerts(b, g).then(j);
>>>>>>> Add Browse Catalog to Project context view.
=======
}).length ? (h.disableInputs = !1, _.each(P, function(e) {
e.id = _.uniqueId("process-template-alert-"), s.addNotification(e);
})) : P.length ? (w(P), h.disableInputs = !1) : C();
}, I = function() {
if (_.has(h.selectedProject, "metadata.uid")) return t.when(h.selectedProject);
var n = h.selectedProject.metadata.name, r = h.selectedProject.metadata.annotations["new-display-name"], a = e("description")(h.selectedProject);
return l.create(n, r, a);
}, R = function(e) {
var t = a.objectToResourceGroupVersion(e);
return t.resource = "processedtemplates", t;
};
h.createFromTemplate = function() {
h.disableInputs = !0, I().then(function(e) {
h.selectedProject = e, v = {
namespace: h.selectedProject.metadata.name
}, h.template.labels = p.mapEntries(p.compactEntries(h.labels));
var t = R(h.template);
o.create(t, null, h.template, v).then(function(e) {
c.setTemplateData(e.parameters, h.template.parameters, e.message), S = e.objects, u.getLatestQuotaAlerts(S, v).then(k);
>>>>>>> Update directives/processTemplate to use getPreferredVersion
}, function(e) {
h.disableInputs = !1;
var t;
e.data && e.data.message && (t = e.data.message), s.addNotification({
id: "process-template-error",
>>>>>>> Bug 1505281 - Improve import YAML results message
type: "error",
<<<<<<< HEAD
message: "Deployment " + a + " is no longer in progress."
})) : c.addNotification({
=======
message: "An error occurred processing the template.",
details: t
});
});
}, function(e) {
if (h.disableInputs = !1, "AlreadyExists" === e.data.reason) h.projectNameTaken = !0; else {
var t;
e.data && e.data.message && (t = e.data.message), s.addNotification({
id: "process-template-error",
>>>>>>> Update directives/processTemplate to use getPreferredVersion
type: "error",
message: "Deployment #" + r + " is no longer the latest."
});
});
<<<<<<< HEAD
<<<<<<< HEAD
}
}, l.urlForImageChangeTrigger = function(t) {
var n = e("stripTag")(_.get(t, "imageChangeParams.from.name")), a = _.get(l, "apiObject.metadata.namespace"), r = _.get(t, "imageChangeParams.from.namespace", a);
return s.resourceURL(n, "ImageStream", r);
}, l.navigateToPods = function() {
var e = l.getPods(l.current);
_.isEmpty(e) || s.toPodsForDeployment(l.current, e);
}, l.closeOverlayPanel = function() {
_.set(l, "overlay.panelVisible", !1);
}, l.showOverlayPanel = function(e, t) {
_.set(l, "overlay.panelVisible", !0), _.set(l, "overlay.panelName", e), _.set(l, "overlay.state", t);
=======
}, v.cancel = function() {
k(), o.toProjectOverview(v.project.metadata.name);
}, n.$on("instantiateTemplate", v.createFromTemplate), n.$on("$destroy", k);
var R = function() {
return !_.get(v.template, "labels.app") && !_.some(v.template.objects, "metadata.labels.app");
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}, h.cancel = function() {
j(), i.toProjectOverview(h.project.metadata.name);
}, n.$on("instantiateTemplate", h.createFromTemplate), n.$on("$destroy", j);
var E = function() {
return !_.get(h.template, "labels.app") && !_.some(h.template.objects, "metadata.labels.app");
>>>>>>> Update directives/processTemplate to use getPreferredVersion
};
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ],
controllerAs: "row",
bindings: {
apiObject: "<",
current: "<",
previous: "<",
state: "<",
hidePipelines: "<"
},
templateUrl: "views/overview/_list-row.html"
});
}(), function() {
<<<<<<< HEAD
<<<<<<< HEAD
angular.module("openshiftConsole").component("serviceInstanceRow", {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$filter", "APIService", "AuthorizationService", "BindingService", "ListRowUtils", "ServiceInstancesService", function(e, t, n, r, a, o) {
var i = this, s = e("isBindingFailed"), c = e("isBindingReady");
_.extend(i, a.ui);
=======
controller: [ "$filter", "APIService", "AuthorizationService", "BindingService", "ListRowUtils", "ServiceInstancesService", function(e, t, n, a, r, o) {
var i = this, s = e("isBindingFailed"), c = e("isBindingReady");
_.extend(i, r.ui);
>>>>>>> Adopt more service catalog API changes
var l = e("serviceInstanceDisplayName");
i.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), i.serviceInstancesVersion = t.getPreferredVersion("serviceinstances");
var u = function() {
var e = o.getServiceClassNameForInstance(i.apiObject);
return _.get(i, [ "state", "serviceClasses", e ]);
<<<<<<< HEAD
}, d = function() {
var e = o.getServicePlanNameForInstance(i.apiObject);
return _.get(i, [ "state", "servicePlans", e ]);
}, m = function() {
_.get(i.apiObject, "metadata.deletionTimestamp") ? i.instanceStatus = "deleted" : s(i.apiObject) ? i.instanceStatus = "failed" : c(i.apiObject) ? i.instanceStatus = "ready" : i.instanceStatus = "pending";
};
i.$doCheck = function() {
m(), i.notifications = a.getNotifications(i.apiObject, i.state), i.serviceClass = u(), i.servicePlan = d(), i.displayName = l(i.apiObject, i.serviceClass), i.isBindable = r.isServiceBindable(i.apiObject, i.serviceClass, i.servicePlan);
}, i.$onChanges = function(e) {
e.bindings && (i.deleteableBindings = _.reject(i.bindings, "metadata.deletionTimestamp"));
}, i.getSecretForBinding = function(e) {
return e && _.get(i, [ "state", "secrets", e.spec.secretName ]);
}, i.actionsDropdownVisible = function() {
return !(_.get(i.apiObject, "metadata.deletionTimestamp") || (!i.isBindable || !n.canI(i.serviceBindingsVersion, "create")) && (_.isEmpty(i.deleteableBindings) || !n.canI(i.serviceBindingsVersion, "delete")) && !n.canI(i.serviceInstancesVersion, "delete"));
}, i.closeOverlayPanel = function() {
_.set(i, "overlay.panelVisible", !1);
}, i.showOverlayPanel = function(e, t) {
_.set(i, "overlay.panelVisible", !0), _.set(i, "overlay.panelName", e), _.set(i, "overlay.state", t);
}, i.getFailedTooltipText = function() {
var e = serviceInstanceFailedMessage(i.apiObject);
if (!e) return "";
var t = truncate(e, 128);
return e.length !== t.length && (t += "..."), t;
}, i.deprovision = function() {
o.deprovision(i.apiObject, i.deleteableBindings);
=======
controller: [ "$filter", "$uibModal", "DataService", "BindingService", "ListRowUtils", "NotificationsService", "AuthorizationService", function(e, t, n, a, r, o, i) {
var s = this;
_.extend(s, r.ui);
var c = e("getErrorDetails"), l = e("serviceInstanceDisplayName"), u = function() {
var e = s.apiObject.spec.serviceClassName;
return _.get(s, [ "state", "serviceClasses", e, "description" ]);
}, d = function() {
var e = _.get(s.apiObject, "status.conditions"), t = _.find(e, {
=======
controller: [ "$filter", "AuthorizationService", "BindingService", "ListRowUtils", "ServiceInstancesService", function(e, t, n, a, r) {
var o = this, i = e("isBindingFailed"), s = e("isBindingReady");
_.extend(o, a.ui);
var c = e("serviceInstanceDisplayName"), l = function() {
<<<<<<< HEAD
<<<<<<< HEAD
var e = o.apiObject.spec.serviceClassName;
return _.get(o, [ "state", "serviceClasses", e, "description" ]);
<<<<<<< HEAD
}, c = function() {
var e = _.get(o.apiObject, "status.conditions"), t = _.find(e, {
>>>>>>> Updates for Service Instance & Bindings
type: "Ready"
=======
angular.module("openshiftConsole").component("processTemplateDialog", {
controller: [ "$scope", "$filter", "$routeParams", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", function(e, t, n, a, r, o, i, s, c) {
function l() {
var e = _.get(b, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
function u() {
var e = _.get(b, "template.metadata.annotations.iconClass", "fa fa-clone");
return S(e);
}
function d() {
b.steps || (b.steps = [ b.selectStep, b.infoStep, b.configStep, b.resultsStep ]);
}
function m() {
y && (y(), y = void 0);
}
function p() {
e.$broadcast("instantiateTemplate");
}
function f(e, t) {
return o.filterForKeywords(t, [ "name", "tags" ], o.generateKeywords(e));
}
function g(e) {
b.filterConfig.appliedFilters = e, v();
}
function v() {
b.filteredItems = b.catalogItems, b.filterConfig.appliedFilters && b.filterConfig.appliedFilters.length > 0 && _.each(b.filterConfig.appliedFilters, function(e) {
b.filteredItems = f(e.value, b.filteredItems);
}), b.filterConfig.resultsCount = b.filteredItems.length, _.includes(b.filteredItems, b.selectedTemplate) || b.templateSelected();
}
function h() {
b.unfilteredProjects || s.list().then(function(e) {
b.unfilteredProjects = _.toArray(e.by("metadata.name"));
}, function() {
b.unfilteredProjects = [];
}).finally(function() {
w();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
angular.module("openshiftConsole").component("buildCounts", {
controller: [ "$scope", "BuildsService", function(e, t) {
var n = this;
n.interestingPhases = [ "Pending", "Running", "Failed", "Error" ];
var r = function(e) {
var t = _.get(e, "status.phase");
return _.includes(n.interestingPhases, t);
};
n.$onChanges = _.debounce(function() {
e.$apply(function() {
var e = _.groupBy(n.builds, "status.phase");
if (n.countByPhase = _.mapValues(e, _.size), n.show = _.some(n.builds, r), n.showRunningStage && 1 === n.countByPhase.Running) {
var a = _.head(e.Running);
n.currentStage = t.getCurrentStage(a);
} else n.currentStage = null;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
o.instanceError = _.find(e, {
type: "Failed",
status: "True"
}), _.get(o.apiObject, "metadata.deletionTimestamp") ? o.instanceStatus = "deleted" : o.instanceError ? o.instanceStatus = "failed" : t && "True" === t.status ? o.instanceStatus = "ready" : (o.instanceStatus = "pending", o.pendingMessage = _.get(t, "message") || "The instance is being provisioned asynchronously.");
=======
}, u = function() {
=======
>>>>>>> Overview instance row improvements
=======
var e = r.getServiceClassNameForInstance(o.apiObject);
return _.get(o, [ "state", "serviceClasses", e ]);
}, u = function() {
var e = r.getServicePlanNameForInstance(o.apiObject);
return _.get(o, [ "state", "servicePlans", e ]);
}, d = function() {
>>>>>>> Adopt service catalog API changes
_.get(o.apiObject, "metadata.deletionTimestamp") ? o.instanceStatus = "deleted" : i(o.apiObject) ? o.instanceStatus = "failed" : s(o.apiObject) ? o.instanceStatus = "ready" : o.instanceStatus = "pending";
>>>>>>> Updates to service instance page, show failed bindings
};
o.$doCheck = function() {
d(), o.notifications = a.getNotifications(o.apiObject, o.state), o.serviceClass = l(), o.servicePlan = u(), o.displayName = c(o.apiObject, o.serviceClass), o.isBindable = n.isServiceBindable(o.apiObject, o.serviceClass, o.servicePlan);
}, o.$onChanges = function(e) {
e.bindings && (o.deleteableBindings = _.reject(o.bindings, "metadata.deletionTimestamp"));
}, o.getSecretForBinding = function(e) {
return e && _.get(o, [ "state", "secrets", e.spec.secretName ]);
}, o.actionsDropdownVisible = function() {
return !(_.get(o.apiObject, "metadata.deletionTimestamp") || (!o.isBindable || !t.canI({
resource: "serviceinstancecredentials",
group: "servicecatalog.k8s.io"
}, "create")) && (_.isEmpty(o.deleteableBindings) || !t.canI({
resource: "serviceinstancecredentials",
group: "servicecatalog.k8s.io"
}, "delete")) && !t.canI({
resource: "serviceinstances",
group: "servicecatalog.k8s.io"
}, "delete"));
<<<<<<< HEAD
}, s.closeOverlayPanel = function() {
_.set(s, "overlay.panelVisible", !1);
}, s.showOverlayPanel = function(e, t) {
_.set(s, "overlay.panelVisible", !0), _.set(s, "overlay.panelName", e), _.set(s, "overlay.state", t);
}, s.deprovision = function() {
var e = {
alerts: {
deprovision: {
type: "error",
message: "Service '" + s.apiObject.spec.serviceClassName + "' will be deleted and no longer available."
}
<<<<<<< HEAD
},
<<<<<<< HEAD
detailsMarkup: "Delete Service?",
okButtonText: "Delete",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
=======
templateUrl: "views/overview/_build-counts.html"
});
}(), function() {
angular.module("openshiftConsole").component("metricsSummary", {
controller: [ "$interval", "ConversionService", "MetricsCharts", "MetricsService", function(e, t, n, r) {
var a, o = this, i = !0, s = function(e) {
return e >= 1024;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
t.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return e;
=======
var y, b = this, S = t("imageForIconClass"), C = t("annotation");
b.selectStep = {
id: "projectTemplates",
label: "Selection",
view: "views/directives/process-template-dialog/process-template-select.html",
hidden: !0 !== b.useProjectTemplate,
allowed: !0,
valid: !1,
allowClickNav: !0,
onShow: function() {
b.infoStep.selected = !1, b.selectStep.selected = !0, b.configStep.selected = !1, b.resultsStep.selected = !1, b.nextTitle = "Next >", m(), h();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
}
}
}).result.then(function() {
o.hideNotification("deprovision-service-error"), n.delete({
group: "servicecatalog.k8s.io",
resource: "serviceinstances"
}, s.apiObject.metadata.name, {
namespace: s.apiObject.metadata.namespace
}, {
<<<<<<< HEAD
propagationPolicy: null
}).then(function() {
o.addNotification({
type: "success",
message: "Successfully deleted " + s.apiObject.metadata.name + "."
});
<<<<<<< HEAD
}, function(e) {
o.addNotification({
id: "deprovision-service-error",
=======
}
}, b.resultsStep = {
id: "results",
label: "Results",
view: "views/directives/process-template-dialog/process-template-results.html",
valid: !0,
allowed: !1,
prevEnabled: !1,
allowClickNav: !1,
onShow: function() {
b.infoStep.selected = !1, b.selectStep.selected = !1, b.configStep.selected = !1, b.resultsStep.selected = !0, b.nextTitle = "Close", m(), b.wizardDone = !0;
=======
label: "Network",
units: "KiB/s",
convert: t.bytesToKiB,
formatUsage: function(e) {
return e < .01 ? "< 0.01" : n.formatUsage(e);
},
usageUnits: function() {
return "KiB/s";
},
datasets: [ "network/tx_rate", "network/rx_rate" ],
type: "pod"
} ];
var c = function() {
var e = _.find(o.pods, "metadata.namespace");
return e ? {
pods: o.pods,
namespace: e.metadata.namespace,
start: "-1mn",
bucketDuration: "1mn"
} : null;
}, l = function(e) {
return null === e.value || void 0 === e.value;
}, u = function(e, t) {
var n = null, r = {};
_.each(e.datasets, function(a) {
_.each(t[a], function(t, a) {
var o = _.last(t);
if (!l(o)) {
r[a] = !0;
var i = e.convert(o.value);
n = (n || 0) + i;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}, b.$onInit = function() {
b.loginBaseUrl = r.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, b.useProjectTemplate && (b.project && (b.templateProject = b.project, b.templateProjectChange()), h()), b.noProjectsCantCreate = !1, e.$on("no-projects-cannot-create", function() {
b.noProjectsCantCreate = !0;
}), b.noProjectsEmptyState = {
title: "No Available Projects",
info: "There are no projects available from which to load templates."
}, b.projectEmptyState = {
title: "No Project Selected",
info: "Please select a project from the dropdown to load templates from that project."
}, b.templatesEmptyState = {
title: "No Templates",
info: "The selected project has no templates available to import."
}, b.filterConfig = {
fields: [ {
id: "keyword",
title: "Keyword",
placeholder: "Filter by Keyword",
filterType: "text"
} ],
inlineResults: !0,
showTotalCountResults: !0,
itemsLabel: "Item",
itemsLabelPlural: "Items",
resultsCount: 0,
appliedFilters: [],
onFilterChange: g
}, n.project || (b.showProjectName = !0);
}, b.$onChanges = function(e) {
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name")), e.useProjectTemplate && d();
}, e.$on("templateInstantiated", function(e, t) {
b.selectedProject = t.project, b.currentStep = b.resultsStep.label;
}), b.$onDestroy = function() {
m();
}, b.next = function(e) {
return e.stepId === b.configStep.id ? (p(), !1) : e.stepId !== b.resultsStep.id || (b.close(), !1);
}, b.close = function() {
var e = b.onDialogClosed();
_.isFunction(e) && e();
}, b.onProjectSelected = function(t) {
b.selectedProject = t, b.configStep.valid = e.$ctrl.form.$valid && b.selectedProject;
}, b.templateSelected = function(e) {
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name");
}, b.templateProjectChange = function() {
b.templateProjectName = _.get(b.templateProject, "metadata.name"), b.catalogItems = {}, b.templateSelected(), a.getProjectCatalogItems(b.templateProjectName, !1, !0).then(_.spread(function(e, t) {
b.catalogItems = e, b.totalCount = b.catalogItems.length, g(), t && i.addNotification({
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
type: "error",
message: "An error occurred while deleting " + s.apiObject.metadata.name + ".",
details: c(e)
});
<<<<<<< HEAD
=======
}), null === n ? delete e.currentUsage : e.currentUsage = n / _.size(r);
}, d = function(e) {
_.each(o.metrics, function(t) {
u(t, e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, o.closeOverlayPanel = function() {
_.set(o, "overlay.panelVisible", !1);
}, o.showOverlayPanel = function(e, t) {
_.set(o, "overlay.panelVisible", !0), _.set(o, "overlay.panelName", e), _.set(o, "overlay.state", t);
}, o.deprovision = function() {
<<<<<<< HEAD
r.deprovision(o.apiObject);
>>>>>>> Updates for Service Instance & Bindings
=======
r.deprovision(o.apiObject, o.deleteableBindings);
>>>>>>> Delete bindings when deleting a service instance
=======
}, d = function() {
var e = o.getServicePlanNameForInstance(i.apiObject);
return _.get(i, [ "state", "servicePlans", e ]);
}, m = function() {
<<<<<<< HEAD
_.get(i.apiObject, "metadata.deletionTimestamp") ? i.instanceStatus = "deleted" : s(i.apiObject) ? i.instanceStatus = "failed" : c(i.apiObject) ? i.instanceStatus = "ready" : i.instanceStatus = "pending";
=======
o.error = !0;
}, p = function() {
if (!o.error && !i) {
var e = c();
e && (a = Date.now(), r.getPodMetrics(e).then(d, m));
}
};
o.updateInView = function(e) {
i = !e, e && (!a || Date.now() > a + n.getDefaultUpdateInterval()) && p();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
i.$doCheck = function() {
m(), i.notifications = r.getNotifications(i.apiObject, i.state), i.serviceClass = u(), i.servicePlan = d(), i.displayName = l(i.apiObject, i.serviceClass), i.isBindable = a.isServiceBindable(i.apiObject, i.serviceClass, i.servicePlan);
}, i.$onChanges = function(e) {
e.bindings && (i.deleteableBindings = _.reject(i.bindings, "metadata.deletionTimestamp"));
}, i.getSecretForBinding = function(e) {
return e && _.get(i, [ "state", "secrets", e.spec.secretName ]);
}, i.actionsDropdownVisible = function() {
return !(_.get(i.apiObject, "metadata.deletionTimestamp") || (!i.isBindable || !n.canI(i.serviceBindingsVersion, "create")) && (_.isEmpty(i.deleteableBindings) || !n.canI(i.serviceBindingsVersion, "delete")) && !n.canI(i.serviceInstancesVersion, "delete"));
}, i.closeOverlayPanel = function() {
_.set(i, "overlay.panelVisible", !1);
}, i.showOverlayPanel = function(e, t) {
_.set(i, "overlay.panelVisible", !0), _.set(i, "overlay.panelName", e), _.set(i, "overlay.state", t);
}, i.deprovision = function() {
o.deprovision(i.apiObject, i.deleteableBindings);
>>>>>>> Adopt more service catalog API changes
};
} ],
controllerAs: "row",
bindings: {
apiObject: "<",
state: "<",
bindings: "<"
},
<<<<<<< HEAD
templateUrl: "views/overview/_service-instance-row.html"
=======
templateUrl: "views/overview/_metrics-summary.html"
});
}(), function() {
angular.module("openshiftConsole").component("miniLog", {
controllerAs: "miniLog",
controller: [ "$scope", "$filter", "APIService", "DataService", "HTMLService", function(e, t, n, r, a) {
var o, i, s, c = this, l = t("annotation"), u = c.numLines || 7, d = [];
c.lines = [];
var m = _.throttle(function() {
e.$evalAsync(function() {
c.lines = _.clone(d);
});
}, 200), p = 0, f = function(e) {
if (e) {
var t = ansi_up.escape_for_html(e), n = ansi_up.ansi_to_html(t), r = a.linkify(n, "_blank", !0);
p++, d.push({
markup: r,
id: p
}), d.length > u && (d = _.takeRight(d, u)), m();
}
}, g = function() {
s && (s.stop(), s = null);
}, v = function() {
var e = {
follow: !0,
tailLines: u
};
(s = r.createStream(i, o, c.context, e)).start(), s.onMessage(f), s.onClose(function() {
s = null;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}(), angular.module("openshiftConsole").component("overviewNetworking", {
controllerAs: "networking",
bindings: {
rowServices: "<",
allServices: "<",
routesByService: "<"
},
templateUrl: "views/overview/_networking.html"
}), angular.module("openshiftConsole").component("overviewPipelines", {
controllerAs: "overviewPipelines",
bindings: {
recentPipelines: "<"
},
<<<<<<< HEAD
templateUrl: "views/overview/_pipelines.html"
}), angular.module("openshiftConsole").component("overviewServiceBindings", {
controllerAs: "$ctrl",
=======
templateUrl: "views/overview/_notification-icon.html"
});
}(), function() {
angular.module("openshiftConsole").component("overviewBuilds", {
controller: [ "$filter", function(e) {
var t, n = e("canI");
this.$onInit = function() {
t = n("builds/log", "get");
}, this.showLogs = function(e) {
if (this.hideLog) return !1;
if (!t) return !1;
if (!_.get(e, "status.startTimestamp")) return !1;
if ("Complete" !== _.get(e, "status.phase")) return !0;
var n = _.get(e, "status.completionTimestamp");
if (!n) return !1;
var r = moment().subtract(3, "m");
return moment(n).isAfter(r);
};
} ],
controllerAs: "overviewBuilds",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
bindings: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Updates to service instance page, show failed bindings
sectionTitle: "@",
namespace: "<",
refApiObject: "<",
<<<<<<< HEAD
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
namespace: "<",
>>>>>>> Add bindings list to resource pages
=======
>>>>>>> Fix to correctly show binding name in bindings list
bindings: "<",
bindableServiceInstances: "<",
serviceClasses: "<",
serviceInstances: "<",
<<<<<<< HEAD
<<<<<<< HEAD
createBinding: "&"
},
<<<<<<< HEAD
templateUrl: "views/overview/_service-bindings.html"
}), angular.module("openshiftConsole").directive("istagSelect", [ "APIService", "DataService", "ProjectsService", function(e, t, n) {
var r = e.getPreferredVersion("imagestreams");
=======
secrets: "<",
=======
>>>>>>> Add bindings list to resource pages
createBinding: "&"
},
templateUrl: "views/overview/_service-bindings.html"
<<<<<<< HEAD
<<<<<<< HEAD
}), function() {
angular.module("openshiftConsole").component("overviewServiceBinding", {
controller: [ function() {
var e = this, t = function() {
var t = _.get(e.binding, "spec.instanceRef.name"), n = _.get(e.serviceInstances, [ t ]), a = _.get(n, "spec.serviceClassName");
e.serviceClass = _.get(e.serviceClasses, [ a ]);
=======
templateUrl: "views/overview/_builds.html"
});
}(), function() {
angular.module("openshiftConsole").component("overviewListRow", {
controller: [ "$filter", "$uibModal", "APIService", "BuildsService", "CatalogService", "DeploymentsService", "ListRowUtils", "Navigate", "NotificationsService", function(e, t, n, r, a, o, i, s, c) {
var l = this;
_.extend(l, i.ui);
var u = e("canI"), d = e("deploymentIsInProgress"), m = e("isBinaryBuild"), p = e("enableTechPreviewFeature");
l.serviceBindingsVersion = n.getPreferredVersion("servicebindings");
var f = function(e) {
var t = _.get(e, "spec.triggers");
_.isEmpty(t) || (l.imageChangeTriggers = _.filter(t, function(e) {
return "ImageChange" === e.type && _.get(e, "imageChangeParams.automatic");
}));
}, g = function(e) {
e && !l.current && "DeploymentConfig" !== e.kind && "Deployment" !== e.kind && (l.current = e);
}, v = function(e) {
l.rgv = n.objectToResourceGroupVersion(e), g(e), f(e);
};
l.$onChanges = function(e) {
e.apiObject && v(e.apiObject.currentValue);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
this.$onChanges = function(e) {
(e.binding || e.serviceInstances || e.serviceClasses) && t();
};
<<<<<<< HEAD
} ],
controllerAs: "$ctrl",
bindings: {
namespace: "<",
binding: "<",
serviceClasses: "<",
serviceInstances: "<"
},
templateUrl: "views/overview/_service-binding.html"
});
<<<<<<< HEAD
}(), angular.module("openshiftConsole").directive("istagSelect", [ "DataService", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}(), angular.module("openshiftConsole").directive("istagSelect", [ "DataService", "ProjectsService", function(e, t) {
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
}), angular.module("openshiftConsole").directive("istagSelect", [ "DataService", "ProjectsService", function(e, t) {
>>>>>>> Updates for Service Instance & Bindings
=======
}), angular.module("openshiftConsole").directive("istagSelect", [ "APIService", "DataService", "ProjectsService", function(e, t, n) {
var a = e.getPreferredVersion("imagestreams");
>>>>>>> Update directive/istagSelect to use getPreferredVersion
return {
require: "^form",
restrict: "E",
scope: {
istag: "=model",
selectDisabled: "=",
selectRequired: "=",
includeSharedNamespace: "=",
<<<<<<< HEAD
allowCustomTag: "=",
appendToBody: "="
},
templateUrl: "views/directives/istag-select.html",
controller: [ "$scope", function(e) {
e.isByNamespace = {}, e.isNamesByNamespace = {};
var a = window.DMOS_OPENSHIFT_PROJECTNAMES.split(","), o = _.get(e, "istag.namespace") && _.get(e, "istag.imageStream") && _.get(e, "istag.tagObject.tag"), i = function(e) {
_.each(e, function(e) {
_.get(e, "status.tags") || _.set(e, "status.tags", []);
});
}, s = function(n) {
if (e.isByNamespace[n] = {}, e.isNamesByNamespace[n] = [], !_.includes(e.namespaces, n)) return e.namespaces.push(n), e.isNamesByNamespace[n] = e.isNamesByNamespace[n].concat(e.istag.imageStream), void (e.isByNamespace[n][e.istag.imageStream] = {
status: {
tags: [ {
tag: e.istag.tagObject.tag
} ]
=======
l.showBindings = a.SERVICE_CATALOG_ENABLED && p("pod_presets"), l.$doCheck = function() {
l.notifications = i.getNotifications(l.apiObject, l.state), l.hpa = y(l.apiObject), l.current && _.isEmpty(l.hpa) && (l.hpa = y(l.current));
var e = _.get(l, "apiObject.metadata.uid");
e && (l.services = _.get(l, [ "state", "servicesByObjectUID", e ]), l.buildConfigs = _.get(l, [ "state", "buildConfigsByObjectUID", e ]), l.bindings = _.get(l, [ "state", "bindingsByApplicationUID", e ]));
var t;
"DeploymentConfig" === _.get(l, "apiObject.kind") && (t = _.get(l, "apiObject.metadata.name"), l.pipelines = _.get(l, [ "state", "pipelinesByDeploymentConfig", t ]), l.recentBuilds = _.get(l, [ "state", "recentBuildsByDeploymentConfig", t ]), l.recentPipelines = _.get(l, [ "state", "recentPipelinesByDeploymentConfig", t ]));
}, l.getPods = function(e) {
var t = _.get(e, "metadata.uid");
return _.get(l, [ "state", "podsByOwnerUID", t ]);
}, l.firstPod = function(e) {
var t = l.getPods(e);
return _.find(t);
}, l.isScalable = function() {
return !!_.isEmpty(l.hpa) && !l.isDeploymentInProgress();
}, l.isDeploymentInProgress = function() {
return !(!l.current || !l.previous) || d(l.current);
}, l.canIDoAny = function() {
var e = _.get(l, "apiObject.kind"), t = _.get(l, "apiObject.metadata.uid"), n = _.get(l.state.deleteableBindingsByApplicationUID, t);
switch (e) {
case "DeploymentConfig":
return !!u("deploymentconfigs/instantiate", "create") || !!u("deploymentconfigs", "update") || !(!l.current || !u("deploymentconfigs/log", "get")) || !(!p("pod_presets") || _.isEmpty(l.state.bindableServiceInstances) || !u(l.serviceBindingsVersion, "create")) || !(!p("pod_presets") || _.isEmpty(n) || !u(l.serviceBindingsVersion, "delete")) || l.showStartPipelineAction() || l.showStartBuildAction();

case "Pod":
return !!u("pods/log", "get") || !!u("pods", "update");

default:
return !((!l.firstPod(l.current) || !u("pods/log", "get")) && !u(l.rgv, "update") && (!p("pod_presets") || _.isEmpty(l.state.bindableServiceInstances) || !u(l.serviceBindingsVersion, "create")) && (!p("pod_presets") || _.isEmpty(n) || !u(l.serviceBindingsVersion, "delete")));
}
}, l.showStartBuildAction = function() {
if (!_.isEmpty(l.pipelines)) return !1;
if (!u("buildconfigs/instantiate", "create")) return !1;
if (1 !== _.size(l.buildConfigs)) return !1;
var e = _.head(l.buildConfigs);
return !m(e);
}, l.showStartPipelineAction = function() {
return u("buildconfigs/instantiate", "create") && 1 === _.size(l.pipelines);
}, l.startBuild = r.startBuild, l.canDeploy = function() {
return !(!l.apiObject || l.apiObject.metadata.deletionTimestamp || l.deploymentInProgress || l.apiObject.spec.paused);
}, l.isPaused = function() {
return l.apiObject.spec.paused;
}, l.startDeployment = function() {
o.startLatestDeployment(l.apiObject, {
namespace: l.apiObject.metadata.namespace
});
}, l.cancelDeployment = function() {
var e = l.current;
if (e) {
var n, r = e.metadata.name, a = _.get(l, "apiObject.status.latestVersion");
n = 1 === a ? "This will attempt to stop the in-progress deployment. It may take some time to complete." : "This will attempt to stop the in-progress deployment and rollback to the last successful deployment. It may take some time to complete.", t.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
message: "Cancel deployment " + r + "?",
details: n,
okButtonText: "Yes, cancel",
okButtonClass: "btn-danger",
cancelButtonText: "No, don't cancel"
};
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
});
t.list(r, {
namespace: n
}, function(t) {
var r = angular.copy(t.by("metadata.name"));
i(r), e.isByNamespace[n] = r, e.isNamesByNamespace[n] = _.keys(r).sort(), _.includes(e.isNamesByNamespace[n], e.istag.imageStream) || (e.isNamesByNamespace[n] = e.isNamesByNamespace[n].concat(e.istag.imageStream), e.isByNamespace[n][e.istag.imageStream] = {
status: {
tags: {}
}
<<<<<<< HEAD
}), _.find(e.isByNamespace[n][e.istag.imageStream].status.tags, {
tag: e.istag.tagObject.tag
}) || e.isByNamespace[n][e.istag.imageStream].status.tags.push({
tag: e.istag.tagObject.tag
});
});
<<<<<<< HEAD
=======
}, s.importFile = function() {
e.$broadcast("importFileFromYAMLOrJSON");
}, s.instantiateTemplate = function() {
e.$broadcast("instantiateTemplate");
}, e.$on("fileImportedFromYAMLOrJSON", function(e, n) {
s.selectedProject = n.project, s.template = n.template, s.iconClass = o(), s.image = i(), s.vendor = c(n.template, "openshift.io/provider-display-name"), s.docUrl = c(s.template, "openshift.io/documentation-url"), s.supportUrl = c(s.template, "openshift.io/support-url"), s.actionLabel = "imported", n.isList ? (s.kind = null, s.name = "YAML / JSON") : n.resource && (s.kind = n.resource.kind, s.name = n.resource.metadata.name), t(function() {
s.currentStep = s.template ? "Template Configuration" : "Results";
}, 0);
}), e.$on("templateInstantiated", function(e, t) {
s.selectedProject = t.project, s.name = a("displayName")(s.template), s.actionLabel = null, s.kind = null, s.currentStep = "Results";
}), s.close = function() {
s.template = null;
var e = s.onDialogClosed();
return _.isFunction(e) && e(), s.wizardDone = !1, !0;
}, s.stepChanged = function(e) {
s.currentStep = e.title, "results" === e.stepId ? (s.nextButtonTitle = "Close", s.wizardDone = !0) : s.nextButtonTitle = "Create";
}, s.currentStep = "YAML / JSON", s.nextCallback = function(e) {
return "file" === e.stepId ? (s.importFile(), !1) : "template" === e.stepId ? (s.instantiateTemplate(), !1) : "results" !== e.stepId || (s.close(), !1);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}).result.then(function() {
e.metadata.uid === l.current.metadata.uid ? (e = l.current, d(e) ? o.cancelRunningDeployment(e, {
namespace: e.metadata.namespace
}) : c.addNotification({
type: "error",
message: "Deployment " + r + " is no longer in progress."
})) : c.addNotification({
type: "error",
message: "Deployment #" + a + " is no longer the latest."
});
});
}
}, l.urlForImageChangeTrigger = function(t) {
var n = e("stripTag")(_.get(t, "imageChangeParams.from.name")), r = _.get(l, "apiObject.metadata.namespace"), a = _.get(t, "imageChangeParams.from.namespace", r);
return s.resourceURL(n, "ImageStream", a);
}, l.navigateToPods = function() {
var e = l.getPods(l.current);
_.isEmpty(e) || s.toPodsForDeployment(l.current, e);
}, l.closeOverlayPanel = function() {
_.set(l, "overlay.panelVisible", !1);
}, l.showOverlayPanel = function(e, t) {
_.set(l, "overlay.panelVisible", !0), _.set(l, "overlay.panelName", e), _.set(l, "overlay.state", t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
n.list().then(function(n) {
e.namespaces = _.keys(n.by("metadata.name")), e.includeSharedNamespace && (e.namespaces = _.uniq([ "openshift" ].concat(e.namespaces))), e.namespaces = e.namespaces.filter(function(e) {
return a.indexOf(e) < 0;
}), e.namespaces = e.namespaces.sort(), e.$watch("istag.namespace", function(n) {
if (n && !e.isByNamespace[n]) return o ? (s(n), void (o = !1)) : void t.list(r, {
namespace: n
}, function(t) {
var r = angular.copy(t.by("metadata.name"));
i(r), e.isByNamespace[n] = r, e.isNamesByNamespace[n] = _.keys(r).sort();
=======
allowCustomTag: "="
},
templateUrl: "views/directives/istag-select.html",
controller: [ "$scope", function(e) {
e.isByNamespace = {}, e.isNamesByNamespace = {};
var r = _.get(e, "istag.namespace") && _.get(e, "istag.imageStream") && _.get(e, "istag.tagObject.tag"), o = function(e) {
_.each(e, function(e) {
_.get(e, "status.tags") || _.set(e, "status.tags", []);
});
<<<<<<< HEAD
<<<<<<< HEAD
}, o = function(t) {
if (n.isByNamespace[t] = {}, n.isNamesByNamespace[t] = [], !_.includes(n.namespaces, t)) return n.namespaces.push(t), n.isNamesByNamespace[t] = n.isNamesByNamespace[t].concat(n.istag.imageStream), void (n.isByNamespace[t][n.istag.imageStream] = {
status: {
tags: [ {
tag: n.istag.tagObject.tag
} ]
}
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
e.list("imagestreams", {
namespace: t
}, function(e) {
var a = angular.copy(e.by("metadata.name"));
r(a), n.isByNamespace[t] = a, n.isNamesByNamespace[t] = _.keys(a).sort(), _.includes(n.isNamesByNamespace[t], n.istag.imageStream) || (n.isNamesByNamespace[t] = n.isNamesByNamespace[t].concat(n.istag.imageStream), n.isByNamespace[t][n.istag.imageStream] = {
status: {
tags: {}
}
<<<<<<< HEAD
}), _.find(n.isByNamespace[t][n.istag.imageStream].status.tags, {
tag: n.istag.tagObject.tag
}) || n.isByNamespace[t][n.istag.imageStream].status.tags.push({
tag: n.istag.tagObject.tag
=======
var r = this;
r.showParamsTable = !1, r.actionLabel = r.actionLabel || "created";
var o = e.getTemplateData();
r.parameters = o.params, r.templateMessage = o.message, e.clearTemplateData();
var i = function(e) {
var t = _.get(r, "createdBuildConfig.spec.triggers", []);
return _.some(t, {
type: e
>>>>>>> Bug 1505281 - Improve import YAML results message
});
<<<<<<< HEAD
}), e.getTags = function(t) {
e.allowCustomTag && t && !_.find(e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags, {
tag: t
}) && (_.remove(e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags, function(e) {
return !e.items;
}), e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags.unshift({
tag: t
}));
}, e.groupTags = function(t) {
return e.allowCustomTag ? t.items ? "Current Tags" : "New Tag" : "";
};
} ]
=======
}(), function() {
angular.module("openshiftConsole").component("serviceInstanceRow", {
controller: [ "$filter", "APIService", "AuthorizationService", "BindingService", "ListRowUtils", "ServiceInstancesService", function(e, t, n, r, a, o) {
var i = this, s = e("isBindingFailed"), c = e("isBindingReady"), l = e("serviceInstanceFailedMessage"), u = e("truncate");
_.extend(i, a.ui);
var d = e("serviceInstanceDisplayName");
i.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), i.serviceInstancesVersion = t.getPreferredVersion("serviceinstances");
var m = function() {
var e = o.getServiceClassNameForInstance(i.apiObject);
return _.get(i, [ "state", "serviceClasses", e ]);
}, p = function() {
var e = o.getServicePlanNameForInstance(i.apiObject);
return _.get(i, [ "state", "servicePlans", e ]);
}, f = function() {
_.get(i.apiObject, "metadata.deletionTimestamp") ? i.instanceStatus = "deleted" : s(i.apiObject) ? i.instanceStatus = "failed" : c(i.apiObject) ? i.instanceStatus = "ready" : i.instanceStatus = "pending";
};
i.$doCheck = function() {
f(), i.notifications = a.getNotifications(i.apiObject, i.state), i.serviceClass = m(), i.servicePlan = p(), i.displayName = d(i.apiObject, i.serviceClass), i.isBindable = r.isServiceBindable(i.apiObject, i.serviceClass, i.servicePlan);
}, i.$onChanges = function(e) {
e.bindings && (i.deleteableBindings = _.reject(i.bindings, "metadata.deletionTimestamp"));
}, i.getSecretForBinding = function(e) {
return e && _.get(i, [ "state", "secrets", e.spec.secretName ]);
}, i.actionsDropdownVisible = function() {
return !(_.get(i.apiObject, "metadata.deletionTimestamp") || (!i.isBindable || !n.canI(i.serviceBindingsVersion, "create")) && (_.isEmpty(i.deleteableBindings) || !n.canI(i.serviceBindingsVersion, "delete")) && !n.canI(i.serviceInstancesVersion, "delete"));
}, i.closeOverlayPanel = function() {
_.set(i, "overlay.panelVisible", !1);
}, i.showOverlayPanel = function(e, t) {
_.set(i, "overlay.panelVisible", !0), _.set(i, "overlay.panelName", e), _.set(i, "overlay.state", t);
}, i.getFailedTooltipText = function() {
var e = l(i.apiObject);
if (!e) return "";
var t = u(e, 128);
return e.length !== t.length && (t += "..."), t;
}, i.deprovision = function() {
o.deprovision(i.apiObject, i.deleteableBindings);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("deployImage", [ "$filter", "$q", "$window", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "ImagesService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "TaskList", "SecretsService", "keyValueEditorUtils", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, g, f, v) {
var h = a.getPreferredVersion("imagestreamimages"), y = a.getPreferredVersion("configmaps"), b = a.getPreferredVersion("secrets");
=======
} ],
bindings: {
project: "<",
projectName: "<",
loginBaseUrl: "<",
fromSampleRepo: "<",
createdBuildConfig: "<",
onContinue: "<",
showProjectName: "<",
kind: "<?",
name: "<",
actionLabel: "<?"
},
templateUrl: "views/directives/next-steps.html"
});
}(), angular.module("openshiftConsole").directive("imageNames", [ "$filter", "PodsService", function(e, t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
return {
restrict: "E",
scope: {
project: "=",
isDialog: "="
},
templateUrl: "views/directives/deploy-image.html",
controller: [ "$scope", function(e) {
<<<<<<< HEAD
e.forms = {}, e.noProjectsCantCreate = !1, e.input = {
selectedProject: e.project
}, e.$watch("input.selectedProject.metadata.name", function() {
e.projectNameTaken = !1;
});
=======
e.forms = {}, e.noProjectsCantCreate = !1;
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
} ],
link: function(n) {
function a() {
var e = g.mapEntries(g.compactEntries(n.labels));
return s.getResources({
name: n.app.name,
image: n.import.name,
namespace: n.import.namespace,
tag: n.import.tag || "latest",
ports: n.ports,
volumes: n.volumes,
env: g.compactEntries(n.env),
labels: e
});
}
n.mode = "istag", n.istag = {}, n.app = {}, n.env = [], n.labels = [ {
name: "app",
value: ""
<<<<<<< HEAD
<<<<<<< HEAD
} ], n.$on("no-projects-cannot-create", function() {
n.noProjectsCantCreate = !0;
});
var p = e("orderByDisplayName"), S = e("getErrorDetails"), C = {}, w = function() {
l.hideNotification("deploy-image-list-config-maps-error"), l.hideNotification("deploy-image-list-secrets-error"), _.each(C, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || l.hideNotification(e.id);
=======
} ];
=======
} ], n.$on("no-projects-cannot-create", function() {
n.noProjectsCantCreate = !0;
});
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
var f = e("orderByDisplayName"), g = e("getErrorDetails"), v = {}, h = function() {
c.hideNotification("deploy-image-list-config-maps-error"), c.hideNotification("deploy-image-list-secrets-error"), _.each(v, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
>>>>>>> Patternfly vertical navigation and project bar
});
};
n.valueFromNamespace = {};
var P = function() {
if (_.has(n.input.selectedProject, "metadata.uid")) return t.when(n.input.selectedProject);
<<<<<<< HEAD
var r = n.input.selectedProject.metadata.name, a = n.input.selectedProject.metadata.annotations["new-display-name"], o = e("description")(n.input.selectedProject);
return u.create(r, a, o);
}, j = e("stripTag"), k = e("stripSHA"), I = e("humanizeKind"), R = function(e) {
=======
var a = n.input.selectedProject.metadata.name, r = n.input.selectedProject.metadata.annotations["new-display-name"], o = e("description")(n.input.selectedProject);
return l.create(a, r, o);
<<<<<<< HEAD
}, b = e("stripTag"), S = e("stripSHA"), C = e("humanizeKind"), w = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, b = e("stripTag"), C = e("stripSHA"), S = e("humanizeKind"), w = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
return e.length > 24 ? e.substring(0, 24) : e;
}, T = function() {
var e = _.last(n.import.name.split("/"));
<<<<<<< HEAD
<<<<<<< HEAD
return e = k(e), e = j(e), e = R(e);
=======
return e = S(e), e = b(e), e = w(e);
>>>>>>> Service instance details configuration and edit
=======
return e = C(e), e = b(e), e = w(e);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
};
n.findImage = function() {
n.loading = !0, s.findImage(n.imageName, {
namespace: n.input.selectedProject.metadata.name
}).then(function(e) {
if (n.import = e, n.loading = !1, "Success" === _.get(e, "result.status")) {
n.forms.imageSelection.imageName.$setValidity("imageLoaded", !0);
var t = n.import.image;
t && (n.app.name = T(), n.runsAsRoot = s.runsAsRoot(t), n.ports = o.parsePorts(t), n.volumes = s.getVolumes(t), n.createImageStream = !0);
} else n.import.error = _.get(e, "result.message", "An error occurred finding the image.");
}, function(t) {
n.import = {
error: e("getErrorDetails")(t) || "An error occurred finding the image."
}, n.loading = !1;
});
}, n.$watch("app.name", function(e, t) {
n.nameTaken = !1;
var r = _.find(n.labels, {
name: "app"
});
!r || r.value && r.value !== t || (r.value = e);
}), n.$watch("mode", function(e, t) {
e !== t && (delete n.import, n.istag = {}, "dockerImage" === e ? n.forms.imageSelection.imageName.$setValidity("imageLoaded", !1) : n.forms.imageSelection.imageName.$setValidity("imageLoaded", !0));
}), n.$watch("imageName", function() {
"dockerImage" === n.mode && n.forms.imageSelection.imageName.$setValidity("imageLoaded", !1);
}), n.$watch("istag", function(t, r) {
if (t !== r) if (t.namespace && t.imageStream && t.tagObject) {
var a, c = _.get(t, "tagObject.items[0].image");
n.app.name = R(t.imageStream), n.import = {
name: t.imageStream,
tag: t.tagObject.tag,
namespace: t.namespace
}, c && (a = t.imageStream + "@" + c, n.loading = !0, i.get(h, a, {
namespace: t.namespace
}).then(function(e) {
n.loading = !1, n.import.image = e.image, n.ports = o.parsePorts(e.image), n.volumes = s.getVolumes(e.image), n.runsAsRoot = !1;
}, function(t) {
n.import.error = e("getErrorDetails")(t) || "An error occurred.", n.loading = !1;
}));
} else delete n.import;
}, !0), n.$watch("input.selectedProject", function(e) {
if (n.env = _.reject(n.env, "valueFrom"), _.get(e, "metadata.uid")) {
if (!n.valueFromNamespace[e.metadata.name]) {
var t = [], r = [];
i.list(y, {
namespace: n.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
<<<<<<< HEAD
}).then(function(a) {
t = p(a.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = t.concat(r);
=======
}).then(function(r) {
t = f(r.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = t.concat(a);
>>>>>>> Patternfly vertical navigation and project bar
}, function(e) {
403 !== e.code && l.addNotification({
id: "deploy-image-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
<<<<<<< HEAD
details: S(e)
=======
details: g(e)
>>>>>>> Patternfly vertical navigation and project bar
});
}), i.list(b, {
namespace: n.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
<<<<<<< HEAD
}).then(function(a) {
r = p(a.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = r.concat(t);
=======
}).then(function(r) {
a = f(r.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = a.concat(t);
>>>>>>> Patternfly vertical navigation and project bar
}, function(e) {
403 !== e.code && l.addNotification({
id: "deploy-image-list-secrets-error",
type: "error",
message: "Could not load secrets.",
<<<<<<< HEAD
details: S(e)
=======
details: g(e)
>>>>>>> Patternfly vertical navigation and project bar
});
<<<<<<< HEAD
=======
}(), angular.module("openshiftConsole").component("overviewNetworking", {
controllerAs: "networking",
bindings: {
rowServices: "<",
allServices: "<",
routesByService: "<"
},
templateUrl: "views/overview/_networking.html"
}), angular.module("openshiftConsole").component("overviewPipelines", {
controllerAs: "overviewPipelines",
bindings: {
recentPipelines: "<"
},
templateUrl: "views/overview/_pipelines.html"
}), angular.module("openshiftConsole").component("overviewServiceBindings", {
controllerAs: "$ctrl",
bindings: {
sectionTitle: "@",
namespace: "<",
refApiObject: "<",
bindings: "<",
bindableServiceInstances: "<",
serviceClasses: "<",
serviceInstances: "<",
createBinding: "&"
},
templateUrl: "views/overview/_service-bindings.html"
}), angular.module("openshiftConsole").directive("istagSelect", [ "APIService", "DataService", "ProjectsService", function(e, t, n) {
var r = e.getPreferredVersion("imagestreams");
return {
require: "^form",
restrict: "E",
scope: {
istag: "=model",
selectDisabled: "=",
selectRequired: "=",
includeSharedNamespace: "=",
allowCustomTag: "="
},
templateUrl: "views/directives/istag-select.html",
controller: [ "$scope", function(e) {
e.isByNamespace = {}, e.isNamesByNamespace = {};
var a = _.get(e, "istag.namespace") && _.get(e, "istag.imageStream") && _.get(e, "istag.tagObject.tag"), o = function(e) {
_.each(e, function(e) {
_.get(e, "status.tags") || _.set(e, "status.tags", []);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
} else n.mode = "istag";
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var E, N = e("displayName"), D = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + N(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + N(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + N(n.input.selectedProject)
=======
var P, j = e("displayName"), R = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + j(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + j(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + j(n.input.selectedProject)
>>>>>>> Service instance details configuration and edit
=======
var j, P = e("displayName"), R = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + P(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + P(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + P(n.input.selectedProject)
>>>>>>> Add product icons for service catalog
=======
var P, j = e("displayName"), R = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + j(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + j(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + j(n.input.selectedProject)
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var j, P = e("displayName"), R = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + P(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + P(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + P(n.input.selectedProject)
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
};
m.clear(), m.add(e, {}, n.input.selectedProject.metadata.name, function() {
var e = t.defer();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return i.batch(E, {
=======
return o.batch(P, {
>>>>>>> Service instance details configuration and edit
=======
return o.batch(j, {
>>>>>>> Add product icons for service catalog
=======
return o.batch(P, {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
return o.batch(j, {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
namespace: n.input.selectedProject.metadata.name
}).then(function(t) {
var r, a = !_.isEmpty(t.failure);
r = a ? (r = _.map(t.failure, function(e) {
return {
type: "error",
<<<<<<< HEAD
<<<<<<< HEAD
message: v.getString(f('Cannot create {{kind}} "{{name}}".') + " ", {
kind: I(e.object.kind).toLowerCase(),
name: e.object.metadata.name
}),
=======
message: "Cannot create " + C(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
>>>>>>> Service instance details configuration and edit
=======
message: "Cannot create " + S(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
details: e.data.message
};
})).concat(_.map(t.success, function(e) {
return {
type: "success",
<<<<<<< HEAD
<<<<<<< HEAD
message: v.getString(f('Created {{kind}} "{{name}}" successfully.') + " ", {
kind: I(e.kind).toLowerCase(),
name: e.metadata.name
})
=======
message: "Created " + C(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Service instance details configuration and edit
=======
message: "Created " + S(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
};
})) : [ {
type: "success",
message: v.getString(f("All resources for image {{name}} were created successfully."), {
name: n.app.name
})
} ], e.resolve({
alerts: r,
hasErrors: a
=======
}, i = function(n) {
if (e.isByNamespace[n] = {}, e.isNamesByNamespace[n] = [], !_.includes(e.namespaces, n)) return e.namespaces.push(n), e.isNamesByNamespace[n] = e.isNamesByNamespace[n].concat(e.istag.imageStream), void (e.isByNamespace[n][e.istag.imageStream] = {
status: {
tags: [ {
tag: e.istag.tagObject.tag
} ]
}
});
t.list(r, {
namespace: n
}, function(t) {
var r = angular.copy(t.by("metadata.name"));
o(r), e.isByNamespace[n] = r, e.isNamesByNamespace[n] = _.keys(r).sort(), _.includes(e.isNamesByNamespace[n], e.istag.imageStream) || (e.isNamesByNamespace[n] = e.isNamesByNamespace[n].concat(e.istag.imageStream), e.isByNamespace[n][e.istag.imageStream] = {
status: {
tags: {}
}
}), _.find(e.isByNamespace[n][e.istag.imageStream].status.tags, {
tag: e.istag.tagObject.tag
}) || e.isByNamespace[n][e.istag.imageStream].status.tags.push({
tag: e.istag.tagObject.tag
>>>>>>> Update directive/istagSelect to use getPreferredVersion
});
}), e.promise;
}), n.isDialog ? n.$emit("deployImageNewAppCreated", {
project: n.input.selectedProject,
appName: n.app.name
<<<<<<< HEAD
}) : c.toNextSteps(n.app.name, n.input.selectedProject.metadata.name);
}, A = function(e) {
r.open({
=======
});
=======
}) : s.toNextSteps(n.app.name, n.input.selectedProject.metadata.name);
}, I = function(e) {
a.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
message: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
}).result.then(R);
}, E = function(e) {
v = e.quotaAlerts || [];
var t = _.filter(v, {
type: "error"
});
n.nameTaken || t.length ? (n.disableInputs = !1, _.each(v, function(e) {
e.id = _.uniqueId("deploy-image-alert-"), c.addNotification(e);
})) : v.length ? (I(v), n.disableInputs = !1) : R();
};
n.create = function() {
n.disableInputs = !0, h(), y().then(function(e) {
n.input.selectedProject = e, j = m();
var t = r.ifResourcesDontExist(j, n.input.selectedProject.metadata.name), a = u.getLatestQuotaAlerts(j, {
namespace: n.input.selectedProject.metadata.name
}), o = function(e) {
return n.nameTaken = e.nameTaken, a;
>>>>>>> Add SVG icons
};
n.list().then(function(n) {
e.namespaces = _.keys(n.by("metadata.name")), e.includeSharedNamespace && (e.namespaces = _.uniq([ "openshift" ].concat(e.namespaces))), e.namespaces = e.namespaces.sort(), e.$watch("istag.namespace", function(n) {
if (n && !e.isByNamespace[n]) return a ? (i(n), void (a = !1)) : void t.list(r, {
namespace: n
}, function(t) {
var r = angular.copy(t.by("metadata.name"));
o(r), e.isByNamespace[n] = r, e.isNamesByNamespace[n] = _.keys(r).sort();
});
<<<<<<< HEAD
});
}), e.getTags = function(t) {
e.allowCustomTag && t && !_.find(e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags, {
tag: t
}) && (_.remove(e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags, function(e) {
return !e.items;
}), e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags.unshift({
tag: t
}));
}, e.groupTags = function(t) {
return e.allowCustomTag ? t.items ? "Current Tags" : "New Tag" : "";
};
} ]
};
} ]), angular.module("openshiftConsole").directive("deployImage", [ "$filter", "$q", "$window", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "ImagesService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "TaskList", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
var g = a.getPreferredVersion("imagestreamimages"), v = a.getPreferredVersion("configmaps"), h = a.getPreferredVersion("secrets");
return {
restrict: "E",
scope: {
project: "=",
isDialog: "="
},
templateUrl: "views/directives/deploy-image.html",
link: function(n) {
function a() {
var e = f.mapEntries(f.compactEntries(n.labels));
return s.getResources({
name: n.app.name,
image: n.import.name,
namespace: n.import.namespace,
tag: n.import.tag || "latest",
ports: n.ports,
volumes: n.volumes,
env: f.compactEntries(n.env),
labels: e
});
}
<<<<<<< HEAD
n.forms = {}, n.mode = "istag", n.istag = {}, n.app = {}, n.env = [], n.labels = [ {
=======
n.input = {
selectedProject: n.project
}, n.mode = "istag", n.istag = {}, n.app = {}, n.env = [], n.labels = [ {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
name: "app",
value: ""
<<<<<<< HEAD
} ];
var g = e("orderByDisplayName"), f = e("getErrorDetails"), h = {}, v = function() {
c.hideNotification("deploy-image-list-config-maps-error"), c.hideNotification("deploy-image-list-secrets-error"), _.each(h, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
=======
} ], n.$on("no-projects-cannot-create", function() {
n.noProjectsCantCreate = !0;
});
var p = e("orderByDisplayName"), y = e("getErrorDetails"), b = {}, S = function() {
l.hideNotification("deploy-image-list-config-maps-error"), l.hideNotification("deploy-image-list-secrets-error"), _.each(b, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || l.hideNotification(e.id);
>>>>>>> Update directives/deployImage to use getPreferredVersion
});
};
n.valueFromNamespace = {};
var C = function() {
if (_.has(n.input.selectedProject, "metadata.uid")) return t.when(n.input.selectedProject);
var r = n.input.selectedProject.metadata.name, a = n.input.selectedProject.metadata.annotations["new-display-name"], o = e("description")(n.input.selectedProject);
return u.create(r, a, o);
}, w = e("stripTag"), P = e("stripSHA"), k = e("humanizeKind"), j = function(e) {
return e.length > 24 ? e.substring(0, 24) : e;
}, I = function() {
var e = _.last(n.import.name.split("/"));
return e = P(e), e = w(e), e = j(e);
};
n.findImage = function() {
n.loading = !0, s.findImage(n.imageName, {
namespace: n.input.selectedProject.metadata.name
}).then(function(e) {
if (n.import = e, n.loading = !1, "Success" === _.get(e, "result.status")) {
n.forms.imageSelection.imageName.$setValidity("imageLoaded", !0);
var t = n.import.image;
t && (n.app.name = I(), n.runsAsRoot = s.runsAsRoot(t), n.ports = o.parsePorts(t), n.volumes = s.getVolumes(t), n.createImageStream = !0);
} else n.import.error = _.get(e, "result.message", "An error occurred finding the image.");
}, function(t) {
n.import.error = e("getErrorDetails")(t) || "An error occurred finding the image.", n.loading = !1;
});
}, n.$watch("app.name", function(e, t) {
n.nameTaken = !1;
var r = _.find(n.labels, {
name: "app"
});
!r || r.value && r.value !== t || (r.value = e);
}), n.$watch("mode", function(e, t) {
e !== t && (delete n.import, n.istag = {}, "dockerImage" === e ? n.forms.imageSelection.imageName.$setValidity("imageLoaded", !1) : n.forms.imageSelection.imageName.$setValidity("imageLoaded", !0));
<<<<<<< HEAD
}), n.$watch("istag", function(t, a) {
if (t !== a) if (t.namespace && t.imageStream && t.tagObject) {
var r, c = _.get(t, "tagObject.items[0].image");
=======
}), n.$watch("imageName", function() {
"dockerImage" === n.mode && n.forms.imageSelection.imageName.$setValidity("imageLoaded", !1);
}), n.$watch("istag", function(t, r) {
if (t !== r) if (t.namespace && t.imageStream && t.tagObject) {
var a, c = _.get(t, "tagObject.items[0].image");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.app.name = j(t.imageStream), n.import = {
name: t.imageStream,
tag: t.tagObject.tag,
namespace: t.namespace
}, c && (a = t.imageStream + "@" + c, n.loading = !0, i.get(g, a, {
namespace: t.namespace
}).then(function(e) {
n.loading = !1, n.import.image = e.image, n.ports = o.parsePorts(e.image), n.volumes = s.getVolumes(e.image), n.runsAsRoot = !1;
}, function(t) {
n.import.error = e("getErrorDetails")(t) || "An error occurred.", n.loading = !1;
}));
} else delete n.import;
}, !0), n.$watch("input.selectedProject", function(e) {
if (n.env = _.reject(n.env, "valueFrom"), _.get(e, "metadata.uid")) {
if (!n.valueFromNamespace[e.metadata.name]) {
var t = [], r = [];
i.list(v, {
namespace: n.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
<<<<<<< HEAD
}).then(function(r) {
<<<<<<< HEAD
t = g(r.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = t.concat(a);
}, function(e) {
403 !== e.code && c.addNotification({
id: "deploy-image-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: f(e)
=======
t = p(r.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = t.concat(a);
=======
}).then(function(a) {
t = p(a.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = t.concat(r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, function(e) {
403 !== e.status && l.addNotification({
id: "deploy-image-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: y(e)
>>>>>>> Update directives/deployImage to use getPreferredVersion
});
}), i.list(h, {
namespace: n.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
<<<<<<< HEAD
}).then(function(r) {
<<<<<<< HEAD
a = g(r.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = a.concat(t);
}, function(e) {
403 !== e.code && c.addNotification({
id: "deploy-image-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: f(e)
=======
a = p(r.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = a.concat(t);
=======
}).then(function(a) {
r = p(a.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = r.concat(t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, function(e) {
403 !== e.status && l.addNotification({
id: "deploy-image-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: y(e)
>>>>>>> Update directives/deployImage to use getPreferredVersion
});
});
}
} else n.mode = "istag";
});
var R, E = e("displayName"), T = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + E(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + E(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + E(n.input.selectedProject)
};
m.clear(), m.add(e, {}, n.input.selectedProject.metadata.name, function() {
var e = t.defer();
return i.batch(R, {
namespace: n.input.selectedProject.metadata.name
}).then(function(t) {
var r, a = !_.isEmpty(t.failure);
r = a ? (r = _.map(t.failure, function(e) {
return {
type: "error",
message: "Cannot create " + k(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
};
})).concat(_.map(t.success, function(e) {
return {
type: "success",
message: "Created " + k(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
};
})) : [ {
type: "success",
message: "All resources for image " + n.app.name + " were created successfully."
} ], e.resolve({
alerts: r,
hasErrors: a
});
<<<<<<< HEAD
}), e.promise;
}), n.isDialog ? n.$emit("deployImageNewAppCreated", {
project: n.input.selectedProject,
appName: n.app.name
}) : c.toNextSteps(n.app.name, n.input.selectedProject.metadata.name);
}, N = function(e) {
r.open({
animation: !0,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, l.cancelDeployment = function() {
var e = l.current;
if (e) {
var n, r = e.metadata.name, a = _.get(l, "apiObject.status.latestVersion");
n = 1 === a ? "This will attempt to stop the in-progress deployment. It may take some time to complete." : "This will attempt to stop the in-progress deployment and rollback to the last successful deployment. It may take some time to complete.", t.open({
>>>>>>> Update modals to align with PatternFly standard
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
<<<<<<< HEAD
alerts: e,
<<<<<<< HEAD
title: "Confirm Creation",
details: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
=======
title: "Cancel deployment " + r + "?",
details: n,
okButtonText: "Yes, cancel",
>>>>>>> Update modals to align with PatternFly standard
okButtonClass: "btn-danger",
cancelButtonText: "取消"
};
}
}
}).result.then(D);
}, $ = function(e) {
C = e.quotaAlerts || [];
var t = _.filter(C, {
type: "error"
});
n.nameTaken || t.length ? (n.disableInputs = !1, _.each(C, function(e) {
e.id = _.uniqueId("deploy-image-alert-"), l.addNotification(e);
})) : C.length ? (A(C), n.disableInputs = !1) : D();
};
n.create = function() {
n.disableInputs = !0, w(), P().then(function(e) {
n.input.selectedProject = e, E = a();
var t = o.ifResourcesDontExist(E, n.input.selectedProject.metadata.name), r = d.getLatestQuotaAlerts(E, {
namespace: n.input.selectedProject.metadata.name
}), i = function(e) {
return n.nameTaken = e.nameTaken, r;
};
t.then(i, i).then($, $);
}, function(e) {
n.disableInputs = !1, "AlreadyExists" === e.data.reason ? n.projectNameTaken = !0 : l.addNotification({
id: "deploy-image-create-project-error",
type: "error",
message: "An error occurred creating project.",
details: S(e)
});
<<<<<<< HEAD
=======
}(), angular.module("openshiftConsole").component("overviewNetworking", {
controllerAs: "networking",
bindings: {
rowServices: "<",
allServices: "<",
routesByService: "<"
},
templateUrl: "views/overview/_networking.html"
}), angular.module("openshiftConsole").component("overviewPipelines", {
controllerAs: "overviewPipelines",
bindings: {
recentPipelines: "<"
},
templateUrl: "views/overview/_pipelines.html"
}), angular.module("openshiftConsole").component("overviewServiceBindings", {
controllerAs: "$ctrl",
bindings: {
sectionTitle: "@",
namespace: "<",
refApiObject: "<",
bindings: "<",
bindableServiceInstances: "<",
serviceClasses: "<",
serviceInstances: "<",
createBinding: "&"
},
templateUrl: "views/overview/_service-bindings.html"
}), angular.module("openshiftConsole").directive("istagSelect", [ "APIService", "DataService", "ProjectsService", function(e, t, n) {
var r = e.getPreferredVersion("imagestreams");
return {
require: "^form",
restrict: "E",
scope: {
istag: "=model",
selectDisabled: "=",
selectRequired: "=",
includeSharedNamespace: "=",
allowCustomTag: "=",
appendToBody: "="
},
templateUrl: "views/directives/istag-select.html",
controller: [ "$scope", function(e) {
e.isByNamespace = {}, e.isNamesByNamespace = {};
var a = _.get(e, "istag.namespace") && _.get(e, "istag.imageStream") && _.get(e, "istag.tagObject.tag"), o = function(e) {
_.each(e, function(e) {
_.get(e, "status.tags") || _.set(e, "status.tags", []);
>>>>>>> Set append-to-body for ui-select so select menu isn't clipped on iphone5
});
}, n.$on("newAppFromDeployImage", n.create), n.$on("$destroy", w);
=======
message: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
<<<<<<< HEAD
}).result.then(I);
}, E = function(e) {
h = e.quotaAlerts || [];
var t = _.filter(h, {
type: "error"
});
n.nameTaken || t.length ? (n.disableInputs = !1, _.each(h, function(e) {
e.id = _.uniqueId("deploy-image-alert-"), c.addNotification(e);
<<<<<<< HEAD
})) : h.length ? (I(h), n.disableInputs = !1) : R();
=======
})) : v.length ? (R(v), n.disableInputs = !1) : I();
>>>>>>> Add search catalog in project context
};
n.create = function() {
<<<<<<< HEAD
n.disableInputs = !0, v(), y().then(function(e) {
n.input.selectedProject = e, j = m();
var t = r.ifResourcesDontExist(j, n.input.selectedProject.metadata.name), a = u.getLatestQuotaAlerts(j, {
=======
n.disableInputs = !0, h(), y().then(function(e) {
<<<<<<< HEAD
n.input.selectedProject = e, P = m();
var t = r.ifResourcesDontExist(P, n.input.selectedProject.metadata.name), a = u.getLatestQuotaAlerts(P, {
>>>>>>> Update template service broker flag name
=======
n.input.selectedProject = e, k = m();
var t = r.ifResourcesDontExist(k, n.input.selectedProject.metadata.name), a = u.getLatestQuotaAlerts(k, {
>>>>>>> Update pod controller to use getPreferredVersion
=======
}).result.then(T);
}, D = function(e) {
b = e.quotaAlerts || [];
var t = _.filter(b, {
type: "error"
});
n.nameTaken || t.length ? (n.disableInputs = !1, _.each(b, function(e) {
e.id = _.uniqueId("deploy-image-alert-"), l.addNotification(e);
})) : b.length ? (N(b), n.disableInputs = !1) : T();
};
n.create = function() {
n.disableInputs = !0, S(), C().then(function(e) {
<<<<<<< HEAD
n.input.selectedProject = e, R = r();
var t = o.ifResourcesDontExist(R, n.input.selectedProject.metadata.name), a = d.getLatestQuotaAlerts(R, {
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
n.input.selectedProject = e, R = a();
var t = o.ifResourcesDontExist(R, n.input.selectedProject.metadata.name), r = d.getLatestQuotaAlerts(R, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
namespace: n.input.selectedProject.metadata.name
}), i = function(e) {
return n.nameTaken = e.nameTaken, r;
};
t.then(i, i).then(D, D);
}, function(e) {
<<<<<<< HEAD
c.addNotification({
id: "deploy-image-create-project-error",
type: "error",
message: "An error occurred creating project",
details: g(e)
}), n.disableInputs = !1;
});
}, n.$on("newAppFromDeployImage", n.create), n.$on("$destroy", v);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, n.$on("newAppFromDeployImage", n.create), n.$on("$destroy", h);
>>>>>>> Add SVG icons
=======
n.disableInputs = !1, "AlreadyExists" === e.data.reason ? n.projectNameTaken = !0 : l.addNotification({
id: "deploy-image-create-project-error",
type: "error",
message: "An error occurred creating project.",
details: y(e)
});
});
}, n.$on("newAppFromDeployImage", n.create), n.$on("$destroy", S);
>>>>>>> Update directives/deployImage to use getPreferredVersion
}
};
} ]), angular.module("openshiftConsole").directive("selector", function() {
return {
restrict: "E",
scope: {
selector: "="
},
templateUrl: "views/directives/selector.html"
};
}), angular.module("openshiftConsole").directive("selectContainers", function() {
return {
restrict: "E",
scope: {
containers: "=ngModel",
template: "=podTemplate",
required: "=ngRequired",
helpText: "@?"
},
templateUrl: "views/directives/select-containers.html",
controller: [ "$scope", function(e) {
e.containers = e.containers || {}, e.$watch("containers", function(t) {
e.containerSelected = _.some(t, function(e) {
return e;
});
}, !0);
} ]
};
}), angular.module("openshiftConsole").directive("buildHooks", function() {
return {
restrict: "E",
templateUrl: "views/directives/build-hooks.html",
scope: {
build: "="
}
};
<<<<<<< HEAD
}), angular.module("openshiftConsole").directive("pauseRolloutsCheckbox", [ "APIService", function(e) {
return {
restrict: "E",
scope: {
deployment: "=",
disabled: "=ngDisabled",
alwaysVisible: "="
},
templateUrl: "views/directives/pause-rollouts-checkbox.html",
link: function(t) {
var n = function() {
if (!t.deployment) return !1;
var n = e.objectToResourceGroupVersion(t.deployment);
return "deploymentconfigs" === n.resource && !n.group;
};
t.$watch("deployment.spec.triggers", function(e) {
t.missingConfigChangeTrigger = n() && !_.some(e, {
type: "ConfigChange"
=======
n.valueFromNamespace = {};
var y = function() {
if (_.has(n.input.selectedProject, "metadata.uid")) return t.when(n.input.selectedProject);
<<<<<<< HEAD
var a = n.input.selectedProject.metadata.name, r = n.input.selectedProject.metadata.annotations["new-display-name"], o = e("description")(n.input.selectedProject);
return l.create(a, r, o);
}, b = e("stripTag"), S = e("stripSHA"), C = e("humanizeKind"), w = function(e) {
=======
var r = n.input.selectedProject.metadata.name, a = n.input.selectedProject.metadata.annotations["new-display-name"], o = e("description")(n.input.selectedProject);
return u.create(r, a, o);
}, w = e("stripTag"), P = e("stripSHA"), j = e("humanizeKind"), k = function(e) {
>>>>>>> Add Browse Catalog to Project context view.
return e.length > 24 ? e.substring(0, 24) : e;
}, k = function() {
var e = _.last(n.import.name.split("/"));
<<<<<<< HEAD
return e = S(e), e = b(e), e = w(e);
=======
return e = P(e), e = w(e), e = k(e);
>>>>>>> Add Browse Catalog to Project context view.
};
n.findImage = function() {
n.loading = !0, i.findImage(n.imageName, {
namespace: n.input.selectedProject.metadata.name
}).then(function(e) {
if (n.import = e, n.loading = !1, "Success" === _.get(e, "result.status")) {
n.forms.imageSelection.imageName.$setValidity("imageLoaded", !0);
var t = n.import.image;
t && (n.app.name = k(), n.runsAsRoot = i.runsAsRoot(t), n.ports = r.parsePorts(t), n.volumes = i.getVolumes(t), n.createImageStream = !0);
} else n.import.error = _.get(e, "result.message", "An error occurred finding the image.");
}, function(t) {
n.import = {
error: e("getErrorDetails")(t) || "An error occurred finding the image."
}, n.loading = !1;
});
}, n.$watch("app.name", function(e, t) {
n.nameTaken = !1;
var a = _.find(n.labels, {
name: "app"
>>>>>>> Fix for adding non-builder templates to a project
});
<<<<<<< HEAD
}, !0);
}
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").directive("keyValueEditor", [ "$routeParams", "$timeout", "$filter", "gettextCatalog", "keyValueEditorConfig", "keyValueEditorUtils", function(e, t, n, r, a, o) {
var i = n("humanizeKind"), s = n("canI"), c = 1e3;
=======
} ]), angular.module("openshiftConsole").directive("keyValueEditor", [ "$routeParams", "$timeout", "$filter", "keyValueEditorConfig", "keyValueEditorUtils", function(e, t, n, a, r) {
=======
} ]), angular.module("openshiftConsole").directive("keyValueEditor", [ "$routeParams", "$timeout", "$filter", "keyValueEditorConfig", "keyValueEditorUtils", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = n("humanizeKind"), i = n("canI"), s = 1e3;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "AE",
scope: {
keyMinlength: "@",
keyMaxlength: "@",
valueMinlength: "@",
valueMaxlength: "@",
entries: "=",
keyPlaceholder: "@",
valuePlaceholder: "@",
keyValidator: "@",
keyValidatorRegex: "=",
valueValidator: "@",
valueValidatorRegex: "=",
keyValidatorError: "@",
keyValidatorErrorTooltip: "@",
keyValidatorErrorTooltipIcon: "@",
valueValidatorError: "@",
valueValidatorErrorTooltip: "@",
valueValidatorErrorTooltipIcon: "@",
valueIconTooltip: "@",
valueFromSelectorOptions: "=",
cannotAdd: "=?",
cannotSort: "=?",
cannotDelete: "=?",
isReadonly: "=?",
isReadonlyValue: "=?",
isReadonlyKeys: "=?",
addRowLink: "@",
addRowWithSelectorsLink: "@",
showHeader: "=?",
allowEmptyKeys: "=?",
keyRequiredError: "@"
},
templateUrl: "views/directives/key-value-editor.html",
<<<<<<< HEAD
<<<<<<< HEAD
link: function(e, n, o) {
var s;
e.validation = {
key: e.keyValidator,
val: e.valueValidator
}, o.keyValidatorRegex && (e.validation.key = e.keyValidatorRegex), o.valueValidatorRegex && (e.validation.val = e.valueValidatorRegex), "grabFocus" in o && (e.grabFocus = !0, t(function() {
e.grabFocus = void 0;
})), "cannotAdd" in o && (e.cannotAdd = !0), "cannotDelete" in o && (e.cannotDeleteAny = !0), "isReadonly" in o && (e.isReadonlyAny = !0), "isReadonlyKeys" in o && (s = e.$watch("entries", function(t) {
t && (_.each(e.entries, function(e) {
e.isReadonlyKey = !0;
}), s());
})), "cannotSort" in o && (e.cannotSort = !0), "showHeader" in o && (e.showHeader = !0), "allowEmptyKeys" in o && (e.allowEmptyKeys = !0), e.groupByKind = function(e) {
return r.getString(i(e.kind));
=======
link: function(e, n, r) {
=======
link: function(e, n, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var i;
e.validation = {
key: e.keyValidator,
val: e.valueValidator
}, a.keyValidatorRegex && (e.validation.key = e.keyValidatorRegex), a.valueValidatorRegex && (e.validation.val = e.valueValidatorRegex), "grabFocus" in a && (e.grabFocus = !0, t(function() {
e.grabFocus = void 0;
})), "cannotAdd" in a && (e.cannotAdd = !0), "cannotDelete" in a && (e.cannotDeleteAny = !0), "isReadonly" in a && (e.isReadonlyAny = !0), "isReadonlyKeys" in a && (i = e.$watch("entries", function(t) {
t && (_.each(e.entries, function(e) {
e.isReadonlyKey = !0;
}), i());
})), "cannotSort" in a && (e.cannotSort = !0), "showHeader" in a && (e.showHeader = !0), "allowEmptyKeys" in a && (e.allowEmptyKeys = !0), e.groupByKind = function(e) {
return o(e.kind);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, e.valueFromObjectSelected = function(e, t) {
"ConfigMap" === t.kind ? (e.valueFrom.configMapKeyRef = {
name: t.metadata.name
}, delete e.valueFrom.secretKeyRef) : "Secret" === t.kind && (e.valueFrom.secretKeyRef = {
name: t.metadata.name
}, delete e.valueFrom.configMapKeyRef), delete e.valueFrom.key;
}, e.valueFromKeySelected = function(e, t) {
e.valueFrom.configMapKeyRef ? e.valueFrom.configMapKeyRef.key = t : e.valueFrom.secretKeyRef && (e.valueFrom.secretKeyRef.key = t);
}, angular.extend(e, {
<<<<<<< HEAD
<<<<<<< HEAD
keyMinlength: a.keyMinlength || o.keyMinlength,
keyMaxlength: a.keyMaxlength || o.keyMaxlength,
valueMinlength: a.valueMinlength || o.valueMinlength,
valueMaxlength: a.valueMaxlength || o.valueMaxlength,
keyValidator: a.keyValidator || o.keyValidator,
valueValidator: a.valueValidator || o.valueValidator,
keyValidatorError: a.keyValidatorError || o.keyValidatorError,
valueValidatorError: a.valueValidatorError || o.valueValidatorError,
keyRequiredError: a.keyRequiredError || o.keyRequiredError,
keyValidatorErrorTooltip: a.keyValidatorErrorTooltip || o.keyValidatorErrorTooltip,
keyValidatorErrorTooltipIcon: a.keyValidatorErrorTooltipIcon || o.keyValidatorErrorTooltipIcon,
valueValidatorErrorTooltip: a.valueValidatorErrorTooltip || o.valueValidatorErrorTooltip,
valueValidatorErrorTooltipIcon: a.valueValidatorErrorTooltipIcon || o.valueValidatorErrorTooltipIcon,
keyPlaceholder: a.keyPlaceholder || o.keyPlaceholder,
valuePlaceholder: a.valuePlaceholder || o.valuePlaceholder
=======
!r || r.value && r.value !== t || (r.value = e);
}), n.$watch("mode", function(e, t) {
e !== t && (delete n.import, n.istag = {}, "dockerImage" === e ? n.forms.imageSelection.imageName.$setValidity("imageLoaded", !1) : n.forms.imageSelection.imageName.$setValidity("imageLoaded", !0));
}), n.$watch("imageName", function() {
"dockerImage" === n.mode && n.forms.imageSelection.imageName.$setValidity("imageLoaded", !1);
}), n.$watch("istag", function(t, r) {
if (t !== r) if (t.namespace && t.imageStream && t.tagObject) {
var a, c = _.get(t, "tagObject.items[0].image");
n.app.name = k(t.imageStream), n.import = {
name: t.imageStream,
tag: t.tagObject.tag,
namespace: t.namespace
}, c && (a = t.imageStream + "@" + c, n.loading = !0, i.get(g, a, {
namespace: t.namespace
}).then(function(e) {
n.loading = !1, n.import.image = e.image, n.ports = o.parsePorts(e.image), n.volumes = s.getVolumes(e.image), n.runsAsRoot = !1;
}, function(t) {
n.import.error = e("getErrorDetails")(t) || "An error occurred.", n.loading = !1;
}));
} else delete n.import;
}, !0), n.$watch("input.selectedProject", function(e) {
if (n.env = _.reject(n.env, "valueFrom"), _.get(e, "metadata.uid")) {
if (!n.valueFromNamespace[e.metadata.name]) {
var t = [], r = [];
i.list(v, {
namespace: n.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
}).then(function(a) {
t = p(a.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = t.concat(r);
}, function(e) {
403 !== e.status && l.addNotification({
id: "deploy-image-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: y(e)
>>>>>>> Add Browse Catalog to Project context view.
});
},
controller: [ "$scope", function(t) {
var n = [], r = [], a = c++, i = s("secrets", "get"), l = s("configmaps", "get");
angular.extend(t, {
namespace: e.project,
unique: a,
forms: {},
placeholder: o.newEntry(),
setFocusKeyClass: "key-value-editor-set-focus-key-" + a,
setFocusValClass: "key-value-editor-set-focus-value-" + a,
uniqueForKey: o.uniqueForKey,
uniqueForValue: o.uniqueForValue,
=======
keyMinlength: a.keyMinlength || r.keyMinlength,
keyMaxlength: a.keyMaxlength || r.keyMaxlength,
valueMinlength: a.valueMinlength || r.valueMinlength,
valueMaxlength: a.valueMaxlength || r.valueMaxlength,
keyValidator: a.keyValidator || r.keyValidator,
valueValidator: a.valueValidator || r.valueValidator,
keyValidatorError: a.keyValidatorError || r.keyValidatorError,
valueValidatorError: a.valueValidatorError || r.valueValidatorError,
keyRequiredError: a.keyRequiredError || r.keyRequiredError,
keyValidatorErrorTooltip: a.keyValidatorErrorTooltip || r.keyValidatorErrorTooltip,
keyValidatorErrorTooltipIcon: a.keyValidatorErrorTooltipIcon || r.keyValidatorErrorTooltipIcon,
valueValidatorErrorTooltip: a.valueValidatorErrorTooltip || r.valueValidatorErrorTooltip,
valueValidatorErrorTooltipIcon: a.valueValidatorErrorTooltipIcon || r.valueValidatorErrorTooltipIcon,
keyPlaceholder: a.keyPlaceholder || r.keyPlaceholder,
valuePlaceholder: a.valuePlaceholder || r.valuePlaceholder
=======
keyMinlength: r.keyMinlength || a.keyMinlength,
keyMaxlength: r.keyMaxlength || a.keyMaxlength,
valueMinlength: r.valueMinlength || a.valueMinlength,
valueMaxlength: r.valueMaxlength || a.valueMaxlength,
keyValidator: r.keyValidator || a.keyValidator,
valueValidator: r.valueValidator || a.valueValidator,
keyValidatorError: r.keyValidatorError || a.keyValidatorError,
valueValidatorError: r.valueValidatorError || a.valueValidatorError,
keyRequiredError: r.keyRequiredError || a.keyRequiredError,
keyValidatorErrorTooltip: r.keyValidatorErrorTooltip || a.keyValidatorErrorTooltip,
keyValidatorErrorTooltipIcon: r.keyValidatorErrorTooltipIcon || a.keyValidatorErrorTooltipIcon,
valueValidatorErrorTooltip: r.valueValidatorErrorTooltip || a.valueValidatorErrorTooltip,
valueValidatorErrorTooltipIcon: r.valueValidatorErrorTooltipIcon || a.valueValidatorErrorTooltipIcon,
keyPlaceholder: r.keyPlaceholder || a.keyPlaceholder,
valuePlaceholder: r.valuePlaceholder || a.valuePlaceholder
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
},
controller: [ "$scope", function(t) {
var n = [], r = [], o = s++, c = i("secrets", "get"), l = i("configmaps", "get");
angular.extend(t, {
namespace: e.project,
unique: o,
forms: {},
placeholder: a.newEntry(),
setFocusKeyClass: "key-value-editor-set-focus-key-" + o,
setFocusValClass: "key-value-editor-set-focus-value-" + o,
<<<<<<< HEAD
uniqueForKey: r.uniqueForKey,
uniqueForValue: r.uniqueForValue,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
uniqueForKey: a.uniqueForKey,
uniqueForValue: a.uniqueForValue,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
dragControlListeners: {
accept: function(e, t) {
return console.log("accept?"), e.itemScope.sortableScope.$id === t.$id;
},
orderChanged: function() {
t.forms.keyValueEditor.$setDirty();
},
itemMoved: function(e) {
console.log("itemMoved"), console.log("event", e), console.log("source", e.source), console.log("dest", e.dest), e.source.itemScope.modelValue.status = e.dest.sortableScope.$parent.column.name, t.forms.keyValueEditor.$setDirty();
}
},
deleteEntry: function(e, n) {
<<<<<<< HEAD
<<<<<<< HEAD
t.entries.splice(e, n), !t.entries.length && t.addRowLink && o.addEntry(t.entries), t.forms.keyValueEditor.$setDirty();
},
isReadonlySome: function(e) {
return _.includes(n, e);
},
cannotDeleteSome: function(e) {
return _.includes(r, e);
},
onAddRow: function() {
o.addEntry(t.entries), o.setFocusOn("." + t.setFocusKeyClass);
},
onAddRowWithSelectors: function() {
o.addEntryWithSelectors(t.entries), o.setFocusOn("." + t.setFocusKeyClass);
},
isValueFromReadonly: function(e) {
return t.isReadonlyAny || e.isReadonlyValue || e.refType && !e.selectedValueFrom || _.isEmpty(t.valueFromSelectorOptions);
}
}), t.$watch("cannotDelete", function(e) {
angular.isArray(e) && (t.cannotDeleteAny = !1, r = e);
}), t.$watch("isReadonly", function(e) {
angular.isArray(e) && (t.isReadonlyAny = !1, n = e);
}), t.$watch("addRowLink", function(e) {
t.addRowLink = e || "Add row", t.entries && !t.entries.length && o.addEntry(t.entries);
}), t.$watch("entries", function(e) {
e && !e.length && o.addEntry(t.entries), _.each(t.entries, function(e) {
o.altTextForValueFrom(e, t.namespace), o.setEntryPerms(e, i, l);
}), o.findReferenceValueForEntries(e, t.valueFromSelectorOptions);
}), t.$watch("valueFromSelectorOptions", function() {
o.findReferenceValueForEntries(t.entries, t.valueFromSelectorOptions);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("confirmOnExit", [ "Logger", "gettext", "gettextCatalog", function(e, t, n) {
=======
t.entries.splice(e, n), !t.entries.length && t.addRowLink && r.addEntry(t.entries), t.forms.keyValueEditor.$setDirty();
=======
t.entries.splice(e, n), !t.entries.length && t.addRowLink && a.addEntry(t.entries), t.forms.keyValueEditor.$setDirty();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
isReadonlySome: function(e) {
return _.includes(n, e);
},
cannotDeleteSome: function(e) {
return _.includes(r, e);
},
onAddRow: function() {
a.addEntry(t.entries), a.setFocusOn("." + t.setFocusKeyClass);
},
onAddRowWithSelectors: function() {
a.addEntryWithSelectors(t.entries), a.setFocusOn("." + t.setFocusKeyClass);
},
isValueFromReadonly: function(e) {
return t.isReadonlyAny || e.isReadonlyValue || e.refType && !e.selectedValueFrom || _.isEmpty(t.valueFromSelectorOptions);
}
}), t.$watch("cannotDelete", function(e) {
angular.isArray(e) && (t.cannotDeleteAny = !1, r = e);
}), t.$watch("isReadonly", function(e) {
angular.isArray(e) && (t.isReadonlyAny = !1, n = e);
}), t.$watch("addRowLink", function(e) {
t.addRowLink = e || "Add row", t.entries && !t.entries.length && a.addEntry(t.entries);
}), t.$watch("entries", function(e) {
e && !e.length && a.addEntry(t.entries), _.each(t.entries, function(e) {
a.altTextForValueFrom(e, t.namespace), a.setEntryPerms(e, c, l);
}), a.findReferenceValueForEntries(e, t.valueFromSelectorOptions);
}), t.$watch("valueFromSelectorOptions", function() {
a.findReferenceValueForEntries(t.entries, t.valueFromSelectorOptions);
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]
=======
var k, j = e("displayName"), R = function() {
=======
var P, j = e("displayName"), R = function() {
>>>>>>> Bug 1505281 - Improve import YAML results message
var e = {
started: "Deploying image " + n.app.name + " to project " + j(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + j(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + j(n.input.selectedProject)
=======
var R, T = e("displayName"), E = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + T(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + T(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + T(n.input.selectedProject)
>>>>>>> Configurable inactivity timeout in console
=======
var R, E = e("displayName"), T = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + E(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + E(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + E(n.input.selectedProject)
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
var R, T = e("displayName"), E = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + T(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + T(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + T(n.input.selectedProject)
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
var R, E = e("displayName"), T = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + E(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + E(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + E(n.input.selectedProject)
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
};
d.clear(), d.add(e, {}, n.input.selectedProject.metadata.name, function() {
var e = t.defer();
return o.batch(P, {
namespace: n.input.selectedProject.metadata.name
}).then(function(t) {
var a, r = !_.isEmpty(t.failure);
a = r ? (a = _.map(t.failure, function(e) {
return {
type: "error",
<<<<<<< HEAD
message: "Cannot create " + C(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
=======
message: "Cannot create " + j(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
>>>>>>> Add Browse Catalog to Project context view.
details: e.data.message
>>>>>>> Fix for adding non-builder templates to a project
};
} ]), angular.module("openshiftConsole").directive("confirmOnExit", [ "Logger", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
<<<<<<< HEAD
scope: {
dirty: "=",
message: "="
},
<<<<<<< HEAD
link: function(r) {
if (!_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_CONFIRM_ON_EXIT") && !_.get(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED")) {
var a = function() {
return r.message || n.getString(t("You have unsaved changes. Leave this page anyway?"));
}, o = function() {
if (r.dirty) return a();
=======
type: "success",
<<<<<<< HEAD
message: "Created " + C(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
message: "Created " + j(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
>>>>>>> Add Browse Catalog to Project context view.
};
$(window).on("beforeunload", o);
var i = r.$on("$routeChangeStart", function(t) {
if (r.dirty) {
var n = new Date().getTime();
confirm(a()) || (new Date().getTime() - n < 50 ? (_.set(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED", !0), e.warn("Confirm on exit prompt appears to have been blocked by the browser.")) : t.preventDefault());
}
});
r.$on("$destroy", function() {
$(window).off("beforeunload", o), i && i();
});
<<<<<<< HEAD
=======
}), e.promise;
}), n.isDialog ? n.$emit("deployImageNewAppCreated", {
project: n.input.selectedProject,
appName: n.app.name
}) : c.toNextSteps(n.app.name, n.input.selectedProject.metadata.name);
}, N = function(e) {
r.open({
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
title: "Confirm Creation",
details: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
>>>>>>> Update modals to align with PatternFly standard
}
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
}).result.then(E);
=======
}).result.then(T);
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
}).result.then(E);
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
}).result.then(T);
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
}, D = function(e) {
b = e.quotaAlerts || [];
var t = _.filter(b, {
type: "error"
});
n.nameTaken || t.length ? (n.disableInputs = !1, _.each(b, function(e) {
e.id = _.uniqueId("deploy-image-alert-"), l.addNotification(e);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
})) : b.length ? (N(b), n.disableInputs = !1) : E();
>>>>>>> Configurable inactivity timeout in console
=======
})) : b.length ? (N(b), n.disableInputs = !1) : T();
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
})) : b.length ? (N(b), n.disableInputs = !1) : E();
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
})) : b.length ? (N(b), n.disableInputs = !1) : T();
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
};
<<<<<<< HEAD
} ]), function() {
angular.module("openshiftConsole").component("uiAceYaml", {
controller: [ "$scope", function(e) {
var t, n = this, r = function(e) {
return jsyaml.safeLoad(n.model, {
json: !e
});
}, a = function() {
t.getSession().clearAnnotations(), e.$evalAsync(function() {
n.annotations = {};
});
}, o = function(r, a) {
var o = t.getSession(), i = o.getLength(), s = _.get(r, "mark.line", 0), c = _.get(r, "mark.column", 0), l = r.message || "Could not parse content.";
s >= i && (s = i - 1);
var u = {
row: s,
column: c,
text: l,
type: a
=======
n.create = function() {
n.disableInputs = !0, h(), y().then(function(e) {
n.input.selectedProject = e, P = m();
var t = r.ifResourcesDontExist(P, n.input.selectedProject.metadata.name), a = u.getLatestQuotaAlerts(P, {
namespace: n.input.selectedProject.metadata.name
}), o = function(e) {
return n.nameTaken = e.nameTaken, a;
>>>>>>> Fix for adding non-builder templates to a project
};
o.setAnnotations([ u ]), e.$evalAsync(function() {
n.annotations = {}, n.annotations[a] = [ u ];
});
}, i = function(t) {
e.$evalAsync(function() {
n.form.$setValidity("yamlValid", t);
});
};
n.onFileAdded = function(e) {
n.model = e;
}, n.$onInit = function() {
n.resource && (n.model = jsyaml.safeDump(n.resource, {
sortKeys: !0
}));
}, n.aceChanged = function() {
try {
n.resource = r(!1), i(!0);
try {
r(!0), a();
} catch (e) {
o(e, "warning");
}
} catch (e) {
o(e, "error"), i(!1);
=======
link: function(t) {
if (!_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_CONFIRM_ON_EXIT") && !_.get(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED")) {
var n = function() {
return t.message || "You have unsaved changes. Leave this page anyway?";
}, r = function() {
if (t.dirty) return n();
};
$(window).on("beforeunload", r);
var a = t.$on("$routeChangeStart", function(r) {
if (t.dirty) {
<<<<<<< HEAD
var r = new Date().getTime();
confirm(n()) || (new Date().getTime() - r < 50 ? (_.set(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED", !0), e.warn("Confirm on exit prompt appears to have been blocked by the browser.")) : a.preventDefault());
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var a = new Date().getTime();
confirm(n()) || (new Date().getTime() - a < 50 ? (_.set(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED", !0), e.warn("Confirm on exit prompt appears to have been blocked by the browser.")) : r.preventDefault());
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}, n.aceLoaded = function(e) {
t = e;
var n = e.getSession();
n.setOption("tabSize", 2), n.setOption("useSoftTabs", !0), e.setDragDelay = 0;
}, n.gotoLine = function(e) {
t.gotoLine(e);
};
} ],
controllerAs: "$ctrl",
bindings: {
resource: "=",
ngRequired: "<?",
showFileInput: "<?"
},
templateUrl: "views/directives/ui-ace-yaml.html"
});
<<<<<<< HEAD
}(), angular.module("openshiftConsole").directive("affix", [ "$window", function(e) {
return {
restrict: "AE",
scope: {
offsetTop: "@",
offsetBottom: "@"
},
link: function(e, t, n, r) {
t.affix({
offset: {
top: n.offsetTop,
bottom: n.offsetBottom
}
=======
t.$on("$destroy", function() {
<<<<<<< HEAD
$(window).off("beforeunload", a), r && r();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
};
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentVariables", {
controller: [ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", function(e, t, n, r, a) {
var o, i, s, c, l = this, u = t.getPreferredVersion("configmaps"), d = t.getPreferredVersion("secrets"), m = !1, p = [], g = [], f = !1, v = e("canI"), h = e("getErrorDetails"), y = e("humanizeKind"), b = e("orderByDisplayName"), S = function(e, t) {
m || (l.form && !l.form.$pristine && l.updatedObject ? r.isEnvironmentEqual(e, t) ? l.updatedObject = r.mergeEdits(e, t) : (m = !0, a.addNotification({
type: "warning",
message: "The environment variables for the " + o + " have been updated in the background.",
details: "Saving your changes may create a conflict or cause loss of data."
})) : l.updatedObject = r.copyAndNormalize(e));
}, C = function() {
n.list(u, {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
p = b(e.by("metadata.name")), l.valueFromObjects = p.concat(g);
});
}, _ = function() {
v("secrets", "list") && n.list(d, {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
g = b(e.by("metadata.name")), l.valueFromObjects = p.concat(g);
});
}, w = function() {
f || (f = !0, C(), _());
}, P = function(e, n) {
o = y(e.kind), i = e.metadata.name, s = t.objectToResourceGroupVersion(e), l.canIUpdate = v(s, "update"), c ? c.finally(function() {
S(e, n);
}) : S(e, n), l.containers = r.getContainers(l.updatedObject), l.disableValueFrom || l.ngReadonly || !l.canIUpdate || w();
};
l.$onChanges = function(e) {
e.apiObject && e.apiObject.currentValue && P(e.apiObject.currentValue, e.apiObject.previousValue);
}, l.save = function() {
var e = "save-env-error-" + i;
a.hideNotification(e), r.compact(l.updatedObject), (c = n.update(s, i, l.updatedObject, {
namespace: l.updatedObject.metadata.namespace
})).then(function() {
a.addNotification({
type: "success",
message: "Environment variables for " + o + " " + i + " were successfully updated."
}), l.form.$setPristine();
}, function(t) {
a.addNotification({
id: e,
type: "error",
message: "An error occurred updating environment variables for " + o + " " + i + ".",
details: h(t)
});
}).finally(function() {
c = null;
});
}, l.clearChanges = function() {
l.updatedObject = r.copyAndNormalize(l.apiObject), l.form.$setPristine(), m = !1;
};
} ],
controllerAs: "$ctrl",
bindings: {
apiObject: "<",
ngReadonly: "<",
disableValueFrom: "<"
},
templateUrl: "views/directives/edit-environment-variables.html"
=======
$(window).off("beforeunload", r), a && a();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}(), angular.module("openshiftConsole").component("initContainersSummary", {
bindings: {
apiObject: "<"
},
templateUrl: "views/_init-containers-summary.html",
controller: [ "$filter", function(e) {
var t = this;
t.$onChanges = function(n) {
var r = _.get(n.apiObject, "currentValue");
if (r) switch (t.podTemplate = e("podTemplate")(r), r.kind) {
case "DeploymentConfig":
case "Deployment":
t.tab = "configuration";
break;

default:
t.tab = "details";
}
};
<<<<<<< HEAD
} ]
}), function() {
angular.module("openshiftConsole").component("notificationCounter", {
templateUrl: "views/directives/notifications/notification-counter.html",
bindings: {},
controller: [ "$filter", "$routeParams", "$rootScope", "Constants", function(e, t, n, r) {
var a = this, o = _.get(r, "DISABLE_GLOBAL_EVENT_WATCH"), i = e("isIE")();
a.hide = !0;
var s = [], c = [], l = function(e, t) {
e && c.push(n.$on("NotificationDrawerWrapper.count", t));
}, u = function() {
_.each(c, function(e) {
e && e();
}), c = [];
}, d = function() {
_.each(s, function(e) {
e();
}), s = [];
}, m = function(e) {
a.hide = !e;
};
a.onClick = function() {
n.$emit("NotificationDrawerWrapper.toggle");
};
var p = function(e, t) {
a.showUnreadNotificationsIndicator = !!t;
}, g = function(e, t) {
return _.get(e, "params.project") !== _.get(t, "params.project");
}, f = function() {
l(t.project, p), m(t.project);
}, v = function() {
f(), s.push(n.$on("$routeChangeSuccess", function(e, t, n) {
g(t, n) && f();
})), s.push(n.$on("NotificationDrawerWrapper.onMarkAllRead", function() {
a.showUnreadNotificationsIndicator = !1;
}));
};
a.$onInit = function() {
o || i ? a.hide = !0 : v();
}, a.$onDestroy = function() {
u(), d();
};
} ]
});
}(), function() {
angular.module("openshiftConsole").component("notificationDrawerWrapper", {
templateUrl: "views/directives/notifications/notification-drawer-wrapper.html",
controller: [ "$filter", "$interval", "$location", "$rootScope", "$routeParams", "$scope", "$timeout", "APIService", "Constants", "DataService", "gettext", "gettextCatalog", "EventsService", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
var p, g, f = s.getPreferredVersion("events"), v = s.getPreferredVersion("projects"), h = _.get(c, "DISABLE_GLOBAL_EVENT_WATCH"), y = e("isIE")(), b = this, S = [], C = {}, w = {}, P = {}, j = function(e) {
e || (b.drawerHidden = !0);
}, k = function(e, t) {
return _.get(e, "params.project") !== _.get(t, "params.project");
}, I = function(e) {
return l.get(v, e, {}, {
errorNotification: !1
}).then(function(e) {
return P[e.metadata.name] = e, e;
});
}, R = function(t, n) {
return {
heading: e("displayName")(P[t]),
project: P[t],
notifications: n
};
}, T = function(e) {
return _.filter(e, "unread");
}, E = function() {
_.each(b.notificationGroups, function(e) {
e.totalUnread = T(e.notifications).length, e.hasUnread = !!e.totalUnread, r.$emit("NotificationDrawerWrapper.onUnreadNotifications", e.totalUnread);
});
}, N = function(e) {
_.each(b.notificationGroups, function(t) {
_.remove(t.notifications, {
uid: e.uid,
namespace: e.namespace
});
});
}, D = function(e) {
w[a.project] && delete w[a.project][e.uid], C[a.project] && delete C[a.project][e.uid], N(e);
}, A = function() {
C[a.project] = {}, w[a.project] = {};
}, $ = function(e) {
return _.reduce(e, function(e, t) {
return e[t.metadata.uid] = {
actions: null,
uid: t.metadata.uid,
trackByID: t.metadata.uid,
unread: !m.isRead(t.metadata.uid),
type: t.type,
lastTimestamp: t.lastTimestamp,
firstTimestamp: t.firstTimestamp,
event: t
}, e;
}, {});
}, B = function(e) {
return _.reduce(e, function(e, t) {
return m.isImportantAPIEvent(t) && !m.isCleared(t.metadata.uid) && (e[t.metadata.uid] = t), e;
}, {});
}, L = function(e, t) {
var n = a.project;
return _.assign({}, e[n], t[n]);
}, x = function(e) {
return _.orderBy(e, [ "event.lastTimestamp", "event.metadata.resourceVersion" ], [ "desc", "desc" ]);
}, V = function() {
r.$evalAsync(function() {
b.notificationGroups = [ R(a.project, x(L(C, w))) ], E();
});
}, O = function() {
_.each(S, function(e) {
e();
}), S = [];
}, U = function() {
g && (l.unwatch(g), g = null);
}, F = function() {
p && p(), p = null;
}, M = function(e) {
C[a.project] = $(B(e.by("metadata.name"))), V();
}, q = function(e, t) {
var n = t.namespace || a.project, r = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !m.isCleared(r) && (w[n] = w[n] || {}, w[n][r] = {
actions: t.actions,
unread: !m.isRead(r),
trackByID: t.trackByID,
uid: r,
type: t.type,
lastTimestamp: t.timestamp,
message: t.message,
isHTML: t.isHTML,
details: t.details,
namespace: n,
links: t.links
}, V());
}, z = function(e, t) {
U(), e && (g = l.watch(f, {
namespace: e
}, _.debounce(t, 400), {
skipDigest: !0
}));
}, H = _.once(function(e, t) {
F(), p = r.$on("NotificationsService.onNotificationAdded", t);
}), G = function() {
I(a.project).then(function() {
z(a.project, M), H(a.project, q), j(a.project), V();
});
};
angular.extend(b, {
drawerHidden: !0,
allowExpand: !0,
drawerExpanded: "true" === localStorage.getItem("openshift/notification-drawer-expanded"),
drawerTitle: d.getString(u("Notifications")),
hasUnread: !1,
showClearAll: !0,
showMarkAllRead: !0,
onClose: function() {
b.drawerHidden = !0;
},
onMarkAllRead: function(e) {
_.each(e.notifications, function(e) {
e.unread = !1, m.markRead(e.uid);
}), V(), r.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
onClearAll: function(e) {
_.each(e.notifications, function(e) {
e.unread = !1, m.markRead(e.uid), m.markCleared(e.uid);
}), A(), V(), r.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
notificationGroups: [],
headingInclude: "views/directives/notifications/header.html",
notificationBodyInclude: "views/directives/notifications/notification-body.html",
customScope: {
clear: function(e, t, n) {
m.markRead(e.uid), m.markCleared(e.uid), n.notifications.splice(t, 1), D(e), V();
},
markRead: function(e) {
e.unread = !1, m.markRead(e.uid), V();
},
close: function() {
b.drawerHidden = !0;
},
onLinkClick: function(e) {
e.onClick(), b.drawerHidden = !0;
},
countUnreadNotifications: E
}
}), o.$watch("$ctrl.drawerExpanded", function(e) {
localStorage.setItem("openshift/notification-drawer-expanded", e ? "true" : "false");
});
var K = function() {
a.project && G(), S.push(r.$on("$routeChangeSuccess", function(e, t, n) {
k(t, n) && (b.customScope.projectName = a.project, G());
})), S.push(r.$on("NotificationDrawerWrapper.toggle", function() {
b.drawerHidden = !b.drawerHidden;
})), S.push(r.$on("NotificationDrawerWrapper.hide", function() {
b.drawerHidden = !0;
})), S.push(r.$on("NotificationDrawerWrapper.clear", function(e, t) {
m.markCleared(t.uid), D(t), E();
}));
};
b.$onInit = function() {
h || y || K();
}, b.$onDestroy = function() {
F(), U(), O();
};
} ]
});
}(), angular.module("openshiftConsole").filter("duration", [ "gettext", "gettextCatalog", function(e, t) {
return function(n, r, a, o) {
function i(e, t, n) {
0 !== e && (1 !== e ? l.push(e + " " + n) : a ? l.push(t) : l.push("1 " + t));
}
if (!n) return n;
o = o || 2, r = r || new Date();
var s = moment(r).diff(n);
s < 0 && (s = 0);
var c = moment.duration(s), l = [], u = c.years(), d = c.months(), m = c.days(), p = c.hours(), g = c.minutes(), f = c.seconds();
return i(u, t.getString(e("year")), t.getString(e("years"))), i(d, t.getString(e("month")), t.getString(e("months"))), i(m, t.getString(e("day")), t.getString(e("days"))), i(p, t.getString(e("hour")), t.getString(e("hours"))), i(g, t.getString(e("minute")), t.getString(e("minutes"))), i(f, t.getString(e("second")), t.getString(e("seconds"))), 1 === l.length && f && 1 === o ? a ? "minute" : "1 minute" : (0 === l.length && l.push("0 seconds"), l.length > o && (l.length = o), l.join(", "));
};
<<<<<<< HEAD
} ]).filter("ageLessThan", function() {
=======
} ]), angular.module("openshiftConsole").filter("duration", function() {
=======
} ]), function() {
angular.module("openshiftConsole").component("uiAceYaml", {
controller: [ "$scope", function(e) {
var t, n = this, r = function(e) {
return jsyaml.safeLoad(n.model, {
json: !e
});
}, a = function() {
t.getSession().clearAnnotations(), e.$evalAsync(function() {
n.annotations = {};
});
}, o = function(r, a) {
var o = t.getSession(), i = o.getLength(), s = _.get(r, "mark.line", 0), c = _.get(r, "mark.column", 0), l = r.message || "Could not parse content.";
s >= i && (s = i - 1);
var u = {
row: s,
column: c,
text: l,
type: a
};
o.setAnnotations([ u ]), e.$evalAsync(function() {
n.annotations = {}, n.annotations[a] = [ u ];
});
}, i = function(t) {
e.$evalAsync(function() {
n.form.$setValidity("yamlValid", t);
});
};
n.onFileAdded = function(e) {
n.model = e;
}, n.$onInit = function() {
n.resource && (n.model = jsyaml.safeDump(n.resource, {
sortKeys: !0
}));
}, n.aceChanged = function() {
try {
<<<<<<< HEAD
n.resource = a(!1), i(!0);
=======
s = r(!1), i(!0), e !== t && (n.resource = s);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
try {
r(!0), a();
} catch (e) {
o(e, "warning");
}
} catch (e) {
o(e, "error"), i(!1);
}
}, n.aceLoaded = function(e) {
t = e;
var n = e.getSession();
n.setOption("tabSize", 2), n.setOption("useSoftTabs", !0), e.setDragDelay = 0;
}, n.gotoLine = function(e) {
t.gotoLine(e);
};
} ],
controllerAs: "$ctrl",
bindings: {
resource: "=",
ngRequired: "<?",
showFileInput: "<?"
},
templateUrl: "views/directives/ui-ace-yaml.html"
});
<<<<<<< HEAD
}(), angular.module("openshiftConsole").filter("duration", function() {
>>>>>>> Improve YAML editor validation and feedback
=======
}(), angular.module("openshiftConsole").directive("affix", [ "$window", function(e) {
return {
restrict: "AE",
scope: {
offsetTop: "@",
offsetBottom: "@"
},
link: function(e, t, n, r) {
t.affix({
offset: {
top: n.offsetTop,
bottom: n.offsetBottom
}
});
}
};
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentVariables", {
<<<<<<< HEAD
controller: [ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", function(e, t, n, a, r) {
var o, i, s, c, l = this, u = !1, d = [], m = [], p = !1, f = e("canI"), g = e("getErrorDetails"), v = e("humanizeKind"), h = e("orderByDisplayName"), y = function(e, t) {
u || (l.form && !l.form.$pristine && l.updatedObject ? a.isEnvironmentEqual(e, t) ? l.updatedObject = a.mergeEdits(e, t) : (u = !0, r.addNotification({
=======
controller: [ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", function(e, t, n, r, a) {
var o, i, s, c, l = this, u = t.getPreferredVersion("configmaps"), d = t.getPreferredVersion("secrets"), m = !1, p = [], f = [], g = !1, v = e("canI"), h = e("getErrorDetails"), y = e("humanizeKind"), b = e("orderByDisplayName"), S = function(e, t) {
m || (l.form && !l.form.$pristine && l.updatedObject ? r.isEnvironmentEqual(e, t) ? l.updatedObject = r.mergeEdits(l.updatedObject, e) : (m = !0, a.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "warning",
message: "The environment variables for the " + o + " have been updated in the background.",
details: "Saving your changes may create a conflict or cause loss of data."
})) : l.updatedObject = r.copyAndNormalize(e));
}, C = function() {
n.list(u, {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
p = b(e.by("metadata.name")), l.valueFromObjects = p.concat(f);
});
}, _ = function() {
v("secrets", "list") && n.list(d, {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
f = b(e.by("metadata.name")), l.valueFromObjects = p.concat(f);
});
}, w = function() {
g || (g = !0, C(), _());
}, P = function(e, n) {
o = y(e.kind), i = e.metadata.name, s = t.objectToResourceGroupVersion(e), l.canIUpdate = v(s, "update"), c ? c.finally(function() {
S(e, n);
}) : S(e, n), l.containers = r.getContainers(l.updatedObject), l.disableValueFrom || l.ngReadonly || !l.canIUpdate || w();
};
l.$onChanges = function(e) {
e.apiObject && e.apiObject.currentValue && P(e.apiObject.currentValue, e.apiObject.previousValue);
}, l.save = function() {
var e = "save-env-error-" + i;
a.hideNotification(e), r.compact(l.updatedObject), (c = n.update(s, i, l.updatedObject, {
namespace: l.updatedObject.metadata.namespace
})).then(function() {
a.addNotification({
type: "success",
message: "Environment variables for " + o + " " + i + " were successfully updated."
}), l.form.$setPristine();
}, function(t) {
a.addNotification({
id: e,
type: "error",
message: "An error occurred updating environment variables for " + o + " " + i + ".",
details: h(t)
});
}).finally(function() {
c = null;
});
}, l.clearChanges = function() {
<<<<<<< HEAD
l.updatedObject = a.copyAndNormalize(l.apiObject), l.form.$setPristine(), u = !1;
=======
l.updatedObject = r.copyAndNormalize(l.apiObject), l.containers = r.getContainers(l.updatedObject), l.form.$setPristine(), m = !1;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ],
controllerAs: "$ctrl",
bindings: {
apiObject: "<",
ngReadonly: "<",
disableValueFrom: "<"
},
templateUrl: "views/directives/edit-environment-variables.html"
});
}(), angular.module("openshiftConsole").component("initContainersSummary", {
bindings: {
apiObject: "<"
},
templateUrl: "views/_init-containers-summary.html",
controller: [ "$filter", function(e) {
var t = this;
t.$onChanges = function(n) {
var r = _.get(n.apiObject, "currentValue");
if (r) switch (t.podTemplate = e("podTemplate")(r), r.kind) {
case "DeploymentConfig":
case "Deployment":
t.tab = "configuration";
break;

default:
t.tab = "details";
}
};
} ]
<<<<<<< HEAD
}), angular.module("openshiftConsole").filter("duration", function() {
>>>>>>> Bug 1476157 - Fix minification problems due to dependency injection
=======
}), function() {
angular.module("openshiftConsole").component("notificationCounter", {
templateUrl: "views/directives/notifications/notification-counter.html",
bindings: {},
controller: [ "$filter", "$routeParams", "$rootScope", "Constants", function(e, t, n, r) {
var a = this, o = _.get(r, "DISABLE_GLOBAL_EVENT_WATCH"), i = e("isIE")();
a.hide = !0;
var s = [], c = [], l = function(e, t) {
e && c.push(n.$on("NotificationDrawerWrapper.count", t));
}, u = function() {
_.each(c, function(e) {
e && e();
}), c = [];
}, d = function() {
_.each(s, function(e) {
e();
}), s = [];
}, m = function(e) {
a.hide = !e;
};
a.onClick = function() {
n.$emit("NotificationDrawerWrapper.toggle");
};
var p = function(e, t) {
a.showUnreadNotificationsIndicator = !!t;
}, f = function(e, t) {
return _.get(e, "params.project") !== _.get(t, "params.project");
}, g = function() {
l(t.project, p), m(t.project);
}, v = function() {
g(), s.push(n.$on("$routeChangeSuccess", function(e, t, n) {
f(t, n) && g();
})), s.push(n.$on("NotificationDrawerWrapper.onMarkAllRead", function() {
a.showUnreadNotificationsIndicator = !1;
}));
};
a.$onInit = function() {
o || i ? a.hide = !0 : v();
}, a.$onDestroy = function() {
u(), d();
};
} ]
});
}(), function() {
angular.module("openshiftConsole").component("notificationDrawerWrapper", {
templateUrl: "views/directives/notifications/notification-drawer-wrapper.html",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
controller: [ "$filter", "$interval", "$location", "$timeout", "$routeParams", "$rootScope", "Constants", "DataService", "NotificationsService", "EventsService", function(e, t, n, a, r, o, i, s, c, l) {
var u, d, p = _.get(i, "DISABLE_GLOBAL_EVENT_WATCH"), m = e("isIE")() || e("isEdge")(), f = this, g = [], h = {}, v = [], y = {}, b = function(e) {
=======
controller: [ "$filter", "$interval", "$location", "$timeout", "$routeParams", "$rootScope", "Constants", "DataService", "EventsService", "NotificationsService", function(e, t, n, a, r, o, i, s, c) {
var l, u, d = _.get(i, "DISABLE_GLOBAL_EVENT_WATCH"), m = e("isIE")(), p = this, f = [], g = {}, v = {}, h = {}, y = function(e) {
e || (p.drawerHidden = !0);
}, b = function(e, t) {
return _.get(e, "params.project") !== _.get(t, "params.project");
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, C = function(e) {
>>>>>>> Quota Notifications
=======
}, S = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, C = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, S = function(e) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, S = function(e) {
>>>>>>> Adding label filter to ste secrets page
return s.get("projects", e, {}, {
errorNotification: !1
}).then(function(e) {
<<<<<<< HEAD
return y[e.metadata.name] = e, e;
});
<<<<<<< HEAD
}, C = function(t, n) {
n && !t[n] && (t[n] = {
heading: e("displayName")(y[n]) || n,
project: y[n],
notifications: []
=======
=======
return h[e.metadata.name] = e, e;
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add SVG icons
}, S = function(t, n) {
=======
}, C = function(t, n) {
>>>>>>> Service instance details configuration and edit
=======
}, S = function(t, n) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, C = function(t, n) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
controller: [ "$filter", "$interval", "$location", "$rootScope", "$routeParams", "$scope", "$timeout", "Constants", "DataService", "EventsService", "NotificationsService", function(e, t, n, a, r, o, i, s, c, l) {
=======
controller: [ "$filter", "$interval", "$location", "$rootScope", "$routeParams", "$scope", "$timeout", "Constants", "DataService", "EventsService", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var u, d, m = _.get(s, "DISABLE_GLOBAL_EVENT_WATCH"), p = e("isIE")(), f = this, g = [], v = {}, h = {}, y = {}, b = function(e) {
e || (f.drawerHidden = !0);
}, S = function(e, t) {
=======
controller: [ "$filter", "$interval", "$location", "$rootScope", "$routeParams", "$scope", "$timeout", "APIService", "Constants", "DataService", "EventsService", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l, u) {
var d, m, p = s.getPreferredVersion("events"), f = s.getPreferredVersion("projects"), g = _.get(c, "DISABLE_GLOBAL_EVENT_WATCH"), v = e("isIE")(), h = this, y = [], b = {}, S = {}, C = {}, w = function(e) {
e || (h.drawerHidden = !0);
}, P = function(e, t) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
return _.get(e, "params.project") !== _.get(t, "params.project");
}, j = function(e) {
return l.get(f, e, {}, {
errorNotification: !1
}).then(function(e) {
return C[e.metadata.name] = e, e;
});
<<<<<<< HEAD
<<<<<<< HEAD
}, w = function(t, n) {
>>>>>>> Remember drawer expanded state across sessions
=======
}, C = function(t, n) {
>>>>>>> Adding label filter to ste secrets page
=======
}, j = function(t, n) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
=======
}, k = function(t, n) {
>>>>>>> Add Browse Catalog to Project context view.
return {
heading: e("displayName")(C[t]),
project: C[t],
notifications: n
};
}, I = function(e) {
return _.filter(e, "unread");
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, k = function() {
_.each(p.notificationGroups, function(e) {
e.totalUnread = w(e.notifications).length, e.hasUnread = !!e.totalUnread, o.$emit("NotificationDrawerWrapper.onUnreadNotifications", e.totalUnread);
>>>>>>> Support EnvFrom in the Env Editors
});
<<<<<<< HEAD
}, S = function() {
d && s.unwatch(d);
}, w = function(e, t) {
S(), e && (d = s.watch("events", {
namespace: e
}, _.debounce(t, 400), {
skipDigest: !0
}));
}, k = function() {
u && u(), u = null;
}, j = function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
return _.filter(e, "unread");
}, P = function(e) {
o.$applyAsync(function() {
e.totalUnread = j(e.notifications).length, e.hasUnread = !!e.totalUnread, o.$emit("NotificationDrawerWrapper.count", e.totalUnread);
});
<<<<<<< HEAD
<<<<<<< HEAD
}, R = function() {
_.each(v, P);
}, I = function(e) {
return _.orderBy(e, [ "event.lastTimestamp", "event.firstTimestamp" ], [ "desc", "desc" ]);
}, T = function(e) {
var t = _.sortBy(e, function(e) {
return e.heading;
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
return _.each(t, function(e) {
e.notifications = I(e.notifications), e.counts = P(e);
}), t;
}, E = function(e) {
var t = {};
return C(t, r.project), _.each(e, function(e) {
l.isImportantEvent(e) && !l.isCleared(e) && (C(t, e.metadata.namespace), t[e.metadata.namespace].notifications.push({
unread: !l.isRead(e),
uid: e.metadata.uid,
event: e,
actions: null
}));
}), t;
}, N = function() {
_.each(g, function(e) {
e();
}), g = [];
}, D = function(e) {
e || (f.drawerHidden = !0);
}, A = function() {
o.$evalAsync(function() {
R(), f.notificationGroups = _.filter(v, function(e) {
return e.project.metadata.name === r.project;
});
<<<<<<< HEAD
=======
_.each(m.notificationGroups, function(t) {
=======
=======
}, P = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, j = function(e) {
>>>>>>> Add product icons for service catalog
=======
}, P = function(e) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, j = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, P = function(e) {
>>>>>>> Update template service broker flag name
=======
}, k = function(e) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}, P = function(e) {
>>>>>>> Bug 1505281 - Improve import YAML results message
_.each(p.notificationGroups, function(t) {
>>>>>>> Support EnvFrom in the Env Editors
=======
}, P = function() {
=======
}, k = function() {
>>>>>>> Update pod controller to use getPreferredVersion
_.each(f.notificationGroups, function(e) {
e.totalUnread = P(e.notifications).length, e.hasUnread = !!e.totalUnread, r.$emit("NotificationDrawerWrapper.onUnreadNotifications", e.totalUnread);
});
}, j = function(e) {
_.each(f.notificationGroups, function(t) {
>>>>>>> Remember drawer expanded state across sessions
=======
}, R = function() {
_.each(h.notificationGroups, function(e) {
e.totalUnread = I(e.notifications).length, e.hasUnread = !!e.totalUnread, r.$emit("NotificationDrawerWrapper.onUnreadNotifications", e.totalUnread);
});
}, E = function(e) {
_.each(h.notificationGroups, function(t) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
_.remove(t.notifications, {
uid: e.uid,
namespace: e.namespace
});
<<<<<<< HEAD
<<<<<<< HEAD
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
}), delete v[r.project][e.uid];
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add SVG icons
}, P = function(e) {
=======
}, j = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, P = function(e) {
>>>>>>> Add product icons for service catalog
return _.map(e, function(e) {
return {
=======
}, j = function(e) {
<<<<<<< HEAD
v[r.project] && delete v[r.project][e.uid], g[r.project] && delete g[r.project][e.uid], P(e);
=======
}, P = function(e) {
v[r.project] && delete v[r.project][e.uid], g[r.project] && delete g[r.project][e.uid], j(e);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, j = function(e) {
v[r.project] && delete v[r.project][e.uid], g[r.project] && delete g[r.project][e.uid], P(e);
<<<<<<< HEAD
>>>>>>> Update template service broker flag name
=======
v[r.project] && delete v[r.project][e.uid], g[r.project] && delete g[r.project][e.uid], k(e);
>>>>>>> Fix for adding non-builder templates to a project
=======
>>>>>>> Bug 1505281 - Improve import YAML results message
}, R = function() {
g[r.project] = {}, v[r.project] = {};
}, I = function(e) {
=======
}, R = function(e) {
=======
});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, I = function(e) {
<<<<<<< HEAD
>>>>>>> Add search catalog in project context
h[r.project] && delete h[r.project][e.uid], v[r.project] && delete v[r.project][e.uid], j(e);
=======
h[a.project] && delete h[a.project][e.uid], v[a.project] && delete v[a.project][e.uid], j(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, R = function() {
v[a.project] = {}, h[a.project] = {};
}, E = function(e) {
>>>>>>> Remember drawer expanded state across sessions
=======
}, T = function(e) {
S[a.project] && delete S[a.project][e.uid], b[a.project] && delete b[a.project][e.uid], E(e);
=======
}, E = function(e) {
S[a.project] && delete S[a.project][e.uid], b[a.project] && delete b[a.project][e.uid], T(e);
>>>>>>> Configurable inactivity timeout in console
=======
}, T = function(e) {
S[a.project] && delete S[a.project][e.uid], b[a.project] && delete b[a.project][e.uid], E(e);
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
}, E = function(e) {
S[a.project] && delete S[a.project][e.uid], b[a.project] && delete b[a.project][e.uid], T(e);
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
}, T = function(e) {
S[a.project] && delete S[a.project][e.uid], b[a.project] && delete b[a.project][e.uid], E(e);
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
}, N = function() {
b[a.project] = {}, S[a.project] = {};
}, D = function(e) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
return _.reduce(e, function(e, t) {
return e[t.metadata.uid] = {
>>>>>>> Handle displaying parameters when secrets are not available.
actions: null,
<<<<<<< HEAD
uid: e.metadata.uid,
trackByID: e.metadata.uid,
unread: !c.isRead(e.metadata.uid),
type: e.type,
lastTimestamp: e.lastTimestamp,
firstTimestamp: e.firstTimestamp,
event: e
};
});
}, R = function(e) {
=======
uid: t.metadata.uid,
trackByID: t.metadata.uid,
unread: !u.isRead(t.metadata.uid),
type: t.type,
lastTimestamp: t.lastTimestamp,
firstTimestamp: t.firstTimestamp,
event: t
}, e;
}, {});
<<<<<<< HEAD
}, T = function(e) {
>>>>>>> Remember drawer expanded state across sessions
=======
}, A = function(e) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
return _.reduce(e, function(e, t) {
return u.isImportantAPIEvent(t) && !u.isCleared(t.metadata.uid) && (e[t.metadata.uid] = t), e;
}, {});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, I = function(e, t) {
var n = r.project;
return _.assign({}, e[n], t[n]);
}, E = function(e) {
=======
}, N = function(e, t) {
var n = r.project;
return _.assign({}, e[n], t[n]);
}, T = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, T = function(e, t) {
var n = r.project;
return _.assign({}, e[n], t[n]);
}, N = function(e) {
>>>>>>> Update template service broker flag name
return _.orderBy(e, [ "event.lastTimestamp", "event.firstTimestamp" ], [ "desc", "desc" ]);
}, T = function() {
o.$evalAsync(function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
p.notificationGroups = [ C(r.project, E(I(g, v))) ], k();
=======
p.notificationGroups = [ S(r.project, T(N(g, v))) ], k();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
p.notificationGroups = [ S(r.project, N(T(g, v))) ], k();
>>>>>>> Update template service broker flag name
=======
p.notificationGroups = [ S(r.project, N(T(g, v))) ], P();
>>>>>>> Fix for adding non-builder templates to a project
=======
p.notificationGroups = [ S(r.project, N(T(g, v))) ], k();
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
p.notificationGroups = [ C(r.project, N(T(g, v))) ], k();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
p.notificationGroups = [ C(r.project, N(T(g, v))) ], k();
>>>>>>> Adding label filter to ste secrets page
});
}, N = function() {
_.each(f, function(e) {
e();
}), f = [];
}, D = function() {
u && (s.unwatch(u), u = null);
}, A = function() {
l && l(), l = null;
}, $ = function(e) {
g[r.project] = P(R(e.by("metadata.name"))), T();
}, B = function(e, t) {
<<<<<<< HEAD
if (t.showInDrawer) {
var n = t.namespace || r.project, a = t.id || _.uniqueId("notification_") + Date.now();
h[n] = h[n] || {}, h[n][a] = {
=======
var n = t.namespace || r.project, a = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !c.isCleared(a) && (v[n] = v[n] || {}, v[n][a] = {
>>>>>>> Add SVG icons
=======
}, N = function(e, t) {
=======
}, $ = function(e, t) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
var n = a.project;
return _.assign({}, e[n], t[n]);
}, B = function(e) {
return _.orderBy(e, [ "event.lastTimestamp", "event.metadata.resourceVersion" ], [ "desc", "desc" ]);
}, L = function() {
r.$evalAsync(function() {
h.notificationGroups = [ k(a.project, B($(b, S))) ], R();
});
}, V = function() {
_.each(y, function(e) {
e();
<<<<<<< HEAD
}), g = [];
}, B = function() {
d && (c.unwatch(d), d = null);
}, L = function() {
u && u(), u = null;
}, U = function(e) {
v[a.project] = E(T(e.by("metadata.name"))), A();
}, O = function(e, t) {
<<<<<<< HEAD
var n = t.namespace || r.project, a = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !l.isCleared(a) && (h[n] = h[n] || {}, h[n][a] = {
>>>>>>> Remember drawer expanded state across sessions
=======
var n = t.namespace || a.project, r = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !l.isCleared(r) && (h[n] = h[n] || {}, h[n][r] = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}), y = [];
}, O = function() {
m && (l.unwatch(m), m = null);
}, U = function() {
d && d(), d = null;
}, F = function(e) {
b[a.project] = D(A(e.by("metadata.name"))), L();
}, x = function(e, t) {
var n = t.namespace || a.project, r = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !u.isCleared(r) && (S[n] = S[n] || {}, S[n][r] = {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
actions: t.actions,
unread: !u.isRead(r),
trackByID: t.trackByID,
uid: r,
type: t.type,
lastTimestamp: t.timestamp,
message: t.message,
isHTML: t.isHTML,
details: t.details,
namespace: n,
links: t.links
<<<<<<< HEAD
<<<<<<< HEAD
}, T();
}
}, L = function(e, t) {
D(), e && (u = s.watch("events", {
=======
}, A());
}, V = function(e, t) {
B(), e && (d = c.watch("events", {
>>>>>>> Remember drawer expanded state across sessions
=======
}, L());
}, M = function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
O(), e && (m = l.watch(p, {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
=======
V(), e && (m = l.watch(p, {
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
U(), e && (m = l.watch(p, {
>>>>>>> Update membership to use new rbac endpoints
=======
V(), e && (m = l.watch(p, {
>>>>>>> Set Home Page Preference
=======
U(), e && (m = l.watch(p, {
>>>>>>> Update directives/processTemplate to use getPreferredVersion
=======
U(), e && (m = l.watch(p, {
>>>>>>> Fix potential API mismatch in BuildsService
=======
O(), e && (m = l.watch(p, {
>>>>>>> Use new clusterResourceOverridesEnabled flag
namespace: e
}, _.debounce(t, 400), {
skipDigest: !0
}));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}, U = _.once(function(e, t) {
A(), l = o.$on("NotificationsService.onNotificationAdded", t);
}), O = function() {
<<<<<<< HEAD
C(r.project).then(function() {
<<<<<<< HEAD
L(r.project, $), U(r.project, B), y(r.project), N();
>>>>>>> Quota Notifications
=======
=======
S(r.project).then(function() {
>>>>>>> Service instance details configuration and edit
L(r.project, $), U(r.project, B), y(r.project), T();
>>>>>>> Support EnvFrom in the Env Editors
});
}, $ = function(e) {
h = E(e.by("metadata.uid")), v = T(h), A();
}, B = {
Normal: "pficon pficon-info",
Warning: "pficon pficon-warning-triangle-o"
};
<<<<<<< HEAD
angular.extend(f, {
=======
=======
}, F = _.once(function(e, t) {
B(), l = o.$on("NotificationsService.onNotificationAdded", t);
}), x = function() {
S(r.project).then(function() {
O(r.project, L), F(r.project, U), y(r.project), D();
});
};
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
angular.extend(p, {
>>>>>>> Support EnvFrom in the Env Editors
=======
}, x = _.once(function(e, t) {
=======
}, V = _.once(function(e, t) {
>>>>>>> Update routes controller to use getPreferredVersion
=======
}, V = _.once(function(e, t) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
}, V = _.once(function(e, t) {
>>>>>>> Update secret, secrets controllers to use getPreferredVersion
=======
}, V = _.once(function(e, t) {
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
<<<<<<< HEAD
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
>>>>>>> Update createFromImage controller to use getPreferredVersion
L(), u = a.$on("NotificationsService.onNotificationAdded", t);
=======
L(), u = r.$on("NotificationsService.onNotificationAdded", t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), x = function() {
C(a.project).then(function() {
V(a.project, U), F(a.project, O), b(a.project), A();
});
};
angular.extend(f, {
>>>>>>> Remember drawer expanded state across sessions
=======
}, q = _.once(function(e, t) {
U(), d = r.$on("NotificationsService.onNotificationAdded", t);
}), z = function() {
j(a.project).then(function() {
M(a.project, F), q(a.project, x), w(a.project), L();
});
};
angular.extend(h, {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
drawerHidden: !0,
allowExpand: !0,
drawerExpanded: "true" === localStorage.getItem("openshift/notification-drawer-expanded"),
drawerTitle: "Notifications",
hasUnread: !1,
showClearAll: !0,
showMarkAllRead: !0,
onClose: function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
f.drawerHidden = !0;
=======
p.drawerHidden = !0;
>>>>>>> Support EnvFrom in the Env Editors
},
onMarkAllRead: function(e) {
_.each(e.notifications, function(e) {
<<<<<<< HEAD
e.unread = !1, l.markRead(e.event);
}), A(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
onClearAll: function(e) {
_.each(e.notifications, function(e) {
l.markRead(e.event), l.markCleared(e.event);
}), e.notifications = [], A(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
=======
e.unread = !1, c.markRead(e.uid);
}), T(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
onClearAll: function(e) {
_.each(e.notifications, function(e) {
e.unread = !1, c.markRead(e.uid), c.markCleared(e.uid);
<<<<<<< HEAD
<<<<<<< HEAD
}), g[r.project] = {}, h[r.project] = {}, N(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
>>>>>>> Quota Notifications
=======
}), g[r.project] = {}, h[r.project] = {}, T(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
>>>>>>> Support EnvFrom in the Env Editors
=======
}), g[r.project] = {}, v[r.project] = {}, T(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
>>>>>>> Add SVG icons
},
notificationGroups: v,
=======
f.drawerHidden = !0;
=======
h.drawerHidden = !0;
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
},
onMarkAllRead: function(e) {
_.each(e.notifications, function(e) {
e.unread = !1, u.markRead(e.uid);
}), L(), r.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
onClearAll: function(e) {
_.each(e.notifications, function(e) {
e.unread = !1, u.markRead(e.uid), u.markCleared(e.uid);
}), N(), L(), r.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
notificationGroups: [],
>>>>>>> Remember drawer expanded state across sessions
headingInclude: "views/directives/notifications/header.html",
notificationBodyInclude: "views/directives/notifications/notification-body.html",
customScope: {
clear: function(e, t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
l.markCleared(e.event), n.notifications.splice(t, 1), R();
=======
c.markRead(e.uid), c.markCleared(e.uid), n.notifications.splice(t, 1), j(e), D();
>>>>>>> Handle displaying parameters when secrets are not available.
=======
c.markRead(e.uid), c.markCleared(e.uid), n.notifications.splice(t, 1), P(e), D();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
c.markRead(e.uid), c.markCleared(e.uid), n.notifications.splice(t, 1), j(e), D();
>>>>>>> Update template service broker flag name
},
markRead: function(e) {
e.unread = !1, l.markRead(e.event), R();
=======
l.markRead(e.uid), l.markCleared(e.uid), n.notifications.splice(t, 1), R(e), A();
=======
l.markRead(e.uid), l.markCleared(e.uid), n.notifications.splice(t, 1), I(e), A();
>>>>>>> Add search catalog in project context
},
markRead: function(e) {
e.unread = !1, l.markRead(e.uid), A();
>>>>>>> Remember drawer expanded state across sessions
=======
u.markRead(e.uid), u.markCleared(e.uid), n.notifications.splice(t, 1), T(e), L();
=======
u.markRead(e.uid), u.markCleared(e.uid), n.notifications.splice(t, 1), E(e), L();
>>>>>>> Configurable inactivity timeout in console
=======
u.markRead(e.uid), u.markCleared(e.uid), n.notifications.splice(t, 1), T(e), L();
>>>>>>> Use new clusterResourceOverridesEnabled flag
=======
u.markRead(e.uid), u.markCleared(e.uid), n.notifications.splice(t, 1), E(e), L();
>>>>>>> Check for new templateServiceBrokerEnabled flag
=======
u.markRead(e.uid), u.markCleared(e.uid), n.notifications.splice(t, 1), T(e), L();
>>>>>>> Bug 1535402 - Webhook trigger editor not responding + Webhook trigger editor should behave like envVar editor
},
markRead: function(e) {
e.unread = !1, u.markRead(e.uid), L();
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
},
<<<<<<< HEAD
getNotficationStatusIconClass: function(e) {
return B[e.type] || B.info;
=======
close: function() {
<<<<<<< HEAD
<<<<<<< HEAD
p.drawerHidden = !0;
>>>>>>> Support EnvFrom in the Env Editors
=======
f.drawerHidden = !0;
>>>>>>> Remember drawer expanded state across sessions
},
<<<<<<< HEAD
getStatusForCount: function(e) {
return B[e] || B.info;
=======
h.drawerHidden = !0;
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
},
close: function() {
f.drawerHidden = !0;
}
}
});
var L = function(e, t) {
return _.get(e, "params.project") !== _.get(t, "params.project");
}, U = function() {
b(r.project).then(function() {
w(r.project, $), D(r.project), A();
});
}, O = function() {
r.project && U(), g.push(o.$on("$routeChangeSuccess", function(e, t, n) {
L(t, n) && (f.customScope.projectName = r.project, U());
})), g.push(o.$on("NotificationDrawerWrapper.toggle", function() {
f.drawerHidden = !f.drawerHidden;
}));
};
f.$onInit = function() {
p || m || O();
}, f.$onDestroy = function() {
k(), S(), N();
=======
onLinkClick: function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
e.onClick(), p.drawerHidden = !0;
},
countUnreadNotifications: k
}
});
var F = function() {
r.project && O(), f.push(o.$on("$routeChangeSuccess", function(e, t, n) {
b(t, n) && (p.customScope.projectName = r.project, O());
})), f.push(o.$on("NotificationDrawerWrapper.toggle", function() {
p.drawerHidden = !p.drawerHidden;
})), f.push(o.$on("NotificationDrawerWrapper.hide", function() {
p.drawerHidden = !0;
})), f.push(o.$on("NotificationDrawerWrapper.clear", function(e, t) {
c.markCleared(t.uid), j(t), p.countUnreadNotifications();
}));
};
<<<<<<< HEAD
m.$onInit = function() {
d || p || F();
}, m.$onDestroy = function() {
A(), D(), E();
>>>>>>> Quota Notifications
=======
p.$onInit = function() {
d || m || F();
}, p.$onDestroy = function() {
A(), D(), N();
>>>>>>> Support EnvFrom in the Env Editors
=======
e.onClick(), f.drawerHidden = !0;
=======
e.onClick(), h.drawerHidden = !0;
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
},
countUnreadNotifications: R
}
}), o.$watch("$ctrl.drawerExpanded", function(e) {
localStorage.setItem("openshift/notification-drawer-expanded", e ? "true" : "false");
});
var H = function() {
a.project && z(), y.push(r.$on("$routeChangeSuccess", function(e, t, n) {
P(t, n) && (h.customScope.projectName = a.project, z());
})), y.push(r.$on("NotificationDrawerWrapper.toggle", function() {
h.drawerHidden = !h.drawerHidden;
})), y.push(r.$on("NotificationDrawerWrapper.hide", function() {
h.drawerHidden = !0;
})), y.push(r.$on("NotificationDrawerWrapper.clear", function(e, t) {
u.markCleared(t.uid), T(t), R();
}));
};
<<<<<<< HEAD
f.$onInit = function() {
m || p || M();
}, f.$onDestroy = function() {
L(), B(), $();
>>>>>>> Remember drawer expanded state across sessions
=======
h.$onInit = function() {
g || v || H();
}, h.$onDestroy = function() {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
V(), O(), U();
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
=======
O(), V(), U();
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
O(), U(), V();
>>>>>>> Update membership to use new rbac endpoints
=======
O(), V(), U();
>>>>>>> Set Home Page Preference
=======
O(), U(), V();
>>>>>>> Update directives/processTemplate to use getPreferredVersion
=======
O(), U(), V();
>>>>>>> Fix potential API mismatch in BuildsService
=======
U(), O(), V();
>>>>>>> Use new clusterResourceOverridesEnabled flag
};
} ]
});
}(), angular.module("openshiftConsole").filter("duration", function() {
<<<<<<< HEAD
>>>>>>> Add notification-drawer to show curated list of events to user
return function(e, t, n, a) {
function r(e, t, a) {
0 !== e && (1 !== e ? s.push(e + " " + a) : n ? s.push(t) : s.push("1 " + t));
=======
return function(e, t, n, r) {
function a(e, t, r) {
0 !== e && (1 !== e ? s.push(e + " " + r) : n ? s.push(t) : s.push("1 " + t));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
if (!e) return e;
r = r || 2, t = t || new Date();
var o = moment(t).diff(e);
o < 0 && (o = 0);
var i = moment.duration(o), s = [], c = i.years(), l = i.months(), u = i.days(), d = i.hours(), m = i.minutes(), p = i.seconds();
return a(c, "year", "years"), a(l, "month", "months"), a(u, "day", "days"), a(d, "hour", "hours"), a(m, "minute", "minutes"), a(p, "second", "seconds"), 1 === s.length && p && 1 === r ? n ? "minute" : "1 minute" : (0 === s.length && s.push("0 seconds"), s.length > r && (s.length = r), s.join(", "));
};
}).filter("ageLessThan", function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return function(e, t, n) {
return moment().subtract(t, n).diff(moment(e)) < 0;
};
}).filter("humanizeDurationValue", function() {
return function(e, t) {
return moment.duration(e, t).humanize();
};
}).filter("timeOnlyDurationFromTimestamps", [ "timeOnlyDurationFilter", function(e) {
return function(t, n) {
return t ? (n = n || new Date(), e(moment(n).diff(t))) : t;
};
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Configurable inactivity timeout in console
} ]).filter("countdownToTimestamp", function() {
return function(e) {
var t = moment(new Date(e)).diff(moment(), "seconds");
return t < 0 ? 0 : t;
};
}).filter("timeOnlyDuration", function() {
<<<<<<< HEAD
return function(e) {
var t = [], n = moment.duration(e), r = Math.floor(n.asHours()), a = n.minutes(), o = n.seconds();
return (r < 0 || a < 0 || o < 0) && (r = a = o = 0), r && t.push(r + "h"), a && t.push(a + "m"), r || t.push(o + "s"), t.join(" ");
};
=======
} ]).filter("timeOnlyDuration", function() {
=======
>>>>>>> Configurable inactivity timeout in console
return function(e) {
var t = [], n = moment.duration(e), r = Math.floor(n.asHours()), a = n.minutes(), o = n.seconds();
return (r < 0 || a < 0 || o < 0) && (r = a = o = 0), r && t.push(r + "h"), a && t.push(a + "m"), r || t.push(o + "s"), t.join(" ");
};
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}), angular.module("openshiftConsole").filter("storageClass", [ "annotationFilter", function(e) {
return function(t) {
return e(t, "volume.beta.kubernetes.io/storage-class");
};
<<<<<<< HEAD
} ]).filter("storageClassAccessMode", [ "annotationFilter", function(e) {
return function(t) {
return e(t, "storage.alpha.openshift.io/access-mode");
};
} ]).filter("tags", [ "annotationFilter", function(e) {
return function(t, n) {
var r = e(t, n = n || "tags");
return r ? r.split(/\s*,\s*/) : [];
=======
} ]).filter("tags", [ "annotationFilter", function(e) {
return function(t, n) {
<<<<<<< HEAD
var a = e(t, n = n || "tags");
return a ? a.split(/\s*,\s*/) : [];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e(t, n = n || "tags");
return r ? r.split(/\s*,\s*/) : [];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("imageStreamLastUpdated", function() {
return function(e) {
var t = e.metadata.creationTimestamp, n = moment(t);
return angular.forEach(e.status.tags, function(e) {
if (!_.isEmpty(e.items)) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var r = moment(_.head(e.items).created);
r.isAfter(n) && (n = r, t = _.head(e.items).created);
=======
var a = moment(_.first(e.items).created);
a.isAfter(n) && (n = a, t = _.first(e.items).created);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var a = moment(_.head(e.items).created);
a.isAfter(n) && (n = a, t = _.head(e.items).created);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
var r = moment(_.head(e.items).created);
r.isAfter(n) && (n = r, t = _.head(e.items).created);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}), t;
};
}).filter("buildConfigForBuild", [ "annotationFilter", "labelNameFilter", "labelFilter", function(e, t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = t("buildConfig");
return function(t) {
return e(t, "buildConfig") || n(t, r);
=======
var a = t("buildConfig");
return function(t) {
return e(t, "buildConfig") || n(t, a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = t("buildConfig");
return function(t) {
return e(t, "buildConfig") || n(t, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("icon", [ "annotationFilter", function(e) {
return function(t) {
var n = e(t, "icon");
return n || "";
};
} ]).filter("iconClass", [ "annotationFilter", function(e) {
return function(t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = e(t, "iconClass");
return r || ("template" === n ? "fa fa-clone" : "");
=======
var a = e(t, "iconClass");
return a || ("template" === n ? "fa fa-clone" : "");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e(t, "iconClass");
return r || ("template" === n ? "fa fa-clone" : "");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("imageName", function() {
return function(e) {
return e ? e.contains(":") ? e.split(":")[1] : e : "";
};
}).filter("imageStreamName", function() {
return function(e) {
if (!e) return "";
<<<<<<< HEAD
<<<<<<< HEAD
var t, n = e.split("@")[0], r = n.split("/");
return 3 === r.length ? (t = r[2].split(":"), r[1] + "/" + t[0]) : 2 === r.length ? n : 1 === r.length ? (t = n.split(":"))[0] : void 0;
=======
var t, n = e.split("@")[0], a = n.split("/");
return 3 === a.length ? (t = a[2].split(":"), a[1] + "/" + t[0]) : 2 === a.length ? n : 1 === a.length ? (t = n.split(":"))[0] : void 0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var t, n = e.split("@")[0], r = n.split("/");
return 3 === r.length ? (t = r[2].split(":"), r[1] + "/" + t[0]) : 2 === r.length ? n : 1 === r.length ? (t = n.split(":"))[0] : void 0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}).filter("stripTag", function() {
return function(e) {
return e ? e.split(":")[0] : e;
};
}).filter("stripSHA", function() {
return function(e) {
return e ? e.split("@")[0] : e;
};
}).filter("imageSHA", function() {
return function(e) {
if (!e) return e;
var t = e.split("@");
return t.length > 1 ? t[1] : "";
};
}).filter("imageEnv", function() {
return function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
for (var n = e.dockerImageMetadata.Config.Env, r = 0; r < _.size(n); r++) {
var a = n[r].split("=");
if (a[0] === t) return a[1];
=======
for (var n = e.dockerImageMetadata.Config.Env, a = 0; a < _.size(n); a++) {
var r = n[a].split("=");
if (r[0] === t) return r[1];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
for (var n = e.dockerImageMetadata.Config.Env, r = 0; r < _.size(n); r++) {
var a = n[r].split("=");
if (a[0] === t) return a[1];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
return null;
};
}).filter("destinationSourcePair", function() {
return function(e) {
var t = {};
return angular.forEach(e, function(e) {
t[e.sourcePath] = e.destinationDir;
}), t;
};
}).filter("buildForImage", function() {
return function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
for (var n = _.get(e, "dockerImageMetadata.Config.Env", []), r = 0; r < n.length; r++) {
var a = n[r].split("=");
if ("OPENSHIFT_BUILD_NAME" === a[0]) return t[a[1]];
}
return null;
};
}).filter("webhookURL", [ "canIFilter", "APIService", "DataService", "SecretsService", function(e, t, n, r) {
return function(a, o, i, s, c) {
var l = t.getPreferredVersion("secrets");
return e(l, "list") ? (i = r.getWebhookSecretValue(i, c), n.url({
resource: "buildconfigs/webhooks/" + encodeURIComponent(i) + "/" + encodeURIComponent(o.toLowerCase()),
name: a,
namespace: s
})) : n.url({
resource: "buildconfigs/webhooks/",
name: a,
namespace: s
}) + "<secret>/" + o.toLowerCase();
=======
for (var n = _.get(e, "dockerImageMetadata.Config.Env", []), a = 0; a < n.length; a++) {
var r = n[a].split("=");
if ("OPENSHIFT_BUILD_NAME" === r[0]) return t[r[1]];
=======
for (var n = _.get(e, "dockerImageMetadata.Config.Env", []), r = 0; r < n.length; r++) {
var a = n[r].split("=");
if ("OPENSHIFT_BUILD_NAME" === a[0]) return t[a[1]];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
return null;
};
<<<<<<< HEAD
<<<<<<< HEAD
}).filter("webhookURL", [ "DataService", function(e) {
return function(t, n, r, a) {
return e.url({
resource: "buildconfigs/webhooks/" + r + "/" + n.toLowerCase(),
name: t,
namespace: a
});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}).filter("webhookURL", [ "DataService", "SecretsService", function(e, t) {
return function(n, r, a, o, i) {
return (a = t.getWebhookSecretValue(a, i)) ? e.url({
resource: "buildconfigs/webhooks/" + encodeURIComponent(a) + "/" + encodeURIComponent(r.toLowerCase()),
name: n,
namespace: o
}) : e.url({
resource: "buildconfigs/webhooks/",
name: n,
namespace: o
}) + "<secret>/" + r.toLowerCase();
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
=======
}).filter("webhookURL", [ "canIFilter", "APIService", "DataService", "SecretsService", function(e, t, n, r) {
return function(a, o, i, s, c) {
var l = t.getPreferredVersion("secrets");
return e(l, "list") ? (i = r.getWebhookSecretValue(i, c), n.url({
resource: "buildconfigs/webhooks/" + encodeURIComponent(i) + "/" + encodeURIComponent(o.toLowerCase()),
name: a,
namespace: s
})) : n.url({
resource: "buildconfigs/webhooks/",
name: a,
namespace: s
}) + "<secret>/" + o.toLowerCase();
>>>>>>> Bug 1504819: Obfuscate webhook trigger URL if user cant list secrets
};
} ]).filter("isWebRoute", [ "routeHostFilter", function(e) {
return function(t) {
return !!e(t, !0) && "Subdomain" !== _.get(t, "spec.wildcardPolicy");
};
} ]).filter("routeWebURL", [ "routeHostFilter", function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
return function(t, n, r) {
var a = (t.spec.tls && "" !== t.spec.tls.tlsTerminationType ? "https" : "http") + "://" + (n || e(t));
return t.spec.path && !r && (a += t.spec.path), a;
};
} ]).filter("routeLabel", [ "RoutesService", "routeHostFilter", "routeWebURLFilter", "isWebRouteFilter", function(e, t, n, r) {
return function(a, o, i) {
if (r(a)) return n(a, o, i);
var s = o || t(a);
return s ? ("Subdomain" === _.get(a, "spec.wildcardPolicy") && (s = "*." + e.getSubdomain(a)), i ? s : (a.spec.path && (s += a.spec.path), s)) : "<unknown host>";
};
} ]).filter("parameterPlaceholder", [ "gettext", "gettextCatalog", function(e, t) {
return function(n) {
return n.generate ? t.getString(e("(generated if empty)")) : "";
};
} ]).filter("parameterValue", function() {
=======
return function(t, n, a) {
var r = (t.spec.tls && "" !== t.spec.tls.tlsTerminationType ? "https" : "http") + "://" + (n || e(t));
return t.spec.path && !a && (r += t.spec.path), r;
=======
return function(t, n, r) {
var a = (t.spec.tls && "" !== t.spec.tls.tlsTerminationType ? "https" : "http") + "://" + (n || e(t));
return t.spec.path && !r && (a += t.spec.path), a;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("routeLabel", [ "RoutesService", "routeHostFilter", "routeWebURLFilter", "isWebRouteFilter", function(e, t, n, r) {
return function(a, o, i) {
if (r(a)) return n(a, o, i);
var s = o || t(a);
return s ? ("Subdomain" === _.get(a, "spec.wildcardPolicy") && (s = "*." + e.getSubdomain(a)), i ? s : (a.spec.path && (s += a.spec.path), s)) : "<unknown host>";
};
} ]).filter("parameterPlaceholder", function() {
return function(e) {
return e.generate ? "(generated if empty)" : "";
};
}).filter("parameterValue", function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return function(e) {
return !e.value && e.generate ? "(generated)" : e.value;
};
}).filter("imageObjectRef", function() {
return function(e, t, n) {
if (!e) return "";
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var r = e.namespace || t || "";
_.isEmpty(r) || (r += "/");
var a = e.kind;
if ("ImageStreamTag" === a || "ImageStreamImage" === a) return r + e.name;
if ("DockerImage" === a) {
<<<<<<< HEAD
var o = e.name;
return n && (o = o.substring(o.lastIndexOf("/") + 1)), o;
}
return r + e.name;
};
}).filter("orderByDisplayName", [ "displayNameFilter", "toArrayFilter", function(e, t) {
return function(n) {
var r = t(n);
return r.sort(function(t, n) {
var r = e(t) || "", a = e(n) || "";
return r === a && (r = _.get(t, "metadata.name", ""), a = _.get(n, "metadata.name", "")), r.localeCompare(a);
}), r;
=======
var a = e.namespace || t || "";
_.isEmpty(a) || (a += "/");
var r = e.kind;
if ("ImageStreamTag" === r || "ImageStreamImage" === r) return a + e.name;
if ("DockerImage" === r) {
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = e.name;
return n && (o = o.substring(o.lastIndexOf("/") + 1)), o;
}
return r + e.name;
};
}).filter("orderByDisplayName", [ "displayNameFilter", "toArrayFilter", function(e, t) {
return function(n) {
<<<<<<< HEAD
var a = t(n);
return a.sort(function(t, n) {
var a = e(t) || "", r = e(n) || "";
return a === r && (a = _.get(t, "metadata.name", ""), r = _.get(n, "metadata.name", "")), a.localeCompare(r);
}), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = t(n);
return r.sort(function(t, n) {
var r = e(t) || "", a = e(n) || "";
return r === a && (r = _.get(t, "metadata.name", ""), a = _.get(n, "metadata.name", "")), r.localeCompare(a);
}), r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("isPodStuck", function() {
return function(e) {
if ("Pending" !== e.status.phase) return !1;
var t = moment().subtract(5, "m");
return moment(e.metadata.creationTimestamp).isBefore(t);
};
}).filter("isContainerLooping", function() {
return function(e) {
return e.state.waiting && "CrashLoopBackOff" === e.state.waiting.reason;
};
}).filter("isContainerFailed", function() {
return function(e) {
return e.state.terminated && 0 !== e.state.terminated.exitCode;
};
}).filter("isContainerTerminatedSuccessfully", function() {
return function(e) {
return e.state.terminated && 0 === e.state.terminated.exitCode;
};
}).filter("isContainerUnprepared", function() {
return function(e) {
if (!e.state.running || !1 !== e.ready || !e.state.running.startedAt) return !1;
var t = moment().subtract(5, "m");
return moment(e.state.running.startedAt).isBefore(t);
};
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).filter("isTroubledPod", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", function(e, t, n, r) {
return function(a) {
if ("Unknown" === a.status.phase) return !0;
if (e(a)) return !0;
if ("Running" === a.status.phase && a.status.containerStatuses) {
<<<<<<< HEAD
var o;
for (o = 0; o < _.size(a.status.containerStatuses); ++o) {
var i = a.status.containerStatuses[o];
if (i.state) {
if (n(i)) return !0;
if (t(i)) return !0;
if (r(i)) return !0;
=======
}).filter("isTroubledPod", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", function(e, t, n, a) {
return function(r) {
if ("Unknown" === r.status.phase) return !0;
if (e(r)) return !0;
if ("Running" === r.status.phase && r.status.containerStatuses) {
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o;
for (o = 0; o < _.size(a.status.containerStatuses); ++o) {
var i = a.status.containerStatuses[o];
if (i.state) {
if (n(i)) return !0;
if (t(i)) return !0;
<<<<<<< HEAD
if (a(i)) return !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
if (r(i)) return !0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}
}
return !1;
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]).filter("podWarnings", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", "isTerminatingFilter", "gettext", "gettextCatalog", function(e, t, n, r, a, o, i) {
return function(s) {
var c = [];
return "Unknown" === s.status.phase && c.push({
reason: "Unknown",
pod: s.metadata.name,
message: "The state of the pod could not be obtained. This is typically due to an error communicating with the host of the pod."
}), e(s) && c.push({
reason: "Stuck",
pod: s.metadata.name,
message: "The pod has been stuck in the pending state for more than five minutes."
}), "Running" === s.status.phase && s.status.containerStatuses && _.each(s.status.containerStatuses, function(e) {
if (!e.state) return !1;
n(e) && (a(s) ? c.push({
severity: "error",
reason: "NonZeroExitTerminatingPod",
pod: s.metadata.name,
container: e.name,
message: i.getString("The container {{name}} did not stop cleanly when terminated (exit code {{exitCode}}).", {
name: e.name,
exitCode: e.state.terminated.exitCode
})
}) : c.push({
severity: "warning",
reason: "NonZeroExit",
pod: s.metadata.name,
container: e.name,
message: i.getString("The container {{name}} failed (exit code {{exitCode}}).", {
name: e.name,
exitCode: e.state.terminated.exitCode
})
})), t(e) && c.push({
severity: "error",
reason: "Looping",
pod: s.metadata.name,
container: e.name,
message: i.getString(o("The container {{name}} is crashing frequently. It must wait before it will be restarted again."), {
name: e.name
})
}), r(e) && c.push({
severity: "warning",
reason: "Unprepared",
pod: s.metadata.name,
container: e.name,
message: i.getString(o("The container {{name}} has been running for more than five minutes and has not passed its readiness check."), {
name: e.name
})
});
}), c.length > 0 ? c : null;
};
} ]).filter("groupedPodWarnings", [ "podWarningsFilter", function(e) {
return function(t, n) {
var r = n || {};
=======
} ]).filter("podWarnings", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", "isTerminatingFilter", function(e, t, n, a, r) {
=======
} ]).filter("podWarnings", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", "isTerminatingFilter", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return function(o) {
var i = [];
return "Unknown" === o.status.phase && i.push({
reason: "Unknown",
pod: o.metadata.name,
message: "The state of the pod could not be obtained. This is typically due to an error communicating with the host of the pod."
}), e(o) && i.push({
reason: "Stuck",
pod: o.metadata.name,
message: "The pod has been stuck in the pending state for more than five minutes."
}), "Running" === o.status.phase && o.status.containerStatuses && _.each(o.status.containerStatuses, function(e) {
if (!e.state) return !1;
n(e) && (a(o) ? i.push({
severity: "error",
reason: "NonZeroExitTerminatingPod",
pod: o.metadata.name,
container: e.name,
message: "The container " + e.name + " did not stop cleanly when terminated (exit code " + e.state.terminated.exitCode + ")."
}) : i.push({
severity: "warning",
reason: "NonZeroExit",
pod: o.metadata.name,
container: e.name,
message: "The container " + e.name + " failed (exit code " + e.state.terminated.exitCode + ")."
})), t(e) && i.push({
severity: "error",
reason: "Looping",
pod: o.metadata.name,
container: e.name,
message: "The container " + e.name + " is crashing frequently. It must wait before it will be restarted again."
}), r(e) && i.push({
severity: "warning",
reason: "Unprepared",
pod: o.metadata.name,
container: e.name,
message: "The container " + e.name + " has been running for more than five minutes and has not passed its readiness check."
});
}), i.length > 0 ? i : null;
};
} ]).filter("groupedPodWarnings", [ "podWarningsFilter", function(e) {
return function(t, n) {
<<<<<<< HEAD
var a = n || {};
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = n || {};
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return _.each(t, function(t) {
var n = e(t);
_.each(n, function(e) {
var t = e.reason + (e.container || "");
<<<<<<< HEAD
<<<<<<< HEAD
r[t] = r[t] || [], r[t].push(e);
});
}), r;
};
} ]).filter("troubledPods", [ "isTroubledPodFilter", function(e) {
return function(t) {
var n = [];
return angular.forEach(t, function(t) {
e(t) && n.push(t);
}), n;
};
=======
a[t] = a[t] || [], a[t].push(e);
=======
r[t] = r[t] || [], r[t].push(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), r;
};
} ]).filter("troubledPods", [ "isTroubledPodFilter", function(e) {
return function(t) {
var n = [];
return angular.forEach(t, function(t) {
e(t) && n.push(t);
}), n;
};
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]).filter("notTroubledPods", [ "isTroubledPodFilter", function(e) {
return function(t) {
var n = [];
return angular.forEach(t, function(t) {
e(t) || n.push(t);
}), n;
};
} ]).filter("projectOverviewURL", [ "Navigate", function(e) {
return function(t) {
return angular.isString(t) ? e.projectOverviewURL(t) : angular.isObject(t) ? e.projectOverviewURL(t.metadata && t.metadata.name) : e.projectOverviewURL("");
};
} ]).filter("catalogURL", [ "Navigate", function(e) {
return e.catalogURL;
} ]).filter("createFromSourceURL", function() {
return function(e, t) {
return URI.expand("project/{project}/catalog/images{?q*}", {
project: e,
q: {
builderfor: t
}
}).toString();
};
}).filter("createFromImageURL", [ "Navigate", function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
return function(t, n, r, a) {
return e.createFromImageURL(t, n, r, a);
};
} ]).filter("createFromTemplateURL", [ "Navigate", function(e) {
return function(t, n, r) {
return e.createFromTemplateURL(t, n, r);
=======
return function(t, n, a, r) {
return e.createFromImageURL(t, n, a, r);
};
} ]).filter("createFromTemplateURL", [ "Navigate", function(e) {
return function(t, n, a) {
return e.createFromTemplateURL(t, n, a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(t, n, r, a) {
return e.createFromImageURL(t, n, r, a);
};
} ]).filter("createFromTemplateURL", [ "Navigate", function(e) {
return function(t, n, r) {
return e.createFromTemplateURL(t, n, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("failureObjectName", function() {
return function(e) {
if (!e.data || !e.data.details) return null;
var t = e.data.details;
return t.kind ? t.id ? t.kind + " " + t.id : t.kind : t.id;
};
}).filter("isIncompleteBuild", [ "ageLessThanFilter", function(e) {
return function(e) {
if (!e || !e.status || !e.status.phase) return !1;
switch (e.status.phase) {
case "New":
case "Pending":
case "Running":
return !0;

default:
return !e.status.completionTimestamp;
}
};
} ]).filter("isRecentBuild", [ "ageLessThanFilter", "isIncompleteBuildFilter", function(e, t) {
return function(n) {
if (!(n && n.status && n.status.phase && n.metadata)) return !1;
if (t(n)) return !0;
<<<<<<< HEAD
<<<<<<< HEAD
var r = n.status.completionTimestamp || n.metadata.creationTimestamp;
return e(r, 5, "minutes");
=======
var a = n.status.completionTimestamp || n.metadata.creationTimestamp;
return e(a, 5, "minutes");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = n.status.completionTimestamp || n.metadata.creationTimestamp;
return e(r, 5, "minutes");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("deploymentCauses", [ "annotationFilter", function(e) {
return function(t) {
if (!t) return [];
var n = e(t, "encodedDeploymentConfig");
if (!n) return [];
try {
<<<<<<< HEAD
<<<<<<< HEAD
var r = $.parseJSON(n);
if (!r) return [];
switch (r.apiVersion) {
case "v1beta1":
return r.details.causes;

case "v1beta3":
case "v1":
return r.status.details ? r.status.details.causes : [];

default:
return Logger.error('Unknown API version "' + r.apiVersion + '" in encoded deployment config for deployment ' + t.metadata.name), r.status && r.status.details && r.status.details.causes ? r.status.details.causes : [];
=======
var a = $.parseJSON(n);
if (!a) return [];
switch (a.apiVersion) {
=======
var r = $.parseJSON(n);
if (!r) return [];
switch (r.apiVersion) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
case "v1beta1":
return r.details.causes;

case "v1beta3":
case "v1":
return r.status.details ? r.status.details.causes : [];

default:
<<<<<<< HEAD
return Logger.error('Unknown API version "' + a.apiVersion + '" in encoded deployment config for deployment ' + t.metadata.name), a.status && a.status.details && a.status.details.causes ? a.status.details.causes : [];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return Logger.error('Unknown API version "' + r.apiVersion + '" in encoded deployment config for deployment ' + t.metadata.name), r.status && r.status.details && r.status.details.causes ? r.status.details.causes : [];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
} catch (e) {
return Logger.error("Failed to parse encoded deployment config", e), [];
}
};
} ]).filter("desiredReplicas", function() {
return function(e) {
return e && e.spec ? void 0 === e.spec.replicas ? 1 : e.spec.replicas : 0;
};
}).filter("serviceImplicitDNSName", function() {
return function(e) {
return e && e.metadata && e.metadata.name && e.metadata.namespace ? e.metadata.name + "." + e.metadata.namespace + ".svc" : "";
};
}).filter("podsForPhase", function() {
return function(e, t) {
var n = [];
return angular.forEach(e, function(e) {
e.status.phase === t && n.push(e);
}), n;
};
}).filter("numContainersReady", function() {
return function(e) {
var t = 0;
return angular.forEach(e.status.containerStatuses, function(e) {
e.ready && t++;
}), t;
};
}).filter("numContainerRestarts", function() {
return function(e) {
var t = 0;
return angular.forEach(e.status.containerStatuses, function(e) {
t += e.restartCount;
}), t;
};
}).filter("isTerminating", function() {
return function(e) {
return _.has(e, "metadata.deletionTimestamp");
};
}).filter("isPullingImage", function() {
return function(e) {
if (!e) return !1;
if ("Pending" !== _.get(e, "status.phase")) return !1;
var t = _.get(e, "status.containerStatuses");
if (!t) return !1;
return _.some(t, function(e) {
return "ContainerCreating" === _.get(e, "state.waiting.reason");
});
};
}).filter("newestResource", function() {
return function(e) {
var t = null;
return angular.forEach(e, function(e) {
if (t) moment(t.metadata.creationTimestamp).isBefore(e.metadata.creationTimestamp) && (t = e); else {
if (!e.metadata.creationTimestamp) return;
t = e;
}
}), t;
};
}).filter("deploymentIsLatest", [ "annotationFilter", function(e) {
return function(t, n) {
return !(!n || !t) && parseInt(e(t, "deploymentVersion")) === n.status.latestVersion;
};
} ]).filter("deploymentStatus", [ "annotationFilter", "hasDeploymentConfigFilter", function(e, t) {
return function(n) {
if (e(n, "deploymentCancelled")) return "Cancelled";
<<<<<<< HEAD
<<<<<<< HEAD
var r = e(n, "deploymentStatus");
return !t(n) || "Complete" === r && n.spec.replicas > 0 ? "Active" : r;
=======
var a = e(n, "deploymentStatus");
return !t(n) || "Complete" === a && n.spec.replicas > 0 ? "Active" : a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e(n, "deploymentStatus");
return !t(n) || "Complete" === r && n.spec.replicas > 0 ? "Active" : r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("deploymentIsInProgress", [ "deploymentStatusFilter", function(e) {
return function(t) {
return [ "New", "Pending", "Running" ].indexOf(e(t)) > -1;
};
} ]).filter("anyDeploymentIsInProgress", [ "deploymentIsInProgressFilter", function(e) {
return function(t) {
return _.some(t, e);
};
} ]).filter("getActiveDeployment", [ "DeploymentsService", function(e) {
return function(t) {
return e.getActiveDeployment(t);
};
} ]).filter("isRecentDeployment", [ "deploymentIsLatestFilter", "deploymentIsInProgressFilter", function(e, t) {
<<<<<<< HEAD
<<<<<<< HEAD
return function(n, r) {
return !!e(n, r) || !!t(n);
=======
return function(n, a) {
return !!e(n, a) || !!t(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(n, r) {
return !!e(n, r) || !!t(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("buildStrategy", function() {
return function(e) {
if (!e || !e.spec || !e.spec.strategy) return null;
switch (e.spec.strategy.type) {
case "Source":
return e.spec.strategy.sourceStrategy;

case "Docker":
return e.spec.strategy.dockerStrategy;

case "Custom":
return e.spec.strategy.customStrategy;

case "JenkinsPipeline":
return e.spec.strategy.jenkinsPipelineStrategy;

default:
return null;
}
};
}).filter("isBinaryBuild", function() {
return function(e) {
return _.has(e, "spec.source.binary");
};
}).filter("isJenkinsPipelineStrategy", function() {
return function(e) {
return "JenkinsPipeline" === _.get(e, "spec.strategy.type");
};
}).filter("jenkinsLogURL", [ "annotationFilter", function(e) {
return function(t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = e(t, "jenkinsLogURL");
return !r || n ? r : r.replace(/\/consoleText$/, "/console");
=======
var a = e(t, "jenkinsLogURL");
return !a || n ? a : a.replace(/\/consoleText$/, "/console");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e(t, "jenkinsLogURL");
return !r || n ? r : r.replace(/\/consoleText$/, "/console");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("jenkinsBuildURL", [ "annotationFilter", "jenkinsLogURLFilter", function(e, t) {
return function(t) {
return e(t, "jenkinsBuildURL");
};
} ]).filter("jenkinsInputURL", [ "jenkinsBuildURLFilter", function(e) {
return function(t) {
var n = e(t);
return n ? new URI(n).segment("/input/").toString() : null;
};
} ]).filter("buildLogURL", [ "isJenkinsPipelineStrategyFilter", "jenkinsLogURLFilter", "navigateResourceURLFilter", function(e, t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return function(r) {
if (e(r)) return t(r);
var a = n(r);
return a ? new URI(a).addSearch("tab", "logs").toString() : null;
<<<<<<< HEAD
=======
return function(a) {
if (e(a)) return t(a);
var r = n(a);
return r ? new URI(r).addSearch("tab", "logs").toString() : null;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("jenkinsfileLink", [ "isJenkinsPipelineStrategyFilter", "githubLinkFilter", function(e, t) {
return function(n) {
if (!e(n) || _.has(n, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile")) return "";
<<<<<<< HEAD
<<<<<<< HEAD
var r = _.get(n, "spec.source.git.uri");
if (!r) return "";
var a = _.get(n, "spec.source.git.ref"), o = _.get(n, "spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath", "Jenkinsfile"), i = _.get(n, "spec.source.contextDir");
i && (o = URI.joinPaths(i, o).path());
var s = t(r, a, o);
=======
var a = _.get(n, "spec.source.git.uri");
if (!a) return "";
var r = _.get(n, "spec.source.git.ref"), o = _.get(n, "spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath", "Jenkinsfile"), i = _.get(n, "spec.source.contextDir");
i && (o = URI.joinPaths(i, o).path());
var s = t(a, r, o);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = _.get(n, "spec.source.git.uri");
if (!r) return "";
var a = _.get(n, "spec.source.git.ref"), o = _.get(n, "spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath", "Jenkinsfile"), i = _.get(n, "spec.source.contextDir");
i && (o = URI.joinPaths(i, o).path());
var s = t(r, a, o);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return URI(s).is("url") ? s : "";
};
} ]).filter("pipelineStageComplete", function() {
return function(e) {
return !!e && -1 !== _.indexOf([ "ABORTED", "FAILED", "SUCCESS" ], e.status);
};
}).filter("pipelineStagePendingInput", function() {
return function(e) {
return !!e && "PAUSED_PENDING_INPUT" === e.status;
};
}).filter("deploymentStrategyParams", function() {
return function(e) {
switch (_.get(e, "spec.strategy.type")) {
case "Recreate":
return _.get(e, "spec.strategy.recreateParams", {});

case "Rolling":
return _.get(e, "spec.strategy.rollingParams", {});

case "Custom":
return _.get(e, "spec.strategy.customParams", {});

default:
return null;
}
};
}).filter("humanizeTLSTermination", function() {
return function(e) {
switch (e) {
case "edge":
return "Edge";

case "passthrough":
return "Passthrough";

case "reencrypt":
return "Re-encrypt";

default:
return e;
}
};
}).filter("kindToResource", [ "APIService", function(e) {
return e.kindToResource;
} ]).filter("abbreviateResource", [ "APIService", function(e) {
var t = {
buildconfigs: "bc",
deploymentconfigs: "dc",
horizontalpodautoscalers: "hpa",
imagestreams: "is",
imagestreamtags: "istag",
replicasets: "rs",
replicationcontrollers: "rc",
services: "svc"
};
return function(e) {
return t[e] || e;
};
} ]).filter("humanizeQuotaResource", function() {
return function(e, t) {
if (!e) return e;
var n = {
configmaps: "Config Maps",
cpu: "CPU (Request)",
"limits.cpu": "CPU (Limit)",
"limits.memory": "Memory (Limit)",
memory: "Memory (Request)",
"openshift.io/imagesize": "Image Size",
"openshift.io/imagestreamsize": "Image Stream Size",
"openshift.io/projectimagessize": "Project Image Size",
persistentvolumeclaims: "Persistent Volume Claims",
"requests.storage": "Storage (Request)",
pods: "Pods",
replicationcontrollers: "Replication Controllers",
"requests.cpu": "CPU (Request)",
"requests.memory": "Memory (Request)",
resourcequotas: "Resource Quotas",
secrets: "Secrets",
services: "Services",
"services.loadbalancers": "Service Load Balancers",
"services.nodeports": "Service Node Ports"
<<<<<<< HEAD
<<<<<<< HEAD
}, r = {
=======
}, a = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
configmaps: "config maps",
cpu: "CPU (request)",
"limits.cpu": "CPU (limit)",
"limits.memory": "memory (limit)",
memory: "memory (request)",
"openshift.io/imagesize": "image size",
"openshift.io/imagestreamsize": "image stream size",
"openshift.io/projectimagessize": "project image size",
persistentvolumeclaims: "persistent volume claims",
"requests.storage": "storage (request)",
replicationcontrollers: "replication controllers",
"requests.cpu": "CPU (request)",
"requests.memory": "memory (request)",
resourcequotas: "resource quotas",
"services.loadbalancers": "service load balancers",
"services.nodeports": "service node ports"
};
<<<<<<< HEAD
<<<<<<< HEAD
return t ? n[e] || e : r[e] || e;
};
}).filter("routeTargetPortMapping", [ "RoutesService", function(e) {
var t = function(e, t, n) {
var r = "Service Port " + (e = e || "<unknown>") + " → Container Port " + (t = t || "<unknown>");
return n && (r += " (" + n + ")"), r;
};
return function(n, r) {
if (!n.spec.port || !n.spec.port.targetPort || !r) return "";
var a = n.spec.port.targetPort, o = e.getServicePortForRoute(a, r);
return o ? t(o.port, o.targetPort, o.protocol) : angular.isString(a) ? t(a, null) : t(null, a);
=======
return t ? n[e] || e : a[e] || e;
=======
return t ? n[e] || e : r[e] || e;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}).filter("routeTargetPortMapping", [ "RoutesService", function(e) {
var t = function(e, t, n) {
var r = "Service Port " + (e = e || "<unknown>") + " → Container Port " + (t = t || "<unknown>");
return n && (r += " (" + n + ")"), r;
};
<<<<<<< HEAD
return function(n, a) {
if (!n.spec.port || !n.spec.port.targetPort || !a) return "";
var r = n.spec.port.targetPort, o = e.getServicePortForRoute(r, a);
return o ? t(o.port, o.targetPort, o.protocol) : angular.isString(r) ? t(r, null) : t(null, r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(n, r) {
if (!n.spec.port || !n.spec.port.targetPort || !r) return "";
var a = n.spec.port.targetPort, o = e.getServicePortForRoute(a, r);
return o ? t(o.port, o.targetPort, o.protocol) : angular.isString(a) ? t(a, null) : t(null, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("podStatus", function() {
return function(e) {
if (!e || !e.metadata.deletionTimestamp && !e.status) return "";
if (e.metadata.deletionTimestamp) return "Terminating";
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Fix bug where Init:Error failed pods displayed "Pod initializing"
var t, n = !1;
return _.each(e.status.initContainerStatuses, function(e) {
var r = _.get(e, "state");
if (!r.terminated || 0 !== r.terminated.exitCode) return r.terminated ? (t = r.terminated.reason ? "Init " + r.terminated.reason : r.terminated.signal ? "Init Signal: " + r.terminated.signal : "Init Exit Code: " + r.terminated.exitCode, n = !0, !0) : void (r.waiting && r.waiting.reason && "PodInitializing" !== r.waiting.reason && (t = "Init " + r.waiting.reason, n = !0));
}), n || (t = e.status.reason || e.status.phase, _.each(e.status.containerStatuses, function(e) {
<<<<<<< HEAD
var n, r, a = _.get(e, "state.waiting.reason") || _.get(e, "state.terminated.reason");
return a ? (t = a, !0) : (n = _.get(e, "state.terminated.signal")) ? (t = "Signal: " + n, !0) : (r = _.get(e, "state.terminated.exitCode")) ? (t = "Exit Code: " + r, !0) : void 0;
})), t;
=======
var t = e.status.reason || e.status.phase;
return angular.forEach(e.status.containerStatuses, function(e) {
var n, r, a = _.get(e, "state.waiting.reason") || _.get(e, "state.terminated.reason");
a ? t = a : (n = _.get(e, "state.terminated.signal")) ? t = "Signal: " + n : (r = _.get(e, "state.terminated.exitCode")) && (t = "Exit Code: " + r);
}), t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n, r, a = _.get(e, "state.waiting.reason") || _.get(e, "state.terminated.reason");
return a ? (t = a, !0) : (n = _.get(e, "state.terminated.signal")) ? (t = "Signal: " + n, !0) : (r = _.get(e, "state.terminated.exitCode")) ? (t = "Exit Code: " + r, !0) : void 0;
})), t;
>>>>>>> Fix bug where Init:Error failed pods displayed "Pod initializing"
};
}).filter("podStartTime", function() {
return function(e) {
var t = null;
return _.each(_.get(e, "status.containerStatuses"), function(e) {
var n = _.get(e, "state.running") || _.get(e, "state.terminated");
n && (t && !moment(n.startedAt).isBefore(t) || (t = n.startedAt));
}), t;
};
}).filter("podCompletionTime", function() {
return function(e) {
var t = null;
return _.each(_.get(e, "status.containerStatuses"), function(e) {
var n = _.get(e, "state.terminated");
n && (t && !moment(n.finishedAt).isAfter(t) || (t = n.finishedAt));
}), t;
};
}).filter("routeIngressCondition", function() {
return function(e, t) {
return e ? _.find(e.conditions, {
type: t
}) : null;
};
}).filter("routeHost", function() {
return function(e, t) {
if (!_.get(e, "status.ingress")) return _.get(e, "spec.host");
if (!e.status.ingress) return e.spec.host;
var n = null;
return angular.forEach(e.status.ingress, function(e) {
_.some(e.conditions, {
type: "Admitted",
status: "True"
}) && (!n || n.lastTransitionTime > e.lastTransitionTime) && (n = e);
}), n ? n.host : t ? null : e.spec.host;
};
}).filter("isRequestCalculated", [ "LimitRangesService", function(e) {
return function(t, n) {
return e.isRequestCalculated(t, n);
};
} ]).filter("isLimitCalculated", [ "LimitRangesService", function(e) {
return function(t, n) {
return e.isLimitCalculated(t, n);
<<<<<<< HEAD
=======
};
<<<<<<< HEAD
} ]).filter("hpaCPUPercent", [ "HPAService", "LimitRangesService", function(e, t) {
<<<<<<< HEAD
return function(n, a) {
return n && t.isRequestCalculated("cpu", a) ? e.convertRequestPercentToLimit(n, a) : n;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(n, r) {
return n && t.isRequestCalculated("cpu", r) ? e.convertRequestPercentToLimit(n, r) : n;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
=======
>>>>>>> Use new clusterResourceOverridesEnabled flag
} ]).filter("podTemplate", function() {
return function(e) {
return e ? "Pod" === e.kind ? e : _.get(e, "spec.template") : null;
};
}).filter("hasHealthChecks", function() {
return function(e) {
var t = _.get(e, "spec.containers", []);
return _.every(t, function(e) {
return e.readinessProbe || e.livenessProbe;
});
};
<<<<<<< HEAD
}).filter("scopeDetails", [ "sentenceCaseFilter", "gettext", "gettextCatalog", function(e, t, n) {
var r = {
Terminating: n.getString(t("Affects pods that have an active deadline. These pods usually include builds, deployers, and jobs.")),
NotTerminating: n.getString(t("Affects pods that do not have an active deadline. These pods usually include your applications.")),
BestEffort: n.getString(t("Affects pods that do not have resource limits set. These pods have a best effort quality of service.")),
NotBestEffort: n.getString(t("Affects pods that have at least one resource limit set. These pods do not have a best effort quality of service."))
};
return function(t) {
return r[t] || e(t);
=======
}).filter("scopeDetails", [ "sentenceCaseFilter", function(e) {
var t = {
Terminating: "Affects pods that have an active deadline. These pods usually include builds, deployers, and jobs.",
NotTerminating: "Affects pods that do not have an active deadline. These pods usually include your applications.",
BestEffort: "Affects pods that do not have resource limits set. These pods have a best effort quality of service.",
NotBestEffort: "Affects pods that have at least one resource limit set. These pods do not have a best effort quality of service."
};
return function(n) {
return t[n] || e(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]).filter("isDebugPod", [ "annotationFilter", function(e) {
return function(t) {
return !!e(t, "debug.openshift.io/source-resource");
};
} ]).filter("debugPodSourceName", [ "annotationFilter", function(e) {
return function(t) {
var n = e(t, "debug.openshift.io/source-resource");
if (!n) return "";
<<<<<<< HEAD
<<<<<<< HEAD
var r = n.split("/");
return 2 !== r.length ? (Logger.warn('Invalid debug.openshift.io/source-resource annotation value "' + n + '"'), "") : r[1];
=======
var a = n.split("/");
return 2 !== a.length ? (Logger.warn('Invalid debug.openshift.io/source-resource annotation value "' + n + '"'), "") : a[1];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = n.split("/");
return 2 !== r.length ? (Logger.warn('Invalid debug.openshift.io/source-resource annotation value "' + n + '"'), "") : r[1];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("entrypoint", function() {
var e = function(e) {
return _.isArray(e) ? e.join(" ") : e;
};
return function(t, n) {
if (!t) return null;
<<<<<<< HEAD
<<<<<<< HEAD
var r, a = e(t.command), o = e(t.args);
if (a && o) return a + " " + o;
if (a) return a;
if (n) {
if (r = e(_.get(n, "dockerImageMetadata.Config.Entrypoint") || [ "/bin/sh", "-c" ]), o) return r + " " + o;
if (a = e(_.get(n, "dockerImageMetadata.Config.Cmd"))) return r + " " + a;
=======
var a, r = e(t.command), o = e(t.args);
if (r && o) return r + " " + o;
if (r) return r;
if (n) {
if (a = e(_.get(n, "dockerImageMetadata.Config.Entrypoint") || [ "/bin/sh", "-c" ]), o) return a + " " + o;
if (r = e(_.get(n, "dockerImageMetadata.Config.Cmd"))) return a + " " + r;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r, a = e(t.command), o = e(t.args);
if (a && o) return a + " " + o;
if (a) return a;
if (n) {
if (r = e(_.get(n, "dockerImageMetadata.Config.Entrypoint") || [ "/bin/sh", "-c" ]), o) return r + " " + o;
if (a = e(_.get(n, "dockerImageMetadata.Config.Cmd"))) return r + " " + a;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
return o ? "<image-entrypoint> " + o : null;
};
}).filter("unidleTargetReplicas", [ "annotationFilter", function(e) {
return function(t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
var r;
if (t) try {
r = parseInt(e(t, "idledPreviousScale"));
} catch (e) {
Logger.error("Unable to parse previous scale annotation as a number.");
}
return r || _.get(_.head(n), "spec.minReplicas") || 1;
=======
var a;
=======
var r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (t) try {
r = parseInt(e(t, "idledPreviousScale"));
} catch (e) {
Logger.error("Unable to parse previous scale annotation as a number.");
}
<<<<<<< HEAD
<<<<<<< HEAD
return a || _.get(_.first(n), "spec.minReplicas") || 1;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return a || _.get(_.head(n), "spec.minReplicas") || 1;
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
return r || _.get(_.head(n), "spec.minReplicas") || 1;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("lastDeploymentRevision", [ "annotationFilter", function(e) {
return function(t) {
if (!t) return "";
var n = e(t, "deployment.kubernetes.io/revision");
return n ? "#" + n : "Unknown";
};
} ]).filter("hasPostCommitHook", function() {
return function(e) {
return _.has(e, "spec.postCommit.command") || _.has(e, "spec.postCommit.script") || _.has(e, "spec.postCommit.args");
};
<<<<<<< HEAD
}).filter("volumeMountMode", [ "gettext", "gettextCatalog", function(e, t) {
var n = function(e) {
return _.has(e, "configMap") || _.has(e, "secret");
};
return function(r, a) {
if (!r) return "";
var o = _.find(a, {
name: r.name
});
return n(o) ? "read-only" : _.get(o, "persistentVolumeClaim.readOnly") ? "read-only" : t.getString(e(r.readOnly ? "read-only" : "read-write"));
};
<<<<<<< HEAD
} ]).filter("managesRollouts", [ "APIService", function(e) {
return function(t) {
if (!t) return !1;
var n = e.objectToResourceGroupVersion(t);
return "deploymentconfigs" === n.resource && !n.group || "deployments" === n.resource && ("apps" === n.group || "extensions" === n.group);
};
} ]).filter("hasAlternateBackends", function() {
return function(e) {
var t = _.get(e, "spec.alternateBackends", []);
return !_.isEmpty(t);
};
}).filter("readyConditionMessage", [ "statusConditionFilter", function(e) {
return function(t) {
return _.get(e(t, "Ready"), "message");
};
} ]).filter("failedConditionMessage", [ "statusConditionFilter", function(e) {
return function(t) {
return _.get(e(t, "Failed"), "message");
};
} ]).filter("serviceInstanceConditionMessage", [ "serviceInstanceStatusFilter", "statusConditionFilter", function(e, t) {
return function(n) {
var r = e(n), a = null;
switch (r) {
case "Failed":
case "Ready":
a = _.get(t(n, r), "message");
}
return a;
};
} ]).filter("humanizeReason", function() {
return function(e) {
return _.startCase(e).replace("Back Off", "Back-off").replace("O Auth", "OAuth");
};
}).filter("humanizePodStatus", [ "humanizeReasonFilter", function(e) {
return e;
} ]), angular.module("openshiftConsole").filter("canIDoAny", [ "APIService", "canIFilter", function(e, t) {
var n = {
buildConfigs: [ {
group: "",
resource: "buildconfigs",
verbs: [ "delete", "update" ]
}, {
group: "",
resource: "buildconfigs/instantiate",
verbs: [ "create" ]
=======
}).filter("managesRollouts", [ "APIService", function(a) {
return function(b) {
if (!b) return !1;
var c = a.objectToResourceGroupVersion(b);
return "deploymentconfigs" === c.resource && !c.group || "deployments" === c.resource && ("apps" === c.group || "extensions" === c.group);
=======
}).filter("volumeMountMode", function() {
var e = function(e) {
return _.has(e, "configMap") || _.has(e, "secret");
};
return function(t, n) {
if (!t) return "";
var r = _.find(n, {
name: t.name
});
return e(r) ? "read-only" : _.get(r, "persistentVolumeClaim.readOnly") ? "read-only" : t.readOnly ? "read-only" : "read-write";
};
}).filter("managesRollouts", [ "APIService", function(e) {
return function(t) {
if (!t) return !1;
var n = e.objectToResourceGroupVersion(t);
return "deploymentconfigs" === n.resource && !n.group || "deployments" === n.resource && ("apps" === n.group || "extensions" === n.group);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]).filter("hasAlternateBackends", function() {
return function(e) {
var t = _.get(e, "spec.alternateBackends", []);
return !_.isEmpty(t);
};
}).filter("readyConditionMessage", [ "statusConditionFilter", function(e) {
return function(t) {
return _.get(e(t, "Ready"), "message");
};
} ]).filter("failedConditionMessage", [ "statusConditionFilter", function(e) {
return function(t) {
return _.get(e(t, "Failed"), "message");
};
} ]).filter("serviceInstanceConditionMessage", [ "serviceInstanceStatusFilter", "statusConditionFilter", function(e, t) {
return function(n) {
var r = e(n), a = null;
switch (r) {
case "Failed":
case "Ready":
a = _.get(t(n, r), "message");
}
return a;
};
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").filter("canIDoAny", [ "canIFilter", function(e) {
var t = {
=======
} ]).filter("humanizeReason", function() {
return function(e) {
return _.startCase(e).replace("Back Off", "Back-off").replace("O Auth", "OAuth");
};
}).filter("humanizePodStatus", [ "humanizeReasonFilter", function(e) {
return e;
} ]), angular.module("openshiftConsole").filter("canIDoAny", [ "APIService", "canIFilter", function(e, t) {
var n = {
>>>>>>> Special case some humanized reasons codes
buildConfigs: [ {
group: "",
resource: "buildconfigs",
verbs: [ "delete", "update" ]
}, {
group: "",
resource: "buildconfigs/instantiate",
verbs: [ "create" ]
} ],
builds: [ {
group: "",
resource: "builds/clone",
verbs: [ "create" ]
}, {
group: "",
resource: "builds",
verbs: [ "delete", "update" ]
} ],
configmaps: [ {
group: "",
resource: "configmaps",
verbs: [ "update", "delete" ]
} ],
deployments: [ _.assign({}, e.getPreferredVersion("horizontalpodautoscalers"), {
verbs: [ "create", "update" ]
}), _.assign({}, e.getPreferredVersion("deployments"), {
verbs: [ "update", "delete" ]
<<<<<<< HEAD
} ],
<<<<<<< HEAD
deploymentConfigs:[ {
group:"autoscaling",
resource:"horizontalpodautoscalers",
verbs:[ "create", "update" ]
}, {
group:"",
resource:"deploymentconfigs",
verbs:[ "create", "update" ]
>>>>>>> Use `apps` API group for deployments
} ],
builds: [ _.assign({}, e.getPreferredVersion("builds/clone"), {
verbs: [ "create" ]
}), _.assign({}, e.getPreferredVersion("builds"), {
verbs: [ "delete", "update" ]
}) ],
configmaps: [ {
group: "",
resource: "configmaps",
verbs: [ "update", "delete" ]
} ],
deployments: [ _.assign({}, e.getPreferredVersion("horizontalpodautoscalers"), {
verbs: [ "create", "update" ]
}), _.assign({}, e.getPreferredVersion("deployments"), {
verbs: [ "update", "delete" ]
}) ],
deploymentConfigs: [ _.assign({}, e.getPreferredVersion("horizontalpodautoscalers"), {
<<<<<<< HEAD
verbs: [ "create", "update" ]
}), _.assign({}, e.getPreferredVersion("deploymentconfigs"), {
verbs: [ "create", "update" ]
}) ],
horizontalPodAutoscalers: [ {
group: "autoscaling",
resource: "horizontalpodautoscalers",
verbs: [ "update", "delete" ]
} ],
imageStreams: [ _.assign({}, e.getPreferredVersion("imagestreams"), {
verbs: [ "update", "delete" ]
}) ],
serviceInstances: [ _.assign({}, e.getPreferredVersion("serviceinstances"), {
verbs: [ "update", "delete" ]
}) ],
=======
=======
}) ],
>>>>>>> Update deployment controller to get getPreferredVersion
deploymentConfigs: [ {
group: "autoscaling",
resource: "horizontalpodautoscalers",
=======
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
verbs: [ "create", "update" ]
}), _.assign({}, e.getPreferredVersion("deploymentconfigs"), {
verbs: [ "create", "update" ]
}) ],
horizontalPodAutoscalers: [ {
group: "autoscaling",
resource: "horizontalpodautoscalers",
verbs: [ "update", "delete" ]
} ],
imageStreams: [ _.assign({}, e.getPreferredVersion("imagestreams"), {
verbs: [ "update", "delete" ]
<<<<<<< HEAD
} ],
<<<<<<< HEAD
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
}) ],
<<<<<<< HEAD
>>>>>>> Update ImageController to use getPreferredVersion
serviceInstances: [ {
group: "servicecatalog.k8s.io",
resource: "serviceinstances",
verbs: [ "update", "delete" ]
} ],
>>>>>>> Updates for Service Instance & Bindings
=======
serviceInstances: [ _.assign({}, e.getPreferredVersion("serviceinstances"), {
verbs: [ "update", "delete" ]
}) ],
>>>>>>> Adopt more service catalog API changes
persistentVolumeClaims: [ {
group: "",
resource: "persistentvolumeclaims",
verbs: [ "update", "delete" ]
} ],
pods: [ {
group: "",
resource: "pods",
verbs: [ "update", "delete" ]
}, {
group: "",
resource: "deploymentconfigs",
verbs: [ "update" ]
} ],
replicaSets: [ {
group: "autoscaling",
resource: "horizontalpodautoscalers",
verbs: [ "create", "update" ]
}, {
group: "extensions",
resource: "replicasets",
verbs: [ "update", "delete" ]
} ],
replicationControllers: [ {
group: "",
resource: "replicationcontrollers",
verbs: [ "update", "delete" ]
} ],
routes: [ {
group: "",
resource: "routes",
verbs: [ "update", "delete" ]
} ],
services: [ {
group: "",
resource: "services",
verbs: [ "update", "create", "delete" ]
} ],
secrets: [ {
group: "",
resource: "secrets",
verbs: [ "update", "delete" ]
} ],
projects: [ {
group: "",
resource: "projects",
verbs: [ "delete", "update" ]
} ],
statefulsets: [ {
group: "apps",
resource: "statefulsets",
verbs: [ "update", "delete" ]
} ]
};
<<<<<<< HEAD
return function(e) {
return _.some(n[e], function(e) {
return _.some(e.verbs, function(n) {
return t({
resource: e.resource,
group: e.group
=======
return function(n) {
return _.some(t[n], function(t) {
return _.some(t.verbs, function(n) {
return e({
resource: t.resource,
group: t.group
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, n);
});
});
};
} ]).filter("canIScale", [ "canIFilter", "hasDeploymentConfigFilter", "DeploymentsService", function(e, t, n) {
return function(t) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = n.getScaleResource(t);
return e(r, "update");
=======
var a = n.getScaleResource(t);
return e(a, "update");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = n.getScaleResource(t);
return e(r, "update");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]), angular.module("openshiftConsole").filter("underscore", function() {
return function(e) {
return e.replace(/\./g, "_");
};
}).filter("defaultIfBlank", function() {
return function(e, t) {
return null === e ? t : ("string" != typeof e && (e = String(e)), 0 === e.trim().length ? t : e);
};
}).filter("keys", function() {
return _.keys;
}).filter("usageValue", function() {
return function(e) {
if (!e) return e;
var t = /(-?[0-9\.]+)\s*(.*)/.exec(e);
if (!t) return e;
var n = t[1];
n = n.indexOf(".") >= 0 ? parseFloat(n) : parseInt(t[1]);
<<<<<<< HEAD
<<<<<<< HEAD
var r = 1;
switch (t[2]) {
case "E":
r = Math.pow(1e3, 6);
break;

case "P":
r = Math.pow(1e3, 5);
break;

case "T":
r = Math.pow(1e3, 4);
break;

case "G":
r = Math.pow(1e3, 3);
break;

case "M":
r = Math.pow(1e3, 2);
=======
var a = 1;
=======
var r = 1;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
switch (t[2]) {
case "E":
r = Math.pow(1e3, 6);
break;

case "P":
r = Math.pow(1e3, 5);
break;

case "T":
r = Math.pow(1e3, 4);
break;

case "G":
r = Math.pow(1e3, 3);
break;

case "M":
<<<<<<< HEAD
a = Math.pow(1e3, 2);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r = Math.pow(1e3, 2);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
break;

case "K":
case "k":
<<<<<<< HEAD
<<<<<<< HEAD
r = 1e3;
break;

case "m":
r = .001;
break;

case "Ei":
r = Math.pow(1024, 6);
break;

case "Pi":
r = Math.pow(1024, 5);
break;

case "Ti":
r = Math.pow(1024, 4);
break;

case "Gi":
r = Math.pow(1024, 3);
break;

case "Mi":
r = Math.pow(1024, 2);
break;

case "Ki":
r = 1024;
}
return n * r;
=======
a = 1e3;
=======
r = 1e3;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
break;

case "m":
r = .001;
break;

case "Ei":
r = Math.pow(1024, 6);
break;

case "Pi":
r = Math.pow(1024, 5);
break;

case "Ti":
r = Math.pow(1024, 4);
break;

case "Gi":
r = Math.pow(1024, 3);
break;

case "Mi":
r = Math.pow(1024, 2);
break;

case "Ki":
r = 1024;
}
<<<<<<< HEAD
return n * a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return n * r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}).filter("humanizeUnit", function() {
return function(e, t, n) {
switch (t) {
case "memory":
case "limits.memory":
case "requests.memory":
case "storage":
return e ? e + "B" : e;

case "cpu":
case "limits.cpu":
case "requests.cpu":
"m" === e && (e = "milli");
<<<<<<< HEAD
<<<<<<< HEAD
var r = n ? "core" : "cores";
return (e || "") + r;
=======
var a = n ? "core" : "cores";
return (e || "") + a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = n ? "core" : "cores";
return (e || "") + r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion

default:
return e;
}
};
}).filter("amountAndUnit", [ "humanizeUnitFilter", function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
return function(t, n, r) {
if (!t) return [ t, null ];
var a = /(-?[0-9\.]+)\s*(.*)/.exec(t);
if (!a) return [ t, null ];
var o = a[1], i = a[2];
return r && (i = e(i, n, "1" === o)), [ o, i ];
=======
return function(t, n, a) {
if (!t) return [ t, null ];
var r = /(-?[0-9\.]+)\s*(.*)/.exec(t);
if (!r) return [ t, null ];
var o = r[1], i = r[2];
return a && (i = e(i, n, "1" === o)), [ o, i ];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(t, n, r) {
if (!t) return [ t, null ];
var a = /(-?[0-9\.]+)\s*(.*)/.exec(t);
if (!a) return [ t, null ];
var o = a[1], i = a[2];
return r && (i = e(i, n, "1" === o)), [ o, i ];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("usageWithUnits", [ "amountAndUnitFilter", function(e) {
return function(t, n) {
return _.spread(function(e, t) {
return t ? e + " " + t : e;
})(e(t, n, !0));
};
} ]).filter("humanizeSize", function() {
return function(e) {
if (null === e || void 0 === e || "" === e) return e;
if ((e = Number(e)) < 1024) return e + " bytes";
var t = e / 1024;
if (t < 1024) return t.toFixed(1) + " KiB";
var n = t / 1024;
return n < 1024 ? n.toFixed(1) + " MiB" : (n / 1024).toFixed(1) + " GiB";
};
<<<<<<< HEAD
}).filter("computeResourceLabel", [ "gettext", "gettextCatalog", function(e, t) {
return function(n, r) {
switch (n) {
=======
}).filter("computeResourceLabel", function() {
return function(e, t) {
switch (e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "cpu":
return "CPU";

case "memory":
<<<<<<< HEAD
return r ? t.getString(e("Memory")) : t.getString(e("memory"));

default:
return n;
}
};
} ]).filter("helpLink", [ "Constants", function(e) {
=======
return t ? "Memory" : "memory";

default:
return e;
}
};
}).filter("helpLink", [ "Constants", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return function(t) {
var n = e.HELP[t] || e.HELP.default;
return URI(n).is("absolute") || (n = e.HELP_BASE_URL + n), n;
};
} ]).filter("taskTitle", function() {
return function(e) {
return "completed" !== e.status ? e.titles.started : e.hasErrors ? e.titles.failure : e.titles.success;
};
}).filter("httpHttps", function() {
return function(e) {
return e ? "https://" : "http://";
};
}).filter("isGithubLink", function() {
var e = /^(?:https?:\/\/|git:\/\/|git\+ssh:\/\/|git\+https:\/\/)?(?:[^@]+@)?github\.com[:\/]([^\/]+\/[^\/]+?)(\/|(?:\.git(#.*)?))?$/;
return function(t) {
return t ? e.test(t) : t;
};
}).filter("githubLink", function() {
return function(e, t, n) {
<<<<<<< HEAD
<<<<<<< HEAD
var r = e.match(/^(?:https?:\/\/|git:\/\/|git\+ssh:\/\/|git\+https:\/\/)?(?:[^@]+@)?github\.com[:\/]([^\/]+\/[^\/]+?)(\/|(?:\.git(#.*)?))?$/);
return r && (e = "https://github.com/" + r[1], n && "/" === n.charAt(0) && (n = n.substring(1)), n ? (n = (n = encodeURIComponent(n)).replace("%2F", "/"), e += "/tree/" + encodeURIComponent(t || "master") + "/" + n) : t && "master" !== t && (e += "/tree/" + encodeURIComponent(t))), e;
=======
var a = e.match(/^(?:https?:\/\/|git:\/\/|git\+ssh:\/\/|git\+https:\/\/)?(?:[^@]+@)?github\.com[:\/]([^\/]+\/[^\/]+?)(\/|(?:\.git(#.*)?))?$/);
return a && (e = "https://github.com/" + a[1], n && "/" === n.charAt(0) && (n = n.substring(1)), n ? (n = (n = encodeURIComponent(n)).replace("%2F", "/"), e += "/tree/" + encodeURIComponent(t || "master") + "/" + n) : t && "master" !== t && (e += "/tree/" + encodeURIComponent(t))), e;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = e.match(/^(?:https?:\/\/|git:\/\/|git\+ssh:\/\/|git\+https:\/\/)?(?:[^@]+@)?github\.com[:\/]([^\/]+\/[^\/]+?)(\/|(?:\.git(#.*)?))?$/);
return r && (e = "https://github.com/" + r[1], n && "/" === n.charAt(0) && (n = n.substring(1)), n ? (n = (n = encodeURIComponent(n)).replace("%2F", "/"), e += "/tree/" + encodeURIComponent(t || "master") + "/" + n) : t && "master" !== t && (e += "/tree/" + encodeURIComponent(t))), e;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}).filter("yesNo", function() {
return function(e) {
return e ? "Yes" : "No";
};
}).filter("valuesIn", function() {
return function(e, t) {
if (!t) return {};
<<<<<<< HEAD
<<<<<<< HEAD
var n = t.split(","), r = {};
return angular.forEach(e, function(e, t) {
-1 !== n.indexOf(t) && (r[t] = e);
}), r;
=======
var n = t.split(","), a = {};
return angular.forEach(e, function(e, t) {
-1 !== n.indexOf(t) && (a[t] = e);
}), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n = t.split(","), r = {};
return angular.forEach(e, function(e, t) {
-1 !== n.indexOf(t) && (r[t] = e);
}), r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}).filter("valuesNotIn", function() {
return function(e, t) {
if (!t) return e;
<<<<<<< HEAD
<<<<<<< HEAD
var n = t.split(","), r = {};
return angular.forEach(e, function(e, t) {
-1 === n.indexOf(t) && (r[t] = e);
}), r;
=======
var n = t.split(","), a = {};
return angular.forEach(e, function(e, t) {
-1 === n.indexOf(t) && (a[t] = e);
}), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n = t.split(","), r = {};
return angular.forEach(e, function(e, t) {
-1 === n.indexOf(t) && (r[t] = e);
}), r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}).filter("stripSHAPrefix", function() {
return function(e) {
return e ? e.replace(/^sha256:/, "") : e;
};
}).filter("limitToOrAll", [ "limitToFilter", function(e) {
return function(t, n) {
return isNaN(n) ? t : e(t, n);
};
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
} ]).filter("getWebhookSecretData", function() {
return function(e) {
var t = _.get(e, "data.type");
return t ? _.get(e, [ "data", _.toLower(t) ]) : null;
};
<<<<<<< HEAD
}).filter("getErrorDetails", [ "gettext", "gettextCatalog", function(e, t) {
return function(n) {
var r = n.data || {};
if (r.message) return t.getString(e("Reason:")) + " " + r.message;
var a = n.status || r.status;
return a ? t.getString(e("Status:")) + " " + a : "";
};
} ]).filter("humanize", function() {
return function(e) {
return e.replace(/([a-z])([A-Z])/g, "$1 $2").replace(/\b([A-Z]+)([A-Z])([a-z])/, "$1 $2$3").replace(/^./, function(e) {
return e.toUpperCase();
});
};
}).filter("navigateResourceURL", [ "Navigate", function(e) {
return function(t, n, r, a) {
return e.resourceURL(t, n, r, null, {
apiVersion: a
});
};
} ]).filter("navigateEventInvolvedObjectURL", [ "Navigate", function(e) {
return function(t) {
return e.resourceURL(t.involvedObject.name, t.involvedObject.kind, t.involvedObject.namespace, null, {
apiVersion: t.involvedObject.apiVersion
});
};
} ]).filter("navigateToTabURL", [ "Navigate", function(e) {
return function(t, n) {
return e.resourceURL(t, null, null, null, {
tab: n
=======
} ]).filter("getErrorDetails", function() {
=======
}).filter("getErrorDetails", function() {
>>>>>>> Handle new build webhooks that use secretRefs instead of inline secrets
return function(e) {
var t = e.data || {};
if (t.message) return "Reason: " + t.message;
var n = e.status || t.status;
return n ? "Status: " + n : "";
};
}).filter("humanize", function() {
return function(e) {
return e.replace(/([a-z])([A-Z])/g, "$1 $2").replace(/\b([A-Z]+)([A-Z])([a-z])/, "$1 $2$3").replace(/^./, function(e) {
return e.toUpperCase();
});
};
}).filter("navigateResourceURL", [ "Navigate", function(e) {
<<<<<<< HEAD
return function(t, n, a, r) {
return e.resourceURL(t, n, a, null, {
apiVersion: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(t, n, r, a) {
return e.resourceURL(t, n, r, null, {
apiVersion: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
};
} ]).filter("navigateEventInvolvedObjectURL", [ "Navigate", function(e) {
return function(t) {
return e.resourceURL(t.involvedObject.name, t.involvedObject.kind, t.involvedObject.namespace, null, {
apiVersion: t.involvedObject.apiVersion
});
};
} ]).filter("navigateToTabURL", [ "Navigate", function(e) {
return function(t, n) {
return e.resourceURL(t, null, null, null, {
tab: n
});
};
} ]).filter("configURLForResource", [ "Navigate", function(e) {
return function(t, n) {
return e.configURLForResource(t, n);
};
} ]).filter("editResourceURL", [ "Navigate", function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
return function(t, n, r) {
return e.resourceURL(t, n, r, "edit");
=======
return function(t, n, a) {
return e.resourceURL(t, n, a, "edit");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(t, n, r) {
return e.resourceURL(t, n, r, "edit");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("editYamlURL", [ "Navigate", function(e) {
return function(t, n) {
return e.yamlURL(t, n);
};
} ]).filter("join", function() {
return function(e, t) {
return t || (t = ","), e.join(t);
};
}).filter("accessModes", function() {
return function(e, t) {
if (!e) return e;
var n = [];
return angular.forEach(e, function(e) {
<<<<<<< HEAD
<<<<<<< HEAD
var r, a = "long" === t;
switch (e) {
case "ReadWriteOnce":
r = a ? "RWO (Read-Write-Once)" : "Read-Write-Once";
break;

case "ReadOnlyMany":
r = a ? "ROX (Read-Only-Many)" : "Read-Only-Many";
break;

case "ReadWriteMany":
r = a ? "RWX (Read-Write-Many)" : "Read-Write-Many";
break;

default:
r = e;
}
n.push(r);
=======
var a, r = "long" === t;
=======
var r, a = "long" === t;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
switch (e) {
case "ReadWriteOnce":
r = a ? "RWO (Read-Write-Once)" : "Read-Write-Once";
break;

case "ReadOnlyMany":
r = a ? "ROX (Read-Only-Many)" : "Read-Only-Many";
break;

case "ReadWriteMany":
r = a ? "RWX (Read-Write-Many)" : "Read-Write-Many";
break;

default:
r = e;
}
<<<<<<< HEAD
n.push(a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.push(r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), _.uniq(n);
};
}).filter("middleEllipses", function() {
return function(e, t, n) {
if (t < 3) return e;
if (e.length <= t) return e;
n || (n = "...");
<<<<<<< HEAD
<<<<<<< HEAD
var r = Math.floor((t - 1) / 2);
return e.slice(0, r) + n + e.slice(e.length - r);
=======
var a = Math.floor((t - 1) / 2);
return e.slice(0, a) + n + e.slice(e.length - a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = Math.floor((t - 1) / 2);
return e.slice(0, r) + n + e.slice(e.length - r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}).filter("isNil", function() {
return function(e) {
return null === e || void 0 === e;
};
}).filter("percent", function() {
return function(e, t) {
return null === e || void 0 === e ? e : _.round(100 * Number(e), t) + "%";
};
}).filter("filterCollection", function() {
return function(e, t) {
return e && t ? _.filter(e, t) : e;
<<<<<<< HEAD
=======
};
<<<<<<< HEAD
}).filter("isAbsoluteURL", function() {
return function(e) {
if (!e) return !1;
var t = new URI(e), n = t.protocol();
return t.is("absolute") && ("http" === n || "https" === n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
=======
>>>>>>> Add SVG icons
}).filter("isIE", function() {
var e = navigator.userAgent, t = /msie|trident/i.test(e);
return function() {
return t;
};
}).filter("isEdge", function() {
var e = navigator.userAgent, t = /chrome.+? edge/i.test(e);
return function() {
return t;
};
}).filter("abs", function() {
return function(e) {
return Math.abs(e);
};
}).filter("encodeURIComponent", function() {
return window.encodeURIComponent;
}).filter("enableTechPreviewFeature", [ "Constants", function(e) {
return function(t) {
return _.get(e, [ "ENABLE_TECH_PREVIEW_FEATURE", t ], !1);
};
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
} ]), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(e, t, n, r) {
var a = _.template([ "/#/discover?", "_g=(", "time:(", "from:now-1w,", "mode:relative,", "to:now", ")", ")", "&_a=(", "columns:!(kubernetes.container_name,message),", "index:'<%= index %>',", "query:(", "query_string:(", "analyze_wildcard:!t,", 'query:\'kubernetes.pod_name:"<%= podname %>" AND kubernetes.namespace_name:"<%= namespace %>"\'', ")", "),", "sort:!('@timestamp',desc)", ")", "#console_container_name=<%= containername %>", "&console_back_url=<%= backlink %>" ].join(""));
return {
scrollTop: function(e) {
e ? e.scrollTop = 0 : window.scrollTo(null, 0);
},
scrollBottom: function(e) {
e ? e.scrollTop = e.scrollHeight : window.scrollTo(0, document.documentElement.scrollHeight - document.documentElement.clientHeight);
},
chromelessLink: function(e, t) {
if (t) r.open(t, "_blank"); else {
var n = {
view: "chromeless"
};
e && e.container && (n.container = e.container), n = _.flatten([ n ]);
var a = new URI();
_.each(n, function(e) {
a.addSearch(e);
}), r.open(a.toString(), "_blank");
=======
} ]), angular.module("openshiftConsole").directive("affix", [ "$window", function(e) {
return {
restrict: "AE",
scope: {
offsetTop: "@",
offsetBottom: "@"
},
link: function(e, t, n, a) {
t.affix({
offset: {
top: n.offsetTop,
bottom: n.offsetBottom
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
},
archiveUri: function(e, t) {
return t = t || "project." + e.namespace + "." + e.namespaceUid, e.index = t + ".*", a(e);
}
};
<<<<<<< HEAD
} ]), angular.module("javaLinkExtension", [ "openshiftConsole" ]).run([ "AuthService", "BaseHref", "DataService", "extensionRegistry", function(e, t, n, r) {
var a = [ "<div row ", 'ng-show="item.url" ', 'class="icon-row" ', 'title="Connect to container">', '<div class="icon-wrap">', '<i class="fa fa-share" aria-hidden="true"></i>', "</div>", "<div flex>", '<a ng-click="item.onClick($event)" ', 'ng-href="item.url">', "Open Java Console", "</a>", "</div>", "</div>" ].join(""), o = function(e, t, r) {
return new URI(n.url({
resource: "pods/proxy",
name: [ "https", t, r || "" ].join(":"),
namespace: e
=======
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentVariables", {
controller: [ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", function(e, t, n, a, r) {
var o, i, s, c, l = this, u = !1, d = [], m = [], p = !1, g = e("canI"), f = e("getErrorDetails"), h = e("humanizeKind"), v = e("orderByDisplayName"), y = function(e, t) {
u || (l.form && !l.form.$pristine && l.updatedObject ? a.isEnvironmentEqual(e, t) ? l.updatedObject = a.mergeEdits(e, t) : (u = !0, r.addNotification({
type: "warning",
message: "The environment variables for the " + o + " have been updated in the background.",
details: "Saving your changes may create a conflict or cause loss of data."
})) : l.updatedObject = a.copyAndNormalize(e));
}, b = function() {
n.list("configmaps", {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
d = v(e.by("metadata.name")), l.valueFromObjects = d.concat(m);
});
}, C = function() {
g("secrets", "list") && n.list("secrets", {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
m = v(e.by("metadata.name")), l.valueFromObjects = d.concat(m);
});
}, S = function() {
p || (p = !0, b(), C());
}, _ = function(e, n) {
o = h(e.kind), i = e.metadata.name, s = t.objectToResourceGroupVersion(e), l.canIUpdate = g(s, "update"), c ? c.finally(function() {
y(e, n);
}) : y(e, n), l.containers = a.getContainers(l.updatedObject), l.disableValueFrom || l.ngReadonly || !l.canIUpdate || S();
};
l.$onChanges = function(e) {
e.apiObject && e.apiObject.currentValue && _(e.apiObject.currentValue, e.apiObject.previousValue);
}, l.save = function() {
var e = "save-env-error-" + i;
r.hideNotification(e), a.compact(l.updatedObject), (c = n.update(s, i, l.updatedObject, {
namespace: l.updatedObject.metadata.namespace
})).then(function() {
r.addNotification({
type: "success",
message: "Environment variables for " + o + " " + i + " were successfully updated."
}), l.form.$setPristine();
}, function(t) {
r.addNotification({
id: e,
type: "error",
message: "An error occurred updating environment variables for " + o + " " + i + ".",
details: f(t)
});
}).finally(function() {
c = null;
});
}, l.clearChanges = function() {
l.updatedObject = a.copyAndNormalize(l.apiObject), l.form.$setPristine(), u = !1;
};
} ],
controllerAs: "$ctrl",
bindings: {
apiObject: "<",
ngReadonly: "<",
disableValueFrom: "<"
},
templateUrl: "views/directives/edit-environment-variables.html"
});
}(), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(e, t, n, a) {
=======
} ]), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(e, t, n, a) {
>>>>>>> Bug 1476157 - Fix minification problems due to dependency injection
var r = _.template([ "/#/discover?", "_g=(", "time:(", "from:now-1w,", "mode:relative,", "to:now", ")", ")", "&_a=(", "columns:!(kubernetes.container_name,message),", "index:'project.<%= namespace %>.<%= namespaceUid %>.*',", "query:(", "query_string:(", "analyze_wildcard:!t,", 'query:\'kubernetes.pod_name:"<%= podname %>" AND kubernetes.namespace_name:"<%= namespace %>"\'', ")", "),", "sort:!('@timestamp',desc)", ")", "#console_container_name=<%= containername %>", "&console_back_url=<%= backlink %>" ].join(""));
=======
} ]), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(e, t, n, r) {
<<<<<<< HEAD
var a = _.template([ "/#/discover?", "_g=(", "time:(", "from:now-1w,", "mode:relative,", "to:now", ")", ")", "&_a=(", "columns:!(kubernetes.container_name,message),", "index:'project.<%= namespace %>.<%= namespaceUid %>.*',", "query:(", "query_string:(", "analyze_wildcard:!t,", 'query:\'kubernetes.pod_name:"<%= podname %>" AND kubernetes.namespace_name:"<%= namespace %>"\'', ")", "),", "sort:!('@timestamp',desc)", ")", "#console_container_name=<%= containername %>", "&console_back_url=<%= backlink %>" ].join(""));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
var a = _.template([ "/#/discover?", "_g=(", "time:(", "from:now-1w,", "mode:relative,", "to:now", ")", ")", "&_a=(", "columns:!(kubernetes.container_name,message),", "index:'<%= index %>',", "query:(", "query_string:(", "analyze_wildcard:!t,", 'query:\'kubernetes.pod_name:"<%= podname %>" AND kubernetes.namespace_name:"<%= namespace %>"\'', ")", "),", "sort:!('@timestamp',desc)", ")", "#console_container_name=<%= containername %>", "&console_back_url=<%= backlink %>" ].join(""));
>>>>>>> bug 1523047. fix log archive link for operation namespaces
return {
scrollTop: function(e) {
e ? e.scrollTop = 0 : window.scrollTo(null, 0);
},
scrollBottom: function(e) {
e ? e.scrollTop = e.scrollHeight : window.scrollTo(0, document.documentElement.scrollHeight - document.documentElement.clientHeight);
},
chromelessLink: function(e, t) {
if (t) r.open(t, "_blank"); else {
var n = {
view: "chromeless"
};
e && e.container && (n.container = e.container), n = _.flatten([ n ]);
var a = new URI();
_.each(n, function(e) {
a.addSearch(e);
}), r.open(a.toString(), "_blank");
}
},
archiveUri: function(e, t) {
return t = t || "project." + e.namespace + "." + e.namespaceUid, e.index = t + ".*", a(e);
}
};
<<<<<<< HEAD
<<<<<<< HEAD
} ]), function() {
var a = "javaLinkExtension";
angular.module(a, [ "openshiftConsole" ]).run([ "AuthService", "BaseHref", "DataService", "extensionRegistry", function(a, b, c, d) {
var e = [ "<div row ", 'ng-show="item.url" ', 'class="icon-row" ', 'title="Connect to container">', '<div class="icon-wrap">', '<i class="fa fa-share" aria-hidden="true"></i>', "</div>", "<div flex>", '<a ng-click="item.onClick($event)" ', 'ng-href="item.url">', "Open Java Console", "</a>", "</div>", "</div>" ].join(""), f = function(a, b, d) {
return new URI(c.url({
resource:"pods/proxy",
name:[ "https", b, d || "" ].join(":"),
namespace:a
>>>>>>> Create reusable edit-environment-variables component
})).segment("jolokia/");
};
r.add("container-links", _.spread(function(n, r) {
var i = _.find(n.ports || [], function(e) {
return e.name && "jolokia" === e.name.toLowerCase();
});
if (i && "Running" === _.get(r, "status.phase")) {
var s = r.status.containerStatuses, c = _.find(s, function(e) {
return e.name === n.name;
});
if (c && c.ready) {
var l = r.metadata.name, u = r.metadata.namespace, d = o(u, l, i.containerPort).toString();
return {
type: "dom",
node: a,
onClick: function(r) {
r.preventDefault(), r.stopPropagation();
var a = window.location.href, o = n.name || "Untitled Container", i = e.UserStore().getToken() || "", s = new URI().path(t).segment("java").segment("").hash(i).query({
jolokiaUrl: d,
title: o,
returnTo: a
=======
} ]), angular.module("javaLinkExtension", [ "openshiftConsole" ]).run([ "AuthService", "BaseHref", "DataService", "extensionRegistry", function(e, t, n, a) {
var r = [ "<div row ", 'ng-show="item.url" ', 'class="icon-row" ', 'title="Connect to container">', '<div class="icon-wrap">', '<i class="fa fa-share" aria-hidden="true"></i>', "</div>", "<div flex>", '<a ng-click="item.onClick($event)" ', 'ng-href="item.url">', "Open Java Console", "</a>", "</div>", "</div>" ].join(""), o = function(e, t, a) {
=======
} ]), angular.module("javaLinkExtension", [ "openshiftConsole" ]).run([ "AuthService", "BaseHref", "DataService", "extensionRegistry", function(e, t, n, r) {
var a = [ "<div row ", 'ng-show="item.url" ', 'class="icon-row" ', 'title="Connect to container">', '<div class="icon-wrap">', '<i class="fa fa-share" aria-hidden="true"></i>', "</div>", "<div flex>", '<a ng-click="item.onClick($event)" ', 'ng-href="item.url">', "Open Java Console", "</a>", "</div>", "</div>" ].join(""), o = function(e, t, r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return new URI(n.url({
resource: "pods/proxy",
name: [ "https", t, r || "" ].join(":"),
namespace: e
})).segment("jolokia/");
};
r.add("container-links", _.spread(function(n, r) {
var i = _.find(n.ports || [], function(e) {
return e.name && "jolokia" === e.name.toLowerCase();
});
if (i && "Running" === _.get(r, "status.phase")) {
var s = r.status.containerStatuses, c = _.find(s, function(e) {
return e.name === n.name;
});
if (c && c.ready) {
var l = r.metadata.name, u = r.metadata.namespace, d = o(u, l, i.containerPort).toString();
return {
type: "dom",
node: a,
onClick: function(r) {
r.preventDefault(), r.stopPropagation();
var a = window.location.href, o = n.name || "Untitled Container", i = e.UserStore().getToken() || "", s = new URI().path(t).segment("java").segment("").hash(i).query({
jolokiaUrl: d,
title: o,
<<<<<<< HEAD
returnTo: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
returnTo: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
window.location.href = s.toString();
},
url: d
};
}
}
}));
} ]), hawtioPluginLoader.addModule("javaLinkExtension"), angular.module("openshiftConsole").run([ "extensionRegistry", function(e) {
e.add("nav-help-dropdown", function() {
var e = [];
<<<<<<< HEAD
if (!_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE")) {
var t = _.get(window, "OPENSHIFT_CONSTANTS.GUIDED_TOURS.landing_page_tour");
t && t.enabled && t.steps && e.push({
type: "dom",
node: '<li><a href="catalog?startTour=true">Tour Catalog Home</a></li>'
});
}
return e.push({
type: "dom",
node: '<li><a href="command-line">Command Line Tools</a></li>'
}), e.push({
type: "dom",
node: '<li><a href="about">About</a></li>'
}), e;
});
} ]), angular.module("openshiftConsole").run([ "extensionRegistry", "$rootScope", "DataService", "AuthService", "gettextCatalog", "gettext", function(e, t, n, r, a, o) {
e.add("nav-user-dropdown", function() {
var e = [];
if (_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_COPY_LOGIN_COMMAND") || e.push({
type: "dom",
node: "<li><copy-login-to-clipboard clipboard-text=\"'oc login " + n.openshiftAPIBaseUrl() + " --token=" + r.UserStore().getToken() + "'\"></copy-login-to-clipboard></li>"
}), t.user.metadata.annotations && t.user.metadata.annotations.manager) {
var i = r.UserStore().getToken();
e.push({
type: "dom",
node: '<li><a href="' + window.DMOS_ADDRESS + "?t=" + i + '">集群管理</a></li>'
});
}
var s = a.getString(o("Log Out"));
return t.user.fullName && t.user.fullName !== t.user.metadata.name && (s += " (" + t.user.metadata.name + ")"), e.push({
type: "dom",
node: '<li><a href="logout">' + _.escape(s) + "</a></li>"
}), e;
});
} ]), angular.module("openshiftConsole").run([ "extensionRegistry", "Constants", function(e, t) {
e.add("nav-dropdown-mobile", _.spread(function(e) {
var n = [], r = t.APP_LAUNCHER_NAVIGATION;
return _.each(r, function(e) {
var t = {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="' + _.escape(e.href) + '">', '<span class="' + _.escape(e.iconClass) + ' fa-fw" aria-hidden="true"></span> ', '<span class="list-group-item-value">' + _.escape(e.title) + "</span>", "</a>", "</li>" ].join("")
=======
if (e.push({
type: "dom",
node: '<li><a target="_blank" href="{{\'default\' | helpLink}}">Documentation</a></li>'
}), !_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE")) {
var t = _.get(window, "OPENSHIFT_CONSTANTS.GUIDED_TOURS.landing_page_tour");
t && t.enabled && t.steps && e.push({
type: "dom",
node: '<li><a href="catalog?startTour=true">Tour Catalog Home</a></li>'
});
}
return e.push({
type: "dom",
node: '<li><a href="command-line">Command Line Tools</a></li>'
}), e.push({
type: "dom",
node: '<li><a href="about">About</a></li>'
}), e;
});
} ]), angular.module("openshiftConsole").run([ "extensionRegistry", "$rootScope", "DataService", "AuthService", function(e, t, n, r) {
e.add("nav-user-dropdown", function() {
var e = [];
_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_COPY_LOGIN_COMMAND") || e.push({
type: "dom",
<<<<<<< HEAD
node: "<li><copy-login-to-clipboard clipboard-text=\"'oc login " + n.openshiftAPIBaseUrl() + " --token=" + a.UserStore().getToken() + "'\"></copy-login-to-clipboard></li>"
=======
node: '<li><copy-login-to-clipboard clipboard-text="oc login ' + _.escape(n.openshiftAPIBaseUrl()) + " --token=" + _.escape(r.UserStore().getToken()) + '"></copy-login-to-clipboard></li>'
<<<<<<< HEAD
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}), e.push({
type: "dom",
node: "<li><set-home-page></set-home-page></li>"
>>>>>>> Set Home Page Preference
});
var a = "Log Out";
return t.user.fullName && t.user.fullName !== t.user.metadata.name && (a += " (" + t.user.metadata.name + ")"), e.push({
type: "dom",
node: '<li><a href="logout">' + _.escape(a) + "</a></li>"
}), e;
});
} ]), angular.module("openshiftConsole").run([ "extensionRegistry", "Constants", function(e, t) {
e.add("nav-dropdown-mobile", _.spread(function(e) {
var n = [], r = t.APP_LAUNCHER_NAVIGATION;
return _.each(r, function(e) {
var t = {
type: "dom",
<<<<<<< HEAD
node: [ "<li>", '<a href="' + _.escape(e.href) + '">', '<span class="' + _.escape(e.iconClass) + ' fa-fw" aria-hidden="true"></span> ' + _.escape(e.title), "</a>", "</li>" ].join("")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
node: [ '<li class="list-group-item">', '<a href="' + _.escape(e.href) + '">', '<span class="' + _.escape(e.iconClass) + ' fa-fw" aria-hidden="true"></span> ', '<span class="list-group-item-value">' + _.escape(e.title) + "</span>", "</a>", "</li>" ].join("")
>>>>>>> Patternfly vertical navigation and project bar
};
n.push(t);
}), n = n.concat([ {
type: "dom",
<<<<<<< HEAD
<<<<<<< HEAD
node: [ '<li class="list-group-item">', '<a href="command-line">', '<span class="fa fa-terminal" aria-hidden="true"></span> <span class="list-group-item-value" translate>Command Line Tools</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="about">', '<span class="pficon pficon-info fa-fw" aria-hidden="true"></span> <span class="list-group-item-value" translate>About</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: _.template([ '<li class="list-group-item">', '<a href="logout">', '<span class="pficon pficon-user fa-fw" aria-hidden="true"></span>', '<span class="list-group-item-value"><translate>Log out</translate> <span class="username"><%= userName %></span></span>', "</a>", "</li>" ].join(""))({
=======
node: [ "<li>", "<a href=\"{{'default' | helpLink}}\">", '<span class="fa fa-book fa-fw" aria-hidden="true"></span> Documentation', "</a>", "</li>" ].join("")
=======
node: [ '<li class="list-group-item">', "<a href=\"{{'default' | helpLink}}\">", '<span class="fa fa-book fa-fw" aria-hidden="true"></span> <span class="list-group-item-value">Documentation</span>', "</a>", "</li>" ].join("")
>>>>>>> Patternfly vertical navigation and project bar
}, {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="command-line">', '<span class="fa fa-terminal" aria-hidden="true"></span> <span class="list-group-item-value">Command Line Tools</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="about">', '<span class="pficon pficon-info fa-fw" aria-hidden="true"></span> <span class="list-group-item-value">About</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
<<<<<<< HEAD
node: _.template([ "<li>", '<a href="logout">', '<span class="pficon pficon-user fa-fw" aria-hidden="true"></span>', 'Log out <span class="username"><%= userName %></span>', "</a>", "</li>" ].join(""))({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
node: _.template([ '<li class="list-group-item">', '<a href="logout">', '<span class="pficon pficon-user fa-fw" aria-hidden="true"></span>', '<span class="list-group-item-value">Log out <span class="username"><%= userName %></span></span>', "</a>", "</li>" ].join(""))({
>>>>>>> Patternfly vertical navigation and project bar
userName: e ? e.fullName || e.metadata.name : ""
})
} ]);
}));
} ]);