apiVersion: v1
kind: Template
metadata:
  name: polypite-build
  annotations:
    openshift.io/display-name: Polypite Build
    description: 'polypite build'
    tags: polypite,dataman
    iconClass: icon-nodejs
    openshift.io/provider-display-name: f0x11
    openshift.io/documentation-url: https://github.com/Dataman-Cloud/origin-web-console
    openshift.io/support-url: https://github.com/Dataman-Cloud/origin-web-console
labels:
  application: polypite

objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      name: ${APP_NAME}-pipeline
    name: ${APP_NAME}-pipeline
  spec:
    nodeSelector:
      "jenkins": "true"
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def USER_NAME = "${DEV_USER_NAME}"
                def PASSWD = "${DEV_PASSWD}"
                def LOGIN_URL = "${DEV_LOGIN_URL}"
                def NAME_SPACE = "${DEV_OPERATION_NAMESPACE}"
                def DEPLOY_TAG = "${DEV_DEPLOY_TAG}"

                def REPO_NAME = "${GIT_REPO_NAME}"
                def REPO_BRANCH = "${GIT_REPO_BRANCH}"
                def TAG = "state"

                node {

                    stage('Initialize') {
                      withCredentials([[$class: 'UsernamePasswordMultiBinding',
                              credentialsId: '${CERDENTIALS_ID}',
                              usernameVariable: 'GIT_USERNAME',
                              passwordVariable: 'GIT_PASSWORD']]) {

                      sh "[ -d ${REPO_NAME} ] || git clone https://\${GIT_USERNAME}:\${GIT_PASSWORD}@github.com/Dataman-Cloud/${REPO_NAME}.git"
                      sh "cd ${REPO_NAME} && git checkout ${REPO_BRANCH} && git pull --rebase"
                      sh "cd ${REPO_NAME} && git rev-parse --short HEAD > /tmp/${REPO_NAME}.commit.txt"

                      TAG = readFile("/tmp/${REPO_NAME}.commit.txt").trim()
                      }
                      echo "------------"
                      echo "commit: $TAG"
                      echo "------------"
                      sh "oc login -u ${CICD_OPENSHIFT_USER_NAME} -p ${CICD_OPENSHIFT_PASSWD} ${CICD_OPENSHIFT_LOGIN_URL} --insecure-skip-tls-verify"
                      sh "oc patch buildconfig ${APP_NAME} -p '{\"spec\": {\"output\": {\"to\": {\"name\": \"${OUT_PUT_IMAGE}:${TAG}\"}}}}' \
                      -n ${env.PROJECT_NAME} || echo 'ignore error' "
                    }
                    stage('${APP_NAME}') {
                      openshiftBuild(buildConfig: '${APP_NAME}', showBuildLogs: 'true')
                    }

                    stage('DEV_DEPLOY') {
                      sh "oc delete buildconfig imagestream-change-${IS_NAME} -n default || echo "
                      sh "oc new-app imagestream-change -p APP_NAME=imagestream-change-${IS_NAME} -p IMAGE_TAG=${TAG} -p OUT_PUT_IMAGE=${OUT_PUT_IMAGE} \
                      -p IS_NAME=${IS_NAME} -p USER_NAME=${USER_NAME} -p PASSWD=${PASSWD} -p LOGIN_URL=${LOGIN_URL} -p NAME_SPACE=${NAME_SPACE} -p DEPLOY_TAG=${DEPLOY_TAG} || echo"
                    }
                  }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
      type: JenkinsPipeline

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}
  spec:
    nodeSelector:
      "jenkins": "true"
    output:
      pushSecret:
        name: devharbor
      to:
        kind: DockerImage
        name: ${OUT_PUT_IMAGE}:${IMAGE_TAG}
    postCommit: {}
    resources: {}
    runPolicy: SerialLatestOnly
    source:
      dockerfile: |-
        FROM devharbor.dataman-inc.com:1443/library/nginx:1.13.6-alpine

        ENV VERSION ${VERSION}

        RUN apk add --update bash \
          && touch /root/.bashrc

        COPY tls /tls

        COPY dist /usr/share/nginx/html
        COPY dist.java/java /usr/share/nginx/html/console/java

        COPY extensions /usr/share/nginx/html/extensions

        COPY deploy /deploy

        RUN bash /deploy/init.sh

        CMD ["bash", "/deploy/start.sh"]
      git:
        ref: poc39
        uri: https://github.com/Dataman-Cloud/origin-web-console
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: DockerImage
          name: 'devharbor.dataman-inc.com:1443/library/nginx:1.13.6-alpine'
      type: Docker
    # 保留失败build的数量
    failedBuildsHistoryLimit: 2
    # 保留成功build的数量
    successfulBuildsHistoryLimit: 10
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APP_NAME}"
    labels:
      app: ${APP_NAME}
  spec:
    dockerImageRepository: ''
    tags:
    - name: ${IMAGE_TAG}

parameters:
- description: Application Name.
  displayName: Application Name
  name: APP_NAME
  required: true
  value: 'polypite'
- description: Image tag.
  displayName: Image Tag
  name: IMAGE_TAG
  required: true
  value: 'latest'
- description: Out put images registry.
  displayName: Out Put Images Registry
  name: OUT_PUT_IMAGE
  required: true
  value: 'devharbor.dataman-inc.com:1443/polypite-dev/origin-dm-web'
- description: ImageStream Name.
  displayName: ImageStream Name
  name: IS_NAME
  required: true
  value: 'origin-dm-web'
- description: dev  openshift login user Name.
  displayName: dev  openshift login user Name
  name: DEV_USER_NAME
  required: true
  value: 'cluster_admin'
- description: dev  openshift login  passwd.
  displayName: dev  openshift login passwd
  name: DEV_PASSWD
  required: true
  value: '123'
- description: dev  openshift login  url.
  displayName: dev  openshift login url
  name: DEV_LOGIN_URL
  required: true
  value: 'https://192.168.1.214:8443'
- description: dev  openshift operation namepace.
  displayName: dev  openshift operation namepace
  name: DEV_OPERATION_NAMESPACE
  required: true
  value: 'openshift'
- description: dev  openshift origin-dm-web image deploy tag.
  displayName: dev  openshift origin-dm-web image deploy tag
  name: DEV_DEPLOY_TAG
  required: true
  value: 'dev'
- description: git repo name.
  displayName: git repo name
  name: GIT_REPO_NAME
  required: true
  value: 'origin-web-console'
- description: git repo branch.
  displayName: git repo branch
  name: GIT_REPO_BRANCH
  required: true
  value: 'poc'
- description: jenkins github's  credentialsId.
  displayName: jenkins github's  credentialsId
  name: CERDENTIALS_ID
  required: true
  value: 'bc215cff-253b-4efb-beef-1bc1ab0810ca'
- description: cicd's openshift login user name.
  displayName: cicd's openshift login user name
  name: CICD_OPENSHIFT_USER_NAME
  required: true
  value: 'dmos_cluster_admin'
- description: cicd's openshift login passwd.
  displayName: cicd's openshift login passwd
  name: CICD_OPENSHIFT_PASSWD
  required: true
  value: '123'
- description: cicd's openshift login url.
  displayName: cicd's openshift login url
  name: CICD_OPENSHIFT_LOGIN_URL
  required: true
  value: 'https://192.168.1.205:8443'
